
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115955,d0
       8:	       subi.l #115955,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c4f3 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115955,d0
      40:	       subi.l #115955,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c4f3 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 80bc <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115955,d0
      7e:	       subi.l #115955,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c4f3 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13e62 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1cca4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13e7a <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c4f4 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13e62 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1cca4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c4f4 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13e62 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1cca4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17efc <PutChar+0x4>
     35c:	|  |              |   jsr 17456 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1ccac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1ccac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1ccac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1ccac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1ccac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1ccac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1ccac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17f26 <PutChar+0x2e>
     834:	|   jsr 17456 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1ccac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17f42 <PutChar+0x4a>
     8a6:	|   jsr 17456 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1ccac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1ccac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1ccac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1ccac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1ccac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1ccac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1ccac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1ccac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1cca4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1ccac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13e62 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1ccac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1cb9e <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cc64 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1cc60 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1cb9e <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 14ea <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1cb9e <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 99fa <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1cb9e <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1cba2 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1cba6 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2d86 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17f6a <PutChar+0x72>
     e1a:	          jsr 17456 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1cbba <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17f83 <PutChar+0x8b>
     e30:	      |   jsr 17456 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1cbb4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1ccb0 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1cbba <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 17fb1 <PutChar+0xb9>
     f1e:	|         jsr 17456 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1ccb0 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 17fd1 <PutChar+0xd9>
     f68:	|         jsr 17456 <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1cbd4 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1cca4 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1cbd4 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1cbd0 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1cca4 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1cbd0 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 17ff1 <PutChar+0xf9>
    10ba:	|         jsr 17456 <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1cca4 <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 18006 <PutChar+0x10e>
    110c:	   |   jsr 17456 <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1ccac <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1cbe8 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #115958,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #116022,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #116070,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #116110,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1cbe0 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    12ac:	                lea -40(sp),sp
    12b0:	                move.l a6,-(sp)
    12b2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    12b4:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    12bc:	                pea 18041 <PutChar+0x149>
    12c2:	                jsr 17456 <KPrintF>
    12c8:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    12ca:	                move.l 1cbd8 <CstBackDropBufferApplyStart>,d0
    12d0:	                move.l d0,1cbdc <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    12d6:	                move.l 1cbd8 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    12de:	                movea.l 44(sp),a0
    12e2:	                move.w (a0),d0
    12e4:	,-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    12e8:	|               move.l 1cbcc <CstDrawBuffer>,d0
    12ee:	+-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    12f2:	|               move.l 1ccb0 <GfxBase>,d0
    12f8:	|               movea.l d0,a6
    12fa:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    12fe:	|               movea.l 16(sp),a0
    1302:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1308:	|               movea.l 16(sp),a0
    130c:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1312:	|               movea.l 16(sp),a0
    1316:	|               move.w #2544,64(a0)
  
  while(*cursor)
    131c:	|     ,-------- bra.w 1484 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1320:	|  ,--|-------> move.l 44(sp),d0
    1324:	|  |  |         move.l d0,d1
    1326:	|  |  |         addq.l #2,d1
    1328:	|  |  |         move.l d1,44(sp)
    132c:	|  |  |         movea.l d0,a0
    132e:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1332:	|  |  |         move.l 44(sp),d0
    1336:	|  |  |         move.l d0,d1
    1338:	|  |  |         addq.l #2,d1
    133a:	|  |  |         move.l d1,44(sp)
    133e:	|  |  |         movea.l d0,a0
    1340:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1344:	|  |  |         move.l 44(sp),d0
    1348:	|  |  |         move.l d0,d1
    134a:	|  |  |         addq.l #2,d1
    134c:	|  |  |         move.l d1,44(sp)
    1350:	|  |  |         movea.l d0,a0
    1352:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    1356:	|  |  |         move.l 44(sp),d0
    135a:	|  |  |         move.l d0,d1
    135c:	|  |  |         addq.l #2,d1
    135e:	|  |  |         move.l d1,44(sp)
    1362:	|  |  |         movea.l d0,a0
    1364:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    1368:	|  |  |         move.l 1cbf8 <winWidth>,d0
    136e:	|  |  |         lsr.l #3,d0
    1370:	|  |  |         move.l d0,d1
    1372:	|  |  |         move.w 14(sp),d0
    1376:	|  |  |         add.w d0,d0
    1378:	|  |  |         sub.w d0,d1
    137a:	|  |  |         movea.l 16(sp),a0
    137e:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1382:	|  |  |         move.l 1cbf8 <winWidth>,d0
    1388:	|  |  |         lsr.l #3,d0
    138a:	|  |  |         move.l d0,d1
    138c:	|  |  |         move.w 14(sp),d0
    1390:	|  |  |         add.w d0,d0
    1392:	|  |  |         sub.w d0,d1
    1394:	|  |  |         movea.l 16(sp),a0
    1398:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    139c:	|  |  |         moveq #0,d0
    139e:	|  |  |         move.w 8(sp),d0
    13a2:	|  |  |         move.l 1cbf8 <winWidth>,d1
    13a8:	|  |  |         move.l d1,-(sp)
    13aa:	|  |  |         move.l d0,-(sp)
    13ac:	|  |  |         jsr 17de2 <__mulsi3>
    13b2:	|  |  |         addq.l #8,sp
    13b4:	|  |  |         move.l d0,d1
    13b6:	|  |  |         lsr.l #3,d1
    13b8:	|  |  |         move.l 1cbba <CstBackDrop>,d0
    13be:	|  |  |         add.l d0,d1
    13c0:	|  |  |         moveq #0,d0
    13c2:	|  |  |         move.w 10(sp),d0
    13c6:	|  |  |         move.l d1,d2
    13c8:	|  |  |         add.l d0,d2
    13ca:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    13ce:	|  |  |         moveq #0,d0
    13d0:	|  |  |         move.w 8(sp),d0
    13d4:	|  |  |         move.l 1cbf8 <winWidth>,d1
    13da:	|  |  |         move.l d1,-(sp)
    13dc:	|  |  |         move.l d0,-(sp)
    13de:	|  |  |         jsr 17de2 <__mulsi3>
    13e4:	|  |  |         addq.l #8,sp
    13e6:	|  |  |         move.l d0,d1
    13e8:	|  |  |         lsr.l #3,d1
    13ea:	|  |  |         move.l 1cbcc <CstDrawBuffer>,d0
    13f0:	|  |  |         add.l d0,d1
    13f2:	|  |  |         moveq #0,d0
    13f4:	|  |  |         move.w 10(sp),d0
    13f8:	|  |  |         move.l d1,d2
    13fa:	|  |  |         add.l d0,d2
    13fc:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1400:	|  |  |         clr.l 32(sp)
    1404:	|  |  |     ,-- bra.s 147c <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1406:	|  |  |  ,--|-> move.l 40(sp),d0
    140a:	|  |  |  |  |   movea.l 16(sp),a0
    140e:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1412:	|  |  |  |  |   move.l 36(sp),d0
    1416:	|  |  |  |  |   movea.l 16(sp),a0
    141a:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    141e:	|  |  |  |  |   move.w 12(sp),d0
    1422:	|  |  |  |  |   lsl.w #6,d0
    1424:	|  |  |  |  |   add.w 14(sp),d0
    1428:	|  |  |  |  |   movea.l 16(sp),a0
    142c:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1430:	|  |  |  |  |   move.l 1cbf8 <winWidth>,d0
    1436:	|  |  |  |  |   lsr.l #3,d0
    1438:	|  |  |  |  |   move.l 1cbfc <winHeight>,d1
    143e:	|  |  |  |  |   move.l d1,-(sp)
    1440:	|  |  |  |  |   move.l d0,-(sp)
    1442:	|  |  |  |  |   jsr 17de2 <__mulsi3>
    1448:	|  |  |  |  |   addq.l #8,sp
    144a:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    144e:	|  |  |  |  |   move.l 1cbf8 <winWidth>,d0
    1454:	|  |  |  |  |   lsr.l #3,d0
    1456:	|  |  |  |  |   move.l 1cbfc <winHeight>,d1
    145c:	|  |  |  |  |   move.l d1,-(sp)
    145e:	|  |  |  |  |   move.l d0,-(sp)
    1460:	|  |  |  |  |   jsr 17de2 <__mulsi3>
    1466:	|  |  |  |  |   addq.l #8,sp
    1468:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    146c:	|  |  |  |  |   move.l 1ccb0 <GfxBase>,d0
    1472:	|  |  |  |  |   movea.l d0,a6
    1474:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1478:	|  |  |  |  |   addq.l #1,32(sp)
    147c:	|  |  |  |  '-> moveq #4,d0
    147e:	|  |  |  |      cmp.l 32(sp),d0
    1482:	|  |  |  '----- bge.s 1406 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1484:	|  |  '-------> movea.l 44(sp),a0
    1488:	|  |            move.w (a0),d0
    148a:	|  '----------- bne.w 1320 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    148e:	|               move.l 1cbe4 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    1496:	|               move.l 1cbe0 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    149e:	|               clr.l 20(sp)
    14a2:	|           ,-- bra.s 14d4 <CstDisplayBackDrop+0x228>
    *tmp++;
    14a4:	|        ,--|-> move.l 24(sp),d0
    14a8:	|        |  |   move.l d0,d1
    14aa:	|        |  |   addq.l #2,d1
    14ac:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    14b0:	|        |  |   move.l 28(sp),d1
    14b4:	|        |  |   move.l d1,d2
    14b6:	|        |  |   addq.l #2,d2
    14b8:	|        |  |   move.l d2,28(sp)
    14bc:	|        |  |   move.l 24(sp),d0
    14c0:	|        |  |   move.l d0,d2
    14c2:	|        |  |   addq.l #2,d2
    14c4:	|        |  |   move.l d2,24(sp)
    14c8:	|        |  |   movea.l d1,a0
    14ca:	|        |  |   move.w (a0),d1
    14cc:	|        |  |   movea.l d0,a0
    14ce:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    14d0:	|        |  |   addq.l #1,20(sp)
    14d4:	|        |  '-> moveq #31,d0
    14d6:	|        |      cmp.l 20(sp),d0
    14da:	|        '----- bge.s 14a4 <CstDisplayBackDrop+0x1f8>
    14dc:	|           ,-- bra.s 14e0 <CstDisplayBackDrop+0x234>
    return;
    14de:	'-----------|-> nop
  }
}
    14e0:	            '-> move.l (sp)+,d2
    14e2:	                movea.l (sp)+,a6
    14e4:	                lea 40(sp),sp
    14e8:	                rts

000014ea <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    14ea:	lea -20(sp),sp
    14ee:	movea.l 24(sp),a0
    14f2:	move.l 28(sp),d1
    14f6:	move.l 32(sp),d0
    14fa:	movea.w a0,a0
    14fc:	move.w a0,4(sp)
    1500:	move.w d1,d1
    1502:	move.w d1,2(sp)
    1506:	move.w d0,d0
    1508:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    150a:	move.w 2(sp),d0
    150e:	movea.l 36(sp),a0
    1512:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1514:	move.w 4(sp),d0
    1518:	lsr.w #1,d0
    151a:	movea.l 36(sp),a0
    151e:	addq.l #1,a0
    1520:	move.l d0,d0
    1522:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1524:	move.w 2(sp),d1
    1528:	move.w (sp),d0
    152a:	movea.l 36(sp),a0
    152e:	addq.l #2,a0
    1530:	add.b d1,d0
    1532:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1534:	move.w 4(sp),d0
    1538:	andi.w #1,d0
    153c:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1540:	move.w 2(sp),d0
    1544:	add.w (sp),d0
    1546:	move.w d0,d0
    1548:	andi.l #65535,d0
    154e:	asr.l #7,d0
    1550:	move.l d0,d0
    1552:	move.w d0,d1
    1554:	andi.w #2,d1
    1558:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    155c:	moveq #0,d0
    155e:	move.w 2(sp),d0
    1562:	asr.l #6,d0
    1564:	move.l d0,d0
    1566:	move.w d0,d1
    1568:	andi.w #4,d1
    156c:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1570:	move.w 18(sp),d1
    1574:	move.w 16(sp),d0
    1578:	add.b d0,d1
    157a:	move.w 14(sp),d0
    157e:	movea.l 36(sp),a0
    1582:	addq.l #3,a0
    1584:	add.b d1,d0
    1586:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    1588:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    158e:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1594:	move.l 10(sp),d0
    1598:	clr.w d0
    159a:	swap d0
    159c:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    15a0:	move.l 1cbe8 <CstClCursor>,d0
    15a6:	movea.l d0,a0
    15a8:	addq.l #2,a0
    15aa:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    15ae:	move.l 1cbe8 <CstClCursor>,d0
    15b4:	movea.l d0,a0
    15b6:	addq.l #6,a0
    15b8:	move.w 8(sp),(a0)

}
    15bc:	nop
    15be:	lea 20(sp),sp
    15c2:	rts

000015c4 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    15c4:	    move.w 1cbc6 <CstApplyBackDropCounter>,d0
    15ca:	,-- beq.s 15e0 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    15cc:	|   jsr 12ac <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    15d2:	|   move.w 1cbc6 <CstApplyBackDropCounter>,d0
    15d8:	|   subq.w #1,d0
    15da:	|   move.w d0,1cbc6 <CstApplyBackDropCounter>
  }    
}
    15e0:	'-> nop
    15e2:	    rts

000015e4 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    15e4:	                                                             subq.l #8,sp
    15e6:	                                                             movem.l d2-d7/a2-a6,-(sp)
    15ea:	                                                             movea.l 56(sp),a3
    15ee:	                                                             movea.l 60(sp),a2
    15f2:	                                                             move.l 64(sp),d2
    15f6:	                                                             move.l 68(sp),d7
    15fa:	                                                             movea.w d2,a4
    15fc:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1600:	                                                             clr.l -(sp)
    1602:	                                                             pea 1 <_start+0x1>
    1606:	                                                             movea.w 6(a3),a0
    160a:	                                                             move.l a0,-(sp)
    160c:	                                                             movea.w 2(a3),a0
    1610:	                                                             move.l a0,-(sp)
    1612:	                                                             pea 1805d <PutChar+0x165>
    1618:	                                                             move.l 1cbec <CstZBufferResult>,-(sp)
    161e:	                                                             lea 1753e <debug_register_bitmap>,a5
    1624:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1626:	                                                             clr.l -(sp)
    1628:	                                                             pea 1 <_start+0x1>
    162c:	                                                             movea.w 6(a3),a0
    1630:	                                                             move.l a0,-(sp)
    1632:	                                                             move.w 2(a3),d0
    1636:	                                                             addi.w #16,d0
    163a:	                                                             movea.w d0,a0
    163c:	                                                             move.l a0,-(sp)
    163e:	                                                             pea 18068 <PutChar+0x170>
    1644:	                                                             move.l 1cbf0 <CstZBufferWork>,-(sp)
    164a:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    164c:	                                                             lea 48(sp),sp
    1650:	                                                             cmpa.w #0,a2
    1654:	,----------------------------------------------------------- beq.w 1af0 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1658:	|                                                            move.w d2,48(sp)
    165c:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    165e:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1662:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1664:	|                       ,----------------------------------> move.w a5,d3
    1666:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1668:	|                       |                                    andi.l #65535,d3
    166e:	|                       |                                    cmp.l 16(a2),d3
    1672:	|                       |  ,-------------------------------- bge.w 180c <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1676:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    167a:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    167e:	|                       |  |                                 move.w d6,d0
    1680:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1684:	|                       |  |                                 move.w 6(a2),d4
    1688:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    168a:	|                       |  |                                 cmp.w a4,d6
    168c:	|                    ,--|--|-------------------------------- bge.w 1984 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1690:	|                    |  |  |                                 cmp.w a4,d0
    1692:	|        ,-----------|--|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1696:	|        |           |  |  |                                 move.w 50(sp),d0
    169a:	|        |           |  |  |                                 cmp.w d0,d5
    169c:	|        |     ,-----|--|--|-------------------------------- blt.w 1ad0 <CstDrawZBuffer+0x4ec>
    16a0:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    16a2:	|        |     |     |  |  |                                 cmpa.l d3,a0
    16a4:	|        +-----|-----|--|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    16a8:	|        |     |     |  |  |                                 move.w 48(sp),d0
    16ac:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    16ae:	|        |     |     |  |  |                                 move.w d0,d6
    16b0:	|        |     |     |  |  |                                 andi.w #15,d6
    16b4:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    16b6:	|        |     |     |  |  |                                 tst.l d2
    16b8:	|        |  ,--|-----|--|--|-------------------------------- blt.w 182c <CstDrawZBuffer+0x248>
    16bc:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    16be:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    16c0:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
          custom->bltalwm = 0xffff;                      
    16c8:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
          custom->bltcon1 = 0;          
    16d0:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    16d8:	|        |  |  |  |  |  |  |                                 lea 1ccb0 <GfxBase>,a0
    16de:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    16e0:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    16e2:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    16e4:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    16e6:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    16ec:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    16f0:	|        |  |  |  |  |  |  |                                 clr.w d0
    16f2:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    16f4:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 186c <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    16f8:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    16fa:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    16fe:	|        |  |  |  |  |  |  |           |     |               move.l 1cbf0 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1708:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    170a:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    170c:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    170e:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1712:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1714:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    171a:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    171c:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    171e:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1b8a <CstDrawZBuffer+0x5a6>
    1722:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1724:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1726:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
            custom->bltdmod = 0;                                                            
    172c:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1734:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1736:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1738:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    173a:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    173c:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 18ac <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1740:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1744:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1746:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    1748:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    174a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17de2 <__mulsi3>
    1750:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1752:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1754:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 18c2 <CstDrawZBuffer+0x2de>
    1758:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    175a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    175c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
        UWORD bltsize =  height*64+bytewidth/2;          
    1762:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1764:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1766:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    1768:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
       
        WaitBlit();
    176e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1ccb0 <GfxBase>,a0
    1774:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1776:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    177a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
        custom->bltalwm = 0xffff;
    1782:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
        custom->bltamod = 2;
    178a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
        custom->bltbmod = 0;
    1792:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb37ed>
        custom->bltdmod = 0;
    179a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
        custom->bltcon0 = 0xd0c; //Copy A to D
    17a2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
        custom->bltcon1 = 0;        
    17aa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    17b2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1cbf0 <CstZBufferWork>,d0
    17b8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    17ba:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    17c0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    17c2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    17c6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    17c8:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 194c <CstDrawZBuffer+0x368>
    17cc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    17ce:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    17d0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    17d2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17de2 <__mulsi3>
    17d8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    17da:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    17dc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17de:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    17e0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17e2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    17e6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
        custom->bltdpt = (APTR) CstZBufferResult;
    17ec:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1cbec <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    17f6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    17f8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    17fa:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    17fc:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 193a <CstDrawZBuffer+0x356>
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
      zbufferset = 1;
    180a:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    180c:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1810:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1814:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1664 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    1818:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    181a:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1af0 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    181e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1cbec <CstZBufferResult>,d0

}
    1824:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1828:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    182a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    182c:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    182e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1830:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1832:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1834:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
          custom->bltalwm = 0xffff;                      
    183c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
          custom->bltcon1 = 0;          
    1844:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>
            WaitBlit();   
    184c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1ccb0 <GfxBase>,a0
    1852:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1854:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1856:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    1858:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    185a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1860:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1864:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1866:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    1868:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 16f8 <CstDrawZBuffer+0x114>
            WaitBlit();         
    186c:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1870:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1cbf0 <CstZBufferWork>,d0
    1876:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    1878:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
            custom->bltcon0 = 4096 + 0x9f0;              
    187e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1886:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    1888:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    188a:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ba2 <CstDrawZBuffer+0x5be>
    188e:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1890:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1892:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
            custom->bltdmod = 2;                                                            
    1898:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    18a0:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    18a6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1740 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    18ae:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    18b2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17de2 <__mulsi3>
    18ba:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    18bc:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    18be:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1758 <CstDrawZBuffer+0x174>
    18c2:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    18c4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    18c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    18c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
        UWORD bltsize =  height*64+bytewidth/2;          
    18ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    18d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
        WaitBlit();
    18da:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1ccb0 <GfxBase>,a0
    18e0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    18e2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    18e6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
        custom->bltalwm = 0xffff;
    18ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
        custom->bltamod = 2;
    18f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
        custom->bltbmod = 0;
    18fe:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb37ed>
        custom->bltdmod = 0;
    1906:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
        custom->bltcon0 = 0xd0c; //Copy A to D
    190e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
        custom->bltcon1 = 0;        
    1916:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    191e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1cbf0 <CstZBufferWork>,d0
    1924:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1926:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    192c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    192e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1932:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1934:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 17cc <CstDrawZBuffer+0x1e8>
    1938:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 194c <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    193a:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    193c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    193e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1940:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1942:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    1948:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 180a <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    194c:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    194e:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1950:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1952:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1954:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17de2 <__mulsi3>
    195a:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    195c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    195e:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1960:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1962:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1964:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    1968:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
        custom->bltdpt = (APTR) CstZBufferResult;
    196e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1cbec <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1978:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    197a:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    197c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    197e:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1800 <CstDrawZBuffer+0x21c>
    1982:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 193a <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1984:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    1988:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    198a:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1990:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1992:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1994:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1996:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    199a:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    199e:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    19a0:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 1aac <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19a4:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    19a8:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19ac:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19b0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    19b2:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    19b4:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19b6:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    19ba:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19be:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    19c0:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 1a4a <CstDrawZBuffer+0x466>
    19c4:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    19c6:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    19c8:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    19ce:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1a5c <CstDrawZBuffer+0x478>
            WaitBlit();  
    19d2:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1ccb0 <GfxBase>,a0
    19d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    19da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    19de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
            custom->bltalwm = 0xffff;          
    19e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
            custom->bltdpt = CstZBufferWork;        
    19ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1cbf0 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
            custom->bltcon1 = 0;               
    19f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a00:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    1a06:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    1a08:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1a74 <CstDrawZBuffer+0x490>
    1a0a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1a0c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1a0e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1a10:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1a14:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1a82 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1a16:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    1a1a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1a1c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1a1e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1a22:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a28:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
              custom->bltdmod = 0;                                                            
    1a2e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
              xdiffbyte += 2;                 
    1a36:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    1a38:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    1a3a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a3c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1a42:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1a44:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1a46:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    1a4a:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1a4c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1a4e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1a50:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1a52:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1a54:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1a56:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    1a58:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 19d2 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1a5c:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 18072 <PutChar+0x17a>
    1a62:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 17456 <KPrintF>
              return FALSE;
    1a68:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1a6a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1a6c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a70:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1a72:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a74:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1a76:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1a78:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    1a7a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a7c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1a80:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1a16 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1a82:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a8a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
              custom->bltdmod = 0;                                                            
    1a90:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
              xdiffbyte += 2;                 
    1a98:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    1a9a:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    1a9c:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a9e:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1aa4:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1aa6:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    1aa8:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1734 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1aac:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1aae:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1ab0:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1ab4:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1ab8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    1aba:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    1abc:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1abe:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1ac2:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1ac6:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    1ac8:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 19c4 <CstDrawZBuffer+0x3e0>
    1acc:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 1a4a <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1ad0:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1ad4:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1ad8:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1adc:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1ade:	|  |  |     |     |     |  |                                 move.w d0,d6
    1ae0:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1ae4:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1ae6:	|  |  |     |     |     |  |                                 tst.l d2
    1ae8:	|  |  |     |     '-----|--|-------------------------------- bge.w 16bc <CstDrawZBuffer+0xd8>
    1aec:	|  |  |     '-----------|--|-------------------------------- bra.w 182c <CstDrawZBuffer+0x248>
    WaitBlit();
    1af0:	'--|--|-----------------|--|-------------------------------> movea.l 1ccb0 <GfxBase>,a6
    1af6:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1afa:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
    custom->bltalwm = 0xffff;
    1b02:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
    custom->bltamod = 0;
    1b0a:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
    custom->bltbmod = 0;
    1b12:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb37ed>
    custom->bltcmod = 0;
    1b1a:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb37eb>
    custom->bltdmod = 0;
    1b22:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1b2a:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
    custom->bltcon1 = 0;        
    1b32:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b3a:	   |  |                 |  |                                 move.l (a3),d2
    1b3c:	   |  |                 |  |                                 move.l 4(a3),d3
    1b40:	   |  |                 |  |                                 move.l d2,d0
    1b42:	   |  |                 |  |                       ,-------- bmi.w 1bca <CstDrawZBuffer+0x5e6>
    1b46:	   |  |                 |  |                       |         asr.l #3,d0
    1b48:	   |  |                 |  |                       |         move.l d3,-(sp)
    1b4a:	   |  |                 |  |                       |         move.l d0,-(sp)
    1b4c:	   |  |                 |  |                       |         jsr 17de2 <__mulsi3>
    1b52:	   |  |                 |  |                       |         addq.l #8,sp
    1b54:	   |  |                 |  |                       |         move.l d0,d1
    1b56:	   |  |                 |  |                       |         add.l d0,d1
    1b58:	   |  |                 |  |                       |         add.l d1,d1
    1b5a:	   |  |                 |  |                       |         add.l d1,d0
    1b5c:	   |  |                 |  |                       |         add.l 24(a3),d0
    1b60:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b66:	   |  |                 |  |                       |         move.l 1cbec <CstZBufferResult>,d0
    1b6c:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b72:	   |  |                 |  |                       |         lsl.w #6,d3
    1b74:	   |  |                 |  |                       |         tst.l d2
    1b76:	   |  |                 |  |                    ,--|-------- blt.s 1bba <CstDrawZBuffer+0x5d6>
    1b78:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1b7a:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1b7c:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
}
    1b82:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b86:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1b88:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b8a:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1b8c:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1b8e:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1b90:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
            custom->bltdmod = 0;                                                            
    1b96:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
    1b9e:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ba2:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1ba4:	                           |                    |  |  |  |   asr.l #3,d1
    1ba6:	                           |                    |  |  |  |   sub.w d2,d1
    1ba8:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
            custom->bltdmod = 2;                                                            
    1bae:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
    1bb6:	                           '--------------------|--|--|--|-- bra.w 18a0 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bba:	                                                >--|--|--|-> moveq #15,d1
    1bbc:	                                                |  |  |  |   add.l d1,d2
    1bbe:	                                                |  |  |  |   asr.l #4,d2
    1bc0:	                                                |  |  |  |   add.w d2,d3
    1bc2:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
  return CstZBufferResult;
    1bc8:	                                                |  |  |  '-- bra.s 1b82 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bca:	                                                |  '--|----> addq.l #7,d0
    1bcc:	                                                |     |      asr.l #3,d0
    1bce:	                                                |     |      move.l d3,-(sp)
    1bd0:	                                                |     |      move.l d0,-(sp)
    1bd2:	                                                |     |      jsr 17de2 <__mulsi3>
    1bd8:	                                                |     |      addq.l #8,sp
    1bda:	                                                |     |      move.l d0,d1
    1bdc:	                                                |     |      add.l d0,d1
    1bde:	                                                |     |      add.l d1,d1
    1be0:	                                                |     |      add.l d1,d0
    1be2:	                                                |     |      add.l 24(a3),d0
    1be6:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltdpt = (APTR) CstZBufferResult;
    1bec:	                                                |     |      move.l 1cbec <CstZBufferResult>,d0
    1bf2:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bf8:	                                                |     |      lsl.w #6,d3
    1bfa:	                                                |     |      tst.l d2
    1bfc:	                                                |     '----- bge.w 1b78 <CstDrawZBuffer+0x594>
    1c00:	                                                '----------- bra.s 1bba <CstDrawZBuffer+0x5d6>

00001c02 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c02:	    lea -20(sp),sp
    1c06:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c08:	    move.l 1cbcc <CstDrawBuffer>,d0
    1c0e:	,-- beq.s 1c28 <CstFreeBuffer+0x26>
    1c10:	|   move.l 1cbcc <CstDrawBuffer>,20(sp)
    1c18:	|   move.l 1cca4 <SysBase>,d0
    1c1e:	|   movea.l d0,a6
    1c20:	|   movea.l 20(sp),a1
    1c24:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c28:	'-> move.l 1cbc8 <CstViewBuffer>,d0
    1c2e:	,-- beq.s 1c48 <CstFreeBuffer+0x46>
    1c30:	|   move.l 1cbc8 <CstViewBuffer>,16(sp)
    1c38:	|   move.l 1cca4 <SysBase>,d0
    1c3e:	|   movea.l d0,a6
    1c40:	|   movea.l 16(sp),a1
    1c44:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c48:	'-> move.l 1cbc2 <CstCopperList>,d0
    1c4e:	,-- beq.s 1c68 <CstFreeBuffer+0x66>
    1c50:	|   move.l 1cbc2 <CstCopperList>,12(sp)
    1c58:	|   move.l 1cca4 <SysBase>,d0
    1c5e:	|   movea.l d0,a6
    1c60:	|   movea.l 12(sp),a1
    1c64:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1c68:	'-> move.l 1cbba <CstBackDrop>,d0
    1c6e:	,-- beq.s 1c88 <CstFreeBuffer+0x86>
    1c70:	|   move.l 1cbba <CstBackDrop>,8(sp)
    1c78:	|   move.l 1cca4 <SysBase>,d0
    1c7e:	|   movea.l d0,a6
    1c80:	|   movea.l 8(sp),a1
    1c84:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c88:	'-> move.l 1cbbe <CstBackDropBackup>,d0
    1c8e:	,-- beq.s 1ca8 <CstFreeBuffer+0xa6>
    1c90:	|   move.l 1cbbe <CstBackDropBackup>,4(sp)
    1c98:	|   move.l 1cca4 <SysBase>,d0
    1c9e:	|   movea.l d0,a6
    1ca0:	|   movea.l 4(sp),a1
    1ca4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1ca8:	'-> clr.l 1cbcc <CstDrawBuffer>
  CstViewBuffer = NULL;
    1cae:	    clr.l 1cbc8 <CstViewBuffer>
  CstCopperList = NULL;
    1cb4:	    clr.l 1cbc2 <CstCopperList>
  CstBackDrop = NULL;
    1cba:	    clr.l 1cbba <CstBackDrop>

}
    1cc0:	    nop
    1cc2:	    movea.l (sp)+,a6
    1cc4:	    lea 20(sp),sp
    1cc8:	    rts

00001cca <CstFreeze>:



void CstFreeze( ) {
    1cca:	       lea -36(sp),sp
    1cce:	       move.l a6,-(sp)
    1cd0:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1cd2:	       pea 180c2 <PutChar+0x1ca>
    1cd8:	       jsr 17456 <KPrintF>
    1cde:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1ce0:	       move.l 1cbf8 <winWidth>,d0
    1ce6:	       lsr.l #3,d0
    1ce8:	       move.l d0,d1
    1cea:	       move.l 1cbfc <winHeight>,d0
    1cf0:	       move.l d0,d0
    1cf2:	       muls.w d0,d1
    1cf4:	       move.w d1,d0
    1cf6:	       add.w d0,d0
    1cf8:	       add.w d0,d0
    1cfa:	       move.w d0,d2
    1cfc:	       add.w d1,d2
    1cfe:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d02:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d0a:	       moveq #0,d0
    1d0c:	       move.w 26(sp),d0
    1d10:	       move.l d0,18(sp)
    1d14:	       clr.l 14(sp)
    1d18:	       move.l 1cca4 <SysBase>,d0
    1d1e:	       movea.l d0,a6
    1d20:	       move.l 18(sp),d0
    1d24:	       move.l 14(sp),d1
    1d28:	       jsr -684(a6)
    1d2c:	       move.l d0,10(sp)
    1d30:	       move.l 10(sp),d0
    1d34:	       move.l d0,1cbbe <CstBackDropBackup>
  if( !CstBackDropBackup)
    1d3a:	       move.l 1cbbe <CstBackDropBackup>,d0
    1d40:	   ,-- bne.s 1d50 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1d42:	   |   pea 180e9 <PutChar+0x1f1>
    1d48:	   |   jsr 17456 <KPrintF>
    1d4e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1d50:	   '-> move.l 1cbfc <winHeight>,d0
    1d56:	       move.l d0,d0
    1d58:	       movea.w d0,a1
    1d5a:	       move.l 1cbf8 <winWidth>,d0
    1d60:	       move.l d0,d0
    1d62:	       movea.w d0,a0
    1d64:	       move.l 1cbbe <CstBackDropBackup>,d0
    1d6a:	       clr.l -(sp)
    1d6c:	       pea 5 <_start+0x5>
    1d70:	       move.l a1,-(sp)
    1d72:	       move.l a0,-(sp)
    1d74:	       pea 18121 <PutChar+0x229>
    1d7a:	       move.l d0,-(sp)
    1d7c:	       jsr 1753e <debug_register_bitmap>
    1d82:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d86:	       move.l 1cbba <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d8e:	       move.l 1cbbe <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1d96:	       clr.l 32(sp)
    1d9a:	   ,-- bra.s 1dc0 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d9c:	,--|-> move.l 40(sp),d1
    1da0:	|  |   move.l d1,d0
    1da2:	|  |   addq.l #4,d0
    1da4:	|  |   move.l d0,40(sp)
    1da8:	|  |   move.l 36(sp),d0
    1dac:	|  |   move.l d0,d2
    1dae:	|  |   addq.l #4,d2
    1db0:	|  |   move.l d2,36(sp)
    1db4:	|  |   movea.l d1,a0
    1db6:	|  |   move.l (a0),d1
    1db8:	|  |   movea.l d0,a0
    1dba:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1dbc:	|  |   addq.l #1,32(sp)
    1dc0:	|  '-> move.w 26(sp),d0
    1dc4:	|      lsr.w #2,d0
    1dc6:	|      move.w d0,d0
    1dc8:	|      andi.l #65535,d0
    1dce:	|      cmp.l 32(sp),d0
    1dd2:	'----- bgt.s 1d9c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1dd4:	       move.l 1cbc8 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1ddc:	       move.l 1cbba <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1de4:	       clr.l 28(sp)
    1de8:	   ,-- bra.s 1e0e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1dea:	,--|-> move.l 40(sp),d1
    1dee:	|  |   move.l d1,d0
    1df0:	|  |   addq.l #4,d0
    1df2:	|  |   move.l d0,40(sp)
    1df6:	|  |   move.l 36(sp),d0
    1dfa:	|  |   move.l d0,d2
    1dfc:	|  |   addq.l #4,d2
    1dfe:	|  |   move.l d2,36(sp)
    1e02:	|  |   movea.l d1,a0
    1e04:	|  |   move.l (a0),d1
    1e06:	|  |   movea.l d0,a0
    1e08:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e0a:	|  |   addq.l #1,28(sp)
    1e0e:	|  '-> move.w 26(sp),d0
    1e12:	|      lsr.w #2,d0
    1e14:	|      move.w d0,d0
    1e16:	|      andi.l #65535,d0
    1e1c:	|      cmp.l 28(sp),d0
    1e20:	'----- bgt.s 1dea <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1e22:	       move.w #2,1cbc6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1e2a:	       move.l 1cbf8 <winWidth>,d0
    1e30:	       lsr.l #4,d0
    1e32:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    1e38:	       move.l a0,d1
    1e3a:	       addq.l #2,d1
    1e3c:	       move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    1e42:	       move.l d0,d0
    1e44:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1e46:	       move.l 1cbfc <winHeight>,d0
    1e4c:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    1e52:	       move.l a0,d1
    1e54:	       addq.l #2,d1
    1e56:	       move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    1e5c:	       move.l d0,d0
    1e5e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1e60:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    1e66:	       move.l a0,d0
    1e68:	       addq.l #2,d0
    1e6a:	       move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    1e70:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1e72:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    1e78:	       move.l a0,d0
    1e7a:	       addq.l #2,d0
    1e7c:	       move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    1e82:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    1e84:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    1e8a:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1e8c:	       pea 18130 <PutChar+0x238>
    1e92:	       jsr 17456 <KPrintF>
    1e98:	       addq.l #4,sp

}  
    1e9a:	       nop
    1e9c:	       move.l (sp)+,d2
    1e9e:	       movea.l (sp)+,a6
    1ea0:	       lea 36(sp),sp
    1ea4:	       rts

00001ea6 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1ea6:	             lea -172(sp),sp
    1eaa:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1eae:	             pea 18144 <PutChar+0x24c>
    1eb4:	             jsr 17456 <KPrintF>
    1eba:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1ebc:	             move.l 192(sp),-(sp)
    1ec0:	             jsr 6bc <get2bytes>
    1ec6:	             addq.l #4,sp
    1ec8:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1ecc:	             move.l 192(sp),-(sp)
    1ed0:	             jsr 6bc <get2bytes>
    1ed6:	             addq.l #4,sp
    1ed8:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1edc:	             move.w 162(sp),d0
    1ee0:	             lsr.w #3,d0
    1ee2:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1ee6:	             move.w 158(sp),d0
    1eea:	             lsr.w #1,d0
    1eec:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1ef0:	             move.l 1cbf8 <winWidth>,d0
    1ef6:	             lsr.l #3,d0
    1ef8:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1efc:	             move.w 158(sp),d0
    1f00:	             muls.w 160(sp),d0
    1f04:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f08:	             move.w 152(sp),d1
    1f0c:	             move.w d1,d0
    1f0e:	             add.w d0,d0
    1f10:	             add.w d0,d0
    1f12:	             move.w d0,d2
    1f14:	             add.w d1,d2
    1f16:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f1a:	             move.w 1cbb4 <CstPaletteLoaded>,d0
    1f20:	,----------- bne.w 1fba <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f24:	|            move.w #384,148(sp)

    if(CstPalette) {
    1f2a:	|            move.l 1cbe4 <CstPalette>,d0
    1f30:	|        ,-- beq.s 1f4a <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f32:	|        |   move.l 1cbe4 <CstPalette>,144(sp)
    1f3a:	|        |   move.l 1cca4 <SysBase>,d0
    1f40:	|        |   movea.l d0,a6
    1f42:	|        |   movea.l 144(sp),a1
    1f46:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1f4a:	|        '-> moveq #64,d0
    1f4c:	|            move.l d0,140(sp)
    1f50:	|            clr.l 136(sp)
    1f54:	|            move.l 1cca4 <SysBase>,d0
    1f5a:	|            movea.l d0,a6
    1f5c:	|            move.l 140(sp),d0
    1f60:	|            move.l 136(sp),d1
    1f64:	|            jsr -684(a6)
    1f68:	|            move.l d0,132(sp)
    1f6c:	|            move.l 132(sp),d0
    1f70:	|            move.l d0,1cbe4 <CstPalette>
    CstPaletteLoaded = 1;
    1f76:	|            move.w #1,1cbb4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1f7e:	|            move.l 1cbe4 <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f86:	|            clr.l 180(sp)
    1f8a:	|        ,-- bra.s 1fb0 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1f8c:	|     ,--|-> move.l 192(sp),-(sp)
    1f90:	|     |  |   jsr 6bc <get2bytes>
    1f96:	|     |  |   addq.l #4,sp
    1f98:	|     |  |   move.l d0,d1
    1f9a:	|     |  |   move.l 184(sp),d0
    1f9e:	|     |  |   move.l d0,d2
    1fa0:	|     |  |   addq.l #2,d2
    1fa2:	|     |  |   move.l d2,184(sp)
    1fa6:	|     |  |   move.l d1,d1
    1fa8:	|     |  |   movea.l d0,a0
    1faa:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fac:	|     |  |   addq.l #1,180(sp)
    1fb0:	|     |  '-> moveq #31,d0
    1fb2:	|     |      cmp.l 180(sp),d0
    1fb6:	|     '----- bge.s 1f8c <CstLoadBackdrop+0xe6>
    1fb8:	|  ,-------- bra.s 1fd8 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fba:	'--|-------> clr.l 176(sp)
    1fbe:	   |     ,-- bra.s 1fd0 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1fc0:	   |  ,--|-> move.l 192(sp),-(sp)
    1fc4:	   |  |  |   jsr 6bc <get2bytes>
    1fca:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fcc:	   |  |  |   addq.l #1,176(sp)
    1fd0:	   |  |  '-> moveq #31,d2
    1fd2:	   |  |      cmp.l 176(sp),d2
    1fd6:	   |  '----- bge.s 1fc0 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1fd8:	   '-------> moveq #0,d0
    1fda:	             move.w 150(sp),d0
    1fde:	             move.l d0,128(sp)
    1fe2:	             moveq #2,d0
    1fe4:	             move.l d0,124(sp)
    1fe8:	             move.l 1cca4 <SysBase>,d0
    1fee:	             movea.l d0,a6
    1ff0:	             move.l 128(sp),d0
    1ff4:	             move.l 124(sp),d1
    1ff8:	             jsr -684(a6)
    1ffc:	             move.l d0,120(sp)
    2000:	             move.l 120(sp),d0
    2004:	             move.l d0,116(sp)
  if( !tmpbuffer)
    2008:	         ,-- bne.s 2018 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    200a:	         |   pea 18173 <PutChar+0x27b>
    2010:	         |   jsr 17456 <KPrintF>
    2016:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2018:	         '-> moveq #0,d0
    201a:	             move.w 152(sp),d0
    201e:	             move.l d0,112(sp)
    2022:	             moveq #2,d2
    2024:	             move.l d2,108(sp)
    2028:	             move.l 1cca4 <SysBase>,d0
    202e:	             movea.l d0,a6
    2030:	             move.l 112(sp),d0
    2034:	             move.l 108(sp),d1
    2038:	             jsr -684(a6)
    203c:	             move.l d0,104(sp)
    2040:	             move.l 104(sp),d0
    2044:	             move.l d0,100(sp)
  if( !tmpmask)
    2048:	         ,-- bne.s 2058 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    204a:	         |   pea 181a9 <PutChar+0x2b1>
    2050:	         |   jsr 17456 <KPrintF>
    2056:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    2058:	         '-> move.w 160(sp),d0
    205c:	             movea.w d0,a1
    205e:	             move.w 162(sp),d0
    2062:	             movea.w d0,a0
    2064:	             clr.l -(sp)
    2066:	             pea 5 <_start+0x5>
    206a:	             move.l a1,-(sp)
    206c:	             move.l a0,-(sp)
    206e:	             pea 181dd <PutChar+0x2e5>
    2074:	             move.l 136(sp),-(sp)
    2078:	             jsr 1753e <debug_register_bitmap>
    207e:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2082:	             move.w 160(sp),d0
    2086:	             movea.w d0,a1
    2088:	             move.w 162(sp),d0
    208c:	             movea.w d0,a0
    208e:	             clr.l -(sp)
    2090:	             pea 1 <_start+0x1>
    2094:	             move.l a1,-(sp)
    2096:	             move.l a0,-(sp)
    2098:	             pea 181eb <PutChar+0x2f3>
    209e:	             move.l 136(sp),-(sp)
    20a2:	             jsr 1753e <debug_register_bitmap>
    20a8:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    20ac:	             move.l 192(sp),96(sp)
    20b2:	             move.l 116(sp),92(sp)
    20b8:	             moveq #2,d0
    20ba:	             move.l d0,88(sp)
    20be:	             move.w 150(sp),d0
    20c2:	             lsr.w #1,d0
    20c4:	             move.w d0,d0
    20c6:	             andi.l #65535,d0
    20cc:	             move.l d0,84(sp)
    20d0:	             move.l 1ccac <DOSBase>,d0
    20d6:	             movea.l d0,a6
    20d8:	             move.l 96(sp),d1
    20dc:	             move.l 92(sp),d2
    20e0:	             move.l 88(sp),d3
    20e4:	             move.l 84(sp),d4
    20e8:	             jsr -324(a6)
    20ec:	             move.l d0,80(sp)
    20f0:	             move.l 80(sp),d0
    20f4:	             move.w d0,78(sp)
  if(!count) {
    20f8:	         ,-- bne.s 210c <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    20fa:	         |   pea 181f7 <PutChar+0x2ff>
    2100:	         |   jsr 17456 <KPrintF>
    2106:	         |   addq.l #4,sp
    return;
    2108:	   ,-----|-- bra.w 241c <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    210c:	   |     '-> move.l 192(sp),74(sp)
    2112:	   |         move.l 100(sp),70(sp)
    2118:	   |         moveq #2,d2
    211a:	   |         move.l d2,66(sp)
    211e:	   |         move.w 152(sp),d0
    2122:	   |         lsr.w #1,d0
    2124:	   |         move.w d0,d0
    2126:	   |         andi.l #65535,d0
    212c:	   |         move.l d0,62(sp)
    2130:	   |         move.l 1ccac <DOSBase>,d0
    2136:	   |         movea.l d0,a6
    2138:	   |         move.l 74(sp),d1
    213c:	   |         move.l 70(sp),d2
    2140:	   |         move.l 66(sp),d3
    2144:	   |         move.l 62(sp),d4
    2148:	   |         jsr -324(a6)
    214c:	   |         move.l d0,58(sp)
    2150:	   |         move.l 58(sp),d0
    2154:	   |         move.w d0,78(sp)
   

  if(!count) {
    2158:	   |     ,-- bne.s 216c <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    215a:	   |     |   pea 181f7 <PutChar+0x2ff>
    2160:	   |     |   jsr 17456 <KPrintF>
    2166:	   |     |   addq.l #4,sp
    return;
    2168:	   +-----|-- bra.w 241c <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    216c:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2174:	   |         move.l 1cbba <CstBackDrop>,d0
    217a:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    217e:	   |         move.l 200(sp),d0
    2182:	   |         move.w d0,d1
    2184:	   |         muls.w 154(sp),d1
    2188:	   |         move.l 196(sp),d0
    218c:	   |     ,-- bpl.s 2190 <CstLoadBackdrop+0x2ea>
    218e:	   |     |   addq.l #7,d0
    2190:	   |     '-> asr.l #3,d0
    2192:	   |         move.l d0,d0
    2194:	   |         movea.w d1,a0
    2196:	   |         adda.w d0,a0
    2198:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    219c:	   |         moveq #0,d0
    219e:	   |         move.w 52(sp),d0
    21a2:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    21a6:	   |         pea 18212 <PutChar+0x31a>
    21ac:	   |         jsr 17456 <KPrintF>
    21b2:	   |         addq.l #4,sp


  WaitBlit();
    21b4:	   |         move.l 1ccb0 <GfxBase>,d0
    21ba:	   |         movea.l d0,a6
    21bc:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    21c0:	   |         movea.l 54(sp),a0
    21c4:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    21ca:	   |         movea.l 54(sp),a0
    21ce:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    21d4:	   |         movea.l 54(sp),a0
    21d8:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    21de:	   |         movea.l 54(sp),a0
    21e2:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    21e8:	   |         move.w 154(sp),d0
    21ec:	   |         sub.w 158(sp),d0
    21f0:	   |         movea.l 54(sp),a0
    21f4:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    21f8:	   |         move.w 154(sp),d0
    21fc:	   |         sub.w 158(sp),d0
    2200:	   |         movea.l 54(sp),a0
    2204:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2208:	   |         movea.l 54(sp),a0
    220c:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2212:	   |         movea.l 54(sp),a0
    2216:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    221c:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2222:	   |         clr.l 164(sp)
    2226:	   |     ,-- bra.s 2294 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    2228:	   |  ,--|-> move.l 1ccb0 <GfxBase>,d0
    222e:	   |  |  |   movea.l d0,a6
    2230:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    2234:	   |  |  |   movea.l 54(sp),a0
    2238:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    223e:	   |  |  |   move.l 168(sp),d0
    2242:	   |  |  |   movea.l 54(sp),a0
    2246:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    224a:	   |  |  |   move.l 172(sp),d0
    224e:	   |  |  |   movea.l 54(sp),a0
    2252:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2256:	   |  |  |   move.l 172(sp),d0
    225a:	   |  |  |   movea.l 54(sp),a0
    225e:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2262:	   |  |  |   move.w 160(sp),d0
    2266:	   |  |  |   lsl.w #6,d0
    2268:	   |  |  |   add.w 156(sp),d0
    226c:	   |  |  |   movea.l 54(sp),a0
    2270:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2274:	   |  |  |   moveq #0,d0
    2276:	   |  |  |   move.w 152(sp),d0
    227a:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    227e:	   |  |  |   move.w 1cbb8 <CstBackdropSizePlane>,d0
    2284:	   |  |  |   move.w d0,d0
    2286:	   |  |  |   andi.l #65535,d0
    228c:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2290:	   |  |  |   addq.l #1,164(sp)
    2294:	   |  |  '-> moveq #4,d0
    2296:	   |  |      cmp.l 164(sp),d0
    229a:	   |  '----- bge.s 2228 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    229c:	   |         move.l 1ccb0 <GfxBase>,d0
    22a2:	   |         movea.l d0,a6
    22a4:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22a8:	   |         pea 18231 <PutChar+0x339>
    22ae:	   |         jsr 17456 <KPrintF>
    22b4:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    22b6:	   |         move.l 116(sp),48(sp)
    22bc:	   |         move.l 1cca4 <SysBase>,d0
    22c2:	   |         movea.l d0,a6
    22c4:	   |         movea.l 48(sp),a1
    22c8:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    22cc:	   |         move.l 100(sp),44(sp)
    22d2:	   |         move.l 1cca4 <SysBase>,d0
    22d8:	   |         movea.l d0,a6
    22da:	   |         movea.l 44(sp),a1
    22de:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    22e2:	   |         move.l 1cbd4 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    22ea:	   |         moveq #20,d2
    22ec:	   |         move.l d2,36(sp)
    22f0:	   |         clr.l 32(sp)
    22f4:	   |         move.l 1cca4 <SysBase>,d0
    22fa:	   |         movea.l d0,a6
    22fc:	   |         move.l 36(sp),d0
    2300:	   |         move.l 32(sp),d1
    2304:	   |         jsr -684(a6)
    2308:	   |         move.l d0,28(sp)
    230c:	   |         move.l 28(sp),d0
    2310:	   |         move.l d0,1cbd4 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    2316:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    231c:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2322:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2328:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    232a:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2330:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    2334:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    233a:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    233e:	   |         move.l 1cbf8 <winWidth>,d0
    2344:	   |         lsr.l #4,d0
    2346:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    234c:	   |         move.l d0,d0
    234e:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    2352:	   |         move.l 1cbfc <winHeight>,d0
    2358:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    235e:	   |         move.l d0,d0
    2360:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2364:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    236a:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    236e:	   |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2374:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    2378:	   |         move.l 1cbd0 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2380:	   |         moveq #20,d0
    2382:	   |         move.l d0,24(sp)
    2386:	   |         clr.l 20(sp)
    238a:	   |         move.l 1cca4 <SysBase>,d0
    2390:	   |         movea.l d0,a6
    2392:	   |         move.l 24(sp),d0
    2396:	   |         move.l 20(sp),d1
    239a:	   |         jsr -684(a6)
    239e:	   |         move.l d0,16(sp)
    23a2:	   |         move.l 16(sp),d0
    23a6:	   |         move.l d0,1cbd0 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    23ac:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    23b2:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    23b8:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    23be:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    23c0:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    23c6:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    23ca:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    23d0:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    23d4:	   |         move.l 1cbf8 <winWidth>,d0
    23da:	   |         lsr.l #4,d0
    23dc:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    23e2:	   |         move.l d0,d0
    23e4:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    23e8:	   |         move.l 1cbfc <winHeight>,d0
    23ee:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    23f4:	   |         move.l d0,d0
    23f6:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    23fa:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    2400:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    2404:	   |         movea.l 1cbd0 <CstCleanupQueueViewBuffer>,a0
    240a:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    240e:	   |         pea 18251 <PutChar+0x359>
    2414:	   |         jsr 17456 <KPrintF>
    241a:	   |         addq.l #4,sp

}
    241c:	   '-------> movem.l (sp)+,d2-d4/a6
    2420:	             lea 172(sp),sp
    2424:	             rts

00002426 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2426:	                lea -72(sp),sp
    242a:	                move.l a6,-(sp)
    242c:	                move.l d2,-(sp)
    242e:	                move.l 88(sp),d1
    2432:	                move.l 92(sp),d0
    2436:	                move.w d1,d1
    2438:	                move.w d1,10(sp)
    243c:	                move.w d0,d0
    243e:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2442:	                move.l #14675968,28(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    244a:	                clr.l 24(sp)
  CstApplyBackDropCounter = 2;
    244e:	                move.w #2,1cbc6 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2456:	                move.l 1cbba <CstBackDrop>,24(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    245e:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2462:	                movea.l 84(sp),a0
    2466:	                move.l (a0),d0
    2468:	                movea.l d0,a0
    246a:	                cmpa.w #0,a0
    246e:	            ,-- bge.s 2474 <CstPasteChar+0x4e>
    2470:	            |   lea 15(a0),a0
    2474:	            '-> move.l a0,d0
    2476:	                asr.l #4,d0
    2478:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    247c:	            ,-- bne.s 2484 <CstPasteChar+0x5e>
    247e:	            |   moveq #1,d0
    2480:	            |   move.l d0,40(sp)

  if( y < 0) {
    2484:	            '-> tst.w 8(sp)
    2488:	         ,----- bge.s 24d2 <CstPasteChar+0xac>
    if(y + single->height < 0) {
    248a:	         |      movea.w 8(sp),a1
    248e:	         |      movea.l 84(sp),a0
    2492:	         |      move.l 4(a0),d0
    2496:	         |      add.l a1,d0
    2498:	         |  ,-- bpl.s 24ac <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    249a:	         |  |   pea 1826b <PutChar+0x373>
    24a0:	         |  |   jsr 17456 <KPrintF>
    24a6:	         |  |   addq.l #4,sp
      return;
    24a8:	,--------|--|-- bra.w 2b48 <CstPasteChar+0x722>
    }
    ystartdst = 0;
    24ac:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    24b0:	|        |      move.w 8(sp),d0
    24b4:	|        |      ext.l d0
    24b6:	|        |      move.l d0,d1
    24b8:	|        |      neg.l d1
    24ba:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    24be:	|        |      movea.l 84(sp),a0
    24c2:	|        |      move.l 4(a0),d0
    24c6:	|        |      movea.w 8(sp),a0
    24ca:	|        |      add.l a0,d0
    24cc:	|        |      move.l d0,44(sp)
    24d0:	|     ,--|----- bra.s 2544 <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    24d2:	|     |  '----> movea.w 8(sp),a1
    24d6:	|     |         movea.l 84(sp),a0
    24da:	|     |         move.l 4(a0),d0
    24de:	|     |         move.l a1,d1
    24e0:	|     |         add.l d0,d1
    24e2:	|     |         move.l 1cbfc <winHeight>,d0
    24e8:	|     |         cmp.l d1,d0
    24ea:	|     |  ,----- bge.s 252c <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    24ec:	|     |  |      movea.w 8(sp),a0
    24f0:	|     |  |      move.l 1cbfc <winHeight>,d0
    24f6:	|     |  |      cmp.l a0,d0
    24f8:	|     |  |  ,-- bge.s 250c <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24fa:	|     |  |  |   pea 1826b <PutChar+0x373>
    2500:	|     |  |  |   jsr 17456 <KPrintF>
    2506:	|     |  |  |   addq.l #4,sp
      return;
    2508:	+-----|--|--|-- bra.w 2b48 <CstPasteChar+0x722>
    }
    ystartdst = y;
    250c:	|     |  |  '-> movea.w 8(sp),a0
    2510:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2514:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    2518:	|     |  |      move.l 1cbfc <winHeight>,d0
    251e:	|     |  |      movea.w 8(sp),a0
    2522:	|     |  |      move.l d0,d1
    2524:	|     |  |      sub.l a0,d1
    2526:	|     |  |      move.l d1,44(sp)
    252a:	|     +--|----- bra.s 2544 <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    252c:	|     |  '----> movea.w 8(sp),a0
    2530:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    2534:	|     |         clr.l 48(sp)
    blitheight = single->height;
    2538:	|     |         movea.l 84(sp),a0
    253c:	|     |         move.l 4(a0),d0
    2540:	|     |         move.l d0,44(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    2544:	|     '-------> tst.w 10(sp)
    2548:	|        ,----- bge.w 26b0 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    254c:	|        |      movea.w 10(sp),a1
    2550:	|        |      movea.l 84(sp),a0
    2554:	|        |      move.l (a0),d0
    2556:	|        |      add.l a1,d0
    2558:	|        |  ,-- bpl.s 256c <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255a:	|        |  |   pea 1826b <PutChar+0x373>
    2560:	|        |  |   jsr 17456 <KPrintF>
    2566:	|        |  |   addq.l #4,sp
      return;
    2568:	+--------|--|-- bra.w 2b48 <CstPasteChar+0x722>

    }
    
    extrawords = 1;
    256c:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2572:	|        |      move.w 10(sp),d0
    2576:	|        |  ,-- bpl.s 257c <CstPasteChar+0x156>
    2578:	|        |  |   addi.w #15,d0
    257c:	|        |  '-> asr.w #4,d0
    257e:	|        |      neg.w d0
    2580:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2584:	|        |      move.w 10(sp),d0
    2588:	|        |      ext.l d0
    258a:	|        |      neg.l d0
    258c:	|        |      andi.l #-2147483633,d0
    2592:	|        |  ,-- bpl.s 259c <CstPasteChar+0x176>
    2594:	|        |  |   subq.l #1,d0
    2596:	|        |  |   moveq #-16,d1
    2598:	|        |  |   or.l d1,d0
    259a:	|        |  |   addq.l #1,d0
    259c:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25a0:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25a4:	|        |      movea.l 84(sp),a0
    25a8:	|        |      move.l 24(a0),d0
    25ac:	|        |      move.l d0,d1
    25ae:	|        |      moveq #0,d0
    25b0:	|        |      move.w 76(sp),d0
    25b4:	|        |      add.l d0,d0
    25b6:	|        |      move.l d1,d2
    25b8:	|        |      add.l d0,d2
    25ba:	|        |      movea.l 84(sp),a0
    25be:	|        |      move.l (a0),d0
    25c0:	|        |      move.l 48(sp),-(sp)
    25c4:	|        |      move.l d0,-(sp)
    25c6:	|        |      jsr 17de2 <__mulsi3>
    25cc:	|        |      addq.l #8,sp
    25ce:	|        |      lsr.l #3,d0
    25d0:	|        |      move.l d2,d1
    25d2:	|        |      add.l d0,d1
    25d4:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25d8:	|        |      move.l 1cbf8 <winWidth>,d0
    25de:	|        |      move.l 52(sp),-(sp)
    25e2:	|        |      move.l d0,-(sp)
    25e4:	|        |      jsr 17de2 <__mulsi3>
    25ea:	|        |      addq.l #8,sp
    25ec:	|        |      lsr.l #3,d0
    25ee:	|        |      move.l 24(sp),d1
    25f2:	|        |      add.l d1,d0
    25f4:	|        |      move.l d0,d2
    25f6:	|        |      subq.l #2,d2
    25f8:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25fc:	|        |      move.l 1cbf8 <winWidth>,d0
    2602:	|        |      move.l 52(sp),-(sp)
    2606:	|        |      move.l d0,-(sp)
    2608:	|        |      jsr 17de2 <__mulsi3>
    260e:	|        |      addq.l #8,sp
    2610:	|        |      lsr.l #3,d0
    2612:	|        |      move.l 24(sp),d1
    2616:	|        |      add.l d1,d0
    2618:	|        |      move.l d0,d1
    261a:	|        |      subq.l #2,d1
    261c:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2620:	|        |      moveq #0,d0
    2622:	|        |      move.w 74(sp),d0
    2626:	|        |      moveq #16,d1
    2628:	|        |      sub.l d0,d1
    262a:	|        |      move.l d1,d0
    262c:	|        |      moveq #12,d2
    262e:	|        |      lsl.l d2,d0
    2630:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2634:	|        |      movea.l 84(sp),a0
    2638:	|        |      move.l (a0),d0
    263a:	|        |      movea.l d0,a0
    263c:	|        |      cmpa.w #0,a0
    2640:	|        |  ,-- bge.s 2646 <CstPasteChar+0x220>
    2642:	|        |  |   lea 15(a0),a0
    2646:	|        |  '-> move.l a0,d0
    2648:	|        |      asr.l #4,d0
    264a:	|        |      move.l d0,d0
    264c:	|        |      add.w 76(sp),d0
    2650:	|        |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2656:	|        |      move.l a0,d1
    2658:	|        |      addq.l #2,d1
    265a:	|        |      move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    2660:	|        |      add.w 78(sp),d0
    2664:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2666:	|        |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    266c:	|        |      move.l a0,d0
    266e:	|        |      addq.l #2,d0
    2670:	|        |      move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    2676:	|        |      move.l 44(sp),d0
    267a:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    267c:	|        |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2682:	|        |      move.l a0,d0
    2684:	|        |      addq.l #2,d0
    2686:	|        |      move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    268c:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    268e:	|        |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2694:	|        |      move.l a0,d0
    2696:	|        |      addq.l #2,d0
    2698:	|        |      move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    269e:	|        |      move.l 52(sp),d0
    26a2:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    26a4:	|        |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    26aa:	|        |      clr.w (a0)
    26ac:	|     ,--|----- bra.w 29b0 <CstPasteChar+0x58a>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    26b0:	|     |  '----> movea.w 10(sp),a1
    26b4:	|     |         movea.l 84(sp),a0
    26b8:	|     |         move.l (a0),d0
    26ba:	|     |         move.l a1,d1
    26bc:	|     |         add.l d0,d1
    26be:	|     |         move.l 1cbf8 <winWidth>,d0
    26c4:	|     |         cmp.l d1,d0
    26c6:	|     |  ,----- bge.w 2858 <CstPasteChar+0x432>

    if(x - single->width > (int) winWidth)
    26ca:	|     |  |      movea.w 10(sp),a1
    26ce:	|     |  |      movea.l 84(sp),a0
    26d2:	|     |  |      move.l (a0),d0
    26d4:	|     |  |      move.l a1,d1
    26d6:	|     |  |      sub.l d0,d1
    26d8:	|     |  |      move.l 1cbf8 <winWidth>,d0
    26de:	|     |  |      cmp.l d1,d0
    26e0:	|     |  |  ,-- bge.s 26f4 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    26e2:	|     |  |  |   pea 1826b <PutChar+0x373>
    26e8:	|     |  |  |   jsr 17456 <KPrintF>
    26ee:	|     |  |  |   addq.l #4,sp
      return;
    26f0:	+-----|--|--|-- bra.w 2b48 <CstPasteChar+0x722>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    26f4:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    26f8:	|     |  |      movea.w 10(sp),a1
    26fc:	|     |  |      movea.l 84(sp),a0
    2700:	|     |  |      move.l (a0),d0
    2702:	|     |  |      add.l a1,d0
    2704:	|     |  |      move.l d0,d1
    2706:	|     |  |      move.l 1cbf8 <winWidth>,d0
    270c:	|     |  |      sub.l d0,d1
    270e:	|     |  |      move.l d1,d0
    2710:	|     |  |      lsr.l #4,d0
    2712:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2716:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    271a:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    2720:	|     |  |      movea.l 84(sp),a0
    2724:	|     |  |      move.l 24(a0),d0
    2728:	|     |  |      move.l d0,d2
    272a:	|     |  |      movea.l 84(sp),a0
    272e:	|     |  |      move.l (a0),d0
    2730:	|     |  |      move.l 48(sp),-(sp)
    2734:	|     |  |      move.l d0,-(sp)
    2736:	|     |  |      jsr 17de2 <__mulsi3>
    273c:	|     |  |      addq.l #8,sp
    273e:	|     |  |      lsr.l #3,d0
    2740:	|     |  |      move.l d2,d1
    2742:	|     |  |      add.l d0,d1
    2744:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2748:	|     |  |      move.l 1cbf8 <winWidth>,d0
    274e:	|     |  |      move.l 52(sp),-(sp)
    2752:	|     |  |      move.l d0,-(sp)
    2754:	|     |  |      jsr 17de2 <__mulsi3>
    275a:	|     |  |      addq.l #8,sp
    275c:	|     |  |      lsr.l #3,d0
    275e:	|     |  |      move.l 24(sp),d1
    2762:	|     |  |      add.l d0,d1
    2764:	|     |  |      move.w 10(sp),d0
    2768:	|     |  |  ,-- bpl.s 276e <CstPasteChar+0x348>
    276a:	|     |  |  |   addi.w #15,d0
    276e:	|     |  |  '-> asr.w #4,d0
    2770:	|     |  |      movea.w d0,a0
    2772:	|     |  |      move.l a0,d0
    2774:	|     |  |      add.l a0,d0
    2776:	|     |  |      move.l d1,d2
    2778:	|     |  |      add.l d0,d2
    277a:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    277e:	|     |  |      move.l 1cbf8 <winWidth>,d0
    2784:	|     |  |      move.l 52(sp),-(sp)
    2788:	|     |  |      move.l d0,-(sp)
    278a:	|     |  |      jsr 17de2 <__mulsi3>
    2790:	|     |  |      addq.l #8,sp
    2792:	|     |  |      lsr.l #3,d0
    2794:	|     |  |      move.l 24(sp),d1
    2798:	|     |  |      add.l d0,d1
    279a:	|     |  |      move.w 10(sp),d0
    279e:	|     |  |  ,-- bpl.s 27a4 <CstPasteChar+0x37e>
    27a0:	|     |  |  |   addi.w #15,d0
    27a4:	|     |  |  '-> asr.w #4,d0
    27a6:	|     |  |      movea.w d0,a0
    27a8:	|     |  |      move.l a0,d0
    27aa:	|     |  |      add.l a0,d0
    27ac:	|     |  |      move.l d1,d2
    27ae:	|     |  |      add.l d0,d2
    27b0:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    27b4:	|     |  |      movea.l 84(sp),a0
    27b8:	|     |  |      move.l (a0),d0
    27ba:	|     |  |      andi.l #-2147483633,d0
    27c0:	|     |  |  ,-- bpl.s 27ca <CstPasteChar+0x3a4>
    27c2:	|     |  |  |   subq.l #1,d0
    27c4:	|     |  |  |   moveq #-16,d1
    27c6:	|     |  |  |   or.l d1,d0
    27c8:	|     |  |  |   addq.l #1,d0
    27ca:	|     |  |  '-> moveq #12,d2
    27cc:	|     |  |      lsl.l d2,d0
    27ce:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    27d2:	|     |  |      movea.l 84(sp),a0
    27d6:	|     |  |      move.l (a0),d0
    27d8:	|     |  |      movea.l d0,a0
    27da:	|     |  |      cmpa.w #0,a0
    27de:	|     |  |  ,-- bge.s 27e4 <CstPasteChar+0x3be>
    27e0:	|     |  |  |   lea 15(a0),a0
    27e4:	|     |  |  '-> move.l a0,d0
    27e6:	|     |  |      asr.l #4,d0
    27e8:	|     |  |      move.l d0,d0
    27ea:	|     |  |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    27f0:	|     |  |      move.l a0,d1
    27f2:	|     |  |      addq.l #2,d1
    27f4:	|     |  |      move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    27fa:	|     |  |      add.w 76(sp),d0
    27fe:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2800:	|     |  |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2806:	|     |  |      move.l a0,d0
    2808:	|     |  |      addq.l #2,d0
    280a:	|     |  |      move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    2810:	|     |  |      move.l 44(sp),d0
    2814:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2816:	|     |  |      move.w 10(sp),d0
    281a:	|     |  |  ,-- bpl.s 2820 <CstPasteChar+0x3fa>
    281c:	|     |  |  |   addi.w #15,d0
    2820:	|     |  |  '-> asr.w #4,d0
    2822:	|     |  |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2828:	|     |  |      move.l a0,d1
    282a:	|     |  |      addq.l #2,d1
    282c:	|     |  |      move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    2832:	|     |  |      add.w d0,d0
    2834:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2836:	|     |  |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    283c:	|     |  |      move.l a0,d0
    283e:	|     |  |      addq.l #2,d0
    2840:	|     |  |      move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    2846:	|     |  |      move.l 52(sp),d0
    284a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    284c:	|     |  |      movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2852:	|     |  |      clr.w (a0)
    2854:	|     +--|----- bra.w 29b0 <CstPasteChar+0x58a>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2858:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    285e:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2862:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2866:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    286a:	|     |         movea.l 84(sp),a0
    286e:	|     |         move.l 24(a0),d0
    2872:	|     |         move.l d0,d2
    2874:	|     |         movea.l 84(sp),a0
    2878:	|     |         move.l (a0),d0
    287a:	|     |         movea.l d0,a0
    287c:	|     |         cmpa.w #0,a0
    2880:	|     |     ,-- bge.s 2886 <CstPasteChar+0x460>
    2882:	|     |     |   lea 15(a0),a0
    2886:	|     |     '-> move.l a0,d0
    2888:	|     |         asr.l #4,d0
    288a:	|     |         move.l 48(sp),-(sp)
    288e:	|     |         move.l d0,-(sp)
    2890:	|     |         jsr 17de2 <__mulsi3>
    2896:	|     |         addq.l #8,sp
    2898:	|     |         add.l d0,d0
    289a:	|     |         move.l d2,d1
    289c:	|     |         add.l d0,d1
    289e:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28a2:	|     |         move.l 1cbf8 <winWidth>,d0
    28a8:	|     |         move.l 52(sp),-(sp)
    28ac:	|     |         move.l d0,-(sp)
    28ae:	|     |         jsr 17de2 <__mulsi3>
    28b4:	|     |         addq.l #8,sp
    28b6:	|     |         lsr.l #3,d0
    28b8:	|     |         move.l 24(sp),d1
    28bc:	|     |         add.l d0,d1
    28be:	|     |         move.w 10(sp),d0
    28c2:	|     |     ,-- bpl.s 28c8 <CstPasteChar+0x4a2>
    28c4:	|     |     |   addi.w #15,d0
    28c8:	|     |     '-> asr.w #4,d0
    28ca:	|     |         movea.w d0,a0
    28cc:	|     |         move.l a0,d0
    28ce:	|     |         add.l a0,d0
    28d0:	|     |         move.l d1,d2
    28d2:	|     |         add.l d0,d2
    28d4:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28d8:	|     |         move.l 1cbf8 <winWidth>,d0
    28de:	|     |         move.l 52(sp),-(sp)
    28e2:	|     |         move.l d0,-(sp)
    28e4:	|     |         jsr 17de2 <__mulsi3>
    28ea:	|     |         addq.l #8,sp
    28ec:	|     |         lsr.l #3,d0
    28ee:	|     |         move.l 24(sp),d1
    28f2:	|     |         add.l d0,d1
    28f4:	|     |         move.w 10(sp),d0
    28f8:	|     |     ,-- bpl.s 28fe <CstPasteChar+0x4d8>
    28fa:	|     |     |   addi.w #15,d0
    28fe:	|     |     '-> asr.w #4,d0
    2900:	|     |         movea.w d0,a0
    2902:	|     |         move.l a0,d0
    2904:	|     |         add.l a0,d0
    2906:	|     |         move.l d1,d2
    2908:	|     |         add.l d0,d2
    290a:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    290e:	|     |         move.w 10(sp),d0
    2912:	|     |         andi.w #-32753,d0
    2916:	|     |     ,-- bpl.s 2920 <CstPasteChar+0x4fa>
    2918:	|     |     |   subq.w #1,d0
    291a:	|     |     |   ori.w #-16,d0
    291e:	|     |     |   addq.w #1,d0
    2920:	|     |     '-> ext.l d0
    2922:	|     |         moveq #12,d1
    2924:	|     |         lsl.l d1,d0
    2926:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    292a:	|     |         movea.l 84(sp),a0
    292e:	|     |         move.l (a0),d0
    2930:	|     |         movea.l d0,a0
    2932:	|     |         cmpa.w #0,a0
    2936:	|     |     ,-- bge.s 293c <CstPasteChar+0x516>
    2938:	|     |     |   lea 15(a0),a0
    293c:	|     |     '-> move.l a0,d0
    293e:	|     |         asr.l #4,d0
    2940:	|     |         move.l d0,d0
    2942:	|     |         add.w 76(sp),d0
    2946:	|     |         movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    294c:	|     |         move.l a0,d1
    294e:	|     |         addq.l #2,d1
    2950:	|     |         move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    2956:	|     |         add.w 78(sp),d0
    295a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    295c:	|     |         movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2962:	|     |         move.l a0,d0
    2964:	|     |         addq.l #2,d0
    2966:	|     |         move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    296c:	|     |         move.l 44(sp),d0
    2970:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2972:	|     |         move.w 10(sp),d0
    2976:	|     |     ,-- bpl.s 297c <CstPasteChar+0x556>
    2978:	|     |     |   addi.w #15,d0
    297c:	|     |     '-> asr.w #4,d0
    297e:	|     |         movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2984:	|     |         move.l a0,d1
    2986:	|     |         addq.l #2,d1
    2988:	|     |         move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    298e:	|     |         add.w d0,d0
    2990:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2992:	|     |         movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2998:	|     |         move.l a0,d0
    299a:	|     |         addq.l #2,d0
    299c:	|     |         move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    29a2:	|     |         move.l 52(sp),d0
    29a6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    29a8:	|     |         movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    29ae:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    29b0:	|     '-------> moveq #0,d0
    29b2:	|               move.w 74(sp),d0
    29b6:	|               moveq #0,d1
    29b8:	|               not.w d1
    29ba:	|               asr.l d0,d1
    29bc:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    29c0:	|               moveq #0,d1
    29c2:	|               move.w 76(sp),d1
    29c6:	|               moveq #0,d0
    29c8:	|               move.w 78(sp),d0
    29cc:	|               sub.l d0,d1
    29ce:	|               move.l d1,d0
    29d0:	|               add.w d0,d0
    29d2:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29d6:	|               move.l 1cbf8 <winWidth>,d0
    29dc:	|               lsr.l #3,d0
    29de:	|               move.l d0,d2
    29e0:	|               move.w 76(sp),d1
    29e4:	|               sub.w 78(sp),d1
    29e8:	|               move.l 40(sp),d0
    29ec:	|               sub.w d0,d1
    29ee:	|               move.w d1,d0
    29f0:	|               add.w d1,d0
    29f2:	|               add.w d2,d0
    29f4:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29f8:	|               move.l 1cbf8 <winWidth>,d0
    29fe:	|               lsr.l #3,d0
    2a00:	|               move.l d0,d2
    2a02:	|               move.w 76(sp),d1
    2a06:	|               sub.w 78(sp),d1
    2a0a:	|               move.l 40(sp),d0
    2a0e:	|               sub.w d0,d1
    2a10:	|               move.w d1,d0
    2a12:	|               add.w d1,d0
    2a14:	|               add.w d2,d0
    2a16:	|               move.w d0,16(sp)

  WaitBlit();
    2a1a:	|               move.l 1ccb0 <GfxBase>,d0
    2a20:	|               movea.l d0,a6
    2a22:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2a26:	|               movea.l 28(sp),a0
    2a2a:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2a30:	|               movea.l 28(sp),a0
    2a34:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2a3a:	|               move.w 20(sp),d0
    2a3e:	|               movea.l 28(sp),a0
    2a42:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2a46:	|               move.w 18(sp),d0
    2a4a:	|               movea.l 28(sp),a0
    2a4e:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a52:	|               move.w 16(sp),d0
    2a56:	|               movea.l 28(sp),a0
    2a5a:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a5e:	|               move.l 1cbf8 <winWidth>,d0
    2a64:	|               lsr.l #3,d0
    2a66:	|               move.l d0,d1
    2a68:	|               move.l 1cbfc <winHeight>,d0
    2a6e:	|               move.l d0,d0
    2a70:	|               move.w d1,d2
    2a72:	|               muls.w d0,d2
    2a74:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2a78:	|               move.w 1cbb2 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2a80:	|               move.w 38(sp),d0
    2a84:	|               andi.w #1,d0
    2a88:	|               move.w d0,12(sp)
  if(tmp2) {
    2a8c:	|        ,----- beq.s 2a96 <CstPasteChar+0x670>
    minterm = 0xbfa;
    2a8e:	|        |      move.w #3066,36(sp)
    2a94:	|        |  ,-- bra.s 2a9c <CstPasteChar+0x676>
  } else {
    minterm = 0xb0a;
    2a96:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a9c:	|           '-> clr.l 32(sp)
    2aa0:	|     ,-------- bra.w 2b3e <CstPasteChar+0x718>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2aa4:	|  ,--|-------> move.l 56(sp),d0
    2aa8:	|  |  |         add.w 36(sp),d0
    2aac:	|  |  |         movea.l 28(sp),a0
    2ab0:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2ab4:	|  |  |         move.l 68(sp),d0
    2ab8:	|  |  |         movea.l 28(sp),a0
    2abc:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2ac0:	|  |  |         move.l 64(sp),d0
    2ac4:	|  |  |         movea.l 28(sp),a0
    2ac8:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2acc:	|  |  |         move.l 60(sp),d0
    2ad0:	|  |  |         movea.l 28(sp),a0
    2ad4:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2ad8:	|  |  |         move.l 44(sp),d0
    2adc:	|  |  |         lsl.w #6,d0
    2ade:	|  |  |         move.l 40(sp),d1
    2ae2:	|  |  |         add.w d1,d0
    2ae4:	|  |  |         sub.w 76(sp),d0
    2ae8:	|  |  |         add.w 78(sp),d0
    2aec:	|  |  |         movea.l 28(sp),a0
    2af0:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2af4:	|  |  |         moveq #0,d0
    2af6:	|  |  |         move.w 14(sp),d0
    2afa:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2afe:	|  |  |         moveq #0,d0
    2b00:	|  |  |         move.w 14(sp),d0
    2b04:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2b08:	|  |  |         move.w 38(sp),d0
    2b0c:	|  |  |         lsr.w #1,d0
    2b0e:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2b12:	|  |  |         move.w 38(sp),d1
    2b16:	|  |  |         andi.w #1,d1
    2b1a:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2b1e:	|  |  |  ,----- beq.s 2b28 <CstPasteChar+0x702>
      minterm = 0xbfa;
    2b20:	|  |  |  |      move.w #3066,36(sp)
    2b26:	|  |  |  |  ,-- bra.s 2b2e <CstPasteChar+0x708>
    } else {
      minterm = 0xb0a;
    2b28:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();     
    2b2e:	|  |  |     '-> move.l 1ccb0 <GfxBase>,d0
    2b34:	|  |  |         movea.l d0,a6
    2b36:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b3a:	|  |  |         addq.l #1,32(sp)
    2b3e:	|  |  '-------> moveq #4,d2
    2b40:	|  |            cmp.l 32(sp),d2
    2b44:	|  '----------- bge.w 2aa4 <CstPasteChar+0x67e>
  }   
  //custom->color[0] = 0x000;
}
    2b48:	'-------------> move.l (sp)+,d2
    2b4a:	                movea.l (sp)+,a6
    2b4c:	                lea 72(sp),sp
    2b50:	                rts

00002b52 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b52:	                   lea -24(sp),sp
    2b56:	                   move.l a6,-(sp)
    2b58:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b5a:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b62:	                   move.l 1cbd4 <CstCleanupQueueDrawBuffer>,d0
    2b68:	,----------------- beq.w 2d7a <CstRestoreScreen+0x228>
    2b6c:	|                  move.l 1cbcc <CstDrawBuffer>,d0
    2b72:	+----------------- beq.w 2d7a <CstRestoreScreen+0x228>
    return;
  } 

  WaitBlit();
    2b76:	|                  move.l 1ccb0 <GfxBase>,d0
    2b7c:	|                  movea.l d0,a6
    2b7e:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2b82:	|                  movea.l 16(sp),a0
    2b86:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2b8c:	|                  movea.l 16(sp),a0
    2b90:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2b96:	|                  movea.l 16(sp),a0
    2b9a:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2ba0:	|     ,----------- bra.w 2d6e <CstRestoreScreen+0x21c>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2ba4:	|  ,--|----------> movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2baa:	|  |  |            move.l 4(a0),d0
    2bae:	|  |  |     ,----- beq.s 2bc4 <CstRestoreScreen+0x72>
    2bb0:	|  |  |     |      movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2bb6:	|  |  |     |      movea.l 4(a0),a0
    2bba:	|  |  |     |      move.l 16(a0),d0
    2bbe:	|  |  |     |      moveq #2,d1
    2bc0:	|  |  |     |      cmp.l d0,d1
    2bc2:	|  |  |     |  ,-- bge.s 2bd2 <CstRestoreScreen+0x80>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2bc4:	|  |  |     '--|-> movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2bca:	|  |  |        |   move.l 4(a0),d0
    2bce:	|  |  |  ,-----|-- bne.w 2d3c <CstRestoreScreen+0x1ea>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2bd2:	|  |  |  |     '-> move.l 1cbf8 <winWidth>,d0
    2bd8:	|  |  |  |         lsr.l #3,d0
    2bda:	|  |  |  |         move.l d0,d1
    2bdc:	|  |  |  |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2be2:	|  |  |  |         move.w 8(a0),d0
    2be6:	|  |  |  |         add.w d0,d0
    2be8:	|  |  |  |         sub.w d0,d1
    2bea:	|  |  |  |         movea.l 16(sp),a0
    2bee:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2bf2:	|  |  |  |         move.l 1cbf8 <winWidth>,d0
    2bf8:	|  |  |  |         lsr.l #3,d0
    2bfa:	|  |  |  |         move.l d0,d1
    2bfc:	|  |  |  |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2c02:	|  |  |  |         move.w 8(a0),d0
    2c06:	|  |  |  |         add.w d0,d0
    2c08:	|  |  |  |         sub.w d0,d1
    2c0a:	|  |  |  |         movea.l 16(sp),a0
    2c0e:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c12:	|  |  |  |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2c18:	|  |  |  |         move.w 14(a0),d0
    2c1c:	|  |  |  |         move.w d0,d0
    2c1e:	|  |  |  |         andi.l #65535,d0
    2c24:	|  |  |  |         move.l 1cbf8 <winWidth>,d1
    2c2a:	|  |  |  |         move.l d1,-(sp)
    2c2c:	|  |  |  |         move.l d0,-(sp)
    2c2e:	|  |  |  |         jsr 17de2 <__mulsi3>
    2c34:	|  |  |  |         addq.l #8,sp
    2c36:	|  |  |  |         move.l d0,d1
    2c38:	|  |  |  |         lsr.l #3,d1
    2c3a:	|  |  |  |         move.l 1cbba <CstBackDrop>,d0
    2c40:	|  |  |  |         add.l d0,d1
    2c42:	|  |  |  |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2c48:	|  |  |  |         move.w 12(a0),d0
    2c4c:	|  |  |  |         move.w d0,d0
    2c4e:	|  |  |  |         andi.l #65535,d0
    2c54:	|  |  |  |         move.l d1,d2
    2c56:	|  |  |  |         add.l d0,d2
    2c58:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c5c:	|  |  |  |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2c62:	|  |  |  |         move.w 14(a0),d0
    2c66:	|  |  |  |         move.w d0,d0
    2c68:	|  |  |  |         andi.l #65535,d0
    2c6e:	|  |  |  |         move.l 1cbf8 <winWidth>,d1
    2c74:	|  |  |  |         move.l d1,-(sp)
    2c76:	|  |  |  |         move.l d0,-(sp)
    2c78:	|  |  |  |         jsr 17de2 <__mulsi3>
    2c7e:	|  |  |  |         addq.l #8,sp
    2c80:	|  |  |  |         move.l d0,d1
    2c82:	|  |  |  |         lsr.l #3,d1
    2c84:	|  |  |  |         move.l 1cbcc <CstDrawBuffer>,d0
    2c8a:	|  |  |  |         add.l d0,d1
    2c8c:	|  |  |  |         movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2c92:	|  |  |  |         move.w 12(a0),d0
    2c96:	|  |  |  |         move.w d0,d0
    2c98:	|  |  |  |         andi.l #65535,d0
    2c9e:	|  |  |  |         move.l d1,d2
    2ca0:	|  |  |  |         add.l d0,d2
    2ca2:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ca6:	|  |  |  |         clr.l 20(sp)
    2caa:	|  |  |  |     ,-- bra.w 2d32 <CstRestoreScreen+0x1e0>
      {
        custom->bltapt = (APTR) bltapt;
    2cae:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2cb2:	|  |  |  |  |  |   movea.l 16(sp),a0
    2cb6:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2cba:	|  |  |  |  |  |   move.l 24(sp),d0
    2cbe:	|  |  |  |  |  |   movea.l 16(sp),a0
    2cc2:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2cc6:	|  |  |  |  |  |   movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2ccc:	|  |  |  |  |  |   move.w 10(a0),d0
    2cd0:	|  |  |  |  |  |   lsl.w #6,d0
    2cd2:	|  |  |  |  |  |   movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2cd8:	|  |  |  |  |  |   move.w 8(a0),d1
    2cdc:	|  |  |  |  |  |   add.w d1,d0
    2cde:	|  |  |  |  |  |   movea.l 16(sp),a0
    2ce2:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2ce6:	|  |  |  |  |  |   move.l 1cbf8 <winWidth>,d0
    2cec:	|  |  |  |  |  |   lsr.l #3,d0
    2cee:	|  |  |  |  |  |   move.l 1cbfc <winHeight>,d1
    2cf4:	|  |  |  |  |  |   move.l d1,-(sp)
    2cf6:	|  |  |  |  |  |   move.l d0,-(sp)
    2cf8:	|  |  |  |  |  |   jsr 17de2 <__mulsi3>
    2cfe:	|  |  |  |  |  |   addq.l #8,sp
    2d00:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2d04:	|  |  |  |  |  |   move.l 1cbf8 <winWidth>,d0
    2d0a:	|  |  |  |  |  |   lsr.l #3,d0
    2d0c:	|  |  |  |  |  |   move.l 1cbfc <winHeight>,d1
    2d12:	|  |  |  |  |  |   move.l d1,-(sp)
    2d14:	|  |  |  |  |  |   move.l d0,-(sp)
    2d16:	|  |  |  |  |  |   jsr 17de2 <__mulsi3>
    2d1c:	|  |  |  |  |  |   addq.l #8,sp
    2d1e:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2d22:	|  |  |  |  |  |   move.l 1ccb0 <GfxBase>,d0
    2d28:	|  |  |  |  |  |   movea.l d0,a6
    2d2a:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d2e:	|  |  |  |  |  |   addq.l #1,20(sp)
    2d32:	|  |  |  |  |  '-> moveq #4,d0
    2d34:	|  |  |  |  |      cmp.l 20(sp),d0
    2d38:	|  |  |  |  '----- bge.w 2cae <CstRestoreScreen+0x15c>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2d3c:	|  |  |  '-------> move.l 1cbd4 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2d44:	|  |  |            movea.l 1cbd4 <CstCleanupQueueDrawBuffer>,a0
    2d4a:	|  |  |            move.l 16(a0),d0
    2d4e:	|  |  |            move.l d0,1cbd4 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2d54:	|  |  |            move.l 12(sp),8(sp)
    2d5a:	|  |  |            move.l 1cca4 <SysBase>,d0
    2d60:	|  |  |            movea.l d0,a6
    2d62:	|  |  |            movea.l 8(sp),a1
    2d66:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d6a:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d6e:	|  |  '----------> move.l 1cbd4 <CstCleanupQueueDrawBuffer>,d0
    2d74:	|  '-------------- bne.w 2ba4 <CstRestoreScreen+0x52>
    2d78:	|              ,-- bra.s 2d7c <CstRestoreScreen+0x22a>
    return;
    2d7a:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2d7c:	               '-> move.l (sp)+,d2
    2d7e:	                   movea.l (sp)+,a6
    2d80:	                   lea 24(sp),sp
    2d84:	                   rts

00002d86 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2d86:	                                                                               lea -44(sp),sp
    2d8a:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2d8e:	                                                                               movea.l 92(sp),a2
    2d92:	                                                                               move.l 96(sp),80(sp)
    2d98:	                                                                               move.l 100(sp),d4
    2d9c:	                                                                               move.l 104(sp),56(sp)
    2da2:	                                                                               move.l 108(sp),d2
    2da6:	                                                                               move.w d4,d3
    2da8:	                                                                               move.w 58(sp),d6
    2dac:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2dae:	                                                                               movea.w d6,a5
    2db0:	                                                                               movea.w d4,a4
    2db2:	                                                                               move.l a5,-(sp)
    2db4:	                                                                               move.l a4,-(sp)
    2db6:	                                                                               move.l 1cd00 <zBuffer>,-(sp)
    2dbc:	                                                                               move.l a2,-(sp)
    2dbe:	                                                                               jsr 15e4 <CstDrawZBuffer>
    2dc4:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2dc6:	                                                                               lea 16(sp),sp
    2dca:	                                                                               moveq #1,d0
    2dcc:	                                                                               cmp.w d2,d0
    2dce:	                                                ,----------------------------- beq.w 31e0 <CstScaleSprite+0x45a>
    2dd2:	                                                |                              moveq #2,d1
    2dd4:	                                                |                              cmp.w d2,d1
    2dd6:	                                                |                       ,----- beq.w 309a <CstScaleSprite+0x314>
    2dda:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2ddc:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2de0:	                                                |  |                    |      move.l a5,d0
    2de2:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2de4:	                                                |  |                    |      tst.w d6
    2de6:	                                                |  |           ,--------|----- blt.w 30b6 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2dea:	                                                |  |           |  ,-----|----> movea.l 1cbfc <winHeight>,a0
    2df0:	                                                |  |           |  |     |      cmp.l a0,d0
    2df2:	                                                |  |  ,--------|--|-----|----- ble.w 31ea <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2df6:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2df8:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 32ac <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2dfc:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2e00:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2e02:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2e06:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2e08:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2e0a:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2e0c:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2e0e:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2e10:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 30d6 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2e14:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1cbf8 <winWidth>,d3
    2e1a:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2e1c:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 31f8 <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2e20:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2e22:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2e24:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 32ac <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2e28:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2e2a:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2e2c:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2e2e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2e30:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17de2 <__mulsi3>,a4
    2e36:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2e38:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2e3a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2e3e:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2e40:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2e42:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2e44:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2e46:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2e4a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2e4e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2e52:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2e54:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2e56:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2e58:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2e5a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2e5c:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2e5e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2e60:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2e62:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2e64:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2e66:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2e6a:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2e6c:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2e6e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2e74:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2e76:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2e78:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2e7a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2e80:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2e82:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2e86:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2e8c:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2e8e:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2e90:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2e92:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2e94:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2e98:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2e9c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2e9e:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2ea0:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2ea2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2ea6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2eaa:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2eac:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2eae:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 35c0 <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2eb2:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    2eb8:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2eba:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3668 <CstScaleSprite+0x8e2>
    2ebe:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2ec0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2ec2:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2ec4:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2eca:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2ed0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 8(a0),a1
    2ed4:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1cbdc <CstBackDropBufferApplyCursor>
    2eda:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    2ee0:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2ee4:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2eea:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2eec:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2eee:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2ef0:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2ef2:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2ef4:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 34b6 <CstScaleSprite+0x730>
    2ef8:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2efa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2efc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #117936,d3
    2f02:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2f04:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f06:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2f0a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
  custom->bltalwm = bltalwm;
    2f12:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
  custom->bltamod = bltamod;
    2f18:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
  custom->bltbmod = bltbmod;
    2f1e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb37ed>
  custom->bltcmod = bltcmod;
    2f24:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb37eb>
  custom->bltdmod = bltdmod;
    2f2a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
  custom->bltcon0 = bltcon0;
    2f30:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
  custom->bltcon1 = bltcon1;  
    2f38:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2f40:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f42:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2f46:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2f48:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2f4a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2f4c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2f50:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2f56:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2f58:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1cbf8 <winWidth>,d4
    2f5e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2f60:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1cbfe <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2f66:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2f6c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    2f72:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    2f7a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    2f80:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2f86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2f88:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 33b4 <CstScaleSprite+0x62e>
    2f8c:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f8e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2f90:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2f92:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2f94:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    2f9a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2f9e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2fa0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2fa2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2fa4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2fa6:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2faa:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2fac:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    2fb2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    2fb8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    2fbe:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2fc4:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2fc6:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 33f6 <CstScaleSprite+0x670>
    2fca:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2fcc:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2fce:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2fd0:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2fd2:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    2fd8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2fda:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2fdc:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2fde:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2fe0:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2fe4:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2fe6:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    2fec:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    2ff2:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    2ff8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ffe:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    3000:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 3434 <CstScaleSprite+0x6ae>
    3004:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3006:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3008:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    300a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    300c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    3012:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    3014:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    3016:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3018:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    301a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    301e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3020:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    3026:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    302c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    3032:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3038:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    303a:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3472 <CstScaleSprite+0x6ec>
    303e:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3040:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3042:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    3044:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3046:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    304c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    3050:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3052:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3054:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3056:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    305a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    305c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    3062:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    3068:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    306e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3074:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    3076:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3390 <CstScaleSprite+0x60a>
    307a:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    WaitBlit();
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    308c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1cbc6 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1cbba <CstBackDrop>,a3
    if(y + single->height < 0) {
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2dea <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    30b8:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 32ac <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    30ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2e14 <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    30d8:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 32ac <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    30de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    30e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    30ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    30f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cbf8 <winWidth>,d3
    30fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17de2 <__mulsi3>,a4
    3104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    3106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    3112:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    3116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    311c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    3120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 32c2 <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    312a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    312e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    3130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    3132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    3134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    3136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    3138:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    313a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    313e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    3146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    314a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    3154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    3156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    315a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    3160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    3162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    3166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    316c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    316e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    317c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    3180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    3184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    3186:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    318a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    318e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    3192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    3196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    3198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    319a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 3328 <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    319e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    31a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    31a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    31a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    31ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    31ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    31b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    31b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    31ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 8(a0),a1
    31be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1cbdc <CstBackDropBufferApplyCursor>
    31c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    31ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    31ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    31d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    31d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    31d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    31d8:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2ef8 <CstScaleSprite+0x172>
    31dc:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 34b6 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    31e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1cbcc <CstDrawBuffer>,a3
      break;
    31e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2ddc <CstScaleSprite+0x56>
    ystartdst = y;
    31ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    31ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    31f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    31f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2e08 <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    31f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17de2 <__mulsi3>,a4
    31fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    3202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    3206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    320a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    320c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    320e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    3212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    321a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    321c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    321e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    3224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    3226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    322a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    322c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    3230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    323c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    3240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    3242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    3246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    324a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    324c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    324e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    3252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    3256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    3258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    325a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 3550 <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    325e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    3264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    3266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 362e <CstScaleSprite+0x8a8>
    326a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    326c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    326e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    327a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 8(a0),a1
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1cbdc <CstBackDropBufferApplyCursor>
    3284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    3288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    329a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    329e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    32a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    32a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    32a4:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2ef8 <CstScaleSprite+0x172>
    32a8:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 34b6 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    32ac:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98923,92(sp)
}
    32b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    32b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    32bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 17456 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    32c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    32c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    32ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    32ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    32d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    32d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    32da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    32dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    32de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    32e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    32e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    32e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    32ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    32ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    32ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    32f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    32f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    32f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    32f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    32fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3302:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3306:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3308:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    330a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    330e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    3310:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3314:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    3318:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    331a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    331c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    3320:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    3322:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    3324:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 319e <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3328:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1cbd4 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    332e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1cca4 <SysBase>,a6
    3334:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    3336:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    3338:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    333c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    333e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1cbd4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3344:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3348:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    334a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3350:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3356:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    3358:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    335a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 369e <CstScaleSprite+0x918>
    335e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    3360:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    3364:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    3366:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    336a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3370:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3374:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3378:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1cbf8 <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    337e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3380:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    3382:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    3384:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    3386:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    3388:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2ef8 <CstScaleSprite+0x172>
    338c:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 34b6 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3390:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3392:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3394:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3396:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    3398:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    339a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    339c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    WaitBlit();
    33a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    33a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    33a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    33aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    33ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    33b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33b4:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    33b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    33b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    33ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    33bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    33be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    33c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    33c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    33ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    33cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    33ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    33d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    33d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    33de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    33e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    33ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    33f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2fca <CstScaleSprite+0x244>
    33f6:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    33f8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    33fa:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    33fc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    33fe:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    3400:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    3402:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    3408:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    340a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    340c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    340e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    3410:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3414:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3416:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    341c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    3422:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    3428:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    342e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    3430:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 3004 <CstScaleSprite+0x27e>
    3434:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    3436:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    3438:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    343a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    343c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    343e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    3440:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    3446:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3448:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    344a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    344c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    344e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3452:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3454:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    345a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    3460:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    3466:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    346c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    346e:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 303e <CstScaleSprite+0x2b8>
    3472:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    3474:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    3476:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    3478:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    347a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    347c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    347e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb37e3>
    bltbpt += bltbptplus;
    3484:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    3488:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    348a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    348c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    348e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3492:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3494:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    349a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    34a0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    34a6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    34ac:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    34ae:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 307a <CstScaleSprite+0x2f4>
    34b2:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 3390 <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34b6:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    34b8:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    34ba:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    34bc:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #117936,d3
    34c2:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    34c4:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    34c6:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    34ca:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb37cf>
  custom->bltalwm = bltalwm;
    34d2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb37d1>
  custom->bltamod = bltamod;
    34d8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb37ef>
  custom->bltbmod = bltbmod;
    34de:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb37ed>
  custom->bltcmod = bltcmod;
    34e4:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb37eb>
  custom->bltdmod = bltdmod;
    34ea:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb37f1>
  custom->bltcon0 = bltcon0;
    34f0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb37cb>
  custom->bltcon1 = bltcon1;  
    34f8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb37cd>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3500:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3502:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    3506:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3508:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    350a:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    350c:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    3510:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    3516:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    3518:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1cbf8 <winWidth>,d4
    351e:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    3520:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1cbfe <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3526:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    352c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb37db>
    custom->bltbpt = (APTR) bltbpt;
    3532:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb37d7>
    custom->bltcpt = (APTR) bltcpt;
    353a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb37d3>
    custom->bltdpt = (APTR) bltdpt;
    3540:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb37df>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3546:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    3548:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2f8c <CstScaleSprite+0x206>
    354c:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 33b4 <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3550:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1cbd4 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3556:	|  |  |  |  |                                         |  |  |  |               movea.l 1cca4 <SysBase>,a6
    355c:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    355e:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    3560:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    3564:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    3566:	|  |  |  |  |                                         |  |  |  |               move.l d0,1cbd4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    356c:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3570:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3572:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3578:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    357e:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    3580:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    3582:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 36c8 <CstScaleSprite+0x942>
    3586:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    3588:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    358a:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    358e:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3594:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3598:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    359c:	|  |  |  |  |                                         |  |  |  |     |         move.l 1cbf8 <winWidth>,d3
    35a2:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    35a8:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    35ac:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    35ae:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35b0:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    35b2:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    35b4:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    35b6:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    35b8:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2ef8 <CstScaleSprite+0x172>
    35bc:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 34b6 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    35c0:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1cbd4 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35c6:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1cca4 <SysBase>,a6
    35cc:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    35ce:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    35d0:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    35d4:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    35d6:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1cbd4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    35dc:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    35e0:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    35e2:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    35e8:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    35ee:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    35f0:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    35f2:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 36fa <CstScaleSprite+0x974>
    35f6:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    35f8:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    35fa:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    35fe:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3604:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    360a:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3610:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1cbf8 <winWidth>,d3
    3616:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    361c:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    361e:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    3620:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    3622:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    3624:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    3626:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2ef8 <CstScaleSprite+0x172>
    362a:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 34b6 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    362e:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    3630:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    3632:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    3634:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    3636:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3638:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    363e:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3642:	|  |                                                  |     |  |  |  |  |  |   lea 8(a0),a1
    3646:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1cbdc <CstBackDropBufferApplyCursor>
    364c:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    3650:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    3654:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    365a:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    365e:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3660:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3662:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    3664:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 329c <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    3668:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    366a:	|                                                           |  |  |  |  |  |   add.l d1,d0
    366c:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    366e:	|                                                           |  |  |  |  |  |   add.w d0,d2
    3670:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3672:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3678:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    367e:	|                                                           |  |  |  |  |  |   lea 8(a0),a1
    3682:	|                                                           |  |  |  |  |  |   move.l a1,1cbdc <CstBackDropBufferApplyCursor>
    3688:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    368e:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    3692:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3698:	|                                                           |  |  |  |  |  |   clr.w d2
    369a:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2eec <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    369e:	                                                            |  '--|--|--|--|-> moveq #15,d0
    36a0:	                                                            |     |  |  |  |   add.l d1,d0
    36a2:	                                                            |     |  |  |  |   asr.l #4,d0
    36a4:	                                                            |     |  |  |  |   add.w 78(sp),d0
    36a8:	                                                            |     |  |  |  |   add.w d2,d0
    36aa:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    36ae:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    36b4:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36b8:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36bc:	                                                            |     |  |  |  |   move.l 1cbf8 <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    36c2:	                                                            |     |  |  |  |   suba.l a4,a4
    36c4:	                                                            '-----|--|--|--|-- bra.w 3380 <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    36c8:	                                                                  |  '--|--|-> moveq #15,d0
    36ca:	                                                                  |     |  |   add.l d1,d0
    36cc:	                                                                  |     |  |   asr.l #4,d0
    36ce:	                                                                  |     |  |   addq.w #1,d0
    36d0:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    36d4:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36da:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36de:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36e2:	                                                                  |     |  |   move.l 1cbf8 <winWidth>,d3
    36e8:	                                                                  |     |  |   move.w #-1,76(sp)
    36ee:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    36f2:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    36f4:	                                                                  |     |  |   clr.w d6
    36f6:	                                                                  '-----|--|-- bra.w 35b0 <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    36fa:	                                                                        |  '-> moveq #15,d0
    36fc:	                                                                        |      add.l d1,d0
    36fe:	                                                                        |      asr.l #4,d0
    3700:	                                                                        |      add.w d0,d2
    3702:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3706:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    370c:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3712:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3718:	                                                                        |      move.l 1cbf8 <winWidth>,d3
    371e:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3724:	                                                                        |      clr.w d2
    3726:	                                                                        '----- bra.w 361e <CstScaleSprite+0x898>

0000372a <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    372a:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    372c:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3732:	move.l 8(sp),d0
    3736:	movea.l (sp),a0
    3738:	move.l d0,128(a0)
}
    373c:	nop
    373e:	addq.l #4,sp
    3740:	rts

00003742 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3742:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3746:	move.l 1cbc8 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    374e:	move.l 1cbcc <CstDrawBuffer>,d0
    3754:	move.l d0,1cbc8 <CstViewBuffer>
  CstDrawBuffer = tmp;
    375a:	move.l 16(sp),1cbcc <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3762:	move.l 1cbd0 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    376a:	move.l 1cbd4 <CstCleanupQueueDrawBuffer>,d0
    3770:	move.l d0,1cbd0 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3776:	move.l 12(sp),1cbd4 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    377e:	move.l 1cbc2 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3786:	move.l 1cbc8 <CstViewBuffer>,d0
    378c:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3790:	move.l 4(sp),d0
    3794:	clr.w d0
    3796:	swap d0
    3798:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    379c:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    37a0:	movea.w #118,a0
    37a4:	adda.l 8(sp),a0
    37a8:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    37aa:	movea.w #114,a0
    37ae:	adda.l 8(sp),a0
    37b2:	move.w 2(sp),(a0)

  ptr +=  40*256;
    37b6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    37be:	move.l 4(sp),d0
    37c2:	clr.w d0
    37c4:	swap d0
    37c6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    37ca:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    37ce:	movea.w #126,a0
    37d2:	adda.l 8(sp),a0
    37d6:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    37d8:	movea.w #122,a0
    37dc:	adda.l 8(sp),a0
    37e0:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    37e4:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    37ec:	move.l 4(sp),d0
    37f0:	clr.w d0
    37f2:	swap d0
    37f4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    37f8:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    37fc:	movea.l 8(sp),a0
    3800:	lea 134(a0),a0
    3804:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3806:	movea.l 8(sp),a0
    380a:	lea 130(a0),a0
    380e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3812:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    381a:	move.l 4(sp),d0
    381e:	clr.w d0
    3820:	swap d0
    3822:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3826:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    382a:	movea.l 8(sp),a0
    382e:	lea 142(a0),a0
    3832:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3834:	movea.l 8(sp),a0
    3838:	lea 138(a0),a0
    383c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3840:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3848:	move.l 4(sp),d0
    384c:	clr.w d0
    384e:	swap d0
    3850:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3854:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3858:	movea.l 8(sp),a0
    385c:	lea 150(a0),a0
    3860:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3862:	movea.l 8(sp),a0
    3866:	lea 146(a0),a0
    386a:	move.w 2(sp),(a0)

}
    386e:	nop
    3870:	lea 20(sp),sp
    3874:	rts

00003876 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3876:	          lea -80(sp),sp
    387a:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    387c:	          pea 1829e <PutChar+0x3a6>
    3882:	          jsr 17456 <KPrintF>
    3888:	          addq.l #4,sp

  width = width / 8;
    388a:	          move.l 88(sp),d0
    388e:	      ,-- bpl.s 3892 <CstReserveBackdrop+0x1c>
    3890:	      |   addq.l #7,d0
    3892:	      '-> asr.l #3,d0
    3894:	          move.l d0,88(sp)

  if( width < 40) 
    3898:	          moveq #39,d0
    389a:	          cmp.l 88(sp),d0
    389e:	      ,-- blt.s 38b4 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    38a0:	      |   pea 182b8 <PutChar+0x3c0>
    38a6:	      |   jsr 17456 <KPrintF>
    38ac:	      |   addq.l #4,sp
    return FALSE;
    38ae:	      |   clr.w d0
    38b0:	,-----|-- bra.w 3c56 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    38b4:	|     '-> pea 182f6 <PutChar+0x3fe>
    38ba:	|         jsr 17456 <KPrintF>
    38c0:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    38c2:	|         move.l 88(sp),-(sp)
    38c6:	|         jsr 10ca <CstCreateCopperlist>
    38cc:	|         addq.l #4,sp
    38ce:	|         move.l d0,1cbc2 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    38d4:	|         pea 18316 <PutChar+0x41e>
    38da:	|         jsr 17456 <KPrintF>
    38e0:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    38e2:	|         move.l 88(sp),d1
    38e6:	|         move.l 92(sp),d0
    38ea:	|         muls.w d1,d0
    38ec:	|         move.w d0,1cbb8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    38f2:	|         move.w 1cbb8 <CstBackdropSizePlane>,d1
    38f8:	|         move.w d1,d0
    38fa:	|         add.w d0,d0
    38fc:	|         add.w d0,d0
    38fe:	|         add.w d1,d0
    3900:	|         move.w d0,1cbb6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3906:	|         move.w 1cbb6 <CstBackdropSize>,d0
    390c:	|         move.w d0,d0
    390e:	|         andi.l #65535,d0
    3914:	|         move.l d0,72(sp)
    3918:	|         moveq #2,d1
    391a:	|         move.l d1,68(sp)
    391e:	|         move.l 1cca4 <SysBase>,d0
    3924:	|         movea.l d0,a6
    3926:	|         move.l 72(sp),d0
    392a:	|         move.l 68(sp),d1
    392e:	|         jsr -684(a6)
    3932:	|         move.l d0,64(sp)
    3936:	|         move.l 64(sp),d0
    393a:	|         move.l d0,1cbba <CstBackDrop>
  if( !CstBackDrop)
    3940:	|         move.l 1cbba <CstBackDrop>,d0
    3946:	|     ,-- bne.s 395c <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3948:	|     |   pea 1833d <PutChar+0x445>
    394e:	|     |   jsr 17456 <KPrintF>
    3954:	|     |   addq.l #4,sp
    return FALSE;  
    3956:	|     |   clr.w d0
    3958:	+-----|-- bra.w 3c56 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    395c:	|     '-> pea 18375 <PutChar+0x47d>
    3962:	|         jsr 17456 <KPrintF>
    3968:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    396a:	|         move.l 1cbba <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3972:	|         clr.l 76(sp)
    3976:	|     ,-- bra.s 398c <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3978:	|  ,--|-> move.l 80(sp),d0
    397c:	|  |  |   move.l d0,d1
    397e:	|  |  |   addq.l #4,d1
    3980:	|  |  |   move.l d1,80(sp)
    3984:	|  |  |   movea.l d0,a0
    3986:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3988:	|  |  |   addq.l #1,76(sp)
    398c:	|  |  '-> move.w 1cbb6 <CstBackdropSize>,d0
    3992:	|  |      lsr.w #2,d0
    3994:	|  |      move.w d0,d0
    3996:	|  |      andi.l #65535,d0
    399c:	|  |      cmp.l 76(sp),d0
    39a0:	|  '----- bgt.s 3978 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    39a2:	|         move.w 1cbb6 <CstBackdropSize>,d0
    39a8:	|         move.w d0,d0
    39aa:	|         andi.l #65535,d0
    39b0:	|         move.l 88(sp),d1
    39b4:	|         add.l d1,d1
    39b6:	|         add.l d1,d0
    39b8:	|         move.l d0,60(sp)
    39bc:	|         moveq #2,d0
    39be:	|         move.l d0,56(sp)
    39c2:	|         move.l 1cca4 <SysBase>,d0
    39c8:	|         movea.l d0,a6
    39ca:	|         move.l 60(sp),d0
    39ce:	|         move.l 56(sp),d1
    39d2:	|         jsr -684(a6)
    39d6:	|         move.l d0,52(sp)
    39da:	|         move.l 52(sp),d0
    39de:	|         move.l d0,1cbcc <CstDrawBuffer>
  if( !CstDrawBuffer)
    39e4:	|         move.l 1cbcc <CstDrawBuffer>,d0
    39ea:	|     ,-- bne.s 3a00 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    39ec:	|     |   pea 1839b <PutChar+0x4a3>
    39f2:	|     |   jsr 17456 <KPrintF>
    39f8:	|     |   addq.l #4,sp
    return FALSE;  
    39fa:	|     |   clr.w d0
    39fc:	+-----|-- bra.w 3c56 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3a00:	|     '-> pea 183d5 <PutChar+0x4dd>
    3a06:	|         jsr 17456 <KPrintF>
    3a0c:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3a0e:	|         move.l #10000,48(sp)
    3a16:	|         clr.l 44(sp)
    3a1a:	|         move.l 1cca4 <SysBase>,d0
    3a20:	|         movea.l d0,a6
    3a22:	|         move.l 48(sp),d0
    3a26:	|         move.l 44(sp),d1
    3a2a:	|         jsr -684(a6)
    3a2e:	|         move.l d0,40(sp)
    3a32:	|         move.l 40(sp),d0
    3a36:	|         move.l d0,1cbd8 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3a3c:	|         move.l 1cbd8 <CstBackDropBufferApplyStart>,d0
    3a42:	|     ,-- bne.s 3a58 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3a44:	|     |   pea 183fd <PutChar+0x505>
    3a4a:	|     |   jsr 17456 <KPrintF>
    3a50:	|     |   addq.l #4,sp
    return FALSE;  
    3a52:	|     |   clr.w d0
    3a54:	+-----|-- bra.w 3c56 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3a58:	|     '-> move.l 1cbd8 <CstBackDropBufferApplyStart>,d0
    3a5e:	|         move.l d0,1cbdc <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3a64:	|         movea.l 1cbd8 <CstBackDropBufferApplyStart>,a0
    3a6a:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3a6c:	|         movea.l 1cbd8 <CstBackDropBufferApplyStart>,a0
    3a72:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3a74:	|         move.w 1cbb6 <CstBackdropSize>,d0
    3a7a:	|         move.w d0,d0
    3a7c:	|         andi.l #65535,d0
    3a82:	|         move.l 88(sp),d1
    3a86:	|         add.l d1,d1
    3a88:	|         add.l d1,d0
    3a8a:	|         move.l d0,36(sp)
    3a8e:	|         moveq #2,d1
    3a90:	|         move.l d1,32(sp)
    3a94:	|         move.l 1cca4 <SysBase>,d0
    3a9a:	|         movea.l d0,a6
    3a9c:	|         move.l 36(sp),d0
    3aa0:	|         move.l 32(sp),d1
    3aa4:	|         jsr -684(a6)
    3aa8:	|         move.l d0,28(sp)
    3aac:	|         move.l 28(sp),d0
    3ab0:	|         move.l d0,1cbc8 <CstViewBuffer>
  if( !CstViewBuffer)
    3ab6:	|         move.l 1cbc8 <CstViewBuffer>,d0
    3abc:	|     ,-- bne.s 3ad2 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3abe:	|     |   pea 18448 <PutChar+0x550>
    3ac4:	|     |   jsr 17456 <KPrintF>
    3aca:	|     |   addq.l #4,sp
    return FALSE;  
    3acc:	|     |   clr.w d0
    3ace:	+-----|-- bra.w 3c56 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3ad2:	|     '-> pea 18482 <PutChar+0x58a>
    3ad8:	|         jsr 17456 <KPrintF>
    3ade:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3ae0:	|         move.l 1cbcc <CstDrawBuffer>,d1
    3ae6:	|         move.l 88(sp),d0
    3aea:	|     ,-- bpl.s 3aee <CstReserveBackdrop+0x278>
    3aec:	|     |   addq.l #3,d0
    3aee:	|     '-> asr.l #2,d0
    3af0:	|         add.l d0,d0
    3af2:	|         add.l d0,d0
    3af4:	|         add.l d1,d0
    3af6:	|         move.l d0,1cbcc <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3afc:	|         move.l 1cbc8 <CstViewBuffer>,d1
    3b02:	|         move.l 88(sp),d0
    3b06:	|     ,-- bpl.s 3b0a <CstReserveBackdrop+0x294>
    3b08:	|     |   addq.l #3,d0
    3b0a:	|     '-> asr.l #2,d0
    3b0c:	|         add.l d0,d0
    3b0e:	|         add.l d0,d0
    3b10:	|         add.l d1,d0
    3b12:	|         move.l d0,1cbc8 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3b18:	|         move.l #5200,24(sp)
    3b20:	|         moveq #2,d0
    3b22:	|         move.l d0,20(sp)
    3b26:	|         move.l 1cca4 <SysBase>,d0
    3b2c:	|         movea.l d0,a6
    3b2e:	|         move.l 24(sp),d0
    3b32:	|         move.l 20(sp),d1
    3b36:	|         jsr -684(a6)
    3b3a:	|         move.l d0,16(sp)
    3b3e:	|         move.l 16(sp),d0
    3b42:	|         move.l d0,1cbec <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3b48:	|         move.l #5600,12(sp)
    3b50:	|         moveq #2,d1
    3b52:	|         move.l d1,8(sp)
    3b56:	|         move.l 1cca4 <SysBase>,d0
    3b5c:	|         movea.l d0,a6
    3b5e:	|         move.l 12(sp),d0
    3b62:	|         move.l 8(sp),d1
    3b66:	|         jsr -684(a6)
    3b6a:	|         move.l d0,4(sp)
    3b6e:	|         move.l 4(sp),d0
    3b72:	|         move.l d0,1cbf0 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3b78:	|         move.l 1cbba <CstBackDrop>,d0
    3b7e:	|         clr.l -(sp)
    3b80:	|         pea 5 <_start+0x5>
    3b84:	|         pea 100 <copyString+0x48>
    3b88:	|         pea 140 <decodeFilename+0x28>
    3b8c:	|         pea 184aa <PutChar+0x5b2>
    3b92:	|         move.l d0,-(sp)
    3b94:	|         jsr 1753e <debug_register_bitmap>
    3b9a:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3b9e:	|         move.l 92(sp),d0
    3ba2:	|         movea.w d0,a1
    3ba4:	|         move.l 88(sp),d0
    3ba8:	|         lsl.w #3,d0
    3baa:	|         movea.w d0,a0
    3bac:	|         move.l 1cbcc <CstDrawBuffer>,d0
    3bb2:	|         clr.l -(sp)
    3bb4:	|         pea 5 <_start+0x5>
    3bb8:	|         move.l a1,-(sp)
    3bba:	|         move.l a0,-(sp)
    3bbc:	|         pea 184ba <PutChar+0x5c2>
    3bc2:	|         move.l d0,-(sp)
    3bc4:	|         jsr 1753e <debug_register_bitmap>
    3bca:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3bce:	|         move.l 92(sp),d0
    3bd2:	|         movea.w d0,a1
    3bd4:	|         move.l 88(sp),d0
    3bd8:	|         lsl.w #3,d0
    3bda:	|         movea.w d0,a0
    3bdc:	|         move.l 1cbc8 <CstViewBuffer>,d0
    3be2:	|         clr.l -(sp)
    3be4:	|         pea 5 <_start+0x5>
    3be8:	|         move.l a1,-(sp)
    3bea:	|         move.l a0,-(sp)
    3bec:	|         pea 184c9 <PutChar+0x5d1>
    3bf2:	|         move.l d0,-(sp)
    3bf4:	|         jsr 1753e <debug_register_bitmap>
    3bfa:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3bfe:	|         move.l 1cbc2 <CstCopperList>,d0
    3c04:	|     ,-- beq.s 3c16 <CstReserveBackdrop+0x3a0>
    3c06:	|     |   move.l 1cbcc <CstDrawBuffer>,d0
    3c0c:	|     +-- beq.s 3c16 <CstReserveBackdrop+0x3a0>
    3c0e:	|     |   move.l 1cbc8 <CstViewBuffer>,d0
    3c14:	|  ,--|-- bne.s 3c28 <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3c16:	|  |  '-> pea 184d8 <PutChar+0x5e0>
    3c1c:	|  |      jsr 17456 <KPrintF>
    3c22:	|  |      addq.l #4,sp
    return FALSE;
    3c24:	|  |      clr.w d0
    3c26:	+--|----- bra.s 3c56 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3c28:	|  '----> pea 18505 <PutChar+0x60d>
    3c2e:	|         jsr 17456 <KPrintF>
    3c34:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3c36:	|         move.l 1cbc2 <CstCopperList>,d0
    3c3c:	|         move.l d0,-(sp)
    3c3e:	|         jsr 372a <CstSetCl>
    3c44:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3c46:	|         pea 1852c <PutChar+0x634>
    3c4c:	|         jsr 17456 <KPrintF>
    3c52:	|         addq.l #4,sp
  return TRUE;
    3c54:	|         moveq #1,d0

}
    3c56:	'-------> movea.l (sp)+,a6
    3c58:	          lea 80(sp),sp
    3c5c:	          rts

00003c5e <CstUnfreeze>:

void CstUnfreeze() {
    3c5e:	       lea -24(sp),sp
    3c62:	       move.l a6,-(sp)
    3c64:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3c66:	       pea 1854f <PutChar+0x657>
    3c6c:	       jsr 17456 <KPrintF>
    3c72:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3c74:	       move.l 1cbf8 <winWidth>,d0
    3c7a:	       lsr.l #3,d0
    3c7c:	       move.l d0,d1
    3c7e:	       move.l 1cbfc <winHeight>,d0
    3c84:	       move.l d0,d0
    3c86:	       muls.w d0,d1
    3c88:	       move.w d1,d0
    3c8a:	       add.w d0,d0
    3c8c:	       add.w d0,d0
    3c8e:	       move.w d0,d2
    3c90:	       add.w d1,d2
    3c92:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3c96:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3c9e:	       move.l 1cbfc <winHeight>,d0
    3ca4:	       move.l d0,d0
    3ca6:	       movea.w d0,a1
    3ca8:	       move.l 1cbf8 <winWidth>,d0
    3cae:	       move.l d0,d0
    3cb0:	       movea.w d0,a0
    3cb2:	       move.l 1cbbe <CstBackDropBackup>,d0
    3cb8:	       clr.l -(sp)
    3cba:	       pea 5 <_start+0x5>
    3cbe:	       move.l a1,-(sp)
    3cc0:	       move.l a0,-(sp)
    3cc2:	       pea 18121 <PutChar+0x229>
    3cc8:	       move.l d0,-(sp)
    3cca:	       jsr 1753e <debug_register_bitmap>
    3cd0:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3cd4:	       move.l 1cbbe <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3cdc:	       move.l 1cbba <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3ce4:	       clr.l 20(sp)
    3ce8:	   ,-- bra.s 3d0e <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3cea:	,--|-> move.l 28(sp),d1
    3cee:	|  |   move.l d1,d0
    3cf0:	|  |   addq.l #4,d0
    3cf2:	|  |   move.l d0,28(sp)
    3cf6:	|  |   move.l 24(sp),d0
    3cfa:	|  |   move.l d0,d2
    3cfc:	|  |   addq.l #4,d2
    3cfe:	|  |   move.l d2,24(sp)
    3d02:	|  |   movea.l d1,a0
    3d04:	|  |   move.l (a0),d1
    3d06:	|  |   movea.l d0,a0
    3d08:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3d0a:	|  |   addq.l #1,20(sp)
    3d0e:	|  '-> move.w 18(sp),d0
    3d12:	|      lsr.w #2,d0
    3d14:	|      move.w d0,d0
    3d16:	|      andi.l #65535,d0
    3d1c:	|      cmp.l 20(sp),d0
    3d20:	'----- bgt.s 3cea <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3d22:	       move.w #2,1cbc6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3d2a:	       move.l 1cbf8 <winWidth>,d0
    3d30:	       lsr.l #4,d0
    3d32:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    3d38:	       move.l a0,d1
    3d3a:	       addq.l #2,d1
    3d3c:	       move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    3d42:	       move.l d0,d0
    3d44:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3d46:	       move.l 1cbfc <winHeight>,d0
    3d4c:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    3d52:	       move.l a0,d1
    3d54:	       addq.l #2,d1
    3d56:	       move.l d1,1cbdc <CstBackDropBufferApplyCursor>
    3d5c:	       move.l d0,d0
    3d5e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d60:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    3d66:	       move.l a0,d0
    3d68:	       addq.l #2,d0
    3d6a:	       move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    3d70:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d72:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    3d78:	       move.l a0,d0
    3d7a:	       addq.l #2,d0
    3d7c:	       move.l d0,1cbdc <CstBackDropBufferApplyCursor>
    3d82:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    3d84:	       movea.l 1cbdc <CstBackDropBufferApplyCursor>,a0
    3d8a:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3d8c:	       move.l 1cbbe <CstBackDropBackup>,d0
    3d92:	   ,-- beq.s 3dba <CstUnfreeze+0x15c>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3d94:	   |   pea 1857a <PutChar+0x682>
    3d9a:	   |   jsr 17456 <KPrintF>
    3da0:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3da2:	   |   move.l 1cbbe <CstBackDropBackup>,10(sp)
    3daa:	   |   move.l 1cca4 <SysBase>,d0
    3db0:	   |   movea.l d0,a6
    3db2:	   |   movea.l 10(sp),a1
    3db6:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3dba:	   '-> pea 1859e <PutChar+0x6a6>
    3dc0:	       jsr 17456 <KPrintF>
    3dc6:	       addq.l #4,sp

}
    3dc8:	       nop
    3dca:	       move.l (sp)+,d2
    3dcc:	       movea.l (sp)+,a6
    3dce:	       lea 24(sp),sp
    3dd2:	       rts

00003dd4 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3dd4:	       lea -28(sp),sp
    3dd8:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3ddc:	       move.l 52(sp),-(sp)
    3de0:	       jsr 15a60 <stringWidth>
    3de6:	       addq.l #4,sp
    3de8:	       asr.l #1,d0
    3dea:	       move.l d0,-(sp)
    3dec:	       jsr 17888 <__floatsisf>
    3df2:	       addq.l #4,sp
    3df4:	       move.l d0,d1
    3df6:	       move.l 1c636 <cameraZoom>,d0
    3dfc:	       move.l d0,-(sp)
    3dfe:	       move.l d1,-(sp)
    3e00:	       jsr 1773e <__divsf3>
    3e06:	       addq.l #8,sp
    3e08:	       move.l d0,-(sp)
    3e0a:	       jsr 17820 <__fixsfsi>
    3e10:	       addq.l #4,sp
    3e12:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3e16:	       move.l 56(sp),d0
    3e1a:	       sub.l 44(sp),d0
    3e1e:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3e22:	       move.l 56(sp),d0
    3e26:	       add.l 44(sp),d0
    3e2a:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3e2e:	       moveq #12,d0
    3e30:	       move.l d0,32(sp)
    3e34:	       clr.l 28(sp)
    3e38:	       move.l 1cca4 <SysBase>,d0
    3e3e:	       movea.l d0,a6
    3e40:	       move.l 32(sp),d0
    3e44:	       move.l 28(sp),d1
    3e48:	       jsr -684(a6)
    3e4c:	       move.l d0,24(sp)
    3e50:	       move.l 24(sp),d0
    3e54:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3e58:	       movea.l 1cbf4 <speech>,a0
    3e5e:	       move.l 4(a0),d0
    3e62:	       movea.l 20(sp),a0
    3e66:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3e6a:	       move.l 52(sp),-(sp)
    3e6e:	       jsr b8 <copyString>
    3e74:	       addq.l #4,sp
    3e76:	       movea.l 20(sp),a0
    3e7a:	       move.l d0,(a0)
	newLine -> x = xx1;
    3e7c:	       movea.l 20(sp),a0
    3e80:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3e86:	       movea.l 1cbf4 <speech>,a0
    3e8c:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3e92:	       moveq #4,d0
    3e94:	       cmp.l 40(sp),d0
    3e98:	   ,-- blt.s 3eba <addSpeechLine+0xe6>
    3e9a:	   |   movea.l 60(sp),a0
    3e9e:	   |   move.l (a0),d1
    3ea0:	   |   moveq #5,d0
    3ea2:	   |   sub.l 40(sp),d0
    3ea6:	   |   cmp.l d1,d0
    3ea8:	   +-- ble.s 3eba <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3eaa:	   |   moveq #5,d0
    3eac:	   |   sub.l 40(sp),d0
    3eb0:	   |   movea.l 60(sp),a0
    3eb4:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3eb6:	,--|-- bra.w 3fe6 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3eba:	|  '-> move.l 36(sp),-(sp)
    3ebe:	|      jsr 17888 <__floatsisf>
    3ec4:	|      addq.l #4,sp
    3ec6:	|      move.l d0,d2
    3ec8:	|      move.l 1cbf8 <winWidth>,d0
    3ece:	|      move.l d0,-(sp)
    3ed0:	|      jsr 178b0 <__floatunsisf>
    3ed6:	|      addq.l #4,sp
    3ed8:	|      move.l d0,d1
    3eda:	|      move.l 1c636 <cameraZoom>,d0
    3ee0:	|      move.l d0,-(sp)
    3ee2:	|      move.l d1,-(sp)
    3ee4:	|      jsr 1773e <__divsf3>
    3eea:	|      addq.l #8,sp
    3eec:	|      move.l #1084227584,-(sp)
    3ef2:	|      move.l d0,-(sp)
    3ef4:	|      jsr 17b7c <__subsf3>
    3efa:	|      addq.l #8,sp
    3efc:	|      move.l d0,-(sp)
    3efe:	|      move.l d2,-(sp)
    3f00:	|      jsr 17970 <__gesf2>
    3f06:	|      addq.l #8,sp
    3f08:	|      tst.l d0
    3f0a:	|  ,-- bge.s 3f10 <addSpeechLine+0x13c>
}
    3f0c:	+--|-- bra.w 3fe6 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3f10:	|  '-> movea.l 60(sp),a0
    3f14:	|      move.l (a0),d0
    3f16:	|      move.l d0,-(sp)
    3f18:	|      jsr 17888 <__floatsisf>
    3f1e:	|      addq.l #4,sp
    3f20:	|      move.l d0,-(sp)
    3f22:	|      jsr 177aa <__extendsfdf2>
    3f28:	|      addq.l #4,sp
    3f2a:	|      move.l d0,d4
    3f2c:	|      move.l d1,d5
    3f2e:	|      move.l 1cbf8 <winWidth>,d0
    3f34:	|      move.l d0,-(sp)
    3f36:	|      jsr 178b0 <__floatunsisf>
    3f3c:	|      addq.l #4,sp
    3f3e:	|      move.l d0,d1
    3f40:	|      move.l 1c636 <cameraZoom>,d0
    3f46:	|      move.l d0,-(sp)
    3f48:	|      move.l d1,-(sp)
    3f4a:	|      jsr 1773e <__divsf3>
    3f50:	|      addq.l #8,sp
    3f52:	|      move.l d0,-(sp)
    3f54:	|      jsr 177aa <__extendsfdf2>
    3f5a:	|      addq.l #4,sp
    3f5c:	|      clr.l -(sp)
    3f5e:	|      move.l #1075052544,-(sp)
    3f64:	|      move.l d1,-(sp)
    3f66:	|      move.l d0,-(sp)
    3f68:	|      jsr 17b1a <__subdf3>
    3f6e:	|      lea 16(sp),sp
    3f72:	|      move.l d0,d2
    3f74:	|      move.l d1,d3
    3f76:	|      move.l 36(sp),-(sp)
    3f7a:	|      jsr 17848 <__floatsidf>
    3f80:	|      addq.l #4,sp
    3f82:	|      move.l d1,-(sp)
    3f84:	|      move.l d0,-(sp)
    3f86:	|      move.l d3,-(sp)
    3f88:	|      move.l d2,-(sp)
    3f8a:	|      jsr 17b1a <__subdf3>
    3f90:	|      lea 16(sp),sp
    3f94:	|      move.l d1,-(sp)
    3f96:	|      move.l d0,-(sp)
    3f98:	|      move.l d5,-(sp)
    3f9a:	|      move.l d4,-(sp)
    3f9c:	|      jsr 179a6 <__gtdf2>
    3fa2:	|      lea 16(sp),sp
    3fa6:	|      tst.l d0
    3fa8:	|  ,-- bgt.s 3fac <addSpeechLine+0x1d8>
}
    3faa:	+--|-- bra.s 3fe6 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3fac:	|  '-> move.l 1cbf8 <winWidth>,d0
    3fb2:	|      move.l d0,-(sp)
    3fb4:	|      jsr 178b0 <__floatunsisf>
    3fba:	|      addq.l #4,sp
    3fbc:	|      move.l d0,d1
    3fbe:	|      move.l 1c636 <cameraZoom>,d0
    3fc4:	|      move.l d0,-(sp)
    3fc6:	|      move.l d1,-(sp)
    3fc8:	|      jsr 1773e <__divsf3>
    3fce:	|      addq.l #8,sp
    3fd0:	|      move.l d0,-(sp)
    3fd2:	|      jsr 17820 <__fixsfsi>
    3fd8:	|      addq.l #4,sp
    3fda:	|      subq.l #5,d0
    3fdc:	|      sub.l 36(sp),d0
    3fe0:	|      movea.l 60(sp),a0
    3fe4:	|      move.l d0,(a0)
}
    3fe6:	'----> nop
    3fe8:	       movem.l (sp)+,d2-d5/a6
    3fec:	       lea 28(sp),sp
    3ff0:	       rts

00003ff2 <initSpeech>:


void initSpeech () {
    3ff2:	       lea -12(sp),sp
    3ff6:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3ff8:	       moveq #20,d0
    3ffa:	       move.l d0,12(sp)
    3ffe:	       clr.l 8(sp)
    4002:	       move.l 1cca4 <SysBase>,d0
    4008:	       movea.l d0,a6
    400a:	       move.l 12(sp),d0
    400e:	       move.l 8(sp),d1
    4012:	       jsr -684(a6)
    4016:	       move.l d0,4(sp)
    401a:	       move.l 4(sp),d0
    401e:	       move.l d0,1cbf4 <speech>
	if (speech) {
    4024:	       move.l 1cbf4 <speech>,d0
    402a:	,----- beq.s 4056 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    402c:	|      movea.l 1cbf4 <speech>,a0
    4032:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4034:	|      movea.l 1cbf4 <speech>,a0
    403a:	|      clr.l 4(a0)
		speech -> speechY = 0;
    403e:	|      movea.l 1cbf4 <speech>,a0
    4044:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4048:	|      movea.l 1cbf4 <speech>,a0
    404e:	|      moveq #-1,d0
    4050:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4054:	|  ,-- bra.s 4064 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4056:	'--|-> pea 185b4 <PutChar+0x6bc>
    405c:	   |   jsr 17456 <KPrintF>
    4062:	   |   addq.l #4,sp
}
    4064:	   '-> nop
    4066:	       movea.l (sp)+,a6
    4068:	       lea 12(sp),sp
    406c:	       rts

0000406e <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    406e:	       movea.l 1cbf4 <speech>,a0
    4074:	       move.l 4(a0),d0
    4078:	,----- beq.s 4086 <isThereAnySpeechGoingOn+0x18>
    407a:	|      movea.l 1cbf4 <speech>,a0
    4080:	|      move.l 16(a0),d0
    4084:	|  ,-- bra.s 4088 <isThereAnySpeechGoingOn+0x1a>
    4086:	'--|-> moveq #-1,d0
}
    4088:	   '-> rts

0000408a <killAllSpeech>:

void killAllSpeech () {
    408a:	       lea -12(sp),sp
    408e:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4090:	       movea.l 1cbf4 <speech>,a0
    4096:	       move.l 12(a0),d0
    409a:	       moveq #-1,d1
    409c:	       cmp.l d0,d1
    409e:	   ,-- beq.s 40ac <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    40a0:	   |   movea.l 1cbf4 <speech>,a0
    40a6:	   |   moveq #-1,d0
    40a8:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    40ac:	   '-> movea.l 1cbf4 <speech>,a0
    40b2:	       move.l (a0),d0
    40b4:	,----- beq.w 4140 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    40b8:	|      movea.l 1cbf4 <speech>,a0
    40be:	|      move.l (a0),d1
    40c0:	|      lea -132(sp),sp
    40c4:	|      move.l sp,d0
    40c6:	|      movea.w #132,a0
    40ca:	|      move.l a0,-(sp)
    40cc:	|      move.l d1,-(sp)
    40ce:	|      move.l d0,-(sp)
    40d0:	|      jsr 1740a <memcpy>
    40d6:	|      lea 12(sp),sp
    40da:	|      jsr ac5c <makeSilent>
    40e0:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    40e4:	|      movea.l 1cbf4 <speech>,a0
    40ea:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    40ec:	+----- bra.s 4140 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    40ee:	|  ,-> movea.l 1cbf4 <speech>,a0
    40f4:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    40fa:	|  |   movea.l 1cbf4 <speech>,a0
    4100:	|  |   movea.l 4(a0),a1
    4104:	|  |   movea.l 1cbf4 <speech>,a0
    410a:	|  |   move.l 4(a1),d0
    410e:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4112:	|  |   movea.l 12(sp),a0
    4116:	|  |   move.l (a0),8(sp)
    411a:	|  |   move.l 1cca4 <SysBase>,d0
    4120:	|  |   movea.l d0,a6
    4122:	|  |   movea.l 8(sp),a1
    4126:	|  |   jsr -690(a6)
		FreeVec(killMe);
    412a:	|  |   move.l 12(sp),4(sp)
    4130:	|  |   move.l 1cca4 <SysBase>,d0
    4136:	|  |   movea.l d0,a6
    4138:	|  |   movea.l 4(sp),a1
    413c:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4140:	'--|-> movea.l 1cbf4 <speech>,a0
    4146:	   |   move.l 4(a0),d0
    414a:	   '-- bne.s 40ee <killAllSpeech+0x64>
	}
}
    414c:	       nop
    414e:	       nop
    4150:	       movea.l (sp)+,a6
    4152:	       lea 12(sp),sp
    4156:	       rts

00004158 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4158:	pea 2 <_start+0x2>
    415c:	move.l 8(sp),-(sp)
    4160:	jsr 42b8 <setFrames>
    4166:	addq.l #8,sp
}
    4168:	nop
    416a:	rts

0000416c <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    416c:	       lea -52(sp),sp
    4170:	       move.l a6,-(sp)
    4172:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4174:	       movea.l 64(sp),a0
    4178:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    417e:	       move.l 1c60e <speechSpeed>,d0
    4184:	       move.l 68(sp),-(sp)
    4188:	       move.l d0,-(sp)
    418a:	       jsr a46 <putFloat>
    4190:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4192:	       movea.l 64(sp),a0
    4196:	       move.l 8(a0),d0
    419a:	       move.l 68(sp),-(sp)
    419e:	       move.l d0,-(sp)
    41a0:	       jsr 8d0 <put2bytes>
    41a6:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    41a8:	       movea.l 64(sp),a0
    41ac:	       move.l 16(a0),d0
    41b0:	       move.l 68(sp),-(sp)
    41b4:	       move.l d0,-(sp)
    41b6:	       jsr 8d0 <put2bytes>
    41bc:	       addq.l #8,sp
		if (sS -> currentTalker) {
    41be:	       movea.l 64(sp),a0
    41c2:	       move.l (a0),d0
    41c4:	   ,-- beq.s 4208 <saveSpeech+0x9c>
			FPutC (fp, 1);
    41c6:	   |   move.l 68(sp),40(sp)
    41cc:	   |   moveq #1,d0
    41ce:	   |   move.l d0,36(sp)
    41d2:	   |   move.l 1ccac <DOSBase>,d0
    41d8:	   |   movea.l d0,a6
    41da:	   |   move.l 40(sp),d1
    41de:	   |   move.l 36(sp),d2
    41e2:	   |   jsr -312(a6)
    41e6:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    41ea:	   |   movea.l 64(sp),a0
    41ee:	   |   movea.l (a0),a0
    41f0:	   |   movea.l 114(a0),a0
    41f4:	   |   move.l 4(a0),d0
    41f8:	   |   move.l 68(sp),-(sp)
    41fc:	   |   move.l d0,-(sp)
    41fe:	   |   jsr 8d0 <put2bytes>
    4204:	   |   addq.l #8,sp
    4206:	,--|-- bra.s 4284 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4208:	|  '-> move.l 68(sp),52(sp)
    420e:	|      clr.l 48(sp)
    4212:	|      move.l 1ccac <DOSBase>,d0
    4218:	|      movea.l d0,a6
    421a:	|      move.l 52(sp),d1
    421e:	|      move.l 48(sp),d2
    4222:	|      jsr -312(a6)
    4226:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    422a:	+----- bra.s 4284 <saveSpeech+0x118>
			FPutC (fp, 1);
    422c:	|  ,-> move.l 68(sp),16(sp)
    4232:	|  |   moveq #1,d0
    4234:	|  |   move.l d0,12(sp)
    4238:	|  |   move.l 1ccac <DOSBase>,d0
    423e:	|  |   movea.l d0,a6
    4240:	|  |   move.l 16(sp),d1
    4244:	|  |   move.l 12(sp),d2
    4248:	|  |   jsr -312(a6)
    424c:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4250:	|  |   movea.l 56(sp),a0
    4254:	|  |   move.l (a0),d0
    4256:	|  |   move.l 68(sp),-(sp)
    425a:	|  |   move.l d0,-(sp)
    425c:	|  |   jsr bd8 <writeString>
    4262:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4264:	|  |   movea.l 56(sp),a0
    4268:	|  |   move.l 8(a0),d0
    426c:	|  |   move.l 68(sp),-(sp)
    4270:	|  |   move.l d0,-(sp)
    4272:	|  |   jsr 8d0 <put2bytes>
    4278:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    427a:	|  |   movea.l 56(sp),a0
    427e:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4284:	'--|-> tst.l 56(sp)
    4288:	   '-- bne.s 422c <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    428a:	       move.l 68(sp),28(sp)
    4290:	       clr.l 24(sp)
    4294:	       move.l 1ccac <DOSBase>,d0
    429a:	       movea.l d0,a6
    429c:	       move.l 28(sp),d1
    42a0:	       move.l 24(sp),d2
    42a4:	       jsr -312(a6)
    42a8:	       move.l d0,20(sp)
}
    42ac:	       nop
    42ae:	       move.l (sp)+,d2
    42b0:	       movea.l (sp)+,a6
    42b2:	       lea 52(sp),sp
    42b6:	       rts

000042b8 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    42b8:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    42ba:	movea.l 8(sp),a0
    42be:	movea.l 80(a0),a0
    42c2:	move.l (a0),d2
    42c4:	movea.l 8(sp),a0
    42c8:	movea.l 80(a0),a0
    42cc:	move.l 4(a0),d0
    42d0:	move.l 12(sp),-(sp)
    42d4:	move.l d0,-(sp)
    42d6:	jsr 17de2 <__mulsi3>
    42dc:	addq.l #8,sp
    42de:	move.l d0,d1
    42e0:	movea.l 8(sp),a0
    42e4:	move.l 106(a0),d0
    42e8:	add.l d1,d0
    42ea:	add.l d0,d0
    42ec:	add.l d0,d0
    42ee:	movea.l d2,a0
    42f0:	adda.l d0,a0
    42f2:	move.l (a0),d0
    42f4:	movea.l 8(sp),a0
    42f8:	move.l d0,72(a0)
}
    42fc:	nop
    42fe:	move.l (sp)+,d2
    4300:	rts

00004302 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4302:	       lea -20(sp),sp
    4306:	       move.l d2,-(sp)
    4308:	       move.l 40(sp),d0
    430c:	       move.w d0,d0
    430e:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4312:	       movea.l 1cbf4 <speech>,a0
    4318:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    431e:	       move.l 32(sp),-(sp)
    4322:	       jsr a71c <findPerson>
    4328:	       addq.l #4,sp
    432a:	       move.l d0,16(sp)
    if (thisPerson) {
    432e:	   ,-- beq.s 4354 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4330:	   |   movea.w 6(sp),a0
    4334:	   |   move.l a0,-(sp)
    4336:	   |   move.l 40(sp),-(sp)
    433a:	   |   move.l 24(sp),-(sp)
    433e:	   |   move.l 40(sp),-(sp)
    4342:	   |   jsr 441a <wrapSpeechPerson>
    4348:	   |   lea 16(sp),sp
    434c:	   |   move.l d0,20(sp)
    4350:	,--|-- bra.w 440e <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4354:	|  '-> move.l 32(sp),-(sp)
    4358:	|      jsr 15c38 <getRegionForObject>
    435e:	|      addq.l #4,sp
    4360:	|      move.l d0,12(sp)
        if (thisRegion) {
    4364:	|  ,-- beq.s 43d0 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    4366:	|  |   movea.l 12(sp),a0
    436a:	|  |   movea.l 28(a0),a0
    436e:	|  |   move.l 28(a0),d0
    4372:	|  |   movea.l 12(sp),a0
    4376:	|  |   movea.l 4(a0),a1
    437a:	|  |   movea.l 12(sp),a0
    437e:	|  |   movea.l 28(a0),a0
    4382:	|  |   move.l 20(a0),d1
    4386:	|  |   movea.l a1,a0
    4388:	|  |   suba.l d1,a0
    438a:	|  |   move.l 1cd5e <cameraY>,d1
    4390:	|  |   movea.l a0,a1
    4392:	|  |   suba.l d1,a1
    4394:	|  |   movea.l 12(sp),a0
    4398:	|  |   move.l (a0),d2
    439a:	|  |   movea.l 12(sp),a0
    439e:	|  |   move.l 8(a0),d1
    43a2:	|  |   add.l d2,d1
    43a4:	|  |   move.l d1,d2
    43a6:	|  |   asr.l #1,d2
    43a8:	|  |   move.l 1cd5a <cameraX>,d1
    43ae:	|  |   movea.l d2,a0
    43b0:	|  |   suba.l d1,a0
    43b2:	|  |   move.l 36(sp),-(sp)
    43b6:	|  |   move.l d0,-(sp)
    43b8:	|  |   move.l a1,-(sp)
    43ba:	|  |   move.l a0,-(sp)
    43bc:	|  |   move.l 44(sp),-(sp)
    43c0:	|  |   jsr 4538 <wrapSpeechXY>
    43c6:	|  |   lea 20(sp),sp
    43ca:	|  |   move.l d0,20(sp)
    43ce:	+--|-- bra.s 440e <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    43d0:	|  '-> move.l 32(sp),-(sp)
    43d4:	|      jsr d68a <findObjectType>
    43da:	|      addq.l #4,sp
    43dc:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    43e0:	|      movea.l 8(sp),a0
    43e4:	|      move.l 28(a0),d1
    43e8:	|      move.l 1cbf8 <winWidth>,d0
    43ee:	|      lsr.l #1,d0
    43f0:	|      move.l 36(sp),-(sp)
    43f4:	|      move.l d1,-(sp)
    43f6:	|      pea a <_start+0xa>
    43fa:	|      move.l d0,-(sp)
    43fc:	|      move.l 44(sp),-(sp)
    4400:	|      jsr 4538 <wrapSpeechXY>
    4406:	|      lea 20(sp),sp
    440a:	|      move.l d0,20(sp)
        }
    }
    return i;
    440e:	'----> move.l 20(sp),d0
}
    4412:	       move.l (sp)+,d2
    4414:	       lea 20(sp),sp
    4418:	       rts

0000441a <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    441a:	    subq.l #8,sp
    441c:	    movem.l d2-d4,-(sp)
    4420:	    move.l 36(sp),d0
    4424:	    move.w d0,d0
    4426:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    442a:	    movea.l 28(sp),a0
    442e:	    movea.l 114(a0),a0
    4432:	    move.l 28(a0),d2
    4436:	    movea.l 28(sp),a0
    443a:	    move.l 4(a0),d3
    443e:	    move.l 1cd5e <cameraY>,d0
    4444:	    move.l d0,-(sp)
    4446:	    jsr 17888 <__floatsisf>
    444c:	    addq.l #4,sp
    444e:	    move.l d0,-(sp)
    4450:	    move.l d3,-(sp)
    4452:	    jsr 17b7c <__subsf3>
    4458:	    addq.l #8,sp
    445a:	    move.l d0,d3
    445c:	    movea.l 28(sp),a0
    4460:	    move.l 32(a0),d4
    4464:	    movea.l 28(sp),a0
    4468:	    move.l 20(a0),d1
    446c:	    movea.l 28(sp),a0
    4470:	    move.l 24(a0),d0
    4474:	    sub.l d0,d1
    4476:	    move.l d1,-(sp)
    4478:	    jsr 17888 <__floatsisf>
    447e:	    addq.l #4,sp
    4480:	    move.l d0,-(sp)
    4482:	    move.l d4,-(sp)
    4484:	    jsr 1793a <__mulsf3>
    448a:	    addq.l #8,sp
    448c:	    move.l d0,-(sp)
    448e:	    move.l d3,-(sp)
    4490:	    jsr 17b7c <__subsf3>
    4496:	    addq.l #8,sp
    4498:	    move.l d0,d3
    449a:	    movea.l 28(sp),a0
    449e:	    movea.l 114(a0),a0
    44a2:	    move.l 20(a0),d0
    44a6:	    move.l d0,-(sp)
    44a8:	    jsr 17888 <__floatsisf>
    44ae:	    addq.l #4,sp
    44b0:	    move.l d0,-(sp)
    44b2:	    move.l d3,-(sp)
    44b4:	    jsr 17b7c <__subsf3>
    44ba:	    addq.l #8,sp
    44bc:	    move.l d0,-(sp)
    44be:	    jsr 17820 <__fixsfsi>
    44c4:	    addq.l #4,sp
    44c6:	    move.l d0,d4
    44c8:	    movea.l 28(sp),a0
    44cc:	    move.l (a0),d3
    44ce:	    move.l 1cd5a <cameraX>,d0
    44d4:	    move.l d0,-(sp)
    44d6:	    jsr 17888 <__floatsisf>
    44dc:	    addq.l #4,sp
    44de:	    move.l d0,-(sp)
    44e0:	    move.l d3,-(sp)
    44e2:	    jsr 17b7c <__subsf3>
    44e8:	    addq.l #8,sp
    44ea:	    move.l d0,-(sp)
    44ec:	    jsr 17820 <__fixsfsi>
    44f2:	    addq.l #4,sp
    44f4:	    move.l 32(sp),-(sp)
    44f8:	    move.l d2,-(sp)
    44fa:	    move.l d4,-(sp)
    44fc:	    move.l d0,-(sp)
    44fe:	    move.l 40(sp),-(sp)
    4502:	    jsr 4538 <wrapSpeechXY>
    4508:	    lea 20(sp),sp
    450c:	    move.l d0,16(sp)
	if (animPerson) {
    4510:	    tst.w 14(sp)
    4514:	,-- beq.s 452c <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4516:	|   move.l 28(sp),-(sp)
    451a:	|   jsr 4158 <makeTalker>
    4520:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4522:	|   movea.l 1cbf4 <speech>,a0
    4528:	|   move.l 28(sp),(a0)
	}
	return i;
    452c:	'-> move.l 16(sp),d0
}
    4530:	    movem.l (sp)+,d2-d4
    4534:	    addq.l #8,sp
    4536:	    rts

00004538 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4538:	                   lea -16(sp),sp
    453c:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4540:	                   clr.l 16(sp)
    killAllSpeech();
    4544:	                   jsr 408a <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    454a:	                   move.l 36(sp),-(sp)
    454e:	                   jsr 13e62 <strlen>
    4554:	                   addq.l #4,sp
    4556:	                   movea.l d0,a0
    4558:	                   lea 20(a0),a0
    455c:	                   move.l a0,-(sp)
    455e:	                   jsr 178b0 <__floatunsisf>
    4564:	                   addq.l #4,sp
    4566:	                   move.l d0,d1
    4568:	                   move.l 1c60e <speechSpeed>,d0
    456e:	                   move.l d0,-(sp)
    4570:	                   move.l d1,-(sp)
    4572:	                   jsr 1793a <__mulsf3>
    4578:	                   addq.l #8,sp
    457a:	                   move.l d0,-(sp)
    457c:	                   jsr 17820 <__fixsfsi>
    4582:	                   addq.l #4,sp
    4584:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    4588:	               ,-- bgt.s 4590 <wrapSpeechXY+0x58>
    458a:	               |   moveq #1,d0
    458c:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    4590:	               '-> moveq #-1,d1
    4592:	                   cmp.l 52(sp),d1
    4596:	               ,-- beq.s 45d6 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    4598:	               |   move.l 1cd6e <speechMode>,d0
    459e:	               +-- ble.s 45d6 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    45a0:	               |   clr.l -(sp)
    45a2:	               |   move.l 56(sp),-(sp)
    45a6:	               |   jsr d34a <startSound>
    45ac:	               |   addq.l #8,sp
    45ae:	               |   tst.w d0
    45b0:	               +-- beq.s 45d6 <wrapSpeechXY+0x9e>
                speechTime = -10;
    45b2:	               |   moveq #-10,d0
    45b4:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    45b8:	               |   movea.l 1cbf4 <speech>,a0
    45be:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    45c4:	               |   move.l 1cd6e <speechMode>,d0
    45ca:	               |   moveq #2,d1
    45cc:	               |   cmp.l d0,d1
    45ce:	               +-- bne.s 45d6 <wrapSpeechXY+0x9e>
    45d0:	               |   moveq #-10,d0
    45d2:	,--------------|-- bra.w 485c <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    45d6:	|              '-> movea.l 1cbf4 <speech>,a0
    45dc:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    45e2:	|     ,----------- bra.w 4696 <wrapSpeechXY+0x15e>
        a = wrap;
    45e6:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    45ec:	|  |  |        ,-- bra.s 45fc <wrapSpeechXY+0xc4>
            a--;
    45ee:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    45f2:	|  |  |  |     +-- bne.s 45fc <wrapSpeechXY+0xc4>
                a = wrap;
    45f4:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    45fa:	|  |  |  |  ,--|-- bra.s 460e <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    45fc:	|  |  |  |  |  '-> move.l 28(sp),d0
    4600:	|  |  |  |  |      movea.l 36(sp),a0
    4604:	|  |  |  |  |      adda.l d0,a0
    4606:	|  |  |  |  |      move.b (a0),d0
    4608:	|  |  |  |  |      cmpi.b #32,d0
    460c:	|  |  |  '--|----- bne.s 45ee <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    460e:	|  |  |     '----> move.l 28(sp),d0
    4612:	|  |  |            movea.l 36(sp),a0
    4616:	|  |  |            adda.l d0,a0
    4618:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    461a:	|  |  |            lea 16(sp),a0
    461e:	|  |  |            move.l a0,-(sp)
    4620:	|  |  |            move.l 44(sp),-(sp)
    4624:	|  |  |            move.l 44(sp),-(sp)
    4628:	|  |  |            jsr 3dd4 <addSpeechLine>
    462e:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4632:	|  |  |            move.l 28(sp),d0
    4636:	|  |  |            movea.l 36(sp),a0
    463a:	|  |  |            adda.l d0,a0
    463c:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4640:	|  |  |            move.l 28(sp),d0
    4644:	|  |  |            addq.l #1,d0
    4646:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    464a:	|  |  |            move.l 44(sp),-(sp)
    464e:	|  |  |            jsr 17888 <__floatsisf>
    4654:	|  |  |            addq.l #4,sp
    4656:	|  |  |            move.l d0,d2
    4658:	|  |  |            move.l 1cd98 <fontHeight>,d0
    465e:	|  |  |            move.l d0,-(sp)
    4660:	|  |  |            jsr 17888 <__floatsisf>
    4666:	|  |  |            addq.l #4,sp
    4668:	|  |  |            move.l d0,d1
    466a:	|  |  |            move.l 1c636 <cameraZoom>,d0
    4670:	|  |  |            move.l d0,-(sp)
    4672:	|  |  |            move.l d1,-(sp)
    4674:	|  |  |            jsr 1773e <__divsf3>
    467a:	|  |  |            addq.l #8,sp
    467c:	|  |  |            move.l d0,-(sp)
    467e:	|  |  |            move.l d2,-(sp)
    4680:	|  |  |            jsr 17b7c <__subsf3>
    4686:	|  |  |            addq.l #8,sp
    4688:	|  |  |            move.l d0,-(sp)
    468a:	|  |  |            jsr 17820 <__fixsfsi>
    4690:	|  |  |            addq.l #4,sp
    4692:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4696:	|  |  '----------> move.l 36(sp),-(sp)
    469a:	|  |               jsr 13e62 <strlen>
    46a0:	|  |               addq.l #4,sp
    46a2:	|  |               move.l d0,d1
    46a4:	|  |               move.l 48(sp),d0
    46a8:	|  |               cmp.l d1,d0
    46aa:	|  '-------------- bcs.w 45e6 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    46ae:	|                  lea 16(sp),a0
    46b2:	|                  move.l a0,-(sp)
    46b4:	|                  move.l 44(sp),-(sp)
    46b8:	|                  move.l 44(sp),-(sp)
    46bc:	|                  jsr 3dd4 <addSpeechLine>
    46c2:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    46c6:	|                  move.l 44(sp),-(sp)
    46ca:	|                  jsr 17888 <__floatsisf>
    46d0:	|                  addq.l #4,sp
    46d2:	|                  move.l d0,d2
    46d4:	|                  move.l 1cd98 <fontHeight>,d0
    46da:	|                  move.l d0,-(sp)
    46dc:	|                  jsr 17888 <__floatsisf>
    46e2:	|                  addq.l #4,sp
    46e4:	|                  move.l d0,d1
    46e6:	|                  move.l 1c636 <cameraZoom>,d0
    46ec:	|                  move.l d0,-(sp)
    46ee:	|                  move.l d1,-(sp)
    46f0:	|                  jsr 1773e <__divsf3>
    46f6:	|                  addq.l #8,sp
    46f8:	|                  move.l d0,-(sp)
    46fa:	|                  move.l d2,-(sp)
    46fc:	|                  jsr 17b7c <__subsf3>
    4702:	|                  addq.l #8,sp
    4704:	|                  move.l d0,-(sp)
    4706:	|                  jsr 17820 <__fixsfsi>
    470c:	|                  addq.l #4,sp
    470e:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4712:	|              ,-- bpl.s 4730 <wrapSpeechXY+0x1f8>
    4714:	|              |   movea.l 1cbf4 <speech>,a0
    471a:	|              |   move.l 8(a0),d0
    471e:	|              |   movea.l 1cbf4 <speech>,a0
    4724:	|              |   sub.l 44(sp),d0
    4728:	|              |   move.l d0,8(a0)
    472c:	|           ,--|-- bra.w 481e <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4730:	|           |  '-> movea.l 1cbf4 <speech>,a0
    4736:	|           |      move.l 8(a0),d0
    473a:	|           |      move.l d0,-(sp)
    473c:	|           |      jsr 17888 <__floatsisf>
    4742:	|           |      addq.l #4,sp
    4744:	|           |      move.l d0,d2
    4746:	|           |      move.l 1cd5e <cameraY>,d0
    474c:	|           |      move.l d0,-(sp)
    474e:	|           |      jsr 17888 <__floatsisf>
    4754:	|           |      addq.l #4,sp
    4756:	|           |      move.l d0,d3
    4758:	|           |      move.l 1cbfc <winHeight>,d4
    475e:	|           |      move.l 1cd98 <fontHeight>,d0
    4764:	|           |      pea 3 <_start+0x3>
    4768:	|           |      move.l d0,-(sp)
    476a:	|           |      jsr 17e60 <__divsi3>
    4770:	|           |      addq.l #8,sp
    4772:	|           |      move.l d4,d1
    4774:	|           |      sub.l d0,d1
    4776:	|           |      move.l d1,-(sp)
    4778:	|           |      jsr 178b0 <__floatunsisf>
    477e:	|           |      addq.l #4,sp
    4780:	|           |      move.l d0,d1
    4782:	|           |      move.l 1c636 <cameraZoom>,d0
    4788:	|           |      move.l d0,-(sp)
    478a:	|           |      move.l d1,-(sp)
    478c:	|           |      jsr 1773e <__divsf3>
    4792:	|           |      addq.l #8,sp
    4794:	|           |      move.l d0,-(sp)
    4796:	|           |      move.l d3,-(sp)
    4798:	|           |      jsr 17644 <__addsf3>
    479e:	|           |      addq.l #8,sp
    47a0:	|           |      move.l d0,-(sp)
    47a2:	|           |      move.l d2,-(sp)
    47a4:	|           |      jsr 179f4 <__gtsf2>
    47aa:	|           |      addq.l #8,sp
    47ac:	|           |      tst.l d0
    47ae:	|           +----- ble.s 481e <wrapSpeechXY+0x2e6>
    47b0:	|           |      move.l 1cd5e <cameraY>,d0
    47b6:	|           |      move.l d0,-(sp)
    47b8:	|           |      jsr 17888 <__floatsisf>
    47be:	|           |      addq.l #4,sp
    47c0:	|           |      move.l d0,d2
    47c2:	|           |      move.l 1cbfc <winHeight>,d3
    47c8:	|           |      move.l 1cd98 <fontHeight>,d0
    47ce:	|           |      pea 3 <_start+0x3>
    47d2:	|           |      move.l d0,-(sp)
    47d4:	|           |      jsr 17e60 <__divsi3>
    47da:	|           |      addq.l #8,sp
    47dc:	|           |      move.l d3,d1
    47de:	|           |      sub.l d0,d1
    47e0:	|           |      move.l d1,-(sp)
    47e2:	|           |      jsr 178b0 <__floatunsisf>
    47e8:	|           |      addq.l #4,sp
    47ea:	|           |      move.l d0,d1
    47ec:	|           |      move.l 1c636 <cameraZoom>,d0
    47f2:	|           |      move.l d0,-(sp)
    47f4:	|           |      move.l d1,-(sp)
    47f6:	|           |      jsr 1773e <__divsf3>
    47fc:	|           |      addq.l #8,sp
    47fe:	|           |      move.l d0,-(sp)
    4800:	|           |      move.l d2,-(sp)
    4802:	|           |      jsr 17644 <__addsf3>
    4808:	|           |      addq.l #8,sp
    480a:	|           |      movea.l 1cbf4 <speech>,a2
    4810:	|           |      move.l d0,-(sp)
    4812:	|           |      jsr 17820 <__fixsfsi>
    4818:	|           |      addq.l #4,sp
    481a:	|           |      move.l d0,8(a2)

    if (offset) {
    481e:	|           '----> move.l 16(sp),d0
    4822:	|        ,-------- beq.s 4858 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4824:	|        |         movea.l 1cbf4 <speech>,a0
    482a:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4830:	|        |     ,-- bra.s 4852 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4832:	|        |  ,--|-> movea.l 20(sp),a0
    4836:	|        |  |  |   move.l 8(a0),d1
    483a:	|        |  |  |   move.l 16(sp),d0
    483e:	|        |  |  |   add.l d1,d0
    4840:	|        |  |  |   movea.l 20(sp),a0
    4844:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4848:	|        |  |  |   movea.l 20(sp),a0
    484c:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4852:	|        |  |  '-> tst.l 20(sp)
    4856:	|        |  '----- bne.s 4832 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4858:	|        '-------> move.l 24(sp),d0
}
    485c:	'----------------> movem.l (sp)+,d2-d4/a2
    4860:	                   lea 16(sp),sp
    4864:	                   rts

00004866 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4866:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    486a:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    486e:	       tst.l 24(sp)
    4872:	   ,-- bge.s 4878 <drawLine+0x12>
    4874:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4878:	   '-> tst.l 28(sp)
    487c:	   ,-- bge.s 4882 <drawLine+0x1c>
    487e:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4882:	   '-> tst.l 32(sp)
    4886:	   ,-- bge.s 488c <drawLine+0x26>
    4888:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    488c:	   '-> tst.l 36(sp)
    4890:	   ,-- bge.s 4896 <drawLine+0x30>
    4892:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4896:	   '-> move.l 1cd3c <sceneWidth>,d0
    489c:	       cmp.l 24(sp),d0
    48a0:	   ,-- bge.s 48b0 <drawLine+0x4a>
    48a2:	   |   move.l 1cd3c <sceneWidth>,d0
    48a8:	   |   move.l d0,d1
    48aa:	   |   subq.l #1,d1
    48ac:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    48b0:	   '-> move.l 1cd3c <sceneWidth>,d0
    48b6:	       cmp.l 32(sp),d0
    48ba:	   ,-- bge.s 48ca <drawLine+0x64>
    48bc:	   |   move.l 1cd3c <sceneWidth>,d0
    48c2:	   |   move.l d0,d1
    48c4:	   |   subq.l #1,d1
    48c6:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    48ca:	   '-> move.l 1cd40 <sceneHeight>,d0
    48d0:	       cmp.l 28(sp),d0
    48d4:	   ,-- bge.s 48e4 <drawLine+0x7e>
    48d6:	   |   move.l 1cd40 <sceneHeight>,d0
    48dc:	   |   move.l d0,d1
    48de:	   |   subq.l #1,d1
    48e0:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    48e4:	   '-> move.l 1cd40 <sceneHeight>,d0
    48ea:	       cmp.l 36(sp),d0
    48ee:	   ,-- bge.s 48fe <drawLine+0x98>
    48f0:	   |   move.l 1cd40 <sceneHeight>,d0
    48f6:	   |   move.l d0,d1
    48f8:	   |   subq.l #1,d1
    48fa:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    48fe:	   '-> move.l 24(sp),d0
    4902:	       cmp.l 32(sp),d0
    4906:	,----- ble.s 4922 <drawLine+0xbc>
		x = x2; 
    4908:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    490e:	|      tst.w 10(sp)
    4912:	|      seq d0
    4914:	|      neg.b d0
    4916:	|      move.b d0,d0
    4918:	|      andi.w #255,d0
    491c:	|      move.w d0,10(sp)
    4920:	|  ,-- bra.s 4928 <drawLine+0xc2>
	} else x = x1;
    4922:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4928:	   '-> move.l 28(sp),d1
    492c:	       cmp.l 36(sp),d1
    4930:	,----- ble.s 494c <drawLine+0xe6>
		y = y2; 
    4932:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4938:	|      tst.w 10(sp)
    493c:	|      seq d0
    493e:	|      neg.b d0
    4940:	|      move.b d0,d0
    4942:	|      andi.w #255,d0
    4946:	|      move.w d0,10(sp)
    494a:	|  ,-- bra.s 4952 <drawLine+0xec>
	} else y = y1;	
    494c:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4952:	   '-> move.l 32(sp),d0
    4956:	       sub.l 24(sp),d0
    495a:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    495e:	       move.l 6(sp),d0
    4962:	   ,-- bpl.s 4966 <drawLine+0x100>
    4964:	   |   neg.l d0
    4966:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    496a:	       move.l 36(sp),d1
    496e:	       sub.l 28(sp),d1
    4972:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4976:	       move.l 2(sp),d0
    497a:	   ,-- bpl.s 497e <drawLine+0x118>
    497c:	   |   neg.l d0
    497e:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4982:	       tst.l 6(sp)
    4986:	   ,-- bne.s 49aa <drawLine+0x144>
		diffX = 1;
    4988:	   |   moveq #1,d0
    498a:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    498e:	   |   move.l 1cd3c <sceneWidth>,d0
    4994:	   |   subq.l #1,d0
    4996:	   |   cmp.l 16(sp),d0
    499a:	   +-- bne.s 49aa <drawLine+0x144>
    499c:	   |   move.l 1cd3c <sceneWidth>,d0
    49a2:	   |   move.l d0,d1
    49a4:	   |   subq.l #2,d1
    49a6:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    49aa:	   '-> tst.l 2(sp)
    49ae:	   ,-- bne.s 49d2 <drawLine+0x16c>
		diffY = 1;
    49b0:	   |   moveq #1,d0
    49b2:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    49b6:	   |   move.l 1cd40 <sceneHeight>,d0
    49bc:	   |   subq.l #1,d0
    49be:	   |   cmp.l 12(sp),d0
    49c2:	   +-- bne.s 49d2 <drawLine+0x16c>
    49c4:	   |   move.l 1cd40 <sceneHeight>,d0
    49ca:	   |   move.l d0,d1
    49cc:	   |   subq.l #2,d1
    49ce:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    49d2:	   '-> pea 185f1 <PutChar+0x6f9>
    49d8:	       jsr 17456 <KPrintF>
    49de:	       addq.l #4,sp
	
}
    49e0:	       nop
    49e2:	       lea 20(sp),sp
    49e6:	       rts

000049e8 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    49e8:	                      lea -24(sp),sp
    49ec:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    49ee:	                      move.l 1cc00 <firstTexture>,d0
    49f4:	,-------------------- beq.w 4ad2 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    49f8:	|                     clr.l 24(sp)
    49fc:	|     ,-------------- bra.w 4ac6 <deleteTextures+0xde>
			BOOL found = FALSE;
    4a00:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4a04:	|  |  |               move.l 1cc00 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4a0c:	|  |  |               movea.l 20(sp),a0
    4a10:	|  |  |               move.l (a0),d1
    4a12:	|  |  |               move.l 24(sp),d0
    4a16:	|  |  |               add.l d0,d0
    4a18:	|  |  |               add.l d0,d0
    4a1a:	|  |  |               movea.l 36(sp),a0
    4a1e:	|  |  |               adda.l d0,a0
    4a20:	|  |  |               move.l (a0),d0
    4a22:	|  |  |               cmp.l d1,d0
    4a24:	|  |  |  ,----------- bne.w 4ab8 <deleteTextures+0xd0>
				found = TRUE;
    4a28:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4a2e:	|  |  |  |            movea.l 20(sp),a0
    4a32:	|  |  |  |            move.l 12(a0),d0
    4a36:	|  |  |  |            move.l d0,1cc00 <firstTexture>
				FreeVec(list);
    4a3c:	|  |  |  |            move.l 20(sp),6(sp)
    4a42:	|  |  |  |            move.l 1cca4 <SysBase>,d0
    4a48:	|  |  |  |            movea.l d0,a6
    4a4a:	|  |  |  |            movea.l 6(sp),a1
    4a4e:	|  |  |  |            jsr -690(a6)
				continue;
    4a52:	|  |  |  |  ,-------- bra.s 4ac2 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4a54:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4a58:	|  |  |  |  |  |      movea.l 12(a0),a0
    4a5c:	|  |  |  |  |  |      move.l (a0),d1
    4a5e:	|  |  |  |  |  |      move.l 24(sp),d0
    4a62:	|  |  |  |  |  |      add.l d0,d0
    4a64:	|  |  |  |  |  |      add.l d0,d0
    4a66:	|  |  |  |  |  |      movea.l 36(sp),a0
    4a6a:	|  |  |  |  |  |      adda.l d0,a0
    4a6c:	|  |  |  |  |  |      move.l (a0),d0
    4a6e:	|  |  |  |  |  |      cmp.l d1,d0
    4a70:	|  |  |  |  |  |  ,-- bne.s 4aae <deleteTextures+0xc6>
					found = TRUE;
    4a72:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4a78:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4a7c:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4a82:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4a86:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4a8a:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4a8e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4a92:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4a96:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4a9c:	|  |  |  |  |  |  |   move.l 1cca4 <SysBase>,d0
    4aa2:	|  |  |  |  |  |  |   movea.l d0,a6
    4aa4:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4aa8:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4aac:	|  |  |  |  +--|--|-- bra.s 4ac2 <deleteTextures+0xda>
				}
				list = list->next;
    4aae:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4ab2:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4ab8:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4abc:	|  |  |     |  |      move.l 12(a0),d0
    4ac0:	|  |  |     |  '----- bne.s 4a54 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4ac2:	|  |  |     '-------> addq.l #1,24(sp)
    4ac6:	|  |  '-------------> move.l 24(sp),d0
    4aca:	|  |                  cmp.l 32(sp),d0
    4ace:	|  '----------------- bcs.w 4a00 <deleteTextures+0x18>
			}
		}
	}
}
    4ad2:	'-------------------> nop
    4ad4:	                      movea.l (sp)+,a6
    4ad6:	                      lea 24(sp),sp
    4ada:	                      rts

00004adc <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4adc:	subq.l #4,sp
    4ade:	move.l 8(sp),d0
    4ae2:	move.w d0,d0
    4ae4:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4ae8:	pea 18614 <PutChar+0x71c>
    4aee:	jsr 17456 <KPrintF>
    4af4:	addq.l #4,sp
}
    4af6:	nop
    4af8:	addq.l #4,sp
    4afa:	rts

00004afc <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4afc:	       moveq #-1,d0
    4afe:	       cmp.l 4(sp),d0
    4b02:	   ,-- bne.s 4b08 <resourceNameFromNum+0xc>
    4b04:	   |   moveq #0,d0
    4b06:	,--|-- bra.s 4b40 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4b08:	|  '-> move.l 1cc80 <numResourceNames>,d0
    4b0e:	|  ,-- bne.s 4b18 <resourceNameFromNum+0x1c>
    4b10:	|  |   move.l #99908,d0
    4b16:	+--|-- bra.s 4b40 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4b18:	|  '-> move.l 1cc80 <numResourceNames>,d0
    4b1e:	|      cmp.l 4(sp),d0
    4b22:	|  ,-- ble.s 4b3a <resourceNameFromNum+0x3e>
    4b24:	|  |   move.l 1cc38 <allResourceNames>,d1
    4b2a:	|  |   move.l 4(sp),d0
    4b2e:	|  |   add.l d0,d0
    4b30:	|  |   add.l d0,d0
    4b32:	|  |   movea.l d1,a0
    4b34:	|  |   adda.l d0,a0
    4b36:	|  |   move.l (a0),d0
    4b38:	+--|-- bra.s 4b40 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4b3a:	|  '-> move.l #99917,d0
    4b40:	'----> rts

00004b42 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4b42:	          lea -44(sp),sp
    4b46:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4b4a:	          move.l #320,1cbf8 <winWidth>
    winHeight = 256;
    4b54:	          move.l #256,1cbfc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4b5e:	          tst.l 60(sp)
    4b62:	      ,-- bne.s 4b7a <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4b64:	      |   pea 1865e <PutChar+0x766>
    4b6a:	      |   jsr b8 <copyString>
    4b70:	      |   addq.l #4,sp
    4b72:	      |   move.l d0,1cc10 <bundleFolder>
    4b78:	   ,--|-- bra.s 4b90 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4b7a:	   |  '-> movea.l 64(sp),a0
    4b7e:	   |      move.l (a0),d0
    4b80:	   |      move.l d0,-(sp)
    4b82:	   |      jsr b8 <copyString>
    4b88:	   |      addq.l #4,sp
    4b8a:	   |      move.l d0,1cc10 <bundleFolder>
	}
    
	int lastSlash = -1;
    4b90:	   '----> moveq #-1,d0
    4b92:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4b96:	          clr.l 44(sp)
    4b9a:	   ,----- bra.s 4bbc <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4b9c:	,--|----> move.l 1cc10 <bundleFolder>,d1
    4ba2:	|  |      move.l 44(sp),d0
    4ba6:	|  |      movea.l d1,a0
    4ba8:	|  |      adda.l d0,a0
    4baa:	|  |      move.b (a0),d0
    4bac:	|  |      cmpi.b #47,d0
    4bb0:	|  |  ,-- bne.s 4bb8 <main_sludge+0x76>
    4bb2:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4bb8:	|  |  '-> addq.l #1,44(sp)
    4bbc:	|  '----> move.l 1cc10 <bundleFolder>,d1
    4bc2:	|         move.l 44(sp),d0
    4bc6:	|         movea.l d1,a0
    4bc8:	|         adda.l d0,a0
    4bca:	|         move.b (a0),d0
    4bcc:	'-------- bne.s 4b9c <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4bce:	          move.l 1cc10 <bundleFolder>,d0
    4bd4:	          move.l 48(sp),d1
    4bd8:	          addq.l #1,d1
    4bda:	          movea.l d0,a0
    4bdc:	          adda.l d1,a0
    4bde:	          clr.b (a0)

	if (argc > 1) {
    4be0:	          moveq #1,d0
    4be2:	          cmp.l 60(sp),d0
    4be6:	      ,-- bge.s 4c02 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4be8:	      |   move.l 60(sp),d0
    4bec:	      |   addi.l #1073741823,d0
    4bf2:	      |   add.l d0,d0
    4bf4:	      |   add.l d0,d0
    4bf6:	      |   movea.l 64(sp),a0
    4bfa:	      |   adda.l d0,a0
    4bfc:	      |   move.l (a0),52(sp)
    4c00:	   ,--|-- bra.s 4c5c <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4c02:	   |  '-> move.l 1cc10 <bundleFolder>,d0
    4c08:	   |      pea 18664 <PutChar+0x76c>
    4c0e:	   |      move.l d0,-(sp)
    4c10:	   |      jsr 13ea2 <joinStrings>
    4c16:	   |      addq.l #8,sp
    4c18:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4c1c:	   |      move.l 52(sp),-(sp)
    4c20:	   |      jsr 13d9c <fileExists>
    4c26:	   |      addq.l #4,sp
    4c28:	   |      tst.b d0
    4c2a:	   +----- bne.s 4c5c <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4c2c:	   |      move.l 52(sp),40(sp)
    4c32:	   |      move.l 1cca4 <SysBase>,d0
    4c38:	   |      movea.l d0,a6
    4c3a:	   |      movea.l 40(sp),a1
    4c3e:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4c42:	   |      move.l 1cc10 <bundleFolder>,d0
    4c48:	   |      pea 18671 <PutChar+0x779>
    4c4e:	   |      move.l d0,-(sp)
    4c50:	   |      jsr 13ea2 <joinStrings>
    4c56:	   |      addq.l #8,sp
    4c58:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4c5c:	   '----> pea 1867a <PutChar+0x782>
    4c62:	          jsr 17456 <KPrintF>
    4c68:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4c6a:	          move.l 52(sp),-(sp)
    4c6e:	          jsr 13d9c <fileExists>
    4c74:	          addq.l #4,sp
    4c76:	          tst.b d0
    4c78:	      ,-- bne.s 4cd0 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4c7a:	      |   move.l 1ccac <DOSBase>,d0
    4c80:	      |   movea.l d0,a6
    4c82:	      |   jsr -60(a6)
    4c86:	      |   move.l d0,28(sp)
    4c8a:	      |   move.l 28(sp),d0
    4c8e:	      |   move.l d0,24(sp)
    4c92:	      |   move.l #99962,20(sp)
    4c9a:	      |   moveq #21,d0
    4c9c:	      |   move.l d0,16(sp)
    4ca0:	      |   move.l 1ccac <DOSBase>,d0
    4ca6:	      |   movea.l d0,a6
    4ca8:	      |   move.l 24(sp),d1
    4cac:	      |   move.l 20(sp),d2
    4cb0:	      |   move.l 16(sp),d3
    4cb4:	      |   jsr -48(a6)
    4cb8:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4cbc:	      |   pea 1867a <PutChar+0x782>
    4cc2:	      |   jsr 17456 <KPrintF>
    4cc8:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4cca:	      |   moveq #0,d0
    4ccc:	,-----|-- bra.w 4ece <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4cd0:	|     '-> pea 18690 <PutChar+0x798>
    4cd6:	|         jsr 17456 <KPrintF>
    4cdc:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4cde:	|         move.l 52(sp),-(sp)
    4ce2:	|         jsr 4ed8 <setGameFilePath>
    4ce8:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4cea:	|         move.l 52(sp),-(sp)
    4cee:	|         jsr 6422 <initSludge>
    4cf4:	|         addq.l #4,sp
    4cf6:	|         tst.w d0
    4cf8:	|     ,-- bne.s 4d00 <main_sludge+0x1be>
    4cfa:	|     |   moveq #0,d0
    4cfc:	+-----|-- bra.w 4ece <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4d00:	|     '-> move.l 1cbf8 <winWidth>,d0
    4d06:	|         cmpi.l #320,d0
    4d0c:	|     ,-- bne.s 4d1c <main_sludge+0x1da>
    4d0e:	|     |   move.l 1cbfc <winHeight>,d0
    4d14:	|     |   cmpi.l #256,d0
    4d1a:	|  ,--|-- beq.s 4d3e <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4d1c:	|  |  '-> pea 186a1 <PutChar+0x7a9>
    4d22:	|  |      jsr 17456 <KPrintF>
    4d28:	|  |      addq.l #4,sp
		winWidth = 320;
    4d2a:	|  |      move.l #320,1cbf8 <winWidth>
		winHeight = 256;
    4d34:	|  |      move.l #256,1cbfc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4d3e:	|  '----> pea 1871e <PutChar+0x826>
    4d44:	|         jsr 17456 <KPrintF>
    4d4a:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4d4c:	|         move.l 1cbfc <winHeight>,d0
    4d52:	|         move.l d0,d1
    4d54:	|         move.l 1cbf8 <winWidth>,d0
    4d5a:	|         move.l d1,-(sp)
    4d5c:	|         move.l d0,-(sp)
    4d5e:	|         jsr d568 <resizeBackdrop>
    4d64:	|         addq.l #8,sp
    4d66:	|         tst.w d0
    4d68:	|     ,-- bne.s 4d7e <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4d6a:	|     |   pea 18731 <PutChar+0x839>
    4d70:	|     |   jsr 17456 <KPrintF>
    4d76:	|     |   addq.l #4,sp
		return FALSE;
    4d78:	|     |   moveq #0,d0
    4d7a:	+-----|-- bra.w 4ece <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4d7e:	|     '-> pea 18757 <PutChar+0x85f>
    4d84:	|         jsr 17456 <KPrintF>
    4d8a:	|         addq.l #4,sp
	if (! initPeople ())
    4d8c:	|         jsr aa82 <initPeople>
    4d92:	|         tst.w d0
    4d94:	|     ,-- bne.s 4daa <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4d96:	|     |   pea 18764 <PutChar+0x86c>
    4d9c:	|     |   jsr 17456 <KPrintF>
    4da2:	|     |   addq.l #4,sp
		return FALSE;
    4da4:	|     |   moveq #0,d0
    4da6:	+-----|-- bra.w 4ece <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4daa:	|     '-> pea 18785 <PutChar+0x88d>
    4db0:	|         jsr 17456 <KPrintF>
    4db6:	|         addq.l #4,sp
	if (! initFloor ())
    4db8:	|         jsr 1680c <initFloor>
    4dbe:	|         tst.w d0
    4dc0:	|     ,-- bne.s 4dd6 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4dc2:	|     |   pea 18791 <PutChar+0x899>
    4dc8:	|     |   jsr 17456 <KPrintF>
    4dce:	|     |   addq.l #4,sp
		
		return FALSE;
    4dd0:	|     |   moveq #0,d0
    4dd2:	+-----|-- bra.w 4ece <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4dd6:	|     '-> pea 187b1 <PutChar+0x8b9>
    4ddc:	|         jsr 17456 <KPrintF>
    4de2:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4de4:	|         jsr d724 <initObjectTypes>
    4dea:	|         tst.w d0
    4dec:	|     ,-- bne.s 4e02 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4dee:	|     |   pea 187c2 <PutChar+0x8ca>
    4df4:	|     |   jsr 17456 <KPrintF>
    4dfa:	|     |   addq.l #4,sp
		return FALSE;
    4dfc:	|     |   moveq #0,d0
    4dfe:	+-----|-- bra.w 4ece <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4e02:	|     '-> pea 187e8 <PutChar+0x8f0>
    4e08:	|         jsr 17456 <KPrintF>
    4e0e:	|         addq.l #4,sp
	initSpeech ();
    4e10:	|         jsr 3ff2 <initSpeech>
	KPrintF("Init status bar\n");
    4e16:	|         pea 187f5 <PutChar+0x8fd>
    4e1c:	|         jsr 17456 <KPrintF>
    4e22:	|         addq.l #4,sp
	initStatusBar ();
    4e24:	|         jsr 8482 <initStatusBar>

	KPrintF("Get numbered string\n");
    4e2a:	|         pea 18806 <PutChar+0x90e>
    4e30:	|         jsr 17456 <KPrintF>
    4e36:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4e38:	|         pea 1 <_start+0x1>
    4e3c:	|         jsr 778c <getNumberedString>
    4e42:	|         addq.l #4,sp
    4e44:	|         move.l d0,1cc08 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4e4a:	|         pea 1881b <PutChar+0x923>
    4e50:	|         jsr 17456 <KPrintF>
    4e56:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4e58:	|         move.l 1cc74 <noStack>,d0
    4e5e:	|         pea 1 <_start+0x1>
    4e62:	|         move.l d0,-(sp)
    4e64:	|         clr.l -(sp)
    4e66:	|         clr.l -(sp)
    4e68:	|         clr.l -(sp)
    4e6a:	|         jsr 75e4 <startNewFunctionNum>
    4e70:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4e74:	|         pea 18833 <PutChar+0x93b>
    4e7a:	|         jsr 17456 <KPrintF>
    4e80:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4e82:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4e8a:	|         clr.l 1cc14 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4e90:	|     ,-- bra.s 4eb0 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4e92:	|  ,--|-> jsr 7464 <sludgeDisplay>
		CsiCheckInput();
    4e98:	|  |  |   jsr d086 <CsiCheckInput>
		walkAllPeople();
    4e9e:	|  |  |   jsr c040 <walkAllPeople>
		handleInput();
    4ea4:	|  |  |   jsr 61bc <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4eaa:	|  |  |   jsr 1738a <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4eb0:	|  |  '-> move.l 1cc14 <weAreDoneSoQuit>,d0
    4eb6:	|  '----- beq.s 4e92 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4eb8:	|         move.l 52(sp),32(sp)
    4ebe:	|         move.l 1cca4 <SysBase>,d0
    4ec4:	|         movea.l d0,a6
    4ec6:	|         movea.l 32(sp),a1
    4eca:	|         jsr -690(a6)
}
    4ece:	'-------> movem.l (sp)+,d2-d3/a6
    4ed2:	          lea 44(sp),sp
    4ed6:	          rts

00004ed8 <setGameFilePath>:

void setGameFilePath (char * f) {
    4ed8:	          lea -1104(sp),sp
    4edc:	          move.l a6,-(sp)
    4ede:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4ee0:	          move.l #1112,d0
    4ee6:	          add.l sp,d0
    4ee8:	          addi.l #-1102,d0
    4eee:	          move.l d0,1100(sp)
    4ef2:	          move.l #998,1096(sp)
    4efa:	          move.l 1ccac <DOSBase>,d0
    4f00:	          movea.l d0,a6
    4f02:	          move.l 1100(sp),d1
    4f06:	          move.l 1096(sp),d2
    4f0a:	          jsr -564(a6)
    4f0e:	          move.w d0,1094(sp)
    4f12:	          move.w 1094(sp),d0
    4f16:	      ,-- bne.s 4f26 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4f18:	      |   pea 18846 <PutChar+0x94e>
    4f1e:	      |   jsr 17456 <KPrintF>
    4f24:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4f26:	      '-> moveq #-1,d0
    4f28:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4f2c:	          clr.l 1104(sp)
    4f30:	   ,----- bra.s 4f4e <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4f32:	,--|----> move.l 1104(sp),d0
    4f36:	|  |      movea.l 1116(sp),a0
    4f3a:	|  |      adda.l d0,a0
    4f3c:	|  |      move.b (a0),d0
    4f3e:	|  |      cmpi.b #47,d0
    4f42:	|  |  ,-- bne.s 4f4a <setGameFilePath+0x72>
    4f44:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4f4a:	|  |  '-> addq.l #1,1104(sp)
    4f4e:	|  '----> move.l 1104(sp),d0
    4f52:	|         movea.l 1116(sp),a0
    4f56:	|         adda.l d0,a0
    4f58:	|         move.b (a0),d0
    4f5a:	'-------- bne.s 4f32 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4f5c:	          moveq #-1,d0
    4f5e:	          cmp.l 1108(sp),d0
    4f62:	   ,----- beq.s 4fdc <setGameFilePath+0x104>
		f[got] = 0;	
    4f64:	   |      move.l 1108(sp),d0
    4f68:	   |      movea.l 1116(sp),a0
    4f6c:	   |      adda.l d0,a0
    4f6e:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4f70:	   |      move.l 1116(sp),1090(sp)
    4f76:	   |      moveq #-2,d0
    4f78:	   |      move.l d0,1086(sp)
    4f7c:	   |      move.l 1ccac <DOSBase>,d0
    4f82:	   |      movea.l d0,a6
    4f84:	   |      move.l 1090(sp),d1
    4f88:	   |      move.l 1086(sp),d2
    4f8c:	   |      jsr -84(a6)
    4f90:	   |      move.l d0,1082(sp)
    4f94:	   |      move.l 1082(sp),d0
    4f98:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4f9c:	   |      move.l 1078(sp),1074(sp)
    4fa2:	   |      move.l 1ccac <DOSBase>,d0
    4fa8:	   |      movea.l d0,a6
    4faa:	   |      move.l 1074(sp),d1
    4fae:	   |      jsr -126(a6)
    4fb2:	   |      move.l d0,1070(sp)
    4fb6:	   |      move.l 1070(sp),d0
    4fba:	   |  ,-- bne.s 4fce <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4fbc:	   |  |   move.l 1116(sp),-(sp)
    4fc0:	   |  |   pea 1886c <PutChar+0x974>
    4fc6:	   |  |   jsr 17456 <KPrintF>
    4fcc:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4fce:	   |  '-> move.l 1108(sp),d0
    4fd2:	   |      movea.l 1116(sp),a0
    4fd6:	   |      adda.l d0,a0
    4fd8:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4fdc:	   '----> move.l #400,1066(sp)
    4fe4:	          clr.l 1062(sp)
    4fe8:	          move.l 1cca4 <SysBase>,d0
    4fee:	          movea.l d0,a6
    4ff0:	          move.l 1066(sp),d0
    4ff4:	          move.l 1062(sp),d1
    4ff8:	          jsr -684(a6)
    4ffc:	          move.l d0,1058(sp)
    5000:	          move.l 1058(sp),d0
    5004:	          move.l d0,1cc0c <gamePath>
	if (gamePath==0) {
    500a:	          move.l 1cc0c <gamePath>,d0
    5010:	      ,-- bne.s 5024 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5012:	      |   pea 1889f <PutChar+0x9a7>
    5018:	      |   jsr 17456 <KPrintF>
    501e:	      |   addq.l #4,sp
    5020:	   ,--|-- bra.w 510c <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5024:	   |  '-> move.l 1cc0c <gamePath>,1054(sp)
    502c:	   |      moveq #-2,d0
    502e:	   |      move.l d0,1050(sp)
    5032:	   |      move.l 1ccac <DOSBase>,d0
    5038:	   |      movea.l d0,a6
    503a:	   |      move.l 1054(sp),d1
    503e:	   |      move.l 1050(sp),d2
    5042:	   |      jsr -84(a6)
    5046:	   |      move.l d0,1046(sp)
    504a:	   |      move.l 1046(sp),d0
    504e:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    5052:	   |      move.l 1042(sp),1038(sp)
    5058:	   |      move.l 1ccac <DOSBase>,d0
    505e:	   |      movea.l d0,a6
    5060:	   |      move.l 1038(sp),d1
    5064:	   |      jsr -126(a6)
    5068:	   |      move.l d0,1034(sp)
    506c:	   |      move.l 1034(sp),d0
    5070:	   |  ,-- bne.s 5080 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    5072:	   |  |   pea 188da <PutChar+0x9e2>
    5078:	   |  |   jsr 17456 <KPrintF>
    507e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    5080:	   |  '-> move.l #1112,d0
    5086:	   |      add.l sp,d0
    5088:	   |      addi.l #-1102,d0
    508e:	   |      move.l d0,1030(sp)
    5092:	   |      moveq #-2,d0
    5094:	   |      move.l d0,1026(sp)
    5098:	   |      move.l 1ccac <DOSBase>,d0
    509e:	   |      movea.l d0,a6
    50a0:	   |      move.l 1030(sp),d1
    50a4:	   |      move.l 1026(sp),d2
    50a8:	   |      jsr -84(a6)
    50ac:	   |      move.l d0,1022(sp)
    50b0:	   |      move.l 1022(sp),d0
    50b4:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    50b8:	   |      move.l 1042(sp),1018(sp)
    50be:	   |      move.l 1ccac <DOSBase>,d0
    50c4:	   |      movea.l d0,a6
    50c6:	   |      move.l 1018(sp),d1
    50ca:	   |      jsr -126(a6)
    50ce:	   |      move.l d0,1014(sp)
    50d2:	   |      move.l 1014(sp),d0
    50d6:	   |  ,-- bne.s 50ec <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    50d8:	   |  |   moveq #10,d0
    50da:	   |  |   add.l sp,d0
    50dc:	   |  |   move.l d0,-(sp)
    50de:	   |  |   pea 18906 <PutChar+0xa0e>
    50e4:	   |  |   jsr 17456 <KPrintF>
    50ea:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    50ec:	   |  '-> move.l 1cc0c <gamePath>,d0
    50f2:	   +----- beq.s 510c <setGameFilePath+0x234>
    50f4:	   |      move.l 1cc0c <gamePath>,1010(sp)
    50fc:	   |      move.l 1cca4 <SysBase>,d0
    5102:	   |      movea.l d0,a6
    5104:	   |      movea.l 1010(sp),a1
    5108:	   |      jsr -690(a6)
}
    510c:	   '----> move.l (sp)+,d2
    510e:	          movea.l (sp)+,a6
    5110:	          lea 1104(sp),sp
    5114:	          rts

00005116 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5116:	,-------> lea -16(sp),sp
    511a:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    511c:	|         move.l 24(sp),d0
    5120:	|         move.l d0,-(sp)
    5122:	|         pea 18a0e <PutChar+0xb16>
    5128:	|         jsr 17456 <KPrintF>
    512e:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    5130:	|         move.l 24(sp),-(sp)
    5134:	|         jsr 71e0 <pauseFunction>
    513a:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    513c:	|     ,-- bra.s 514e <abortFunction+0x38>
    513e:	|  ,--|-> moveq #24,d0
    5140:	|  |  |   add.l 24(sp),d0
    5144:	|  |  |   move.l d0,-(sp)
    5146:	|  |  |   jsr 152fa <trimStack>
    514c:	|  |  |   addq.l #4,sp
    514e:	|  |  '-> movea.l 24(sp),a0
    5152:	|  |      move.l 24(a0),d0
    5156:	|  '----- bne.s 513e <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    5158:	|         movea.l 24(sp),a0
    515c:	|         move.l 4(a0),12(sp)
    5162:	|         move.l 1cca4 <SysBase>,d0
    5168:	|         movea.l d0,a6
    516a:	|         movea.l 12(sp),a1
    516e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5172:	|         clr.l 16(sp)
    5176:	|     ,-- bra.s 5196 <abortFunction+0x80>
    5178:	|  ,--|-> movea.l 24(sp),a0
    517c:	|  |  |   move.l 20(a0),d1
    5180:	|  |  |   move.l 16(sp),d0
    5184:	|  |  |   lsl.l #3,d0
    5186:	|  |  |   add.l d1,d0
    5188:	|  |  |   move.l d0,-(sp)
    518a:	|  |  |   jsr 14bc4 <unlinkVar>
    5190:	|  |  |   addq.l #4,sp
    5192:	|  |  |   addq.l #1,16(sp)
    5196:	|  |  '-> movea.l 24(sp),a0
    519a:	|  |      move.l 8(a0),d0
    519e:	|  |      cmp.l 16(sp),d0
    51a2:	|  '----- bgt.s 5178 <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    51a4:	|         movea.l 24(sp),a0
    51a8:	|         move.l 8(a0),d0
    51ac:	|     ,-- ble.s 51c8 <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    51ae:	|     |   movea.l 24(sp),a0
    51b2:	|     |   move.l 20(a0),8(sp)
    51b8:	|     |   move.l 1cca4 <SysBase>,d0
    51be:	|     |   movea.l d0,a6
    51c0:	|     |   movea.l 8(sp),a1
    51c4:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    51c8:	|     '-> moveq #28,d0
    51ca:	|         add.l 24(sp),d0
    51ce:	|         move.l d0,-(sp)
    51d0:	|         jsr 14bc4 <unlinkVar>
    51d6:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    51d8:	|         movea.l 24(sp),a0
    51dc:	|         move.l 40(a0),d0
    51e0:	|     ,-- beq.s 51f2 <abortFunction+0xdc>
    51e2:	|     |   movea.l 24(sp),a0
    51e6:	|     |   move.l 40(a0),d0
    51ea:	|     |   move.l d0,-(sp)
    51ec:	'-----|-- jsr 5116 <abortFunction>(pc)
    51f0:	      |   addq.l #4,sp
	FreeVec(fun);
    51f2:	      '-> move.l 24(sp),4(sp)
    51f8:	          move.l 1cca4 <SysBase>,d0
    51fe:	          movea.l d0,a6
    5200:	          movea.l 4(sp),a1
    5204:	          jsr -690(a6)
	fun = NULL;
    5208:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    520c:	          pea 18a28 <PutChar+0xb30>
    5212:	          jsr 17456 <KPrintF>
    5218:	          addq.l #4,sp
}
    521a:	          nop
    521c:	          movea.l (sp)+,a6
    521e:	          lea 16(sp),sp
    5222:	          rts

00005224 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5224:	          subq.l #8,sp
	int n = 0;
    5226:	          clr.l 4(sp)
	*killedMyself = FALSE;
    522a:	          movea.l 20(sp),a0
    522e:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5230:	          move.l 1cc3c <allRunningFunctions>,(sp)
	while (fun) {
    5236:	   ,----- bra.s 5264 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    5238:	,--|----> movea.l (sp),a0
    523a:	|  |      move.l (a0),d0
    523c:	|  |      cmp.l 12(sp),d0
    5240:	|  |  ,-- bne.s 525e <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5242:	|  |  |   movea.l (sp),a0
    5244:	|  |  |   move.w #1,54(a0)
			n++;
    524a:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    524e:	|  |  |   move.l (sp),d0
    5250:	|  |  |   cmp.l 16(sp),d0
    5254:	|  |  +-- bne.s 525e <cancelAFunction+0x3a>
    5256:	|  |  |   movea.l 20(sp),a0
    525a:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    525e:	|  |  '-> movea.l (sp),a0
    5260:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5264:	|  '----> tst.l (sp)
    5266:	'-------- bne.s 5238 <cancelAFunction+0x14>
	}
	return n;
    5268:	          move.l 4(sp),d0
}
    526c:	          addq.l #8,sp
    526e:	          rts

00005270 <completeTimers>:


void completeTimers () {
    5270:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5272:	          move.l 1cc3c <allRunningFunctions>,(sp)

	while (thisFunction) {
    5278:	   ,----- bra.s 528e <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    527a:	,--|----> movea.l (sp),a0
    527c:	|  |      move.b 56(a0),d0
    5280:	|  |  ,-- bne.s 5288 <completeTimers+0x18>
    5282:	|  |  |   movea.l (sp),a0
    5284:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    5288:	|  |  '-> movea.l (sp),a0
    528a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    528e:	|  '----> tst.l (sp)
    5290:	'-------- bne.s 527a <completeTimers+0xa>
	}
}
    5292:	          nop
    5294:	          nop
    5296:	          addq.l #4,sp
    5298:	          rts

0000529a <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    529a:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    529e:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    52a4:	                                                             movea.l 80(sp),a0
    52a8:	                                                             move.w 54(a0),d0
    52ac:	,----------------------------------------------------------- beq.w 613a <continueFunction+0xea0>
		abortFunction (fun);
    52b0:	|                                                            move.l 80(sp),-(sp)
    52b4:	|                                                            jsr 5116 <abortFunction>
    52ba:	|                                                            addq.l #4,sp
		return TRUE;
    52bc:	|                                                            moveq #1,d0
    52be:	|  ,-------------------------------------------------------- bra.w 6144 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    52c2:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    52c8:	|  |  |                                                      movea.l 80(sp),a0
    52cc:	|  |  |                                                      move.l 4(a0),d1
    52d0:	|  |  |                                                      movea.l 80(sp),a0
    52d4:	|  |  |                                                      move.l 36(a0),d0
    52d8:	|  |  |                                                      lsl.l #3,d0
    52da:	|  |  |                                                      movea.l d1,a0
    52dc:	|  |  |                                                      adda.l d0,a0
    52de:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    52e4:	|  |  |                                                      movea.l 80(sp),a0
    52e8:	|  |  |                                                      move.l 4(a0),d1
    52ec:	|  |  |                                                      movea.l 80(sp),a0
    52f0:	|  |  |                                                      move.l 36(a0),d0
    52f4:	|  |  |                                                      lsl.l #3,d0
    52f6:	|  |  |                                                      movea.l d1,a0
    52f8:	|  |  |                                                      adda.l d0,a0
    52fa:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    52fe:	|  |  |                                                      moveq #41,d0
    5300:	|  |  |                                                      cmp.l 64(sp),d0
    5304:	|  |  |  ,-------------------------------------------------- bcs.w 60ee <continueFunction+0xe54>
    5308:	|  |  |  |                                                   move.l 64(sp),d0
    530c:	|  |  |  |                                                   add.l d0,d0
    530e:	|  |  |  |                                                   movea.l d0,a0
    5310:	|  |  |  |                                                   adda.l #21276,a0
    5316:	|  |  |  |                                                   move.w (a0),d0
    5318:	|  |  |  |                                                   jmp (531c <continueFunction+0x82>,pc,d0.w)
    531c:	|  |  |  |                                                   bset d6,(a2)
    531e:	|  |  |  |                                                   ori.w #2670,(a4)
    5322:	|  |  |  |                                                   eori.w #2416,d6
    5326:	|  |  |  |                                                   bchg d4,d2
    5328:	|  |  |  |                                                   bclr d4,(a4)+
    532a:	|  |  |  |                                                   andi.l #181013194,d4
    5330:	|  |  |  |                                                   .short 0x0aca
    5332:	|  |  |  |                                                   .short 0x0aca
    5334:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    533c:	|  |  |  |                                                   .short 0x0aca
    533e:	|  |  |  |                                                   andi.w #906,-(a4)
    5342:	|  |  |  |                                                   bchg d1,196(a2)
    5346:	|  |  |  |                                                   bset d1,580(a4)
    534a:	|  |  |  |                                                   bclr d1,2576(a2)
    534e:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5354:	|  |  |  |                                                   .short 0x0aca
    5356:	|  |  |  |                                                   eori.l #63572682,d0
    535c:	|  |  |  |                                                   .short 0x0aca
    535e:	|  |  |  |                                                   bchg d3,-(a2)
    5360:	|  |  |  |                                                   bchg #-36,(a2)
    5364:	|  |  |  |                                                   .short 0x08cc
    5366:	|  |  |  |                                                   addi.b #14,1038(a0)
    536c:	|  |  |  |                                                   .short 0x040e
    536e:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5372:	|  |  |  |                                                   ori.w #8232,(a0)
    5376:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    537c:	|  |  |  |                                                   ori.w #12136,(a0)
    5380:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    5386:	|  |  |  |                                                   ori.w #12328,(a0)
    538a:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    5390:	|  |  |  |                                                   add.l 44(sp),d1
    5394:	|  |  |  |                                                   moveq #28,d0
    5396:	|  |  |  |                                                   add.l 80(sp),d0
    539a:	|  |  |  |                                                   move.l d1,-(sp)
    539c:	|  |  |  |                                                   move.l d0,-(sp)
    539e:	|  |  |  |                                                   jsr 14e30 <copyVariable>
    53a4:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    53a6:	|  |  |  |                                                   move.l 80(sp),-(sp)
    53aa:	|  |  |  |                                                   jsr 614a <finishFunction>
    53b0:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    53b2:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    53b8:	|  |  |  |                                                   move.l 80(sp),-(sp)
    53bc:	|  |  |  |                                                   jsr 7288 <restartFunction>
    53c2:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    53c4:	|  |  |  |  ,----------------------------------------------- bra.w 6122 <continueFunction+0xe88>
				finishFunction (fun);
    53c8:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    53cc:	|  |  |  |  |                                                jsr 614a <finishFunction>
    53d2:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    53d4:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    53d8:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    53dc:	|  |  |  |  +----------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    53e0:	|  |  |  |  |                                                movea.l 80(sp),a0
    53e4:	|  |  |  |  |                                                move.l 28(a0),d0
    53e8:	|  |  |  |  |                                                moveq #2,d1
    53ea:	|  |  |  |  |                                                cmp.l d0,d1
    53ec:	|  |  |  |  |                                            ,-- beq.s 53f8 <continueFunction+0x15e>
    53ee:	|  |  |  |  |                                            |   moveq #4,d1
    53f0:	|  |  |  |  |                                            |   cmp.l d0,d1
    53f2:	|  |  |  |  |                                         ,--|-- beq.s 5446 <continueFunction+0x1ac>
    53f4:	|  |  |  |  |                                ,--------|--|-- bra.w 552e <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    53f8:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    53fc:	|  |  |  |  |                                |        |      jsr 71e0 <pauseFunction>
    5402:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5404:	|  |  |  |  |                                |        |      moveq #24,d0
    5406:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    540a:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    540e:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5412:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5416:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5418:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    541c:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    5420:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5422:	|  |  |  |  |                                |        |      jsr 75e4 <startNewFunctionNum>
    5428:	|  |  |  |  |                                |        |      lea 20(sp),sp
    542c:	|  |  |  |  |                                |        |      tst.l d0
    542e:	|  |  |  |  |                                |        |  ,-- bne.s 5436 <continueFunction+0x19c>
    5430:	|  |  |  |  |                                |        |  |   clr.w d0
    5432:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6144 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5436:	|  |  |  |  |                                |        |  '-> move.l 1cc3c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    543e:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5442:	|  |  |  |  |                                |  ,-----|----- bra.w 5542 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5446:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    544a:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    544e:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5452:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    5456:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    5458:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    545a:	|  |  |  |  |                                |  |            jsr 13658 <callBuiltIn>
    5460:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5464:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    5468:	|  |  |  |  |                                |  |            moveq #5,d0
    546a:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    546e:	|  |  |  |  |                                |  |  ,-------- bcs.w 552a <continueFunction+0x290>
    5472:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    5476:	|  |  |  |  |                                |  |  |         add.l d0,d0
    5478:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    547a:	|  |  |  |  |                                |  |  |         adda.l #21638,a0
    5480:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5482:	|  |  |  |  |                                |  |  |         jmp (5486 <continueFunction+0x1ec>,pc,d0.w)
    5486:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    548c:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    5490:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    5496:	|  |  |  |  |                                |  |  |         or.w d0,d5
    5498:	|  |  |  |  |                                |  |  |         jsr 17456 <KPrintF>
    549e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    54a0:	|  |  |  |  |                                |  |  |         clr.w d0
    54a2:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6144 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    54a6:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    54aa:	|  |  |  |  |                                |  |  |         jsr 71e0 <pauseFunction>
    54b0:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    54b2:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    54b6:	|  |  |  |  |                                |  |  |  ,----- bra.s 552c <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    54b8:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    54bc:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    54c0:	|  |  |  |  |                                |  |  |  +----- bra.s 552c <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    54c2:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    54c6:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    54cc:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    54ce:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    54d2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    54d6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    54da:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    54dc:	|  |  |  |  |                                |  |  |  |      jsr 15268 <setVariable>
    54e2:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    54e6:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    54ea:	|  |  |  |  |                                |  |  |  |      jsr 71e0 <pauseFunction>
    54f0:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    54f2:	|  |  |  |  |                                |  |  |  |      move.l 1cc74 <noStack>,d1
    54f8:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    54fc:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    54fe:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5500:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5504:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5506:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5508:	|  |  |  |  |                                |  |  |  |      jsr 75e4 <startNewFunctionNum>
    550e:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5512:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5514:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 551c <continueFunction+0x282>
    5516:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5518:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6144 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    551c:	|  |  |  |  |                                |  |  |  |  '-> move.l 1cc3c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5524:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5528:	|  |  |  |  |                                |  |  |  +----- bra.s 552c <continueFunction+0x292>

						default:
						break;
    552a:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    552c:	|  |  |  |  |                                |  +-----'----X bra.s 5542 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    552e:	|  |  |  |  |                                '--|----------> pea 18a8b <PutChar+0xb93>
    5534:	|  |  |  |  |                                   |            jsr 17456 <KPrintF>
    553a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    553c:	|  |  |  |  |                                   |            clr.w d0
    553e:	|  +--|--|--|-----------------------------------|----------- bra.w 6144 <continueFunction+0xeaa>
			}
			break;
    5542:	|  |  |  |  +-----------------------------------'----------X bra.w 6122 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5546:	|  |  |  |  |                                                moveq #28,d0
    5548:	|  |  |  |  |                                                add.l 80(sp),d0
    554c:	|  |  |  |  |                                                clr.l -(sp)
    554e:	|  |  |  |  |                                                clr.l -(sp)
    5550:	|  |  |  |  |                                                move.l d0,-(sp)
    5552:	|  |  |  |  |                                                jsr 15268 <setVariable>
    5558:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    555c:	|  |  |  |  +----------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5560:	|  |  |  |  |                                                move.l 68(sp),d1
    5564:	|  |  |  |  |                                                moveq #28,d0
    5566:	|  |  |  |  |                                                add.l 80(sp),d0
    556a:	|  |  |  |  |                                                move.l d1,-(sp)
    556c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5570:	|  |  |  |  |                                                move.l d0,-(sp)
    5572:	|  |  |  |  |                                                jsr 15268 <setVariable>
    5578:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    557c:	|  |  |  |  +----------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5580:	|  |  |  |  |                                                move.l 68(sp),d1
    5584:	|  |  |  |  |                                                moveq #28,d0
    5586:	|  |  |  |  |                                                add.l 80(sp),d0
    558a:	|  |  |  |  |                                                move.l d1,-(sp)
    558c:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5590:	|  |  |  |  |                                                move.l d0,-(sp)
    5592:	|  |  |  |  |                                                jsr 15268 <setVariable>
    5598:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    559c:	|  |  |  |  +----------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    55a0:	|  |  |  |  |                                                moveq #28,d0
    55a2:	|  |  |  |  |                                                add.l 80(sp),d0
    55a6:	|  |  |  |  |                                                movea.l 80(sp),a0
    55aa:	|  |  |  |  |                                                movea.l 20(a0),a0
    55ae:	|  |  |  |  |                                                move.l 68(sp),d1
    55b2:	|  |  |  |  |                                                lsl.l #3,d1
    55b4:	|  |  |  |  |                                                add.l a0,d1
    55b6:	|  |  |  |  |                                                move.l d0,-(sp)
    55b8:	|  |  |  |  |                                                move.l d1,-(sp)
    55ba:	|  |  |  |  |                                                jsr 14e30 <copyVariable>
    55c0:	|  |  |  |  |                                                addq.l #8,sp
    55c2:	|  |  |  |  |                                                tst.w d0
    55c4:	|  |  |  |  |  ,-------------------------------------------- bne.w 6100 <continueFunction+0xe66>
    55c8:	|  |  |  |  |  |                                             clr.w d0
    55ca:	|  +--|--|--|--|-------------------------------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    55ce:	|  |  |  |  |  |                                             moveq #28,d0
    55d0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    55d4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    55d6:	|  |  |  |  |  |                                             jsr 14eb6 <getBoolean>
    55dc:	|  |  |  |  |  |                                             addq.l #4,sp
    55de:	|  |  |  |  |  |                                             tst.w d0
    55e0:	|  |  |  |  |  |                                      ,----- beq.s 55fc <continueFunction+0x362>
    55e2:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    55e6:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    55ea:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    55ec:	|  |  |  |  |  |                                      |      jsr 14eb6 <getBoolean>
    55f2:	|  |  |  |  |  |                                      |      addq.l #4,sp
    55f4:	|  |  |  |  |  |                                      |      tst.w d0
    55f6:	|  |  |  |  |  |                                      +----- beq.s 55fc <continueFunction+0x362>
    55f8:	|  |  |  |  |  |                                      |      moveq #1,d0
    55fa:	|  |  |  |  |  |                                      |  ,-- bra.s 55fe <continueFunction+0x364>
    55fc:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    55fe:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5600:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5604:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5606:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    560a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    560c:	|  |  |  |  |  |                                             jsr 15268 <setVariable>
    5612:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5616:	|  |  |  |  |  |                                             moveq #24,d0
    5618:	|  |  |  |  |  |                                             add.l 80(sp),d0
    561c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    561e:	|  |  |  |  |  |                                             jsr 152fa <trimStack>
    5624:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5626:	|  |  |  |  +--|-------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    562a:	|  |  |  |  |  |                                             moveq #28,d0
    562c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5630:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5632:	|  |  |  |  |  |                                             jsr 14eb6 <getBoolean>
    5638:	|  |  |  |  |  |                                             addq.l #4,sp
    563a:	|  |  |  |  |  |                                             tst.w d0
    563c:	|  |  |  |  |  |                                         ,-- bne.s 5654 <continueFunction+0x3ba>
    563e:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5642:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5646:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5648:	|  |  |  |  |  |                                         |   jsr 14eb6 <getBoolean>
    564e:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5650:	|  |  |  |  |  |                                         |   tst.w d0
    5652:	|  |  |  |  |  |                                      ,--|-- beq.s 5658 <continueFunction+0x3be>
    5654:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5656:	|  |  |  |  |  |                                      |  ,-- bra.s 565a <continueFunction+0x3c0>
    5658:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    565a:	|  |  |  |  |  |                                         '-> moveq #28,d1
    565c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5660:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5662:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5666:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5668:	|  |  |  |  |  |                                             jsr 15268 <setVariable>
    566e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5672:	|  |  |  |  |  |                                             moveq #24,d0
    5674:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5678:	|  |  |  |  |  |                                             move.l d0,-(sp)
    567a:	|  |  |  |  |  |                                             jsr 152fa <trimStack>
    5680:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5682:	|  |  |  |  +--|-------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5686:	|  |  |  |  |  |                                             move.l 68(sp),d1
    568a:	|  |  |  |  |  |                                             moveq #28,d0
    568c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5690:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5692:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5696:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5698:	|  |  |  |  |  |                                             jsr 15268 <setVariable>
    569e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    56a2:	|  |  |  |  +--|-------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    56a6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    56aa:	|  |  |  |  |  |                                             moveq #28,d0
    56ac:	|  |  |  |  |  |                                             add.l 80(sp),d0
    56b0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    56b2:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    56b6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    56b8:	|  |  |  |  |  |                                             jsr 15268 <setVariable>
    56be:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    56c2:	|  |  |  |  +--|-------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    56c6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    56ca:	|  |  |  |  |  |                                             moveq #28,d0
    56cc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    56d0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    56d2:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    56d6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    56d8:	|  |  |  |  |  |                                             jsr 15268 <setVariable>
    56de:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    56e2:	|  |  |  |  +--|-------------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    56e6:	|  |  |  |  |  |                                             move.l 1cc04 <dialogValue>,d0
    56ec:	|  |  |  |  |  |                                             moveq #1,d1
    56ee:	|  |  |  |  |  |                                             cmp.l d0,d1
    56f0:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6104 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    56f4:	|  |  |  |  |  |  |                                          pea 18aa0 <PutChar+0xba8>
    56fa:	|  |  |  |  |  |  |                                          jsr 17456 <KPrintF>
    5700:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5702:	|  |  |  |  |  |  |                                          clr.w d0
    5704:	|  +--|--|--|--|--|----------------------------------------- bra.w 6144 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5708:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    570c:	|  |  |  |  |  |  |                                          moveq #28,d0
    570e:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5712:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5714:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5716:	|  |  |  |  |  |  |                                          jsr 149fa <loadStringToVar>
    571c:	|  |  |  |  |  |  |                                          addq.l #8,sp
    571e:	|  |  |  |  |  |  |                                          tst.w d0
    5720:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 6108 <continueFunction+0xe6e>
					return FALSE;
    5724:	|  |  |  |  |  |  |  |                                       clr.w d0
    5726:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    572a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    572e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5732:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5734:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5736:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5738:	|  |  |  |  |  |  |  |                                ,----- beq.s 5796 <continueFunction+0x4fc>
    573a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    573c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    573e:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 592a <continueFunction+0x690>
    5742:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5744:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5750 <continueFunction+0x4b6>
    5746:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5748:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    574a:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5796 <continueFunction+0x4fc>
    574c:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 592a <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5750:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5752:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5756:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5782 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5758:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    575a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    575e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5760:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5762:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5764:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15268 <setVariable>
    576a:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    576e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5770:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5774:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5776:	|  |  |  |  |  |  |  |              |                 |  |   jsr 152fa <trimStack>
    577c:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    577e:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5940 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5782:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18ae1 <PutChar+0xbe9>
    5788:	|  |  |  |  |  |  |  |              |  |              |      jsr 17456 <KPrintF>
    578e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5790:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5792:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6144 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5796:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    579a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    579e:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    57a2:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    57a4:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 57ba <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    57a6:	|  |  |  |  |  |  |  |              |  |                 |   pea 18b1d <PutChar+0xc25>
    57ac:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17456 <KPrintF>
    57b2:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    57b4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    57b6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6144 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    57ba:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    57bc:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    57c0:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    57c2:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    57c6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    57ca:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    57cc:	|  |  |  |  |  |  |  |              |  |                     jsr 14976 <getValueType>
    57d2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    57d6:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    57d8:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 57e0 <continueFunction+0x546>
    57da:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    57dc:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6144 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    57e0:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    57e4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    57e8:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    57ea:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    57ec:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    57ee:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5810 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    57f0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    57f4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    57f6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    57fa:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    57fe:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5802:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5804:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5806:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14600 <fastArrayGetByIndex>
    580c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    580e:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5830 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5810:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5814:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5816:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    581a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    581e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5822:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5824:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5826:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5828:	|  |  |  |  |  |  |  |              |  |              |      jsr 1528a <stackGetByIndex>
    582e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5830:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5834:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5836:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    583a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    583c:	|  |  |  |  |  |  |  |              |  |                     jsr 152fa <trimStack>
    5842:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5844:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5848:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5864 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    584a:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    584c:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5850:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5852:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5854:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5856:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15268 <setVariable>
    585c:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5860:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 593e <continueFunction+0x6a4>
						switch (com) {
    5864:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5866:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    586a:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5878 <continueFunction+0x5de>
    586c:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    586e:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5872:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 58c2 <continueFunction+0x628>
    5874:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 590a <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5878:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    587c:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5880:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5884:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5886:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14976 <getValueType>
    588c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5890:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5892:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 589a <continueFunction+0x600>
    5894:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5896:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5924 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    589a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    589c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    589e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    58a2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    58a4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    58a8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    58aa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 15268 <setVariable>
    58b0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    58b4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    58b6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    58b8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    58bc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    58c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5928 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    58c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    58c6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    58ca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    58ce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    58d0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14976 <getValueType>
    58d6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    58da:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    58dc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 58e2 <continueFunction+0x648>
    58de:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    58e0:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5924 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    58e2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    58e4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    58e6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    58ea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    58ec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    58f0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    58f2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15268 <setVariable>
    58f8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    58fc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    58fe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5900:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5904:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5908:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5928 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    590a:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    590c:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5910:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5912:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5916:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14e30 <copyVariable>
    591c:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    591e:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5920:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 593e <continueFunction+0x6a4>
    5922:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5924:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6144 <continueFunction+0xeaa>
				break;
    5928:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 593e <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    592a:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18b3b <PutChar+0xc43>
    5930:	|  |  |  |  |  |  |  |                 |  |                  jsr 17456 <KPrintF>
    5936:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5938:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    593a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6144 <continueFunction+0xeaa>
				break;
    593e:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5940:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6122 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5944:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5948:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    594c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    594e:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5950:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5952:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5960 <continueFunction+0x6c6>
    5954:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5956:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5958:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5a0c <continueFunction+0x772>
    595c:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5a6a <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5960:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5964:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5968:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    596c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    596e:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5984 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5970:	|  |  |  |  |  |  |  |                             |  |  |   pea 18b1d <PutChar+0xc25>
    5976:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17456 <KPrintF>
    597c:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    597e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5980:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6144 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5984:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5986:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    598a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    598c:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5990:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5994:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5996:	|  |  |  |  |  |  |  |                             |  |      jsr 14976 <getValueType>
    599c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    59a0:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    59a2:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 59aa <continueFunction+0x710>
    59a4:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    59a6:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6144 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    59aa:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    59ae:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    59b2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    59b6:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    59b8:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    59bc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    59be:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    59c2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    59c6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    59ca:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    59cc:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    59ce:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    59d0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    59d2:	|  |  |  |  |  |  |  |                             |  |      jsr 7490 <stackSetByIndex>
    59d8:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    59dc:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    59de:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 59e6 <continueFunction+0x74c>
						return FALSE;
    59e0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    59e2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6144 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    59e6:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    59e8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    59ec:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    59ee:	|  |  |  |  |  |  |  |                             |  |      jsr 152fa <trimStack>
    59f4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    59f6:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    59f8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    59fc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    59fe:	|  |  |  |  |  |  |  |                             |  |      jsr 152fa <trimStack>
    5a04:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5a06:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5a08:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6122 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5a0c:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5a0e:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5a12:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5a14:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5a18:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5a1c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5a1e:	|  |  |  |  |  |  |  |                             |         jsr 14976 <getValueType>
    5a24:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5a28:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5a2a:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5a32 <continueFunction+0x798>
    5a2c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5a2e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6144 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5a32:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5a36:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5a38:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5a3c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5a40:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5a44:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5a46:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5a48:	|  |  |  |  |  |  |  |                             |         jsr 14600 <fastArrayGetByIndex>
    5a4e:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5a50:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5a54:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5a64 <continueFunction+0x7ca>
    5a56:	|  |  |  |  |  |  |  |                             |     |   pea 18b5f <PutChar+0xc67>
    5a5c:	|  |  |  |  |  |  |  |                             |     |   jsr 17456 <KPrintF>
    5a62:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5a64:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5a66:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6144 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5a6a:	|  |  |  |  |  |  |  |                             '-------> pea 18b3b <PutChar+0xc43>
    5a70:	|  |  |  |  |  |  |  |                                       jsr 17456 <KPrintF>
    5a76:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5a78:	|  |  |  |  |  |  |  |                                       clr.w d0
    5a7a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6144 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5a7e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a82:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5a86:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a8a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a8c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a8e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a90:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a94:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5a98:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a9a:	|  |  |  |  |  |  |  |                                       jsr 14976 <getValueType>
    5aa0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5aa4:	|  |  |  |  |  |  |  |                                       tst.w d0
    5aa6:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5aae <continueFunction+0x814>
    5aa8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5aaa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6144 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5aae:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5ab2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ab4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ab8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5aba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5abe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ac0:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5ac6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5aca:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5ace:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5ad0:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5ad2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ad6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5ada:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ade:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ae0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ae2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ae4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ae8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5aea:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5af0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5af4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5af8:	|  |  |  |  |  |  |  |                                       move.l 1cc52 <globalVars>,d1
    5afe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b02:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b04:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5b06:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b08:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b0c:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5b10:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5b12:	|  |  |  |  |  |  |  |                                       jsr 14976 <getValueType>
    5b18:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5b1c:	|  |  |  |  |  |  |  |                                       tst.w d0
    5b1e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5b26 <continueFunction+0x88c>
    5b20:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5b22:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6144 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5b26:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5b2a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5b2c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5b30:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b36:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b38:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5b3e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5b42:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5b46:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5b48:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5b4a:	|  |  |  |  |  |  |  |                                       movea.l 1cc52 <globalVars>,a0
    5b50:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b54:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b56:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5b58:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b5a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b5e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b60:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5b66:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5b6a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5b6e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5b72:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5b76:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b7a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b7c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5b7e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b84:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5b88:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5b8a:	|  |  |  |  |  |  |  |                                       jsr 14976 <getValueType>
    5b90:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5b94:	|  |  |  |  |  |  |  |                                       tst.w d0
    5b96:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5b9e <continueFunction+0x904>
    5b98:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5b9a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6144 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5b9e:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5ba2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ba4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ba8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5baa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5bae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5bb0:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5bb6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5bba:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5bbe:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5bc0:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5bc2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5bc6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5bca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5bce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5bd0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5bd2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5bd4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5bd8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5bda:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5be0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5be4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5be8:	|  |  |  |  |  |  |  |                                       move.l 1cc52 <globalVars>,d1
    5bee:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5bf2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5bf4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5bf6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5bf8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5bfc:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5c00:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5c02:	|  |  |  |  |  |  |  |                                       jsr 14976 <getValueType>
    5c08:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5c0c:	|  |  |  |  |  |  |  |                                       tst.w d0
    5c0e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5c16 <continueFunction+0x97c>
    5c10:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5c12:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6144 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5c16:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5c1a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5c1c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5c20:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5c22:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5c26:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c28:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5c2e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5c32:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5c36:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5c38:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5c3a:	|  |  |  |  |  |  |  |                                       movea.l 1cc52 <globalVars>,a0
    5c40:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5c44:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5c46:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5c48:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5c4a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5c4e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c50:	|  |  |  |  |  |  |  |                                       jsr 15268 <setVariable>
    5c56:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5c5a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5c5e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5c62:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5c66:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5c6a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5c6c:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5c6e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5c70:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5c74:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5c76:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c78:	|  |  |  |  |  |  |  |                                       jsr 14e30 <copyVariable>
    5c7e:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5c80:	|  |  |  |  |  |  |  |                                       tst.w d0
    5c82:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 610c <continueFunction+0xe72>
    5c86:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5c88:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5c8c:	|  |  |  |  |  |  |  |  |                                    move.l 1cc52 <globalVars>,d1
    5c92:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5c96:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5c98:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5c9a:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5c9c:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5ca0:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5ca2:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5ca4:	|  |  |  |  |  |  |  |  |                                    jsr 14e30 <copyVariable>
    5caa:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5cac:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5cae:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 6110 <continueFunction+0xe76>
    5cb2:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5cb4:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5cb8:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5cba:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5cbe:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1cc52 <globalVars>,a0
    5cc4:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5cc8:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5cca:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5ccc:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5cce:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5cd0:	|  |  |  |  |  |  |  |  |  |                                 jsr 14e30 <copyVariable>
    5cd6:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5cd8:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5cda:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6114 <continueFunction+0xe7a>
    5cde:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5ce0:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5ce4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5ce6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5cea:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5cec:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5cf0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5cf2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5cf4:	|  |  |  |  |  |  |  |  |  |  |                              jsr 141b2 <addVarToStack>
    5cfa:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5cfc:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5cfe:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 6118 <continueFunction+0xe7e>
    5d02:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5d04:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5d08:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5d0a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5d0e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5d10:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5d14:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5d16:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5d18:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14238 <addVarToStackQuick>
    5d1e:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5d20:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5d22:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 611c <continueFunction+0xe82>
    5d26:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5d28:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6144 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5d2e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5d32:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5d34:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14eb6 <getBoolean>
    5d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5d40:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5d42:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5d44:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5d46:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5d48:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5d4c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5d52:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5d54:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15268 <setVariable>
    5d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5d5e:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5d62:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5d64:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5d68:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14eb6 <getBoolean>
    5d70:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5d72:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5d74:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6120 <continueFunction+0xe86>
				advanceNow = FALSE;
    5d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5d80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6120 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5d98:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6122 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5d9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5da2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5dac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14976 <getValueType>
    5db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5dba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5dc2 <continueFunction+0xb28>
    5dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5dbe:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6144 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5dca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15268 <setVariable>
    5dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5de2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6122 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 60d8 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5df4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5e74 <continueFunction+0xbda>
    5dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5e00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5ebe <continueFunction+0xc24>
    5e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5e18 <continueFunction+0xb7e>
    5e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5e46 <continueFunction+0xbac>
    5e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5ebe <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5e1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 142ac <addVariablesInSecond>
    5e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 152fa <trimStack>
    5e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 60ec <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5e50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1436a <compareVariablesInSecond>
    5e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5e68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 152fa <trimStack>
    5e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 60ec <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1436a <compareVariablesInSecond>
    5e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 152fa <trimStack>
    5e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 60ec <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14976 <getValueType>
    5ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5ee6 <continueFunction+0xc4c>
    5ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5ee2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6144 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14976 <getValueType>
    5efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5f0c <continueFunction+0xc72>
    5f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5f08:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6144 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 152fa <trimStack>
    5f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 60ea <continueFunction+0xe50>
    5f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24378,a0
    5f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5f3a <continueFunction+0xca0>,pc,d0.w)
    5f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17de2 <__mulsi3>
    5f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    5f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 60ec <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    5fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 60ec <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17e8e <__modsi3>
    5fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    5fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 60ec <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17e60 <__divsi3>
    6006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    600a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    600c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    601e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 60ec <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    602a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    602e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    603a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    603e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    604c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 60ec <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6054:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    605c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    605e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    606c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    606e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    607a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    607e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 60ec <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    6080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    608a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    608c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    608e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    609a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    609e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    60a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    60a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    60aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 60ec <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    60ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    60b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    60b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    60b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    60b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    60ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    60bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    60be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    60c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    60c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    60c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    60ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    60cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15268 <setVariable>
    60d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    60d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 60ec <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    60d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18b80 <PutChar+0xc88>
    60de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17456 <KPrintF>
    60e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    60e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    60e8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6144 <continueFunction+0xeaa>
						break;
    60ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    60ec:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6122 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    60ee:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18b98 <PutChar+0xca0>
    60f4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17456 <KPrintF>
    60fa:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    60fc:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    60fe:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6144 <continueFunction+0xeaa>
			break;
    6100:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6102:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    6104:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6106:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    6108:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    610a:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    610c:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    610e:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    6110:	|  |  |     |              '--|--|--|--|-------------------> nop
    6112:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    6114:	|  |  |     |                 '--|--|--|-------------------> nop
    6116:	|  |  |     +--------------------|--|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    6118:	|  |  |     |                    '--|--|-------------------> nop
    611a:	|  |  |     +-----------------------|--|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    611c:	|  |  |     |                       '--|-------------------> nop
    611e:	|  |  |     +--------------------------|-------------------- bra.s 6122 <continueFunction+0xe88>
			break;
    6120:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6122:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    6126:	+--|--|----------------------------------------------------- beq.s 613a <continueFunction+0xea0>
    6128:	|  |  |                                                      movea.l 80(sp),a0
    612c:	|  |  |                                                      move.l 36(a0),d0
    6130:	|  |  |                                                      addq.l #1,d0
    6132:	|  |  |                                                      movea.l 80(sp),a0
    6136:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    613a:	'--|--|----------------------------------------------------> tst.w 74(sp)
    613e:	   |  '----------------------------------------------------- bne.w 52c2 <continueFunction+0x28>

	}
	return TRUE;
    6142:	   |                                                         moveq #1,d0
}
    6144:	   '-------------------------------------------------------> lea 76(sp),sp
    6148:	                                                             rts

0000614a <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    614a:	    move.l 4(sp),d0
    614e:	    move.l d0,-(sp)
    6150:	    pea 18bc4 <PutChar+0xccc>
    6156:	    jsr 17456 <KPrintF>
    615c:	    addq.l #8,sp

	pauseFunction (fun);
    615e:	    move.l 4(sp),-(sp)
    6162:	    jsr 71e0 <pauseFunction>
    6168:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    616a:	    movea.l 1c614 <currentEvents>,a0
    6170:	    move.l 20(a0),d0
    6174:	    cmp.l 4(sp),d0
    6178:	,-- beq.s 6186 <finishFunction+0x3c>
		unloadFunction (fun);
    617a:	|   move.l 4(sp),-(sp)
    617e:	|   jsr 7690 <unloadFunction>
    6184:	|   addq.l #4,sp
	}	
}
    6186:	'-> nop
    6188:	    rts

0000618a <freezeSubs>:

void freezeSubs () {
    618a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    618c:	          move.l 1cc3c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6192:	   ,----- bra.s 61b0 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6194:	,--|----> movea.l (sp),a0
    6196:	|  |      move.w 52(a0),d0
    619a:	|  |  ,-- bne.s 61aa <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    619c:	|  |  |   movea.l (sp),a0
    619e:	|  |  |   move.b 56(a0),d0
    61a2:	|  |  |   addq.b #1,d0
    61a4:	|  |  |   movea.l (sp),a0
    61a6:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    61aa:	|  |  '-> movea.l (sp),a0
    61ac:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    61b0:	|  '----> tst.l (sp)
    61b2:	'-------- bne.s 6194 <freezeSubs+0xa>
	}
}
    61b4:	          nop
    61b6:	          nop
    61b8:	          addq.l #4,sp
    61ba:	          rts

000061bc <handleInput>:

BOOL handleInput () {
    61bc:	             lea -16(sp),sp
    61c0:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    61c2:	             move.l 1cdb4 <overRegion>,d0
    61c8:	         ,-- bne.s 61d0 <handleInput+0x14>
    61ca:	         |   jsr 15bb2 <getOverRegion>

	if (input.justMoved) {
    61d0:	         '-> move.w 1cc5a <input+0x4>,d0
    61d6:	         ,-- beq.s 6214 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    61d8:	         |   movea.l 1c614 <currentEvents>,a0
    61de:	         |   move.l 16(a0),d0
    61e2:	         +-- beq.s 6214 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    61e4:	         |   move.l 1cc74 <noStack>,d1
    61ea:	         |   movea.l 1c614 <currentEvents>,a0
    61f0:	         |   move.l 16(a0),d0
    61f4:	         |   pea 1 <_start+0x1>
    61f8:	         |   move.l d1,-(sp)
    61fa:	         |   clr.l -(sp)
    61fc:	         |   clr.l -(sp)
    61fe:	         |   move.l d0,-(sp)
    6200:	         |   jsr 75e4 <startNewFunctionNum>
    6206:	         |   lea 20(sp),sp
    620a:	         |   tst.l d0
    620c:	         +-- bne.s 6214 <handleInput+0x58>
    620e:	         |   clr.w d0
    6210:	,--------|-- bra.w 641a <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    6214:	|        '-> clr.w 1cc5a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    621a:	|            move.l 1cc6c <lastRegion>,d1
    6220:	|            move.l 1cdb4 <overRegion>,d0
    6226:	|            cmp.l d1,d0
    6228:	|  ,-------- beq.w 6300 <handleInput+0x144>
    622c:	|  |         movea.l 1c614 <currentEvents>,a0
    6232:	|  |         move.l 20(a0),d0
    6236:	|  +-------- beq.w 6300 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    623a:	|  |         moveq #12,d0
    623c:	|  |         move.l d0,16(sp)
    6240:	|  |         clr.l 12(sp)
    6244:	|  |         move.l 1cca4 <SysBase>,d0
    624a:	|  |         movea.l d0,a6
    624c:	|  |         move.l 16(sp),d0
    6250:	|  |         move.l 12(sp),d1
    6254:	|  |         jsr -684(a6)
    6258:	|  |         move.l d0,8(sp)
    625c:	|  |         move.l 8(sp),d0
    6260:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6264:	|  |         move.l 4(sp),d0
    6268:	|  |     ,-- bne.s 627e <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    626a:	|  |     |   pea 18bdf <PutChar+0xce7>
    6270:	|  |     |   jsr 17456 <KPrintF>
    6276:	|  |     |   addq.l #4,sp
			return FALSE;
    6278:	|  |     |   clr.w d0
    627a:	+--|-----|-- bra.w 641a <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    627e:	|  |     '-> movea.l 4(sp),a0
    6282:	|  |         clr.l (a0)
		if (overRegion) {
    6284:	|  |         move.l 1cdb4 <overRegion>,d0
    628a:	|  |  ,----- beq.s 62b2 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    628c:	|  |  |      movea.l 1cdb4 <overRegion>,a0
    6292:	|  |  |      movea.l 28(a0),a0
    6296:	|  |  |      move.l 4(a0),d1
    629a:	|  |  |      move.l 4(sp),d0
    629e:	|  |  |      move.l d1,-(sp)
    62a0:	|  |  |      pea 7 <_start+0x7>
    62a4:	|  |  |      move.l d0,-(sp)
    62a6:	|  |  |      jsr 15268 <setVariable>
    62ac:	|  |  |      lea 12(sp),sp
    62b0:	|  |  |  ,-- bra.s 62c8 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    62b2:	|  |  '--|-> move.l 4(sp),d0
    62b6:	|  |     |   clr.l -(sp)
    62b8:	|  |     |   pea 1 <_start+0x1>
    62bc:	|  |     |   move.l d0,-(sp)
    62be:	|  |     |   jsr 15268 <setVariable>
    62c4:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    62c8:	|  |     '-> movea.l 4(sp),a0
    62cc:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    62d0:	|  |         movea.l 1c614 <currentEvents>,a0
    62d6:	|  |         move.l 20(a0),d0
    62da:	|  |         pea 1 <_start+0x1>
    62de:	|  |         lea 8(sp),a0
    62e2:	|  |         move.l a0,-(sp)
    62e4:	|  |         clr.l -(sp)
    62e6:	|  |         pea 1 <_start+0x1>
    62ea:	|  |         move.l d0,-(sp)
    62ec:	|  |         jsr 74d4 <startNewFunctionLoaded>
    62f2:	|  |         lea 20(sp),sp
    62f6:	|  |         tst.l d0
    62f8:	|  +-------- bne.s 6300 <handleInput+0x144>
    62fa:	|  |         clr.w d0
    62fc:	+--|-------- bra.w 641a <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6300:	|  '-------> move.w 1cc5c <input+0x6>,d0
    6306:	|        ,-- beq.s 6344 <handleInput+0x188>
    6308:	|        |   movea.l 1c614 <currentEvents>,a0
    630e:	|        |   move.l 4(a0),d0
    6312:	|        +-- beq.s 6344 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6314:	|        |   move.l 1cc74 <noStack>,d1
    631a:	|        |   movea.l 1c614 <currentEvents>,a0
    6320:	|        |   move.l 4(a0),d0
    6324:	|        |   pea 1 <_start+0x1>
    6328:	|        |   move.l d1,-(sp)
    632a:	|        |   clr.l -(sp)
    632c:	|        |   clr.l -(sp)
    632e:	|        |   move.l d0,-(sp)
    6330:	|        |   jsr 75e4 <startNewFunctionNum>
    6336:	|        |   lea 20(sp),sp
    633a:	|        |   tst.l d0
    633c:	|        +-- bne.s 6344 <handleInput+0x188>
    633e:	|        |   clr.w d0
    6340:	+--------|-- bra.w 641a <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6344:	|        '-> move.w 1cc5e <input+0x8>,d0
    634a:	|        ,-- beq.s 6388 <handleInput+0x1cc>
    634c:	|        |   movea.l 1c614 <currentEvents>,a0
    6352:	|        |   move.l 12(a0),d0
    6356:	|        +-- beq.s 6388 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6358:	|        |   move.l 1cc74 <noStack>,d1
    635e:	|        |   movea.l 1c614 <currentEvents>,a0
    6364:	|        |   move.l 12(a0),d0
    6368:	|        |   pea 1 <_start+0x1>
    636c:	|        |   move.l d1,-(sp)
    636e:	|        |   clr.l -(sp)
    6370:	|        |   clr.l -(sp)
    6372:	|        |   move.l d0,-(sp)
    6374:	|        |   jsr 75e4 <startNewFunctionNum>
    637a:	|        |   lea 20(sp),sp
    637e:	|        |   tst.l d0
    6380:	|        +-- bne.s 6388 <handleInput+0x1cc>
    6382:	|        |   clr.w d0
    6384:	+--------|-- bra.w 641a <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    6388:	|        '-> move.w 1cc56 <input>,d0
    638e:	|        ,-- beq.s 63c6 <handleInput+0x20a>
    6390:	|        |   movea.l 1c614 <currentEvents>,a0
    6396:	|        |   move.l (a0),d0
    6398:	|        +-- beq.s 63c6 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    639a:	|        |   move.l 1cc74 <noStack>,d1
    63a0:	|        |   movea.l 1c614 <currentEvents>,a0
    63a6:	|        |   move.l (a0),d0
    63a8:	|        |   pea 1 <_start+0x1>
    63ac:	|        |   move.l d1,-(sp)
    63ae:	|        |   clr.l -(sp)
    63b0:	|        |   clr.l -(sp)
    63b2:	|        |   move.l d0,-(sp)
    63b4:	|        |   jsr 75e4 <startNewFunctionNum>
    63ba:	|        |   lea 20(sp),sp
    63be:	|        |   tst.l d0
    63c0:	|        +-- bne.s 63c6 <handleInput+0x20a>
    63c2:	|        |   clr.w d0
    63c4:	+--------|-- bra.s 641a <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    63c6:	|        '-> move.w 1cc58 <input+0x2>,d0
    63cc:	|        ,-- beq.s 6408 <handleInput+0x24c>
    63ce:	|        |   movea.l 1c614 <currentEvents>,a0
    63d4:	|        |   move.l 8(a0),d0
    63d8:	|        +-- beq.s 6408 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    63da:	|        |   move.l 1cc74 <noStack>,d1
    63e0:	|        |   movea.l 1c614 <currentEvents>,a0
    63e6:	|        |   move.l 8(a0),d0
    63ea:	|        |   pea 1 <_start+0x1>
    63ee:	|        |   move.l d1,-(sp)
    63f0:	|        |   clr.l -(sp)
    63f2:	|        |   clr.l -(sp)
    63f4:	|        |   move.l d0,-(sp)
    63f6:	|        |   jsr 75e4 <startNewFunctionNum>
    63fc:	|        |   lea 20(sp),sp
    6400:	|        |   tst.l d0
    6402:	|        +-- bne.s 6408 <handleInput+0x24c>
    6404:	|        |   clr.w d0
    6406:	+--------|-- bra.s 641a <handleInput+0x25e>
	}

	lastRegion = overRegion;
    6408:	|        '-> move.l 1cdb4 <overRegion>,d0
    640e:	|            move.l d0,1cc6c <lastRegion>
	return runSludge ();
    6414:	|            jsr 72a2 <runSludge>
}
    641a:	'----------> movea.l (sp)+,a6
    641c:	             lea 16(sp),sp
    6420:	             rts

00006422 <initSludge>:

BOOL initSludge (char * filename) {
    6422:	             lea -292(sp),sp
    6426:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    642a:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    642e:	             jsr ae60 <makeNullAnim>
    6434:	             move.l d0,1cb9e <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    643a:	             pea 1cc4e <gameVersion>
    6440:	             pea 18c15 <PutChar+0xd1d>
    6446:	             pea 45 <_start+0x45>
    644a:	             pea 47 <_start+0x47>
    644e:	             move.l 332(sp),-(sp)
    6452:	             jsr 6e70 <openAndVerify>
    6458:	             lea 20(sp),sp
    645c:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6460:	         ,-- bne.s 6468 <initSludge+0x46>
    6462:	         |   clr.w d0
    6464:	,--------|-- bra.w 6b90 <initSludge+0x76e>
	if (FGetC (fp)) {
    6468:	|        '-> move.l 288(sp),284(sp)
    646e:	|            move.l 1ccac <DOSBase>,d0
    6474:	|            movea.l d0,a6
    6476:	|            move.l 284(sp),d1
    647a:	|            jsr -306(a6)
    647e:	|            move.l d0,280(sp)
    6482:	|            move.l 280(sp),d0
    6486:	|  ,-------- beq.w 6630 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    648a:	|  |         move.l 288(sp),-(sp)
    648e:	|  |         jsr 6bc <get2bytes>
    6494:	|  |         addq.l #4,sp
    6496:	|  |         move.l d0,1cc78 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    649c:	|  |         move.l 1cc78 <numBIFNames>,d0
    64a2:	|  |         move.l d0,276(sp)
    64a6:	|  |         clr.l 272(sp)
    64aa:	|  |         move.l 1cca4 <SysBase>,d0
    64b0:	|  |         movea.l d0,a6
    64b2:	|  |         move.l 276(sp),d0
    64b6:	|  |         move.l 272(sp),d1
    64ba:	|  |         jsr -684(a6)
    64be:	|  |         move.l d0,268(sp)
    64c2:	|  |         move.l 268(sp),d0
    64c6:	|  |         move.l d0,1cc34 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    64cc:	|  |         move.l 1cc34 <allBIFNames>,d0
    64d2:	|  |     ,-- bne.s 64da <initSludge+0xb8>
    64d4:	|  |     |   clr.w d0
    64d6:	+--|-----|-- bra.w 6b90 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    64da:	|  |     '-> clr.l 304(sp)
    64de:	|  |     ,-- bra.s 6504 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    64e0:	|  |  ,--|-> move.l 1cc34 <allBIFNames>,d1
    64e6:	|  |  |  |   move.l 304(sp),d0
    64ea:	|  |  |  |   add.l d0,d0
    64ec:	|  |  |  |   add.l d0,d0
    64ee:	|  |  |  |   movea.l d1,a2
    64f0:	|  |  |  |   adda.l d0,a2
    64f2:	|  |  |  |   move.l 288(sp),-(sp)
    64f6:	|  |  |  |   jsr b02 <readString>
    64fc:	|  |  |  |   addq.l #4,sp
    64fe:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6500:	|  |  |  |   addq.l #1,304(sp)
    6504:	|  |  |  '-> move.l 1cc78 <numBIFNames>,d0
    650a:	|  |  |      cmp.l 304(sp),d0
    650e:	|  |  '----- bgt.s 64e0 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    6510:	|  |         move.l 288(sp),-(sp)
    6514:	|  |         jsr 6bc <get2bytes>
    651a:	|  |         addq.l #4,sp
    651c:	|  |         move.l d0,1cc84 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6522:	|  |         move.l 1cc84 <numUserFunc>,d0
    6528:	|  |         move.l d0,264(sp)
    652c:	|  |         clr.l 260(sp)
    6530:	|  |         move.l 1cca4 <SysBase>,d0
    6536:	|  |         movea.l d0,a6
    6538:	|  |         move.l 264(sp),d0
    653c:	|  |         move.l 260(sp),d1
    6540:	|  |         jsr -684(a6)
    6544:	|  |         move.l d0,256(sp)
    6548:	|  |         move.l 256(sp),d0
    654c:	|  |         move.l d0,1cc40 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6552:	|  |         move.l 1cc40 <allUserFunc>,d0
    6558:	|  |     ,-- bne.s 6560 <initSludge+0x13e>
    655a:	|  |     |   clr.w d0
    655c:	+--|-----|-- bra.w 6b90 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6560:	|  |     '-> clr.l 300(sp)
    6564:	|  |     ,-- bra.s 658a <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6566:	|  |  ,--|-> move.l 1cc40 <allUserFunc>,d1
    656c:	|  |  |  |   move.l 300(sp),d0
    6570:	|  |  |  |   add.l d0,d0
    6572:	|  |  |  |   add.l d0,d0
    6574:	|  |  |  |   movea.l d1,a2
    6576:	|  |  |  |   adda.l d0,a2
    6578:	|  |  |  |   move.l 288(sp),-(sp)
    657c:	|  |  |  |   jsr b02 <readString>
    6582:	|  |  |  |   addq.l #4,sp
    6584:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6586:	|  |  |  |   addq.l #1,300(sp)
    658a:	|  |  |  '-> move.l 1cc84 <numUserFunc>,d0
    6590:	|  |  |      cmp.l 300(sp),d0
    6594:	|  |  '----- bgt.s 6566 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6596:	|  |         move.l 1cc4e <gameVersion>,d0
    659c:	|  |         cmpi.l #258,d0
    65a2:	|  +-------- ble.w 6630 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    65a6:	|  |         move.l 288(sp),-(sp)
    65aa:	|  |         jsr 6bc <get2bytes>
    65b0:	|  |         addq.l #4,sp
    65b2:	|  |         move.l d0,1cc80 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    65b8:	|  |         move.l 1cc80 <numResourceNames>,d0
    65be:	|  |         add.l d0,d0
    65c0:	|  |         add.l d0,d0
    65c2:	|  |         move.l d0,252(sp)
    65c6:	|  |         clr.l 248(sp)
    65ca:	|  |         move.l 1cca4 <SysBase>,d0
    65d0:	|  |         movea.l d0,a6
    65d2:	|  |         move.l 252(sp),d0
    65d6:	|  |         move.l 248(sp),d1
    65da:	|  |         jsr -684(a6)
    65de:	|  |         move.l d0,244(sp)
    65e2:	|  |         move.l 244(sp),d0
    65e6:	|  |         move.l d0,1cc38 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    65ec:	|  |         move.l 1cc38 <allResourceNames>,d0
    65f2:	|  |     ,-- bne.s 65fa <initSludge+0x1d8>
    65f4:	|  |     |   clr.w d0
    65f6:	+--|-----|-- bra.w 6b90 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    65fa:	|  |     '-> clr.l 296(sp)
    65fe:	|  |     ,-- bra.s 6624 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6600:	|  |  ,--|-> move.l 1cc38 <allResourceNames>,d1
    6606:	|  |  |  |   move.l 296(sp),d0
    660a:	|  |  |  |   add.l d0,d0
    660c:	|  |  |  |   add.l d0,d0
    660e:	|  |  |  |   movea.l d1,a2
    6610:	|  |  |  |   adda.l d0,a2
    6612:	|  |  |  |   move.l 288(sp),-(sp)
    6616:	|  |  |  |   jsr b02 <readString>
    661c:	|  |  |  |   addq.l #4,sp
    661e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6620:	|  |  |  |   addq.l #1,296(sp)
    6624:	|  |  |  '-> move.l 1cc80 <numResourceNames>,d0
    662a:	|  |  |      cmp.l 296(sp),d0
    662e:	|  |  '----- bgt.s 6600 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6630:	|  '-------> move.l #129,1cc60 <input+0xa>
	input.mouseY = 100;
    663a:	|            moveq #100,d0
    663c:	|            move.l d0,1cc64 <input+0xe>
	winWidth = get2bytes (fp);
    6642:	|            move.l 288(sp),-(sp)
    6646:	|            jsr 6bc <get2bytes>
    664c:	|            addq.l #4,sp
    664e:	|            move.l d0,1cbf8 <winWidth>
	winHeight = get2bytes (fp);
    6654:	|            move.l 288(sp),-(sp)
    6658:	|            jsr 6bc <get2bytes>
    665e:	|            addq.l #4,sp
    6660:	|            move.l d0,1cbfc <winHeight>
	specialSettings = FGetC (fp);
    6666:	|            move.l 288(sp),240(sp)
    666c:	|            move.l 1ccac <DOSBase>,d0
    6672:	|            movea.l d0,a6
    6674:	|            move.l 240(sp),d1
    6678:	|            jsr -306(a6)
    667c:	|            move.l d0,236(sp)
    6680:	|            move.l 236(sp),d0
    6684:	|            move.l d0,1cc88 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    668a:	|            move.l 288(sp),232(sp)
    6690:	|            move.l 1ccac <DOSBase>,d0
    6696:	|            movea.l d0,a6
    6698:	|            move.l 232(sp),d1
    669c:	|            jsr -306(a6)
    66a0:	|            move.l d0,228(sp)
    66a4:	|            move.l 228(sp),d0
    66a8:	|            move.l d0,-(sp)
    66aa:	|            pea 3e8 <encodeFilename+0xea>
    66ae:	|            jsr 17e60 <__divsi3>
    66b4:	|            addq.l #8,sp
    66b6:	|            move.l d0,1c626 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    66bc:	|            move.l 288(sp),-(sp)
    66c0:	|            jsr b02 <readString>
    66c6:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    66c8:	|            move.l 288(sp),224(sp)
    66ce:	|            move.l #117830,220(sp)
    66d6:	|            moveq #8,d1
    66d8:	|            move.l d1,216(sp)
    66dc:	|            moveq #1,d0
    66de:	|            move.l d0,212(sp)
    66e2:	|            move.l 1ccac <DOSBase>,d0
    66e8:	|            movea.l d0,a6
    66ea:	|            move.l 224(sp),d1
    66ee:	|            move.l 220(sp),d2
    66f2:	|            move.l 216(sp),d3
    66f6:	|            move.l 212(sp),d4
    66fa:	|            jsr -324(a6)
    66fe:	|            move.l d0,208(sp)
    6702:	|            move.l 208(sp),d0
    6706:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    670a:	|            moveq #1,d1
    670c:	|            cmp.l 204(sp),d1
    6710:	|        ,-- beq.s 6720 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6712:	|        |   pea 18c4e <PutChar+0xd56>
    6718:	|        |   jsr 17456 <KPrintF>
    671e:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6720:	|        '-> move.l 1cc4e <gameVersion>,d0
    6726:	|            cmpi.l #258,d0
    672c:	|        ,-- ble.s 673c <initSludge+0x31a>
    672e:	|        |   move.l 288(sp),-(sp)
    6732:	|        |   jsr b02 <readString>
    6738:	|        |   addq.l #4,sp
    673a:	|     ,--|-- bra.s 6750 <initSludge+0x32e>
    673c:	|     |  '-> pea 18c6c <PutChar+0xd74>
    6742:	|     |      pea 18c6c <PutChar+0xd74>
    6748:	|     |      jsr 13ea2 <joinStrings>
    674e:	|     |      addq.l #8,sp
    6750:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6754:	|            move.l 1cc4e <gameVersion>,d0
    675a:	|            cmpi.l #258,d0
    6760:	|     ,----- ble.s 6782 <initSludge+0x360>
    6762:	|     |      move.l 288(sp),196(sp)
    6768:	|     |      move.l 1ccac <DOSBase>,d0
    676e:	|     |      movea.l d0,a6
    6770:	|     |      move.l 196(sp),d1
    6774:	|     |      jsr -306(a6)
    6778:	|     |      move.l d0,192(sp)
    677c:	|     |      move.l 192(sp),d0
    6780:	|     |  ,-- bra.s 6784 <initSludge+0x362>
    6782:	|     '--|-> moveq #0,d0
    6784:	|        '-> move.l d0,1cd80 <gameSettings+0x4>
	makeLanguageTable (fp);
    678a:	|            move.l 288(sp),-(sp)
    678e:	|            jsr 13858 <makeLanguageTable>
    6794:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6796:	|            move.l 1cc4e <gameVersion>,d0
    679c:	|            cmpi.l #261,d0
    67a2:	|        ,-- ble.s 67f0 <initSludge+0x3ce>
	{
		FGetC(fp);
    67a4:	|        |   move.l 288(sp),188(sp)
    67aa:	|        |   move.l 1ccac <DOSBase>,d0
    67b0:	|        |   movea.l d0,a6
    67b2:	|        |   move.l 188(sp),d1
    67b6:	|        |   jsr -306(a6)
    67ba:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    67be:	|        |   move.l 288(sp),180(sp)
    67c4:	|        |   move.l 1ccac <DOSBase>,d0
    67ca:	|        |   movea.l d0,a6
    67cc:	|        |   move.l 180(sp),d1
    67d0:	|        |   jsr -306(a6)
    67d4:	|        |   move.l d0,176(sp)
		getFloat (fp);
    67d8:	|        |   move.l 288(sp),-(sp)
    67dc:	|        |   jsr 7d8 <getFloat>
    67e2:	|        |   addq.l #4,sp
		getFloat (fp);
    67e4:	|        |   move.l 288(sp),-(sp)
    67e8:	|        |   jsr 7d8 <getFloat>
    67ee:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    67f0:	|        '-> move.l 288(sp),-(sp)
    67f4:	|            jsr b02 <readString>
    67fa:	|            addq.l #4,sp
    67fc:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6800:	|            pea 18c6d <PutChar+0xd75>
    6806:	|            move.l 176(sp),-(sp)
    680a:	|            jsr 13e22 <strcmp>
    6810:	|            addq.l #8,sp
    6812:	|            tst.l d0
    6814:	|        ,-- beq.s 681c <initSludge+0x3fa>
		return FALSE;
    6816:	|        |   clr.w d0
    6818:	+--------|-- bra.w 6b90 <initSludge+0x76e>
	}
	FreeVec( checker);
    681c:	|        '-> move.l 172(sp),168(sp)
    6822:	|            move.l 1cca4 <SysBase>,d0
    6828:	|            movea.l d0,a6
    682a:	|            movea.l 168(sp),a1
    682e:	|            jsr -690(a6)
	checker = NULL;
    6832:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6836:	|            move.l 288(sp),164(sp)
    683c:	|            move.l 1ccac <DOSBase>,d0
    6842:	|            movea.l d0,a6
    6844:	|            move.l 164(sp),d1
    6848:	|            jsr -306(a6)
    684c:	|            move.l d0,160(sp)
    6850:	|            move.l 160(sp),d0
    6854:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6858:	|            moveq #0,d0
    685a:	|            move.b 159(sp),d0
    685e:	|            moveq #1,d1
    6860:	|            and.l d1,d0
    6862:	|        ,-- beq.s 68ba <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6864:	|        |   move.l 1ccac <DOSBase>,d0
    686a:	|        |   movea.l d0,a6
    686c:	|        |   jsr -60(a6)
    6870:	|        |   move.l d0,38(sp)
    6874:	|        |   move.l 38(sp),d0
    6878:	|        |   move.l d0,34(sp)
    687c:	|        |   move.l #101493,30(sp)
    6884:	|        |   moveq #54,d0
    6886:	|        |   move.l d0,26(sp)
    688a:	|        |   move.l 1ccac <DOSBase>,d0
    6890:	|        |   movea.l d0,a6
    6892:	|        |   move.l 34(sp),d1
    6896:	|        |   move.l 30(sp),d2
    689a:	|        |   move.l 26(sp),d3
    689e:	|        |   jsr -48(a6)
    68a2:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    68a6:	|        |   pea 18cac <PutChar+0xdb4>
    68ac:	|        |   jsr 17456 <KPrintF>
    68b2:	|        |   addq.l #4,sp
		return FALSE;
    68b4:	|        |   clr.w d0
    68b6:	+--------|-- bra.w 6b90 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    68ba:	|        '-> move.l 288(sp),-(sp)
    68be:	|            jsr 6bc <get2bytes>
    68c4:	|            addq.l #4,sp
    68c6:	|            move.l d0,1cc7c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    68cc:	|            move.l 1cc7c <numGlobals>,d0
    68d2:	|            lsl.l #3,d0
    68d4:	|            move.l d0,154(sp)
    68d8:	|            clr.l 150(sp)
    68dc:	|            move.l 1cca4 <SysBase>,d0
    68e2:	|            movea.l d0,a6
    68e4:	|            move.l 154(sp),d0
    68e8:	|            move.l 150(sp),d1
    68ec:	|            jsr -684(a6)
    68f0:	|            move.l d0,146(sp)
    68f4:	|            move.l 146(sp),d0
    68f8:	|            move.l d0,1cc52 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    68fe:	|            move.l 1cc52 <globalVars>,d0
    6904:	|        ,-- bne.s 6922 <initSludge+0x500>
    6906:	|        |   move.l 1cc7c <numGlobals>,d0
    690c:	|        +-- ble.s 6922 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    690e:	|        |   pea 18ce4 <PutChar+0xdec>
    6914:	|        |   jsr 17456 <KPrintF>
    691a:	|        |   addq.l #4,sp
		return FALSE;
    691c:	|        |   clr.w d0
    691e:	+--------|-- bra.w 6b90 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6922:	|        '-> clr.l 308(sp)
    6926:	|        ,-- bra.s 693e <initSludge+0x51c>
    6928:	|     ,--|-> move.l 1cc52 <globalVars>,d1
    692e:	|     |  |   move.l 308(sp),d0
    6932:	|     |  |   lsl.l #3,d0
    6934:	|     |  |   movea.l d1,a0
    6936:	|     |  |   adda.l d0,a0
    6938:	|     |  |   clr.l (a0)
    693a:	|     |  |   addq.l #1,308(sp)
    693e:	|     |  '-> move.l 1cc7c <numGlobals>,d0
    6944:	|     |      cmp.l 308(sp),d0
    6948:	|     '----- bgt.s 6928 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    694a:	|            move.l 1cd80 <gameSettings+0x4>,d0
    6950:	|            clr.l -(sp)
    6952:	|            move.l d0,-(sp)
    6954:	|            move.l 296(sp),-(sp)
    6958:	|            jsr 7ad2 <setFileIndices>
    695e:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6962:	|            pea 1 <_start+0x1>
    6966:	|            jsr 778c <getNumberedString>
    696c:	|            addq.l #4,sp
    696e:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6972:	|            move.l 142(sp),-(sp)
    6976:	|            jsr 2fe <encodeFilename>
    697c:	|            addq.l #4,sp
    697e:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6982:	|            move.l 142(sp),134(sp)
    6988:	|            move.l 1cca4 <SysBase>,d0
    698e:	|            movea.l d0,a6
    6990:	|            movea.l 134(sp),a1
    6994:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6998:	|            move.l 138(sp),130(sp)
    699e:	|            move.l 1ccac <DOSBase>,d0
    69a4:	|            movea.l d0,a6
    69a6:	|            move.l 130(sp),d1
    69aa:	|            jsr -120(a6)
    69ae:	|            move.l d0,126(sp)
    69b2:	|            move.l 126(sp),d0
    69b6:	|            move.l d0,292(sp)
	if(lock == 0) {
    69ba:	|        ,-- bne.s 69e8 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    69bc:	|        |   move.l 138(sp),122(sp)
    69c2:	|        |   moveq #-2,d1
    69c4:	|        |   move.l d1,118(sp)
    69c8:	|        |   move.l 1ccac <DOSBase>,d0
    69ce:	|        |   movea.l d0,a6
    69d0:	|        |   move.l 122(sp),d1
    69d4:	|        |   move.l 118(sp),d2
    69d8:	|        |   jsr -84(a6)
    69dc:	|        |   move.l d0,114(sp)
    69e0:	|        |   move.l 114(sp),d0
    69e4:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    69e8:	|        '-> move.l 292(sp),110(sp)
    69ee:	|            move.l 1ccac <DOSBase>,d0
    69f4:	|            movea.l d0,a6
    69f6:	|            move.l 110(sp),d1
    69fa:	|            jsr -126(a6)
    69fe:	|            move.l d0,106(sp)
    6a02:	|            move.l 106(sp),d0
    6a06:	|        ,-- bne.s 6a62 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6a08:	|        |   move.l 138(sp),-(sp)
    6a0c:	|        |   pea 18d17 <PutChar+0xe1f>
    6a12:	|        |   jsr 17456 <KPrintF>
    6a18:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6a1a:	|        |   move.l 1ccac <DOSBase>,d0
    6a20:	|        |   movea.l d0,a6
    6a22:	|        |   jsr -60(a6)
    6a26:	|        |   move.l d0,58(sp)
    6a2a:	|        |   move.l 58(sp),d0
    6a2e:	|        |   move.l d0,54(sp)
    6a32:	|        |   move.l #101700,50(sp)
    6a3a:	|        |   moveq #40,d0
    6a3c:	|        |   move.l d0,46(sp)
    6a40:	|        |   move.l 1ccac <DOSBase>,d0
    6a46:	|        |   movea.l d0,a6
    6a48:	|        |   move.l 54(sp),d1
    6a4c:	|        |   move.l 50(sp),d2
    6a50:	|        |   move.l 46(sp),d3
    6a54:	|        |   jsr -48(a6)
    6a58:	|        |   move.l d0,42(sp)
		return FALSE;
    6a5c:	|        |   clr.w d0
    6a5e:	+--------|-- bra.w 6b90 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6a62:	|        '-> move.l 138(sp),102(sp)
    6a68:	|            move.l 1cca4 <SysBase>,d0
    6a6e:	|            movea.l d0,a6
    6a70:	|            movea.l 102(sp),a1
    6a74:	|            jsr -690(a6)

	readIniFile (filename);
    6a78:	|            move.l 316(sp),-(sp)
    6a7c:	|            jsr 1398c <readIniFile>
    6a82:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6a84:	|            jsr 1375e <getLanguageForFileB>
    6a8a:	|            move.l d0,1c618 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6a90:	|            move.l 1c618 <languageNum>,d0
    6a96:	|        ,-- bpl.s 6aa6 <initSludge+0x684>
    6a98:	|        |   pea 18d6d <PutChar+0xe75>
    6a9e:	|        |   jsr 17456 <KPrintF>
    6aa4:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6aa6:	|        '-> move.l 1c618 <languageNum>,d0
    6aac:	|            move.l d0,d1
    6aae:	|            move.l 1cd80 <gameSettings+0x4>,d0
    6ab4:	|            move.l d1,-(sp)
    6ab6:	|            move.l d0,-(sp)
    6ab8:	|            clr.l -(sp)
    6aba:	|            jsr 7ad2 <setFileIndices>
    6ac0:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6ac4:	|            movea.l 200(sp),a0
    6ac8:	|            move.b (a0),d0
    6aca:	|     ,----- beq.w 6b74 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6ace:	|     |      move.l 200(sp),-(sp)
    6ad2:	|     |      jsr 2fe <encodeFilename>
    6ad8:	|     |      addq.l #4,sp
    6ada:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6ade:	|     |      move.l 98(sp),94(sp)
    6ae4:	|     |      move.l 1ccac <DOSBase>,d0
    6aea:	|     |      movea.l d0,a6
    6aec:	|     |      move.l 94(sp),d1
    6af0:	|     |      jsr -120(a6)
    6af4:	|     |      move.l d0,90(sp)
    6af8:	|     |      move.l 90(sp),d0
    6afc:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6b00:	|     |  ,-- bne.s 6b2e <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6b02:	|     |  |   move.l 98(sp),86(sp)
    6b08:	|     |  |   moveq #-2,d1
    6b0a:	|     |  |   move.l d1,82(sp)
    6b0e:	|     |  |   move.l 1ccac <DOSBase>,d0
    6b14:	|     |  |   movea.l d0,a6
    6b16:	|     |  |   move.l 86(sp),d1
    6b1a:	|     |  |   move.l 82(sp),d2
    6b1e:	|     |  |   jsr -84(a6)
    6b22:	|     |  |   move.l d0,78(sp)
    6b26:	|     |  |   move.l 78(sp),d0
    6b2a:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6b2e:	|     |  '-> move.l 292(sp),74(sp)
    6b34:	|     |      move.l 1ccac <DOSBase>,d0
    6b3a:	|     |      movea.l d0,a6
    6b3c:	|     |      move.l 74(sp),d1
    6b40:	|     |      jsr -126(a6)
    6b44:	|     |      move.l d0,70(sp)
    6b48:	|     |      move.l 70(sp),d0
    6b4c:	|     |  ,-- bne.s 6b5e <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6b4e:	|     |  |   move.l 1ccac <DOSBase>,d0
    6b54:	|     |  |   movea.l d0,a6
    6b56:	|     |  |   jsr -60(a6)
    6b5a:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6b5e:	|     |  '-> move.l 98(sp),62(sp)
    6b64:	|     |      move.l 1cca4 <SysBase>,d0
    6b6a:	|     |      movea.l d0,a6
    6b6c:	|     |      movea.l 62(sp),a1
    6b70:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6b74:	|     '----> movea.l 1cbfc <winHeight>,a0
    6b7a:	|            lea -15(a0),a0
    6b7e:	|            move.l a0,d0
    6b80:	|            move.l d0,-(sp)
    6b82:	|            pea a <_start+0xa>
    6b86:	|            jsr 8518 <positionStatus>
    6b8c:	|            addq.l #8,sp

	return TRUE;
    6b8e:	|            moveq #1,d0
}
    6b90:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6b94:	             lea 292(sp),sp
    6b98:	             rts

00006b9a <killSpeechTimers>:

void killSpeechTimers () {
    6b9a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6b9c:	          move.l 1cc3c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6ba2:	   ,----- bra.s 6bce <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6ba4:	,--|----> movea.l (sp),a0
    6ba6:	|  |      move.b 56(a0),d0
    6baa:	|  |  ,-- bne.s 6bc8 <killSpeechTimers+0x2e>
    6bac:	|  |  |   movea.l (sp),a0
    6bae:	|  |  |   move.w 50(a0),d0
    6bb2:	|  |  +-- beq.s 6bc8 <killSpeechTimers+0x2e>
    6bb4:	|  |  |   movea.l (sp),a0
    6bb6:	|  |  |   move.l 12(a0),d0
    6bba:	|  |  +-- beq.s 6bc8 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6bbc:	|  |  |   movea.l (sp),a0
    6bbe:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6bc2:	|  |  |   movea.l (sp),a0
    6bc4:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6bc8:	|  |  '-> movea.l (sp),a0
    6bca:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6bce:	|  '----> tst.l (sp)
    6bd0:	'-------- bne.s 6ba4 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6bd2:	          jsr 408a <killAllSpeech>
}
    6bd8:	          nop
    6bda:	          addq.l #4,sp
    6bdc:	          rts

00006bde <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6bde:	             lea -52(sp),sp
    6be2:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6be4:	             movea.l 60(sp),a0
    6be8:	             move.l (a0),d0
    6bea:	             move.l d0,-(sp)
    6bec:	             jsr 7a12 <openSubSlice>
    6bf2:	             addq.l #4,sp
    6bf4:	             tst.w d0
    6bf6:	         ,-- bne.s 6bfe <loadFunctionCode+0x20>
    6bf8:	         |   clr.w d0
    6bfa:	,--------|-- bra.w 6dc8 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6bfe:	|        '-> move.l 1cc8c <bigDataFile>,44(sp)
    6c06:	|            move.l 1ccac <DOSBase>,d0
    6c0c:	|            movea.l d0,a6
    6c0e:	|            move.l 44(sp),d1
    6c12:	|            jsr -306(a6)
    6c16:	|            move.l d0,40(sp)
    6c1a:	|            move.l 40(sp),d0
    6c1e:	|            move.l d0,d0
    6c20:	|            movea.l 60(sp),a0
    6c24:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6c28:	|            move.l 1cc8c <bigDataFile>,d0
    6c2e:	|            move.l d0,-(sp)
    6c30:	|            jsr 6bc <get2bytes>
    6c36:	|            addq.l #4,sp
    6c38:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6c3c:	|            move.l 1cc8c <bigDataFile>,d0
    6c42:	|            move.l d0,-(sp)
    6c44:	|            jsr 6bc <get2bytes>
    6c4a:	|            addq.l #4,sp
    6c4c:	|            movea.l 60(sp),a0
    6c50:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6c54:	|            move.l 1cc8c <bigDataFile>,d0
    6c5a:	|            move.l d0,-(sp)
    6c5c:	|            jsr 6bc <get2bytes>
    6c62:	|            addq.l #4,sp
    6c64:	|            movea.l 60(sp),a0
    6c68:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6c6c:	|            move.l 36(sp),d0
    6c70:	|            lsl.l #3,d0
    6c72:	|            move.l d0,32(sp)
    6c76:	|            clr.l 28(sp)
    6c7a:	|            move.l 1cca4 <SysBase>,d0
    6c80:	|            movea.l d0,a6
    6c82:	|            move.l 32(sp),d0
    6c86:	|            move.l 28(sp),d1
    6c8a:	|            jsr -684(a6)
    6c8e:	|            move.l d0,24(sp)
    6c92:	|            move.l 24(sp),d0
    6c96:	|            movea.l 60(sp),a0
    6c9a:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6c9e:	|            movea.l 60(sp),a0
    6ca2:	|            move.l 4(a0),d0
    6ca6:	|        ,-- bne.s 6cbc <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6ca8:	|        |   pea 18d98 <PutChar+0xea0>
    6cae:	|        |   jsr 17456 <KPrintF>
    6cb4:	|        |   addq.l #4,sp
		return FALSE;
    6cb6:	|        |   clr.w d0
    6cb8:	+--------|-- bra.w 6dc8 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6cbc:	|        '-> clr.l 52(sp)
    6cc0:	|        ,-- bra.s 6d22 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6cc2:	|     ,--|-> move.l 1cc8c <bigDataFile>,8(sp)
    6cca:	|     |  |   move.l 1ccac <DOSBase>,d0
    6cd0:	|     |  |   movea.l d0,a6
    6cd2:	|     |  |   move.l 8(sp),d1
    6cd6:	|     |  |   jsr -306(a6)
    6cda:	|     |  |   move.l d0,4(sp)
    6cde:	|     |  |   move.l 4(sp),d1
    6ce2:	|     |  |   movea.l 60(sp),a0
    6ce6:	|     |  |   movea.l 4(a0),a0
    6cea:	|     |  |   move.l 52(sp),d0
    6cee:	|     |  |   lsl.l #3,d0
    6cf0:	|     |  |   adda.l d0,a0
    6cf2:	|     |  |   move.l d1,d0
    6cf4:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6cf6:	|     |  |   move.l 1cc8c <bigDataFile>,d0
    6cfc:	|     |  |   move.l d0,-(sp)
    6cfe:	|     |  |   jsr 6bc <get2bytes>
    6d04:	|     |  |   addq.l #4,sp
    6d06:	|     |  |   move.l d0,d1
    6d08:	|     |  |   movea.l 60(sp),a0
    6d0c:	|     |  |   movea.l 4(a0),a0
    6d10:	|     |  |   move.l 52(sp),d0
    6d14:	|     |  |   lsl.l #3,d0
    6d16:	|     |  |   adda.l d0,a0
    6d18:	|     |  |   move.l d1,d0
    6d1a:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6d1e:	|     |  |   addq.l #1,52(sp)
    6d22:	|     |  '-> move.l 52(sp),d0
    6d26:	|     |      cmp.l 36(sp),d0
    6d2a:	|     '----- bcs.s 6cc2 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6d2c:	|            jsr 7782 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6d32:	|            movea.l 60(sp),a0
    6d36:	|            move.l 8(a0),d0
    6d3a:	|  ,-------- ble.w 6dbe <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6d3e:	|  |         movea.l 60(sp),a0
    6d42:	|  |         move.l 8(a0),d0
    6d46:	|  |         lsl.l #3,d0
    6d48:	|  |         move.l d0,20(sp)
    6d4c:	|  |         clr.l 16(sp)
    6d50:	|  |         move.l 1cca4 <SysBase>,d0
    6d56:	|  |         movea.l d0,a6
    6d58:	|  |         move.l 20(sp),d0
    6d5c:	|  |         move.l 16(sp),d1
    6d60:	|  |         jsr -684(a6)
    6d64:	|  |         move.l d0,12(sp)
    6d68:	|  |         move.l 12(sp),d0
    6d6c:	|  |         movea.l 60(sp),a0
    6d70:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6d74:	|  |         movea.l 60(sp),a0
    6d78:	|  |         move.l 20(a0),d0
    6d7c:	|  |     ,-- bne.s 6d90 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6d7e:	|  |     |   pea 18d98 <PutChar+0xea0>
    6d84:	|  |     |   jsr 17456 <KPrintF>
    6d8a:	|  |     |   addq.l #4,sp
			return FALSE;
    6d8c:	|  |     |   clr.w d0
    6d8e:	+--|-----|-- bra.s 6dc8 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6d90:	|  |     '-> clr.l 48(sp)
    6d94:	|  |     ,-- bra.s 6dae <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6d96:	|  |  ,--|-> movea.l 60(sp),a0
    6d9a:	|  |  |  |   move.l 20(a0),d1
    6d9e:	|  |  |  |   move.l 48(sp),d0
    6da2:	|  |  |  |   lsl.l #3,d0
    6da4:	|  |  |  |   movea.l d1,a0
    6da6:	|  |  |  |   adda.l d0,a0
    6da8:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6daa:	|  |  |  |   addq.l #1,48(sp)
    6dae:	|  |  |  '-> movea.l 60(sp),a0
    6db2:	|  |  |      move.l 8(a0),d0
    6db6:	|  |  |      cmp.l 48(sp),d0
    6dba:	|  |  '----- bgt.s 6d96 <loadFunctionCode+0x1b8>
    6dbc:	|  |     ,-- bra.s 6dc6 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6dbe:	|  '-----|-> movea.l 60(sp),a0
    6dc2:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6dc6:	|        '-> moveq #1,d0
}
    6dc8:	'----------> movea.l (sp)+,a6
    6dca:	             lea 52(sp),sp
    6dce:	             rts

00006dd0 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6dd0:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6dd2:	movea.l 1c614 <currentEvents>,a2
    6dd8:	move.l 8(sp),-(sp)
    6ddc:	jsr 6bc <get2bytes>
    6de2:	addq.l #4,sp
    6de4:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6de6:	movea.l 1c614 <currentEvents>,a2
    6dec:	move.l 8(sp),-(sp)
    6df0:	jsr 6bc <get2bytes>
    6df6:	addq.l #4,sp
    6df8:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6dfc:	movea.l 1c614 <currentEvents>,a2
    6e02:	move.l 8(sp),-(sp)
    6e06:	jsr 6bc <get2bytes>
    6e0c:	addq.l #4,sp
    6e0e:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6e12:	movea.l 1c614 <currentEvents>,a2
    6e18:	move.l 8(sp),-(sp)
    6e1c:	jsr 6bc <get2bytes>
    6e22:	addq.l #4,sp
    6e24:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6e28:	movea.l 1c614 <currentEvents>,a2
    6e2e:	move.l 8(sp),-(sp)
    6e32:	jsr 6bc <get2bytes>
    6e38:	addq.l #4,sp
    6e3a:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    6e3e:	move.l 8(sp),-(sp)
    6e42:	jsr 718 <get4bytes>
    6e48:	addq.l #4,sp
    6e4a:	movea.l 1c614 <currentEvents>,a0
    6e50:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6e54:	movea.l 1c614 <currentEvents>,a2
    6e5a:	move.l 8(sp),-(sp)
    6e5e:	jsr 6bc <get2bytes>
    6e64:	addq.l #4,sp
    6e66:	move.l d0,24(a2)
}
    6e6a:	nop
    6e6c:	movea.l (sp)+,a2
    6e6e:	rts

00006e70 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6e70:	       lea -312(sp),sp
    6e74:	       movem.l d2-d3/a6,-(sp)
    6e78:	       move.l 332(sp),d1
    6e7c:	       move.l 336(sp),d0
    6e80:	       move.b d1,d1
    6e82:	       move.b d1,16(sp)
    6e86:	       move.b d0,d0
    6e88:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6e8c:	       move.l 328(sp),318(sp)
    6e92:	       move.l #1005,314(sp)
    6e9a:	       move.l 1ccac <DOSBase>,d0
    6ea0:	       movea.l d0,a6
    6ea2:	       move.l 318(sp),d1
    6ea6:	       move.l 314(sp),d2
    6eaa:	       jsr -30(a6)
    6eae:	       move.l d0,310(sp)
    6eb2:	       move.l 310(sp),d0
    6eb6:	       move.l d0,306(sp)

	if (! fp) {
    6eba:	   ,-- bne.s 6f16 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6ebc:	   |   move.l 1ccac <DOSBase>,d0
    6ec2:	   |   movea.l d0,a6
    6ec4:	   |   jsr -60(a6)
    6ec8:	   |   move.l d0,154(sp)
    6ecc:	   |   move.l 154(sp),d0
    6ed0:	   |   move.l d0,150(sp)
    6ed4:	   |   move.l #101825,146(sp)
    6edc:	   |   moveq #31,d0
    6ede:	   |   move.l d0,142(sp)
    6ee2:	   |   move.l 1ccac <DOSBase>,d0
    6ee8:	   |   movea.l d0,a6
    6eea:	   |   move.l 150(sp),d1
    6eee:	   |   move.l 146(sp),d2
    6ef2:	   |   move.l 142(sp),d3
    6ef6:	   |   jsr -48(a6)
    6efa:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6efe:	   |   move.l 328(sp),-(sp)
    6f02:	   |   pea 18de1 <PutChar+0xee9>
    6f08:	   |   jsr 17456 <KPrintF>
    6f0e:	   |   addq.l #8,sp
		return NULL;
    6f10:	   |   moveq #0,d0
    6f12:	,--|-- bra.w 71d6 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6f16:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6f1a:	|      move.l 306(sp),302(sp)
    6f20:	|      move.l 1ccac <DOSBase>,d0
    6f26:	|      movea.l d0,a6
    6f28:	|      move.l 302(sp),d1
    6f2c:	|      jsr -306(a6)
    6f30:	|      move.l d0,298(sp)
    6f34:	|      move.l 298(sp),d0
    6f38:	|      moveq #83,d1
    6f3a:	|      cmp.l d0,d1
    6f3c:	|  ,-- beq.s 6f44 <openAndVerify+0xd4>
    6f3e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6f44:	|  '-> move.l 306(sp),294(sp)
    6f4a:	|      move.l 1ccac <DOSBase>,d0
    6f50:	|      movea.l d0,a6
    6f52:	|      move.l 294(sp),d1
    6f56:	|      jsr -306(a6)
    6f5a:	|      move.l d0,290(sp)
    6f5e:	|      move.l 290(sp),d0
    6f62:	|      moveq #76,d1
    6f64:	|      cmp.l d0,d1
    6f66:	|  ,-- beq.s 6f6e <openAndVerify+0xfe>
    6f68:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6f6e:	|  '-> move.l 306(sp),286(sp)
    6f74:	|      move.l 1ccac <DOSBase>,d0
    6f7a:	|      movea.l d0,a6
    6f7c:	|      move.l 286(sp),d1
    6f80:	|      jsr -306(a6)
    6f84:	|      move.l d0,282(sp)
    6f88:	|      move.l 282(sp),d0
    6f8c:	|      moveq #85,d1
    6f8e:	|      cmp.l d0,d1
    6f90:	|  ,-- beq.s 6f98 <openAndVerify+0x128>
    6f92:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6f98:	|  '-> move.l 306(sp),278(sp)
    6f9e:	|      move.l 1ccac <DOSBase>,d0
    6fa4:	|      movea.l d0,a6
    6fa6:	|      move.l 278(sp),d1
    6faa:	|      jsr -306(a6)
    6fae:	|      move.l d0,274(sp)
    6fb2:	|      move.l 274(sp),d0
    6fb6:	|      moveq #68,d1
    6fb8:	|      cmp.l d0,d1
    6fba:	|  ,-- beq.s 6fc2 <openAndVerify+0x152>
    6fbc:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6fc2:	|  '-> move.l 306(sp),270(sp)
    6fc8:	|      move.l 1ccac <DOSBase>,d0
    6fce:	|      movea.l d0,a6
    6fd0:	|      move.l 270(sp),d1
    6fd4:	|      jsr -306(a6)
    6fd8:	|      move.l d0,266(sp)
    6fdc:	|      move.l 266(sp),d1
    6fe0:	|      move.b 16(sp),d0
    6fe4:	|      ext.w d0
    6fe6:	|      movea.w d0,a0
    6fe8:	|      cmpa.l d1,a0
    6fea:	|  ,-- beq.s 6ff2 <openAndVerify+0x182>
    6fec:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6ff2:	|  '-> move.l 306(sp),262(sp)
    6ff8:	|      move.l 1ccac <DOSBase>,d0
    6ffe:	|      movea.l d0,a6
    7000:	|      move.l 262(sp),d1
    7004:	|      jsr -306(a6)
    7008:	|      move.l d0,258(sp)
    700c:	|      move.l 258(sp),d1
    7010:	|      move.b 14(sp),d0
    7014:	|      ext.w d0
    7016:	|      movea.w d0,a0
    7018:	|      cmpa.l d1,a0
    701a:	|  ,-- beq.s 7022 <openAndVerify+0x1b2>
    701c:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7022:	|  '-> tst.w 322(sp)
    7026:	|  ,-- beq.s 707e <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    7028:	|  |   move.l 1ccac <DOSBase>,d0
    702e:	|  |   movea.l d0,a6
    7030:	|  |   jsr -60(a6)
    7034:	|  |   move.l d0,174(sp)
    7038:	|  |   move.l 174(sp),d0
    703c:	|  |   move.l d0,170(sp)
    7040:	|  |   move.l #101888,166(sp)
    7048:	|  |   moveq #31,d0
    704a:	|  |   move.l d0,162(sp)
    704e:	|  |   move.l 1ccac <DOSBase>,d0
    7054:	|  |   movea.l d0,a6
    7056:	|  |   move.l 170(sp),d1
    705a:	|  |   move.l 166(sp),d2
    705e:	|  |   move.l 162(sp),d3
    7062:	|  |   jsr -48(a6)
    7066:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    706a:	|  |   pea 18e00 <PutChar+0xf08>
    7070:	|  |   jsr 17456 <KPrintF>
    7076:	|  |   addq.l #4,sp
		return NULL;
    7078:	|  |   moveq #0,d0
    707a:	+--|-- bra.w 71d6 <openAndVerify+0x366>
	}
	FGetC (fp);
    707e:	|  '-> move.l 306(sp),254(sp)
    7084:	|      move.l 1ccac <DOSBase>,d0
    708a:	|      movea.l d0,a6
    708c:	|      move.l 254(sp),d1
    7090:	|      jsr -306(a6)
    7094:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    7098:	|      nop
    709a:	|  ,-> move.l 306(sp),246(sp)
    70a0:	|  |   move.l 1ccac <DOSBase>,d0
    70a6:	|  |   movea.l d0,a6
    70a8:	|  |   move.l 246(sp),d1
    70ac:	|  |   jsr -306(a6)
    70b0:	|  |   move.l d0,242(sp)
    70b4:	|  |   move.l 242(sp),d0
    70b8:	|  '-- bne.s 709a <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    70ba:	|      move.l 306(sp),238(sp)
    70c0:	|      move.l 1ccac <DOSBase>,d0
    70c6:	|      movea.l d0,a6
    70c8:	|      move.l 238(sp),d1
    70cc:	|      jsr -306(a6)
    70d0:	|      move.l d0,234(sp)
    70d4:	|      move.l 234(sp),d0
    70d8:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    70dc:	|      move.l 306(sp),226(sp)
    70e2:	|      move.l 1ccac <DOSBase>,d0
    70e8:	|      movea.l d0,a6
    70ea:	|      move.l 226(sp),d1
    70ee:	|      jsr -306(a6)
    70f2:	|      move.l d0,222(sp)
    70f6:	|      move.l 222(sp),d0
    70fa:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    70fe:	|      move.l 230(sp),d0
    7102:	|      lsl.l #8,d0
    7104:	|      add.l 218(sp),d0
    7108:	|      movea.l 344(sp),a0
    710c:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    710e:	|      movea.l 344(sp),a0
    7112:	|      move.l (a0),d0
    7114:	|      cmpi.l #514,d0
    711a:	|  ,-- ble.s 7170 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    711c:	|  |   move.l 1ccac <DOSBase>,d0
    7122:	|  |   movea.l d0,a6
    7124:	|  |   jsr -60(a6)
    7128:	|  |   move.l d0,194(sp)
    712c:	|  |   move.l 194(sp),d0
    7130:	|  |   move.l d0,190(sp)
    7134:	|  |   move.l #101915,186(sp)
    713c:	|  |   moveq #100,d1
    713e:	|  |   move.l d1,182(sp)
    7142:	|  |   move.l 1ccac <DOSBase>,d0
    7148:	|  |   movea.l d0,a6
    714a:	|  |   move.l 190(sp),d1
    714e:	|  |   move.l 186(sp),d2
    7152:	|  |   move.l 182(sp),d3
    7156:	|  |   jsr -48(a6)
    715a:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    715e:	|  |   pea 18e1b <PutChar+0xf23>
    7164:	|  |   jsr 17456 <KPrintF>
    716a:	|  |   addq.l #4,sp
		return NULL;
    716c:	|  |   moveq #0,d0
    716e:	+--|-- bra.s 71d6 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7170:	|  '-> movea.l 344(sp),a0
    7174:	|      move.l (a0),d0
    7176:	|      cmpi.l #257,d0
    717c:	|  ,-- bgt.s 71d2 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    717e:	|  |   move.l 1ccac <DOSBase>,d0
    7184:	|  |   movea.l d0,a6
    7186:	|  |   jsr -60(a6)
    718a:	|  |   move.l d0,214(sp)
    718e:	|  |   move.l 214(sp),d0
    7192:	|  |   move.l d0,210(sp)
    7196:	|  |   move.l #101984,206(sp)
    719e:	|  |   moveq #100,d0
    71a0:	|  |   move.l d0,202(sp)
    71a4:	|  |   move.l 1ccac <DOSBase>,d0
    71aa:	|  |   movea.l d0,a6
    71ac:	|  |   move.l 210(sp),d1
    71b0:	|  |   move.l 206(sp),d2
    71b4:	|  |   move.l 202(sp),d3
    71b8:	|  |   jsr -48(a6)
    71bc:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    71c0:	|  |   pea 18e60 <PutChar+0xf68>
    71c6:	|  |   jsr 17456 <KPrintF>
    71cc:	|  |   addq.l #4,sp
		return NULL;
    71ce:	|  |   moveq #0,d0
    71d0:	+--|-- bra.s 71d6 <openAndVerify+0x366>
	}
	return fp;
    71d2:	|  '-> move.l 306(sp),d0
}
    71d6:	'----> movem.l (sp)+,d2-d3/a6
    71da:	       lea 312(sp),sp
    71de:	       rts

000071e0 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    71e0:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    71e2:	          move.l #117820,(sp)
	while (* huntAndDestroy) {
    71e8:	   ,----- bra.s 7214 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    71ea:	,--|----> movea.l (sp),a0
    71ec:	|  |      move.l (a0),d0
    71ee:	|  |      cmp.l 8(sp),d0
    71f2:	|  |  ,-- bne.s 720a <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    71f4:	|  |  |   movea.l (sp),a0
    71f6:	|  |  |   movea.l (a0),a0
    71f8:	|  |  |   move.l 44(a0),d0
    71fc:	|  |  |   movea.l (sp),a0
    71fe:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7200:	|  |  |   movea.l 8(sp),a0
    7204:	|  |  |   clr.l 44(a0)
    7208:	|  +--|-- bra.s 7214 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    720a:	|  |  '-> movea.l (sp),a0
    720c:	|  |      move.l (a0),d0
    720e:	|  |      moveq #44,d1
    7210:	|  |      add.l d0,d1
    7212:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    7214:	|  '----> movea.l (sp),a0
    7216:	|         move.l (a0),d0
    7218:	'-------- bne.s 71ea <pauseFunction+0xa>
		}
	}
}
    721a:	          nop
    721c:	          nop
    721e:	          addq.l #4,sp
    7220:	          rts

00007222 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    7222:	       lea -16(sp),sp
    7226:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7228:	       moveq #58,d0
    722a:	       move.l d0,16(sp)
    722e:	       clr.l 12(sp)
    7232:	       move.l 1cca4 <SysBase>,d0
    7238:	       movea.l d0,a6
    723a:	       move.l 16(sp),d0
    723e:	       move.l 12(sp),d1
    7242:	       jsr -684(a6)
    7246:	       move.l d0,8(sp)
    724a:	       move.l 8(sp),d0
    724e:	       move.l d0,4(sp)
	if(!newFunc) {
    7252:	   ,-- bne.s 7266 <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    7254:	   |   pea 18ea7 <PutChar+0xfaf>
    725a:	   |   jsr 17456 <KPrintF>
    7260:	   |   addq.l #4,sp
		return 0;
    7262:	   |   moveq #0,d0
    7264:	,--|-- bra.s 7280 <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    7266:	|  '-> move.l 24(sp),d0
    726a:	|      movea.l 4(sp),a0
    726e:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7270:	|      move.l 4(sp),-(sp)
    7274:	|      jsr 6bde <loadFunctionCode>
    727a:	|      addq.l #4,sp

	return newFunc;
    727c:	|      move.l 4(sp),d0
}
    7280:	'----> movea.l (sp)+,a6
    7282:	       lea 16(sp),sp
    7286:	       rts

00007288 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    7288:	move.l 1cc3c <allRunningFunctions>,d0
    728e:	movea.l 4(sp),a0
    7292:	move.l d0,44(a0)
	allRunningFunctions = fun;
    7296:	move.l 4(sp),1cc3c <allRunningFunctions>
}
    729e:	nop
    72a0:	rts

000072a2 <runSludge>:

BOOL runSludge () {
    72a2:	                   lea -12(sp),sp
    72a6:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    72a8:	                   move.l 1cc3c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    72b0:	      ,----------- bra.s 732c <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    72b2:	   ,--|----------> movea.l 12(sp),a0
    72b6:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    72bc:	   |  |            movea.l 12(sp),a0
    72c0:	   |  |            move.b 56(a0),d0
    72c4:	   |  |  ,-------- bne.s 7326 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    72c6:	   |  |  |         movea.l 12(sp),a0
    72ca:	   |  |  |         move.l 12(a0),d0
    72ce:	   |  |  |  ,----- beq.s 72f8 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    72d0:	   |  |  |  |      movea.l 12(sp),a0
    72d4:	   |  |  |  |      move.l 12(a0),d0
    72d8:	   |  |  |  |  ,-- bpl.s 72e4 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    72da:	   |  |  |  |  |   movea.l 12(sp),a0
    72de:	   |  |  |  |  |   clr.l 12(a0)
    72e2:	   |  |  +--|--|-- bra.s 7326 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    72e4:	   |  |  |  |  '-> movea.l 12(sp),a0
    72e8:	   |  |  |  |      move.l 12(a0),d0
    72ec:	   |  |  |  |      subq.l #1,d0
				} else if (
    72ee:	   |  |  |  |      movea.l 12(sp),a0
    72f2:	   |  |  |  |      move.l d0,12(a0)
    72f6:	   |  |  +--|----- bra.s 7326 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    72f8:	   |  |  |  '----> movea.l 12(sp),a0
    72fc:	   |  |  |         move.w 50(a0),d0
    7300:	   |  |  |     ,-- beq.s 7310 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7302:	   |  |  |     |   movea.l 12(sp),a0
    7306:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    730a:	   |  |  |     |   jsr 408a <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7310:	   |  |  |     '-> move.l 12(sp),-(sp)
    7314:	   |  |  |         jsr 529a <continueFunction>
    731a:	   |  |  |         addq.l #4,sp
    731c:	   |  |  |         tst.w d0
    731e:	   |  |  +-------- bne.s 7326 <runSludge+0x84>
					return FALSE;
    7320:	   |  |  |         clr.w d0
    7322:	,--|--|--|-------- bra.w 73b2 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7326:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    732c:	|  |  '----------> tst.l 12(sp)
    7330:	|  '-------------- bne.s 72b2 <runSludge+0x10>
	}

	if (loadNow) {
    7332:	|                  move.l 1cc70 <loadNow>,d0
    7338:	|        ,-------- beq.s 73b0 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    733a:	|        |         movea.l 1cc70 <loadNow>,a0
    7340:	|        |         move.b (a0),d0
    7342:	|        |         cmpi.b #58,d0
    7346:	|        |  ,----- bne.s 737a <runSludge+0xd8>
			saveGame (loadNow + 1);
    7348:	|        |  |      move.l 1cc70 <loadNow>,d0
    734e:	|        |  |      addq.l #1,d0
    7350:	|        |  |      move.l d0,-(sp)
    7352:	|        |  |      jsr c8b6 <saveGame>
    7358:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    735a:	|        |  |      movea.l 1cd6a <saverFunc>,a0
    7360:	|        |  |      lea 28(a0),a0
    7364:	|        |  |      pea 1 <_start+0x1>
    7368:	|        |  |      pea 1 <_start+0x1>
    736c:	|        |  |      move.l a0,-(sp)
    736e:	|        |  |      jsr 15268 <setVariable>
    7374:	|        |  |      lea 12(sp),sp
    7378:	|        |  |  ,-- bra.s 7392 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    737a:	|        |  '--|-> move.l 1cc70 <loadNow>,d0
    7380:	|        |     |   move.l d0,-(sp)
    7382:	|        |     |   jsr c3fe <loadGame>
    7388:	|        |     |   addq.l #4,sp
    738a:	|        |     |   tst.w d0
    738c:	|        |     +-- bne.s 7392 <runSludge+0xf0>
    738e:	|        |     |   clr.w d0
    7390:	+--------|-----|-- bra.s 73b2 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7392:	|        |     '-> move.l 1cc70 <loadNow>,8(sp)
    739a:	|        |         move.l 1cca4 <SysBase>,d0
    73a0:	|        |         movea.l d0,a6
    73a2:	|        |         movea.l 8(sp),a1
    73a6:	|        |         jsr -690(a6)
		loadNow = NULL;
    73aa:	|        |         clr.l 1cc70 <loadNow>
	}

	return TRUE;
    73b0:	|        '-------> moveq #1,d0
}
    73b2:	'----------------> movea.l (sp)+,a6
    73b4:	                   lea 12(sp),sp
    73b8:	                   rts

000073ba <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    73ba:	movea.l 1c614 <currentEvents>,a0
    73c0:	move.l (a0),d0
    73c2:	move.l 4(sp),-(sp)
    73c6:	move.l d0,-(sp)
    73c8:	jsr 8d0 <put2bytes>
    73ce:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    73d0:	movea.l 1c614 <currentEvents>,a0
    73d6:	move.l 4(a0),d0
    73da:	move.l 4(sp),-(sp)
    73de:	move.l d0,-(sp)
    73e0:	jsr 8d0 <put2bytes>
    73e6:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    73e8:	movea.l 1c614 <currentEvents>,a0
    73ee:	move.l 8(a0),d0
    73f2:	move.l 4(sp),-(sp)
    73f6:	move.l d0,-(sp)
    73f8:	jsr 8d0 <put2bytes>
    73fe:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7400:	movea.l 1c614 <currentEvents>,a0
    7406:	move.l 12(a0),d0
    740a:	move.l 4(sp),-(sp)
    740e:	move.l d0,-(sp)
    7410:	jsr 8d0 <put2bytes>
    7416:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7418:	movea.l 1c614 <currentEvents>,a0
    741e:	move.l 16(a0),d0
    7422:	move.l 4(sp),-(sp)
    7426:	move.l d0,-(sp)
    7428:	jsr 8d0 <put2bytes>
    742e:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7430:	movea.l 1c614 <currentEvents>,a0
    7436:	move.l 20(a0),d0
    743a:	move.l 4(sp),-(sp)
    743e:	move.l d0,-(sp)
    7440:	jsr 958 <put4bytes>
    7446:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7448:	movea.l 1c614 <currentEvents>,a0
    744e:	move.l 24(a0),d0
    7452:	move.l 4(sp),-(sp)
    7456:	move.l d0,-(sp)
    7458:	jsr 8d0 <put2bytes>
    745e:	addq.l #8,sp
}
    7460:	nop
    7462:	rts

00007464 <sludgeDisplay>:

void sludgeDisplay () {					
    7464:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7466:	move.l #14675968,(sp)
	displayCursor();
    746c:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7472:	jsr 15c4 <CstDrawBackdrop>
	CstRestoreScreen();
    7478:	jsr 2b52 <CstRestoreScreen>
	drawPeople();
    747e:	jsr a138 <drawPeople>
	CstSwapBuffer();
    7484:	jsr 3742 <CstSwapBuffer>
}
    748a:	nop
    748c:	addq.l #4,sp
    748e:	rts

00007490 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7490:	      ,-- bra.s 74b0 <stackSetByIndex+0x20>
		vS = vS->next;
    7492:	,-----|-> movea.l 4(sp),a0
    7496:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    749c:	|     +-- bne.s 74b0 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    749e:	|     |   pea 18ed0 <PutChar+0xfd8>
    74a4:	|     |   jsr 17456 <KPrintF>
    74aa:	|     |   addq.l #4,sp
			return FALSE;
    74ac:	|     |   clr.w d0
    74ae:	|  ,--|-- bra.s 74d2 <stackSetByIndex+0x42>
	while (theIndex--) {
    74b0:	|  |  '-> move.l 8(sp),d0
    74b4:	|  |      move.l d0,d1
    74b6:	|  |      subq.l #1,d1
    74b8:	|  |      move.l d1,8(sp)
    74bc:	|  |      tst.l d0
    74be:	'--|----- bne.s 7492 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    74c0:	   |      move.l 4(sp),d0
    74c4:	   |      move.l d0,-(sp)
    74c6:	   |      move.l 16(sp),-(sp)
    74ca:	   |      jsr 14e30 <copyVariable>
    74d0:	   |      addq.l #8,sp
}
    74d2:	   '----> rts

000074d4 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    74d4:	             subq.l #8,sp
    74d6:	             move.l 28(sp),d0
    74da:	             move.w d0,d0
    74dc:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    74e0:	             movea.l 12(sp),a0
    74e4:	             move.l 16(a0),d1
    74e8:	             move.l 16(sp),d0
    74ec:	             cmp.l d1,d0
    74ee:	         ,-- beq.s 7504 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    74f0:	         |   pea 18ee9 <PutChar+0xff1>
    74f6:	         |   jsr 17456 <KPrintF>
    74fc:	         |   addq.l #4,sp
		return NULL; 
    74fe:	         |   moveq #0,d0
    7500:	,--------|-- bra.w 75e0 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7504:	|        '-> movea.l 12(sp),a0
    7508:	|            move.l 16(a0),d1
    750c:	|            movea.l 12(sp),a0
    7510:	|            move.l 8(a0),d0
    7514:	|            cmp.l d1,d0
    7516:	|  ,-------- bge.s 7580 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7518:	|  |         pea 18f05 <PutChar+0x100d>
    751e:	|  |         jsr 17456 <KPrintF>
    7524:	|  |         addq.l #4,sp
		return NULL; 
    7526:	|  |         moveq #0,d0
    7528:	+--|-------- bra.w 75e0 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    752c:	|  |  ,----> movea.l 24(sp),a0
    7530:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7534:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7538:	|  |  |      movea.l 24(sp),a0
    753c:	|  |  |      move.l (a0),d0
    753e:	|  |  |  ,-- bne.s 7554 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7540:	|  |  |  |   pea 18f2f <PutChar+0x1037>
    7546:	|  |  |  |   jsr 17456 <KPrintF>
    754c:	|  |  |  |   addq.l #4,sp
			return NULL;
    754e:	|  |  |  |   moveq #0,d0
    7550:	+--|--|--|-- bra.w 75e0 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7554:	|  |  |  '-> movea.l 12(sp),a0
    7558:	|  |  |      move.l 20(a0),d1
    755c:	|  |  |      move.l 16(sp),d0
    7560:	|  |  |      lsl.l #3,d0
    7562:	|  |  |      add.l d0,d1
    7564:	|  |  |      move.l 4(sp),d0
    7568:	|  |  |      move.l d1,-(sp)
    756a:	|  |  |      move.l d0,-(sp)
    756c:	|  |  |      jsr 14e30 <copyVariable>
    7572:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7574:	|  |  |      move.l 24(sp),-(sp)
    7578:	|  |  |      jsr 152fa <trimStack>
    757e:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7580:	|  '--|----> tst.l 16(sp)
    7584:	|     '----- bne.s 752c <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    7586:	|            movea.l 12(sp),a0
    758a:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    758e:	|            movea.l 12(sp),a0
    7592:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7596:	|            movea.l 12(sp),a0
    759a:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    75a0:	|            movea.l 12(sp),a0
    75a4:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    75aa:	|            movea.l 12(sp),a0
    75ae:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    75b2:	|            movea.l 12(sp),a0
    75b6:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    75ba:	|            movea.l 12(sp),a0
    75be:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    75c2:	|            movea.l 12(sp),a0
    75c6:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    75ca:	|            movea.l 12(sp),a0
    75ce:	|            clr.l 28(a0)

	restartFunction (newFunc);
    75d2:	|            move.l 12(sp),-(sp)
    75d6:	|            jsr 7288 <restartFunction>
    75dc:	|            addq.l #4,sp
	return 1;
    75de:	|            moveq #1,d0
}
    75e0:	'----------> addq.l #8,sp
    75e2:	             rts

000075e4 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    75e4:	       lea -24(sp),sp
    75e8:	       move.l a6,-(sp)
    75ea:	       move.l 48(sp),d0
    75ee:	       move.w d0,d0
    75f0:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    75f4:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    75fc:	       moveq #58,d0
    75fe:	       move.l d0,20(sp)
    7602:	       clr.l 16(sp)
    7606:	       move.l 1cca4 <SysBase>,d0
    760c:	       movea.l d0,a6
    760e:	       move.l 20(sp),d0
    7612:	       move.l 16(sp),d1
    7616:	       jsr -684(a6)
    761a:	       move.l d0,12(sp)
    761e:	       move.l 12(sp),d0
    7622:	       move.l d0,8(sp)
	if(!newFunc) {
    7626:	   ,-- bne.s 763a <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    7628:	   |   pea 18ea7 <PutChar+0xfaf>
    762e:	   |   jsr 17456 <KPrintF>
    7634:	   |   addq.l #4,sp
		return 0;
    7636:	   |   moveq #0,d0
    7638:	,--|-- bra.s 7688 <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    763a:	|  '-> cmpi.l #145,32(sp)
    7642:	|  ,-- bne.s 7652 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    7644:	|  |   pea 18f7a <PutChar+0x1082>
    764a:	|  |   jsr 17456 <KPrintF>
    7650:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    7652:	|  '-> move.l 32(sp),d0
    7656:	|      movea.l 8(sp),a0
    765a:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    765c:	|      move.l 8(sp),-(sp)
    7660:	|      jsr 6bde <loadFunctionCode>
    7666:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7668:	|      movea.w 6(sp),a0
    766c:	|      move.l a0,-(sp)
    766e:	|      move.l 48(sp),-(sp)
    7672:	|      move.l 48(sp),-(sp)
    7676:	|      move.l 48(sp),-(sp)
    767a:	|      move.l 24(sp),-(sp)
    767e:	|      jsr 74d4 <startNewFunctionLoaded>
    7684:	|      lea 20(sp),sp
}
    7688:	'----> movea.l (sp)+,a6
    768a:	       lea 24(sp),sp
    768e:	       rts

00007690 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7690:	             lea -12(sp),sp
    7694:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7696:	             movea.l 1c614 <currentEvents>,a0
    769c:	             move.l 20(a0),d0
    76a0:	             cmp.l 20(sp),d0
    76a4:	,----------- beq.w 7746 <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    76a8:	|            movea.l 20(sp),a0
    76ac:	|            move.l 24(a0),d0
    76b0:	|        ,-- beq.s 76c4 <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    76b2:	|        |   pea 18f98 <PutChar+0x10a0>
    76b8:	|        |   jsr 17456 <KPrintF>
    76be:	|        |   addq.l #4,sp
		return;
    76c0:	|  ,-----|-- bra.w 7748 <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    76c4:	|  |     '-> movea.l 20(sp),a0
    76c8:	|  |         move.l 4(a0),8(sp)
    76ce:	|  |         move.l 1cca4 <SysBase>,d0
    76d4:	|  |         movea.l d0,a6
    76d6:	|  |         movea.l 8(sp),a1
    76da:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    76de:	|  |         clr.l 12(sp)
    76e2:	|  |     ,-- bra.s 7702 <unloadFunction+0x72>
    76e4:	|  |  ,--|-> movea.l 20(sp),a0
    76e8:	|  |  |  |   move.l 20(a0),d1
    76ec:	|  |  |  |   move.l 12(sp),d0
    76f0:	|  |  |  |   lsl.l #3,d0
    76f2:	|  |  |  |   add.l d1,d0
    76f4:	|  |  |  |   move.l d0,-(sp)
    76f6:	|  |  |  |   jsr 14bc4 <unlinkVar>
    76fc:	|  |  |  |   addq.l #4,sp
    76fe:	|  |  |  |   addq.l #1,12(sp)
    7702:	|  |  |  '-> movea.l 20(sp),a0
    7706:	|  |  |      move.l 8(a0),d0
    770a:	|  |  |      cmp.l 12(sp),d0
    770e:	|  |  '----- bgt.s 76e4 <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    7710:	|  |         movea.l 20(sp),a0
    7714:	|  |         move.l 8(a0),d0
    7718:	|  |     ,-- ble.s 7734 <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    771a:	|  |     |   movea.l 20(sp),a0
    771e:	|  |     |   move.l 20(a0),4(sp)
    7724:	|  |     |   move.l 1cca4 <SysBase>,d0
    772a:	|  |     |   movea.l d0,a6
    772c:	|  |     |   movea.l 4(sp),a1
    7730:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7734:	|  |     '-> moveq #28,d0
    7736:	|  |         add.l 20(sp),d0
    773a:	|  |         move.l d0,-(sp)
    773c:	|  |         jsr 14bc4 <unlinkVar>
    7742:	|  |         addq.l #4,sp
    7744:	|  +-------- bra.s 7748 <unloadFunction+0xb8>
		return;
    7746:	'--|-------> nop
}
    7748:	   '-------> movea.l (sp)+,a6
    774a:	             lea 12(sp),sp
    774e:	             rts

00007750 <unfreezeSubs>:

void unfreezeSubs () {
    7750:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7752:	          move.l 1cc3c <allRunningFunctions>,(sp)

	while (thisFunction) {
    7758:	   ,----- bra.s 7776 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    775a:	,--|----> movea.l (sp),a0
    775c:	|  |      move.b 56(a0),d0
    7760:	|  |  ,-- beq.s 7770 <unfreezeSubs+0x20>
    7762:	|  |  |   movea.l (sp),a0
    7764:	|  |  |   move.b 56(a0),d0
    7768:	|  |  |   subq.b #1,d0
    776a:	|  |  |   movea.l (sp),a0
    776c:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7770:	|  |  '-> movea.l (sp),a0
    7772:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7776:	|  '----> tst.l (sp)
    7778:	'-------- bne.s 775a <unfreezeSubs+0xa>
	}
}
    777a:	          nop
    777c:	          nop
    777e:	          addq.l #4,sp
    7780:	          rts

00007782 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7782:	clr.w 1c620 <sliceBusy>
}
    7788:	nop
    778a:	rts

0000778c <getNumberedString>:

char * getNumberedString (int value) {
    778c:	       lea -56(sp),sp
    7790:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7794:	       move.w 1c620 <sliceBusy>,d0
    779a:	   ,-- beq.s 77e4 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    779c:	   |   move.l 1ccac <DOSBase>,d0
    77a2:	   |   movea.l d0,a6
    77a4:	   |   jsr -60(a6)
    77a8:	   |   move.l d0,28(sp)
    77ac:	   |   move.l 28(sp),d0
    77b0:	   |   move.l d0,24(sp)
    77b4:	   |   move.l #102334,20(sp)
    77bc:	   |   moveq #76,d0
    77be:	   |   move.l d0,16(sp)
    77c2:	   |   move.l 1ccac <DOSBase>,d0
    77c8:	   |   movea.l d0,a6
    77ca:	   |   move.l 24(sp),d1
    77ce:	   |   move.l 20(sp),d2
    77d2:	   |   move.l 16(sp),d3
    77d6:	   |   jsr -48(a6)
    77da:	   |   move.l d0,12(sp)
		return NULL;
    77de:	   |   moveq #0,d0
    77e0:	,--|-- bra.w 7880 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    77e4:	|  '-> move.l 1cc8c <bigDataFile>,64(sp)
    77ec:	|      move.l 72(sp),d0
    77f0:	|      add.l d0,d0
    77f2:	|      add.l d0,d0
    77f4:	|      move.l d0,d1
    77f6:	|      move.l 1cc98 <startOfTextIndex>,d0
    77fc:	|      add.l d1,d0
    77fe:	|      move.l d0,60(sp)
    7802:	|      moveq #-1,d0
    7804:	|      move.l d0,56(sp)
    7808:	|      move.l 1ccac <DOSBase>,d0
    780e:	|      movea.l d0,a6
    7810:	|      move.l 64(sp),d1
    7814:	|      move.l 60(sp),d2
    7818:	|      move.l 56(sp),d3
    781c:	|      jsr -66(a6)
    7820:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7824:	|      move.l 1cc8c <bigDataFile>,d0
    782a:	|      move.l d0,-(sp)
    782c:	|      jsr 718 <get4bytes>
    7832:	|      addq.l #4,sp
    7834:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7838:	|      move.l 1cc8c <bigDataFile>,48(sp)
    7840:	|      move.l 72(sp),44(sp)
    7846:	|      moveq #-1,d0
    7848:	|      move.l d0,40(sp)
    784c:	|      move.l 1ccac <DOSBase>,d0
    7852:	|      movea.l d0,a6
    7854:	|      move.l 48(sp),d1
    7858:	|      move.l 44(sp),d2
    785c:	|      move.l 40(sp),d3
    7860:	|      jsr -66(a6)
    7864:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7868:	|      move.l 1cc8c <bigDataFile>,d0
    786e:	|      move.l d0,-(sp)
    7870:	|      jsr b02 <readString>
    7876:	|      addq.l #4,sp
    7878:	|      move.l d0,32(sp)
	
	return s;
    787c:	|      move.l 32(sp),d0
}
    7880:	'----> movem.l (sp)+,d2-d3/a6
    7884:	       lea 56(sp),sp
    7888:	       rts

0000788a <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    788a:	       lea -32(sp),sp
    788e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7892:	       move.w 1c620 <sliceBusy>,d0
    7898:	   ,-- beq.s 78b4 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    789a:	   |   pea 1900b <PutChar+0x1113>
    78a0:	   |   pea 19029 <PutChar+0x1131>
    78a6:	   |   jsr 17456 <KPrintF>
    78ac:	   |   addq.l #8,sp
		return 0;
    78ae:	   |   moveq #0,d0
    78b0:	,--|-- bra.w 7948 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    78b4:	|  '-> move.l 1cc8c <bigDataFile>,40(sp)
    78bc:	|      move.l 48(sp),d0
    78c0:	|      add.l d0,d0
    78c2:	|      add.l d0,d0
    78c4:	|      move.l d0,d1
    78c6:	|      move.l 1cc94 <startOfDataIndex>,d0
    78cc:	|      add.l d1,d0
    78ce:	|      move.l d0,36(sp)
    78d2:	|      moveq #-1,d0
    78d4:	|      move.l d0,32(sp)
    78d8:	|      move.l 1ccac <DOSBase>,d0
    78de:	|      movea.l d0,a6
    78e0:	|      move.l 40(sp),d1
    78e4:	|      move.l 36(sp),d2
    78e8:	|      move.l 32(sp),d3
    78ec:	|      jsr -66(a6)
    78f0:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    78f4:	|      move.l 1cc8c <bigDataFile>,24(sp)
    78fc:	|      move.l 1cc8c <bigDataFile>,d0
    7902:	|      move.l d0,-(sp)
    7904:	|      jsr 718 <get4bytes>
    790a:	|      addq.l #4,sp
    790c:	|      move.l d0,20(sp)
    7910:	|      clr.l 16(sp)
    7914:	|      move.l 1ccac <DOSBase>,d0
    791a:	|      movea.l d0,a6
    791c:	|      move.l 24(sp),d1
    7920:	|      move.l 20(sp),d2
    7924:	|      move.l 16(sp),d3
    7928:	|      jsr -66(a6)
    792c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7930:	|      move.w #1,1c620 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7938:	|      move.l 1cc8c <bigDataFile>,d0
    793e:	|      move.l d0,-(sp)
    7940:	|      jsr 718 <get4bytes>
    7946:	|      addq.l #4,sp
}
    7948:	'----> movem.l (sp)+,d2-d3/a6
    794c:	       lea 32(sp),sp
    7950:	       rts

00007952 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7952:	       lea -32(sp),sp
    7956:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    795a:	       move.w 1c620 <sliceBusy>,d0
    7960:	   ,-- beq.s 797c <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7962:	   |   pea 1900b <PutChar+0x1113>
    7968:	   |   pea 19029 <PutChar+0x1131>
    796e:	   |   jsr 17456 <KPrintF>
    7974:	   |   addq.l #8,sp
        return FALSE;
    7976:	   |   clr.w d0
    7978:	,--|-- bra.w 7a08 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    797c:	|  '-> move.l 1cc8c <bigDataFile>,40(sp)
    7984:	|      move.l 48(sp),d0
    7988:	|      add.l d0,d0
    798a:	|      add.l d0,d0
    798c:	|      move.l d0,d1
    798e:	|      move.l 1cca0 <startOfObjectIndex>,d0
    7994:	|      add.l d1,d0
    7996:	|      move.l d0,36(sp)
    799a:	|      moveq #-1,d0
    799c:	|      move.l d0,32(sp)
    79a0:	|      move.l 1ccac <DOSBase>,d0
    79a6:	|      movea.l d0,a6
    79a8:	|      move.l 40(sp),d1
    79ac:	|      move.l 36(sp),d2
    79b0:	|      move.l 32(sp),d3
    79b4:	|      jsr -66(a6)
    79b8:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    79bc:	|      move.l 1cc8c <bigDataFile>,24(sp)
    79c4:	|      move.l 1cc8c <bigDataFile>,d0
    79ca:	|      move.l d0,-(sp)
    79cc:	|      jsr 718 <get4bytes>
    79d2:	|      addq.l #4,sp
    79d4:	|      move.l d0,20(sp)
    79d8:	|      moveq #-1,d0
    79da:	|      move.l d0,16(sp)
    79de:	|      move.l 1ccac <DOSBase>,d0
    79e4:	|      movea.l d0,a6
    79e6:	|      move.l 24(sp),d1
    79ea:	|      move.l 20(sp),d2
    79ee:	|      move.l 16(sp),d3
    79f2:	|      jsr -66(a6)
    79f6:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    79fa:	|      move.w #1,1c620 <sliceBusy>
    7a02:	|      move.w 1c620 <sliceBusy>,d0
}
    7a08:	'----> movem.l (sp)+,d2-d3/a6
    7a0c:	       lea 32(sp),sp
    7a10:	       rts

00007a12 <openSubSlice>:

BOOL openSubSlice (int num) {
    7a12:	       lea -32(sp),sp
    7a16:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7a1a:	       move.w 1c620 <sliceBusy>,d0
    7a20:	   ,-- beq.s 7a3c <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7a22:	   |   pea 1900b <PutChar+0x1113>
    7a28:	   |   pea 19029 <PutChar+0x1131>
    7a2e:	   |   jsr 17456 <KPrintF>
    7a34:	   |   addq.l #8,sp
		return FALSE;
    7a36:	   |   clr.w d0
    7a38:	,--|-- bra.w 7ac8 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7a3c:	|  '-> move.l 1cc8c <bigDataFile>,40(sp)
    7a44:	|      move.l 48(sp),d0
    7a48:	|      add.l d0,d0
    7a4a:	|      add.l d0,d0
    7a4c:	|      move.l d0,d1
    7a4e:	|      move.l 1cc9c <startOfSubIndex>,d0
    7a54:	|      add.l d1,d0
    7a56:	|      move.l d0,36(sp)
    7a5a:	|      moveq #-1,d0
    7a5c:	|      move.l d0,32(sp)
    7a60:	|      move.l 1ccac <DOSBase>,d0
    7a66:	|      movea.l d0,a6
    7a68:	|      move.l 40(sp),d1
    7a6c:	|      move.l 36(sp),d2
    7a70:	|      move.l 32(sp),d3
    7a74:	|      jsr -66(a6)
    7a78:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7a7c:	|      move.l 1cc8c <bigDataFile>,24(sp)
    7a84:	|      move.l 1cc8c <bigDataFile>,d0
    7a8a:	|      move.l d0,-(sp)
    7a8c:	|      jsr 718 <get4bytes>
    7a92:	|      addq.l #4,sp
    7a94:	|      move.l d0,20(sp)
    7a98:	|      moveq #-1,d0
    7a9a:	|      move.l d0,16(sp)
    7a9e:	|      move.l 1ccac <DOSBase>,d0
    7aa4:	|      movea.l d0,a6
    7aa6:	|      move.l 24(sp),d1
    7aaa:	|      move.l 20(sp),d2
    7aae:	|      move.l 16(sp),d3
    7ab2:	|      jsr -66(a6)
    7ab6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7aba:	|      move.w #1,1c620 <sliceBusy>
    7ac2:	|      move.w 1c620 <sliceBusy>,d0
}
    7ac8:	'----> movem.l (sp)+,d2-d3/a6
    7acc:	       lea 32(sp),sp
    7ad0:	       rts

00007ad2 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7ad2:	       lea -180(sp),sp
    7ad6:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7ada:	       tst.l 196(sp)
    7ade:	,----- beq.s 7b1e <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7ae0:	|      move.l 196(sp),1cc8c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7ae8:	|      move.l 196(sp),168(sp)
    7aee:	|      clr.l 164(sp)
    7af2:	|      clr.l 160(sp)
    7af6:	|      move.l 1ccac <DOSBase>,d0
    7afc:	|      movea.l d0,a6
    7afe:	|      move.l 168(sp),d1
    7b02:	|      move.l 164(sp),d2
    7b06:	|      move.l 160(sp),d3
    7b0a:	|      jsr -66(a6)
    7b0e:	|      move.l d0,156(sp)
    7b12:	|      move.l 156(sp),d0
    7b16:	|      move.l d0,1cc90 <startIndex>
    7b1c:	|  ,-- bra.s 7b58 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7b1e:	'--|-> move.l 1cc8c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7b26:	   |   move.l 196(sp),184(sp)
    7b2c:	   |   move.l 1cc90 <startIndex>,d0
    7b32:	   |   move.l d0,180(sp)
    7b36:	   |   moveq #-1,d0
    7b38:	   |   move.l d0,176(sp)
    7b3c:	   |   move.l 1ccac <DOSBase>,d0
    7b42:	   |   movea.l d0,a6
    7b44:	   |   move.l 184(sp),d1
    7b48:	   |   move.l 180(sp),d2
    7b4c:	   |   move.l 176(sp),d3
    7b50:	   |   jsr -66(a6)
    7b54:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7b58:	   '-> clr.w 1c620 <sliceBusy>

	if (skipBefore > numLanguages) {
    7b5e:	       move.l 204(sp),d0
    7b62:	       cmp.l 200(sp),d0
    7b66:	   ,-- bls.s 7b7a <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7b68:	   |   pea 19043 <PutChar+0x114b>
    7b6e:	   |   jsr 17456 <KPrintF>
    7b74:	   |   addq.l #4,sp
		skipBefore = 0;
    7b76:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7b7a:	   '-> move.l 200(sp),d0
    7b7e:	       sub.l 204(sp),d0
    7b82:	       move.l d0,188(sp)
	while (skipBefore) {
    7b86:	   ,-- bra.s 7bc4 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7b88:	,--|-> move.l 196(sp),24(sp)
    7b8e:	|  |   move.l 196(sp),-(sp)
    7b92:	|  |   jsr 718 <get4bytes>
    7b98:	|  |   addq.l #4,sp
    7b9a:	|  |   move.l d0,20(sp)
    7b9e:	|  |   moveq #-1,d0
    7ba0:	|  |   move.l d0,16(sp)
    7ba4:	|  |   move.l 1ccac <DOSBase>,d0
    7baa:	|  |   movea.l d0,a6
    7bac:	|  |   move.l 24(sp),d1
    7bb0:	|  |   move.l 20(sp),d2
    7bb4:	|  |   move.l 16(sp),d3
    7bb8:	|  |   jsr -66(a6)
    7bbc:	|  |   move.l d0,12(sp)
		skipBefore --;
    7bc0:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7bc4:	|  '-> tst.l 204(sp)
    7bc8:	'----- bne.s 7b88 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7bca:	       move.l 196(sp),152(sp)
    7bd0:	       clr.l 148(sp)
    7bd4:	       clr.l 144(sp)
    7bd8:	       move.l 1ccac <DOSBase>,d0
    7bde:	       movea.l d0,a6
    7be0:	       move.l 152(sp),d1
    7be4:	       move.l 148(sp),d2
    7be8:	       move.l 144(sp),d3
    7bec:	       jsr -66(a6)
    7bf0:	       move.l d0,140(sp)
    7bf4:	       move.l 140(sp),d0
    7bf8:	       addq.l #4,d0
    7bfa:	       move.l d0,1cc98 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7c00:	       move.l 196(sp),136(sp)
    7c06:	       move.l 196(sp),-(sp)
    7c0a:	       jsr 718 <get4bytes>
    7c10:	       addq.l #4,sp
    7c12:	       move.l d0,132(sp)
    7c16:	       moveq #-1,d0
    7c18:	       move.l d0,128(sp)
    7c1c:	       move.l 1ccac <DOSBase>,d0
    7c22:	       movea.l d0,a6
    7c24:	       move.l 136(sp),d1
    7c28:	       move.l 132(sp),d2
    7c2c:	       move.l 128(sp),d3
    7c30:	       jsr -66(a6)
    7c34:	       move.l d0,124(sp)

	while (skipAfter) {
    7c38:	   ,-- bra.s 7c76 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7c3a:	,--|-> move.l 196(sp),40(sp)
    7c40:	|  |   move.l 196(sp),-(sp)
    7c44:	|  |   jsr 718 <get4bytes>
    7c4a:	|  |   addq.l #4,sp
    7c4c:	|  |   move.l d0,36(sp)
    7c50:	|  |   moveq #-1,d0
    7c52:	|  |   move.l d0,32(sp)
    7c56:	|  |   move.l 1ccac <DOSBase>,d0
    7c5c:	|  |   movea.l d0,a6
    7c5e:	|  |   move.l 40(sp),d1
    7c62:	|  |   move.l 36(sp),d2
    7c66:	|  |   move.l 32(sp),d3
    7c6a:	|  |   jsr -66(a6)
    7c6e:	|  |   move.l d0,28(sp)
		skipAfter --;
    7c72:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7c76:	|  '-> tst.l 188(sp)
    7c7a:	'----- bne.s 7c3a <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7c7c:	       move.l 196(sp),120(sp)
    7c82:	       clr.l 116(sp)
    7c86:	       clr.l 112(sp)
    7c8a:	       move.l 1ccac <DOSBase>,d0
    7c90:	       movea.l d0,a6
    7c92:	       move.l 120(sp),d1
    7c96:	       move.l 116(sp),d2
    7c9a:	       move.l 112(sp),d3
    7c9e:	       jsr -66(a6)
    7ca2:	       move.l d0,108(sp)
    7ca6:	       move.l 108(sp),d0
    7caa:	       addq.l #4,d0
    7cac:	       move.l d0,1cc9c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7cb2:	       move.l 196(sp),104(sp)
    7cb8:	       move.l 196(sp),-(sp)
    7cbc:	       jsr 718 <get4bytes>
    7cc2:	       addq.l #4,sp
    7cc4:	       move.l d0,100(sp)
    7cc8:	       clr.l 96(sp)
    7ccc:	       move.l 1ccac <DOSBase>,d0
    7cd2:	       movea.l d0,a6
    7cd4:	       move.l 104(sp),d1
    7cd8:	       move.l 100(sp),d2
    7cdc:	       move.l 96(sp),d3
    7ce0:	       jsr -66(a6)
    7ce4:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7ce8:	       move.l 196(sp),88(sp)
    7cee:	       clr.l 84(sp)
    7cf2:	       clr.l 80(sp)
    7cf6:	       move.l 1ccac <DOSBase>,d0
    7cfc:	       movea.l d0,a6
    7cfe:	       move.l 88(sp),d1
    7d02:	       move.l 84(sp),d2
    7d06:	       move.l 80(sp),d3
    7d0a:	       jsr -66(a6)
    7d0e:	       move.l d0,76(sp)
    7d12:	       move.l 76(sp),d0
    7d16:	       addq.l #4,d0
    7d18:	       move.l d0,1cca0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7d1e:	       move.l 196(sp),72(sp)
    7d24:	       move.l 196(sp),-(sp)
    7d28:	       jsr 718 <get4bytes>
    7d2e:	       addq.l #4,sp
    7d30:	       move.l d0,68(sp)
    7d34:	       clr.l 64(sp)
    7d38:	       move.l 1ccac <DOSBase>,d0
    7d3e:	       movea.l d0,a6
    7d40:	       move.l 72(sp),d1
    7d44:	       move.l 68(sp),d2
    7d48:	       move.l 64(sp),d3
    7d4c:	       jsr -66(a6)
    7d50:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7d54:	       move.l 196(sp),56(sp)
    7d5a:	       clr.l 52(sp)
    7d5e:	       clr.l 48(sp)
    7d62:	       move.l 1ccac <DOSBase>,d0
    7d68:	       movea.l d0,a6
    7d6a:	       move.l 56(sp),d1
    7d6e:	       move.l 52(sp),d2
    7d72:	       move.l 48(sp),d3
    7d76:	       jsr -66(a6)
    7d7a:	       move.l d0,44(sp)
    7d7e:	       move.l 44(sp),d0
    7d82:	       move.l d0,1cc94 <startOfDataIndex>
    7d88:	       nop
    7d8a:	       movem.l (sp)+,d2-d3/a6
    7d8e:	       lea 180(sp),sp
    7d92:	       rts

00007d94 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7d94:	    lea -20(sp),sp
    7d98:	    move.l a6,-(sp)
    7d9a:	    move.l d7,-(sp)
	APTR vbr = 0;
    7d9c:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7da0:	    move.w #20090,10(sp)
    7da6:	    move.w #2049,12(sp)
    7dac:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7db2:	    movea.l 1cca4 <SysBase>,a0
    7db8:	    move.w 296(a0),d0
    7dbc:	    move.w d0,d0
    7dbe:	    andi.l #65535,d0
    7dc4:	    moveq #1,d1
    7dc6:	    and.l d1,d0
    7dc8:	,-- beq.s 7df6 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7dca:	|   lea 28(sp),a0
    7dce:	|   lea -18(a0),a0
    7dd2:	|   move.l a0,20(sp)
    7dd6:	|   move.l 1cca4 <SysBase>,d0
    7ddc:	|   movea.l d0,a6
    7dde:	|   move.l 20(sp),d7
    7de2:	|   exg d7,a5
    7de4:	|   jsr -30(a6)
    7de8:	|   exg d7,a5
    7dea:	|   move.l d0,16(sp)
    7dee:	|   move.l 16(sp),d0
    7df2:	|   move.l d0,24(sp)

	return vbr;
    7df6:	'-> move.l 24(sp),d0
}
    7dfa:	    move.l (sp)+,d7
    7dfc:	    movea.l (sp)+,a6
    7dfe:	    lea 20(sp),sp
    7e02:	    rts

00007e04 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7e04:	movea.l 1ccca <VBR>,a0
    7e0a:	lea 108(a0),a0
    7e0e:	move.l 4(sp),(a0)
}
    7e12:	nop
    7e14:	rts

00007e16 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7e16:	movea.l 1ccca <VBR>,a0
    7e1c:	move.l 108(a0),d0
}
    7e20:	rts

00007e22 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7e22:	       subq.l #8,sp
    7e24:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7e26:	       pea 1908c <PutChar+0x1194>
    7e2c:	       jsr 17456 <KPrintF>
    7e32:	       addq.l #4,sp
	Forbid();
    7e34:	       move.l 1cca4 <SysBase>,d0
    7e3a:	       movea.l d0,a6
    7e3c:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7e40:	       pea 190a4 <PutChar+0x11ac>
    7e46:	       jsr 17456 <KPrintF>
    7e4c:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7e4e:	       movea.l 1cca8 <custom>,a0
    7e54:	       move.w 16(a0),d0
    7e58:	       move.w d0,1ccc8 <SystemADKCON>
	SystemInts=custom->intenar;
    7e5e:	       movea.l 1cca8 <custom>,a0
    7e64:	       move.w 28(a0),d0
    7e68:	       move.w d0,1ccc4 <SystemInts>
	SystemDMA=custom->dmaconr;
    7e6e:	       movea.l 1cca8 <custom>,a0
    7e74:	       move.w 2(a0),d0
    7e78:	       move.w d0,1ccc6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7e7e:	       movea.l 1ccb0 <GfxBase>,a0
    7e84:	       move.l 34(a0),d0
    7e88:	       move.l d0,1ccd2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7e8e:	       pea 190c2 <PutChar+0x11ca>
    7e94:	       jsr 17456 <KPrintF>
    7e9a:	       addq.l #4,sp
	LoadView(0);
    7e9c:	       clr.l 4(sp)
    7ea0:	       move.l 1ccb0 <GfxBase>,d0
    7ea6:	       movea.l d0,a6
    7ea8:	       movea.l 4(sp),a1
    7eac:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7eb0:	       pea 190d8 <PutChar+0x11e0>
    7eb6:	       jsr 17456 <KPrintF>
    7ebc:	       addq.l #4,sp
	WaitTOF();
    7ebe:	       move.l 1ccb0 <GfxBase>,d0
    7ec4:	       movea.l d0,a6
    7ec6:	       jsr -270(a6)
	WaitTOF();
    7eca:	       move.l 1ccb0 <GfxBase>,d0
    7ed0:	       movea.l d0,a6
    7ed2:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7ed6:	       pea 190ed <PutChar+0x11f5>
    7edc:	       jsr 17456 <KPrintF>
    7ee2:	       addq.l #4,sp
	WaitVbl();
    7ee4:	       jsr 1738a <WaitVbl>
	WaitVbl();
    7eea:	       jsr 1738a <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7ef0:	       pea 19102 <PutChar+0x120a>
    7ef6:	       jsr 17456 <KPrintF>
    7efc:	       addq.l #4,sp
	OwnBlitter();
    7efe:	       move.l 1ccb0 <GfxBase>,d0
    7f04:	       movea.l d0,a6
    7f06:	       jsr -456(a6)
	WaitBlit();	
    7f0a:	       move.l 1ccb0 <GfxBase>,d0
    7f10:	       movea.l d0,a6
    7f12:	       jsr -228(a6)
	Disable();
    7f16:	       move.l 1cca4 <SysBase>,d0
    7f1c:	       movea.l d0,a6
    7f1e:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7f22:	       pea 19123 <PutChar+0x122b>
    7f28:	       jsr 17456 <KPrintF>
    7f2e:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7f30:	       movea.l 1cca8 <custom>,a0
    7f36:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7f3c:	       pea 1913a <PutChar+0x1242>
    7f42:	       jsr 17456 <KPrintF>
    7f48:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7f4a:	       clr.l 8(sp)
    7f4e:	   ,-- bra.s 7f6c <TakeSystem+0x14a>
		custom->color[a]=0;
    7f50:	,--|-> movea.l 1cca8 <custom>,a0
    7f56:	|  |   move.l 8(sp),d0
    7f5a:	|  |   addi.l #192,d0
    7f60:	|  |   add.l d0,d0
    7f62:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7f68:	|  |   addq.l #1,8(sp)
    7f6c:	|  '-> moveq #31,d0
    7f6e:	|      cmp.l 8(sp),d0
    7f72:	'----- bge.s 7f50 <TakeSystem+0x12e>

	WaitVbl();
    7f74:	       jsr 1738a <WaitVbl>
	WaitVbl();
    7f7a:	       jsr 1738a <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7f80:	       pea 1915f <PutChar+0x1267>
    7f86:	       jsr 17456 <KPrintF>
    7f8c:	       addq.l #4,sp
	VBR=GetVBR();
    7f8e:	       jsr 7d94 <GetVBR>
    7f94:	       move.l d0,1ccca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7f9a:	       jsr 7e16 <GetInterruptHandler>
    7fa0:	       move.l d0,1ccce <SystemIrq>
}
    7fa6:	       nop
    7fa8:	       movea.l (sp)+,a6
    7faa:	       addq.l #8,sp
    7fac:	       rts

00007fae <FreeSystem>:

void FreeSystem() { 
    7fae:	subq.l #4,sp
    7fb0:	move.l a6,-(sp)
	WaitVbl();
    7fb2:	jsr 1738a <WaitVbl>
	WaitBlit();
    7fb8:	move.l 1ccb0 <GfxBase>,d0
    7fbe:	movea.l d0,a6
    7fc0:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7fc4:	movea.l 1cca8 <custom>,a0
    7fca:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7fd0:	movea.l 1cca8 <custom>,a0
    7fd6:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7fdc:	movea.l 1cca8 <custom>,a0
    7fe2:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7fe8:	move.l 1ccce <SystemIrq>,d0
    7fee:	move.l d0,-(sp)
    7ff0:	jsr 7e04 <SetInterruptHandler>
    7ff6:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7ff8:	movea.l 1ccb0 <GfxBase>,a0
    7ffe:	move.l 38(a0),d0
    8002:	movea.l 1cca8 <custom>,a0
    8008:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    800c:	movea.l 1ccb0 <GfxBase>,a0
    8012:	move.l 50(a0),d0
    8016:	movea.l 1cca8 <custom>,a0
    801c:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8020:	movea.l 1cca8 <custom>,a0
    8026:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    802c:	move.w 1ccc6 <SystemDMA>,d0
    8032:	movea.l 1cca8 <custom>,a0
    8038:	ori.w #-32768,d0
    803c:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8040:	move.w 1ccc8 <SystemADKCON>,d0
    8046:	movea.l 1cca8 <custom>,a0
    804c:	ori.w #-32768,d0
    8050:	move.w d0,158(a0)

	WaitBlit();	
    8054:	move.l 1ccb0 <GfxBase>,d0
    805a:	movea.l d0,a6
    805c:	jsr -228(a6)
	DisownBlitter();
    8060:	move.l 1ccb0 <GfxBase>,d0
    8066:	movea.l d0,a6
    8068:	jsr -462(a6)
	Enable();
    806c:	move.l 1cca4 <SysBase>,d0
    8072:	movea.l d0,a6
    8074:	jsr -126(a6)

	LoadView(ActiView);
    8078:	move.l 1ccd2 <ActiView>,4(sp)
    8080:	move.l 1ccb0 <GfxBase>,d0
    8086:	movea.l d0,a6
    8088:	movea.l 4(sp),a1
    808c:	jsr -222(a6)
	WaitTOF();
    8090:	move.l 1ccb0 <GfxBase>,d0
    8096:	movea.l d0,a6
    8098:	jsr -270(a6)
	WaitTOF();
    809c:	move.l 1ccb0 <GfxBase>,d0
    80a2:	movea.l d0,a6
    80a4:	jsr -270(a6)

	Permit();
    80a8:	move.l 1cca4 <SysBase>,d0
    80ae:	movea.l d0,a6
    80b0:	jsr -138(a6)
}
    80b4:	nop
    80b6:	movea.l (sp)+,a6
    80b8:	addq.l #4,sp
    80ba:	rts

000080bc <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    80bc:	       lea -132(sp),sp
    80c0:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    80c4:	       clr.l 140(sp)
    80c8:	   ,-- bra.s 80ce <main+0x12>
    80ca:	,--|-> addq.l #1,140(sp)
    80ce:	|  '-> cmpi.l #999,140(sp)
    80d6:	'----- ble.s 80ca <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    80d8:	       movea.w #4,a0
    80dc:	       move.l (a0),d0
    80de:	       move.l d0,1cca4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    80e4:	       move.l #14675968,1cca8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    80ee:	       move.l #102787,136(sp)
    80f6:	       clr.l 132(sp)
    80fa:	       move.l 1cca4 <SysBase>,d0
    8100:	       movea.l d0,a6
    8102:	       movea.l 136(sp),a1
    8106:	       move.l 132(sp),d0
    810a:	       jsr -552(a6)
    810e:	       move.l d0,128(sp)
    8112:	       move.l 128(sp),d0
    8116:	       move.l d0,1ccb0 <GfxBase>
	if (!GfxBase)
    811c:	       move.l 1ccb0 <GfxBase>,d0
    8122:	   ,-- bne.s 8138 <main+0x7c>
		Exit(0);
    8124:	   |   clr.l 124(sp)
    8128:	   |   move.l 1ccac <DOSBase>,d0
    812e:	   |   movea.l d0,a6
    8130:	   |   move.l 124(sp),d1
    8134:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    8138:	   '-> move.l #102804,120(sp)
    8140:	       clr.l 116(sp)
    8144:	       move.l 1cca4 <SysBase>,d0
    814a:	       movea.l d0,a6
    814c:	       movea.l 120(sp),a1
    8150:	       move.l 116(sp),d0
    8154:	       jsr -552(a6)
    8158:	       move.l d0,112(sp)
    815c:	       move.l 112(sp),d0
    8160:	       move.l d0,1ccac <DOSBase>
	if (!DOSBase)
    8166:	       move.l 1ccac <DOSBase>,d0
    816c:	   ,-- bne.s 8182 <main+0xc6>
		Exit(0);
    816e:	   |   clr.l 108(sp)
    8172:	   |   move.l 1ccac <DOSBase>,d0
    8178:	   |   movea.l d0,a6
    817a:	   |   move.l 108(sp),d1
    817e:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    8182:	   '-> move.l #102816,104(sp)
    818a:	       clr.l 100(sp)
    818e:	       move.l 1cca4 <SysBase>,d0
    8194:	       movea.l d0,a6
    8196:	       movea.l 104(sp),a1
    819a:	       move.l 100(sp),d0
    819e:	       jsr -552(a6)
    81a2:	       move.l d0,96(sp)
    81a6:	       move.l 96(sp),d0
    81aa:	       move.l d0,1ccb4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    81b0:	       move.l 1ccb4 <MathIeeeSingBasBase>,d0
    81b6:	   ,-- bne.s 81cc <main+0x110>
		Exit(0);	
    81b8:	   |   clr.l 92(sp)
    81bc:	   |   move.l 1ccac <DOSBase>,d0
    81c2:	   |   movea.l d0,a6
    81c4:	   |   move.l 92(sp),d1
    81c8:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    81cc:	   '-> move.l #102840,88(sp)
    81d4:	       clr.l 84(sp)
    81d8:	       move.l 1cca4 <SysBase>,d0
    81de:	       movea.l d0,a6
    81e0:	       movea.l 88(sp),a1
    81e4:	       move.l 84(sp),d0
    81e8:	       jsr -552(a6)
    81ec:	       move.l d0,80(sp)
    81f0:	       move.l 80(sp),d0
    81f4:	       move.l d0,1ccb8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    81fa:	       move.l 1ccb8 <MathIeeeSingTransBase>,d0
    8200:	   ,-- bne.s 8216 <main+0x15a>
		Exit(0);
    8202:	   |   clr.l 76(sp)
    8206:	   |   move.l 1ccac <DOSBase>,d0
    820c:	   |   movea.l d0,a6
    820e:	   |   move.l 76(sp),d1
    8212:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8216:	   '-> move.l #102866,72(sp)
    821e:	       clr.l 68(sp)
    8222:	       move.l 1cca4 <SysBase>,d0
    8228:	       movea.l d0,a6
    822a:	       movea.l 72(sp),a1
    822e:	       move.l 68(sp),d0
    8232:	       jsr -552(a6)
    8236:	       move.l d0,64(sp)
    823a:	       move.l 64(sp),d0
    823e:	       move.l d0,1ccc0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8244:	       move.l 1ccc0 <MathIeeeDoubTransBase>,d0
    824a:	   ,-- bne.s 8260 <main+0x1a4>
		Exit(0);
    824c:	   |   clr.l 60(sp)
    8250:	   |   move.l 1ccac <DOSBase>,d0
    8256:	   |   movea.l d0,a6
    8258:	   |   move.l 60(sp),d1
    825c:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8260:	   '-> move.l #102892,56(sp)
    8268:	       clr.l 52(sp)
    826c:	       move.l 1cca4 <SysBase>,d0
    8272:	       movea.l d0,a6
    8274:	       movea.l 56(sp),a1
    8278:	       move.l 52(sp),d0
    827c:	       jsr -552(a6)
    8280:	       move.l d0,48(sp)
    8284:	       move.l 48(sp),d0
    8288:	       move.l d0,1ccbc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    828e:	       move.l 1ccbc <MathIeeeDoubBasBase>,d0
    8294:	   ,-- bne.s 82aa <main+0x1ee>
		Exit(0);
    8296:	   |   clr.l 44(sp)
    829a:	   |   move.l 1ccac <DOSBase>,d0
    82a0:	   |   movea.l d0,a6
    82a2:	   |   move.l 44(sp),d1
    82a6:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    82aa:	   '-> pea 19204 <PutChar+0x130c>
    82b0:	       jsr 17456 <KPrintF>
    82b6:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    82b8:	       move.l 1ccac <DOSBase>,d0
    82be:	       movea.l d0,a6
    82c0:	       jsr -60(a6)
    82c4:	       move.l d0,40(sp)
    82c8:	       move.l 40(sp),d0
    82cc:	       move.l d0,36(sp)
    82d0:	       move.l #102948,32(sp)
    82d8:	       moveq #25,d0
    82da:	       move.l d0,28(sp)
    82de:	       move.l 1ccac <DOSBase>,d0
    82e4:	       movea.l d0,a6
    82e6:	       move.l 36(sp),d1
    82ea:	       move.l 32(sp),d2
    82ee:	       move.l 28(sp),d3
    82f2:	       jsr -48(a6)
    82f6:	       move.l d0,24(sp)
	Delay(50);
    82fa:	       moveq #50,d0
    82fc:	       move.l d0,20(sp)
    8300:	       move.l 1ccac <DOSBase>,d0
    8306:	       movea.l d0,a6
    8308:	       move.l 20(sp),d1
    830c:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8310:	       pea 1923d <PutChar+0x1345>
    8316:	       jsr 17456 <KPrintF>
    831c:	       addq.l #4,sp
	TakeSystem();
    831e:	       jsr 7e22 <TakeSystem>
	KPrintF("System Taken\n");
    8324:	       pea 1924c <PutChar+0x1354>
    832a:	       jsr 17456 <KPrintF>
    8330:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    8332:	       movea.l 1cca8 <custom>,a0
    8338:	       move.w #-30721,150(a0)
	WaitVbl();
    833e:	       jsr 1738a <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8344:	       pea 1925a <PutChar+0x1362>
    834a:	       jsr 17456 <KPrintF>
    8350:	       addq.l #4,sp
	main_sludge(argc, argv);	
    8352:	       move.l 152(sp),-(sp)
    8356:	       move.l 152(sp),-(sp)
    835a:	       jsr 4b42 <main_sludge>
    8360:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8362:	       jsr 7fae <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    8368:	       move.l 1ccac <DOSBase>,16(sp)
    8370:	       move.l 1cca4 <SysBase>,d0
    8376:	       movea.l d0,a6
    8378:	       movea.l 16(sp),a1
    837c:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8380:	       move.l 1ccb0 <GfxBase>,12(sp)
    8388:	       move.l 1cca4 <SysBase>,d0
    838e:	       movea.l d0,a6
    8390:	       movea.l 12(sp),a1
    8394:	       jsr -414(a6)
    8398:	       moveq #0,d0
}
    839a:	       movem.l (sp)+,d2-d3/a6
    839e:	       lea 132(sp),sp
    83a2:	       rts

000083a4 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    83a4:	    lea -16(sp),sp
    83a8:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    83aa:	    moveq #8,d0
    83ac:	    move.l d0,16(sp)
    83b0:	    clr.l 12(sp)
    83b4:	    move.l 1cca4 <SysBase>,d0
    83ba:	    movea.l d0,a6
    83bc:	    move.l 16(sp),d0
    83c0:	    move.l 12(sp),d1
    83c4:	    jsr -684(a6)
    83c8:	    move.l d0,8(sp)
    83cc:	    move.l 8(sp),d0
    83d0:	    move.l d0,4(sp)
	if (!newStat) {
    83d4:	,-- bne.s 8404 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    83d6:	|   movea.l 1c622 <nowStatus>,a0
    83dc:	|   move.l (a0),d0
    83de:	|   movea.l 4(sp),a0
    83e2:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    83e6:	|   pea 18c6c <PutChar+0xd74>
    83ec:	|   jsr b8 <copyString>
    83f2:	|   addq.l #4,sp
    83f4:	|   movea.l 4(sp),a0
    83f8:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    83fa:	|   movea.l 1c622 <nowStatus>,a0
    8400:	|   move.l 4(sp),(a0)
	}
}
    8404:	'-> nop
    8406:	    movea.l (sp)+,a6
    8408:	    lea 16(sp),sp
    840c:	    rts

0000840e <clearStatusBar>:

void clearStatusBar () {
    840e:	       lea -16(sp),sp
    8412:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8414:	       movea.l 1c622 <nowStatus>,a0
    841a:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    841e:	       movea.l 1c622 <nowStatus>,a0
    8424:	       moveq #-1,d0
    8426:	       move.l d0,6(a0)
	while (stat) {
    842a:	   ,-- bra.s 846a <clearStatusBar+0x5c>
		kill = stat;
    842c:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8432:	|  |   movea.l 16(sp),a0
    8436:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    843c:	|  |   movea.l 12(sp),a0
    8440:	|  |   move.l (a0),8(sp)
    8444:	|  |   move.l 1cca4 <SysBase>,d0
    844a:	|  |   movea.l d0,a6
    844c:	|  |   movea.l 8(sp),a1
    8450:	|  |   jsr -690(a6)
		FreeVec(kill);
    8454:	|  |   move.l 12(sp),4(sp)
    845a:	|  |   move.l 1cca4 <SysBase>,d0
    8460:	|  |   movea.l d0,a6
    8462:	|  |   movea.l 4(sp),a1
    8466:	|  |   jsr -690(a6)
	while (stat) {
    846a:	|  '-> tst.l 16(sp)
    846e:	'----- bne.s 842c <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8470:	       movea.l 1c622 <nowStatus>,a0
    8476:	       clr.l (a0)
}
    8478:	       nop
    847a:	       movea.l (sp)+,a6
    847c:	       lea 16(sp),sp
    8480:	       rts

00008482 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8482:	clr.l 1ccd6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    8488:	move.w #-1,1ccda <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8490:	moveq #-1,d0
    8492:	move.l d0,1ccdc <mainStatus+0x6>
	mainStatus.statusX = 10;
    8498:	moveq #10,d0
    849a:	move.l d0,1cce0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    84a0:	movea.l 1cbfc <winHeight>,a0
    84a6:	lea -15(a0),a0
    84aa:	move.l a0,d0
    84ac:	move.l d0,1cce4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    84b2:	nop
    84b4:	rts

000084b6 <killLastStatus>:

void killLastStatus () {
    84b6:	    lea -12(sp),sp
    84ba:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    84bc:	    movea.l 1c622 <nowStatus>,a0
    84c2:	    move.l (a0),d0
    84c4:	,-- beq.s 850e <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    84c6:	|   movea.l 1c622 <nowStatus>,a0
    84cc:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    84d0:	|   movea.l 1c622 <nowStatus>,a0
    84d6:	|   movea.l 12(sp),a1
    84da:	|   move.l 4(a1),d0
    84de:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    84e0:	|   movea.l 12(sp),a0
    84e4:	|   move.l (a0),8(sp)
    84e8:	|   move.l 1cca4 <SysBase>,d0
    84ee:	|   movea.l d0,a6
    84f0:	|   movea.l 8(sp),a1
    84f4:	|   jsr -690(a6)
		FreeVec(kill);
    84f8:	|   move.l 12(sp),4(sp)
    84fe:	|   move.l 1cca4 <SysBase>,d0
    8504:	|   movea.l d0,a6
    8506:	|   movea.l 4(sp),a1
    850a:	|   jsr -690(a6)
	}
}
    850e:	'-> nop
    8510:	    movea.l (sp)+,a6
    8512:	    lea 12(sp),sp
    8516:	    rts

00008518 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8518:	movea.l 1c622 <nowStatus>,a0
    851e:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8524:	movea.l 1c622 <nowStatus>,a0
    852a:	move.l 8(sp),14(a0)
}
    8530:	nop
    8532:	rts

00008534 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8534:	       lea -100(sp),sp
    8538:	       move.l a6,-(sp)
    853a:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    853c:	       movea.l 1c622 <nowStatus>,a0
    8542:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8546:	       movea.l 1c622 <nowStatus>,a0
    854c:	       move.w 4(a0),d0
    8550:	       move.w d0,d0
    8552:	       andi.l #65535,d0
    8558:	       move.l 112(sp),-(sp)
    855c:	       move.l d0,-(sp)
    855e:	       jsr 8d0 <put2bytes>
    8564:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8566:	       movea.l 1c622 <nowStatus>,a0
    856c:	       move.l 6(a0),d0
    8570:	       move.l d0,d0
    8572:	       movea.w d0,a0
    8574:	       move.l 112(sp),-(sp)
    8578:	       move.l a0,-(sp)
    857a:	       jsr a9c <putSigned>
    8580:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8582:	       movea.l 1c622 <nowStatus>,a0
    8588:	       move.l 10(a0),d0
    858c:	       move.l 112(sp),-(sp)
    8590:	       move.l d0,-(sp)
    8592:	       jsr 8d0 <put2bytes>
    8598:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    859a:	       movea.l 1c622 <nowStatus>,a0
    85a0:	       move.l 14(a0),d0
    85a4:	       move.l 112(sp),-(sp)
    85a8:	       move.l d0,-(sp)
    85aa:	       jsr 8d0 <put2bytes>
    85b0:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    85b2:	       move.l 112(sp),100(sp)
    85b8:	       movea.l 1c622 <nowStatus>,a0
    85be:	       move.l 18(a0),96(sp)
    85c4:	       move.l 1ccac <DOSBase>,d0
    85ca:	       movea.l d0,a6
    85cc:	       move.l 100(sp),d1
    85d0:	       move.l 96(sp),d2
    85d4:	       jsr -312(a6)
    85d8:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    85dc:	       move.l 112(sp),88(sp)
    85e2:	       movea.l 1c622 <nowStatus>,a0
    85e8:	       move.l 22(a0),84(sp)
    85ee:	       move.l 1ccac <DOSBase>,d0
    85f4:	       movea.l d0,a6
    85f6:	       move.l 88(sp),d1
    85fa:	       move.l 84(sp),d2
    85fe:	       jsr -312(a6)
    8602:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8606:	       move.l 112(sp),76(sp)
    860c:	       movea.l 1c622 <nowStatus>,a0
    8612:	       move.l 26(a0),72(sp)
    8618:	       move.l 1ccac <DOSBase>,d0
    861e:	       movea.l d0,a6
    8620:	       move.l 76(sp),d1
    8624:	       move.l 72(sp),d2
    8628:	       jsr -312(a6)
    862c:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8630:	       move.l 112(sp),64(sp)
    8636:	       movea.l 1c622 <nowStatus>,a0
    863c:	       move.l 30(a0),60(sp)
    8642:	       move.l 1ccac <DOSBase>,d0
    8648:	       movea.l d0,a6
    864a:	       move.l 64(sp),d1
    864e:	       move.l 60(sp),d2
    8652:	       jsr -312(a6)
    8656:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    865a:	       move.l 112(sp),52(sp)
    8660:	       movea.l 1c622 <nowStatus>,a0
    8666:	       move.l 34(a0),48(sp)
    866c:	       move.l 1ccac <DOSBase>,d0
    8672:	       movea.l d0,a6
    8674:	       move.l 52(sp),d1
    8678:	       move.l 48(sp),d2
    867c:	       jsr -312(a6)
    8680:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8684:	       move.l 112(sp),40(sp)
    868a:	       movea.l 1c622 <nowStatus>,a0
    8690:	       move.l 38(a0),36(sp)
    8696:	       move.l 1ccac <DOSBase>,d0
    869c:	       movea.l d0,a6
    869e:	       move.l 40(sp),d1
    86a2:	       move.l 36(sp),d2
    86a6:	       jsr -312(a6)
    86aa:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    86ae:	   ,-- bra.s 86f2 <saveStatusBars+0x1be>
		FPutC (fp,1);
    86b0:	,--|-> move.l 112(sp),16(sp)
    86b6:	|  |   moveq #1,d0
    86b8:	|  |   move.l d0,12(sp)
    86bc:	|  |   move.l 1ccac <DOSBase>,d0
    86c2:	|  |   movea.l d0,a6
    86c4:	|  |   move.l 16(sp),d1
    86c8:	|  |   move.l 12(sp),d2
    86cc:	|  |   jsr -312(a6)
    86d0:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    86d4:	|  |   movea.l 104(sp),a0
    86d8:	|  |   move.l (a0),d0
    86da:	|  |   move.l 112(sp),-(sp)
    86de:	|  |   move.l d0,-(sp)
    86e0:	|  |   jsr bd8 <writeString>
    86e6:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    86e8:	|  |   movea.l 104(sp),a0
    86ec:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    86f2:	|  '-> tst.l 104(sp)
    86f6:	'----- bne.s 86b0 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    86f8:	       move.l 112(sp),28(sp)
    86fe:	       clr.l 24(sp)
    8702:	       move.l 1ccac <DOSBase>,d0
    8708:	       movea.l d0,a6
    870a:	       move.l 28(sp),d1
    870e:	       move.l 24(sp),d2
    8712:	       jsr -312(a6)
    8716:	       move.l d0,20(sp)
}
    871a:	       nop
    871c:	       move.l (sp)+,d2
    871e:	       movea.l (sp)+,a6
    8720:	       lea 100(sp),sp
    8724:	       rts

00008726 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8726:	movea.l 1c622 <nowStatus>,a0
    872c:	move.l 4(sp),6(a0)
}
    8732:	nop
    8734:	rts

00008736 <setStatusBar>:

void setStatusBar (char * txt) {
    8736:	    subq.l #4,sp
    8738:	    move.l a6,-(sp)
    873a:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    873c:	    movea.l 1c622 <nowStatus>,a0
    8742:	    move.l (a0),d0
    8744:	,-- beq.s 8778 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8746:	|   movea.l 1c622 <nowStatus>,a0
    874c:	|   movea.l (a0),a0
    874e:	|   move.l (a0),8(sp)
    8752:	|   move.l 1cca4 <SysBase>,d0
    8758:	|   movea.l d0,a6
    875a:	|   movea.l 8(sp),a1
    875e:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8762:	|   movea.l 1c622 <nowStatus>,a0
    8768:	|   movea.l (a0),a2
    876a:	|   move.l 16(sp),-(sp)
    876e:	|   jsr b8 <copyString>
    8774:	|   addq.l #4,sp
    8776:	|   move.l d0,(a2)
	}
}
    8778:	'-> nop
    877a:	    movea.l (sp)+,a2
    877c:	    movea.l (sp)+,a6
    877e:	    addq.l #4,sp
    8780:	    rts

00008782 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8782:	       movea.l 1c622 <nowStatus>,a0
    8788:	       move.l (a0),d0
    878a:	,----- beq.s 8798 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    878c:	|      movea.l 1c622 <nowStatus>,a0
    8792:	|      movea.l (a0),a0
    8794:	|      move.l (a0),d0
    8796:	|  ,-- bra.s 879e <statusBarText+0x1c>
	} else {
		return "";
    8798:	'--|-> move.l #101484,d0
	}
    879e:	   '-> rts

000087a0 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    87a0:	       lea -12(sp),sp
    87a4:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    87a6:	       move.l 1cd00 <zBuffer>,12(sp)

	while(zbuffercursor) {
    87ae:	   ,-- bra.s 87d6 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    87b0:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    87b6:	|  |   movea.l 12(sp),a0
    87ba:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    87c0:	|  |   move.l 8(sp),4(sp)
    87c6:	|  |   move.l 1cca4 <SysBase>,d0
    87cc:	|  |   movea.l d0,a6
    87ce:	|  |   movea.l 4(sp),a1
    87d2:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    87d6:	|  '-> tst.l 12(sp)
    87da:	'----- bne.s 87b0 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    87dc:	       clr.l 1cd00 <zBuffer>
}
    87e2:	       nop
    87e4:	       movea.l (sp)+,a6
    87e6:	       lea 12(sp),sp
    87ea:	       rts

000087ec <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    87ec:	                lea -304(sp),sp
    87f0:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    87f4:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    87f8:	                jsr 87a0 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    87fe:	                move.l 328(sp),d0
    8802:	                move.l d0,-(sp)
    8804:	                jsr 788a <openFileFromNum>
    880a:	                addq.l #4,sp
    880c:	                tst.l d0
    880e:	            ,-- bne.s 8816 <setZBuffer+0x2a>
    8810:	            |   clr.w d0
    8812:	,-----------|-- bra.w 8ad4 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8816:	|           '-> move.l 1cc8c <bigDataFile>,310(sp)
    881e:	|               move.l 1ccac <DOSBase>,d0
    8824:	|               movea.l d0,a6
    8826:	|               move.l 310(sp),d1
    882a:	|               jsr -306(a6)
    882e:	|               move.l d0,306(sp)
    8832:	|               move.l 306(sp),d0
    8836:	|               moveq #97,d1
    8838:	|               cmp.l d0,d1
    883a:	|        ,----- bne.s 88ae <setZBuffer+0xc2>
    883c:	|        |      move.l 1cc8c <bigDataFile>,302(sp)
    8844:	|        |      move.l 1ccac <DOSBase>,d0
    884a:	|        |      movea.l d0,a6
    884c:	|        |      move.l 302(sp),d1
    8850:	|        |      jsr -306(a6)
    8854:	|        |      move.l d0,298(sp)
    8858:	|        |      move.l 298(sp),d0
    885c:	|        |      moveq #115,d1
    885e:	|        |      cmp.l d0,d1
    8860:	|        +----- bne.s 88ae <setZBuffer+0xc2>
    8862:	|        |      move.l 1cc8c <bigDataFile>,294(sp)
    886a:	|        |      move.l 1ccac <DOSBase>,d0
    8870:	|        |      movea.l d0,a6
    8872:	|        |      move.l 294(sp),d1
    8876:	|        |      jsr -306(a6)
    887a:	|        |      move.l d0,290(sp)
    887e:	|        |      move.l 290(sp),d0
    8882:	|        |      moveq #122,d1
    8884:	|        |      cmp.l d0,d1
    8886:	|        +----- bne.s 88ae <setZBuffer+0xc2>
    8888:	|        |      move.l 1cc8c <bigDataFile>,286(sp)
    8890:	|        |      move.l 1ccac <DOSBase>,d0
    8896:	|        |      movea.l d0,a6
    8898:	|        |      move.l 286(sp),d1
    889c:	|        |      jsr -306(a6)
    88a0:	|        |      move.l d0,282(sp)
    88a4:	|        |      move.l 282(sp),d0
    88a8:	|        |      moveq #98,d1
    88aa:	|        |      cmp.l d0,d1
    88ac:	|        |  ,-- beq.s 88c2 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    88ae:	|        '--|-> pea 19297 <PutChar+0x139f>
    88b4:	|           |   jsr 17456 <KPrintF>
    88ba:	|           |   addq.l #4,sp
		 return FALSE;
    88bc:	|           |   clr.w d0
    88be:	+-----------|-- bra.w 8ad4 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    88c2:	|           '-> move.l 1cc8c <bigDataFile>,278(sp)
    88ca:	|               move.l 1ccac <DOSBase>,d0
    88d0:	|               movea.l d0,a6
    88d2:	|               move.l 278(sp),d1
    88d6:	|               jsr -306(a6)
    88da:	|               move.l d0,274(sp)
    88de:	|               move.l 274(sp),d0
    88e2:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    88e6:	|               moveq #28,d0
    88e8:	|               move.l d0,270(sp)
    88ec:	|               clr.l 266(sp)
    88f0:	|               move.l 1cca4 <SysBase>,d0
    88f6:	|               movea.l d0,a6
    88f8:	|               move.l 270(sp),d0
    88fc:	|               move.l 266(sp),d1
    8900:	|               jsr -684(a6)
    8904:	|               move.l d0,262(sp)
    8908:	|               move.l 262(sp),d0
    890c:	|               move.l d0,1cd00 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8912:	|               move.l 1cd00 <zBuffer>,318(sp)

	while(numelements--)
    891a:	|     ,-------- bra.w 8aba <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    891e:	|  ,--|-------> move.l 1cc8c <bigDataFile>,d0
    8924:	|  |  |         move.l d0,-(sp)
    8926:	|  |  |         jsr 6bc <get2bytes>
    892c:	|  |  |         addq.l #4,sp
    892e:	|  |  |         movea.l 318(sp),a0
    8932:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8934:	|  |  |         move.l 1cc8c <bigDataFile>,d0
    893a:	|  |  |         move.l d0,-(sp)
    893c:	|  |  |         jsr 6bc <get2bytes>
    8942:	|  |  |         addq.l #4,sp
    8944:	|  |  |         movea.l 318(sp),a0
    8948:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    894c:	|  |  |         move.l 1cc8c <bigDataFile>,d0
    8952:	|  |  |         move.l d0,-(sp)
    8954:	|  |  |         jsr 6bc <get2bytes>
    895a:	|  |  |         addq.l #4,sp
    895c:	|  |  |         movea.l 318(sp),a0
    8960:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8964:	|  |  |         move.l 1cc8c <bigDataFile>,d0
    896a:	|  |  |         move.l d0,-(sp)
    896c:	|  |  |         jsr 6bc <get2bytes>
    8972:	|  |  |         addq.l #4,sp
    8974:	|  |  |         movea.l 318(sp),a0
    8978:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    897c:	|  |  |         move.l 1cc8c <bigDataFile>,d0
    8982:	|  |  |         move.l d0,-(sp)
    8984:	|  |  |         jsr 6bc <get2bytes>
    898a:	|  |  |         addq.l #4,sp
    898c:	|  |  |         movea.l 318(sp),a0
    8990:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8994:	|  |  |         movea.l 318(sp),a0
    8998:	|  |  |         move.l (a0),d0
    899a:	|  |  |         movea.l 318(sp),a0
    899e:	|  |  |         move.l 4(a0),d1
    89a2:	|  |  |         move.l d1,-(sp)
    89a4:	|  |  |         move.l d0,-(sp)
    89a6:	|  |  |         jsr 17de2 <__mulsi3>
    89ac:	|  |  |         addq.l #8,sp
    89ae:	|  |  |         tst.l d0
    89b0:	|  |  |     ,-- bge.s 89b4 <setZBuffer+0x1c8>
    89b2:	|  |  |     |   addq.l #7,d0
    89b4:	|  |  |     '-> asr.l #3,d0
    89b6:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    89ba:	|  |  |         moveq #0,d0
    89bc:	|  |  |         move.w 260(sp),d0
    89c0:	|  |  |         move.l d0,256(sp)
    89c4:	|  |  |         moveq #2,d1
    89c6:	|  |  |         move.l d1,252(sp)
    89ca:	|  |  |         move.l 1cca4 <SysBase>,d0
    89d0:	|  |  |         movea.l d0,a6
    89d2:	|  |  |         move.l 256(sp),d0
    89d6:	|  |  |         move.l 252(sp),d1
    89da:	|  |  |         jsr -684(a6)
    89de:	|  |  |         move.l d0,248(sp)
    89e2:	|  |  |         move.l 248(sp),d0
    89e6:	|  |  |         movea.l 318(sp),a0
    89ea:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    89ee:	|  |  |         move.l 1cc8c <bigDataFile>,244(sp)
    89f6:	|  |  |         movea.l 318(sp),a0
    89fa:	|  |  |         move.l 20(a0),240(sp)
    8a00:	|  |  |         moveq #1,d0
    8a02:	|  |  |         move.l d0,236(sp)
    8a06:	|  |  |         moveq #0,d0
    8a08:	|  |  |         move.w 260(sp),d0
    8a0c:	|  |  |         move.l d0,232(sp)
    8a10:	|  |  |         move.l 1ccac <DOSBase>,d0
    8a16:	|  |  |         movea.l d0,a6
    8a18:	|  |  |         move.l 244(sp),d1
    8a1c:	|  |  |         move.l 240(sp),d2
    8a20:	|  |  |         move.l 236(sp),d3
    8a24:	|  |  |         move.l 232(sp),d4
    8a28:	|  |  |         jsr -324(a6)
    8a2c:	|  |  |         move.l d0,228(sp)
    8a30:	|  |  |         move.l 228(sp),d0
    8a34:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8a38:	|  |  |         tst.w 322(sp)
    8a3c:	|  |  |  ,----- beq.s 8a78 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8a3e:	|  |  |  |      moveq #28,d1
    8a40:	|  |  |  |      move.l d1,222(sp)
    8a44:	|  |  |  |      clr.l 218(sp)
    8a48:	|  |  |  |      move.l 1cca4 <SysBase>,d0
    8a4e:	|  |  |  |      movea.l d0,a6
    8a50:	|  |  |  |      move.l 222(sp),d0
    8a54:	|  |  |  |      move.l 218(sp),d1
    8a58:	|  |  |  |      jsr -684(a6)
    8a5c:	|  |  |  |      move.l d0,214(sp)
    8a60:	|  |  |  |      move.l 214(sp),d0
    8a64:	|  |  |  |      movea.l 318(sp),a0
    8a68:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8a6c:	|  |  |  |      movea.l 318(sp),a0
    8a70:	|  |  |  |      move.l 24(a0),318(sp)
    8a76:	|  |  |  |  ,-- bra.s 8a80 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8a78:	|  |  |  '--|-> movea.l 318(sp),a0
    8a7c:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8a80:	|  |  |     '-> movea.l 318(sp),a0
    8a84:	|  |  |         move.l 4(a0),d0
    8a88:	|  |  |         move.l d0,d0
    8a8a:	|  |  |         movea.w d0,a1
    8a8c:	|  |  |         movea.l 318(sp),a0
    8a90:	|  |  |         move.l (a0),d0
    8a92:	|  |  |         move.l d0,d0
    8a94:	|  |  |         movea.w d0,a0
    8a96:	|  |  |         movea.l 318(sp),a2
    8a9a:	|  |  |         move.l 20(a2),d0
    8a9e:	|  |  |         clr.l -(sp)
    8aa0:	|  |  |         pea 1 <_start+0x1>
    8aa4:	|  |  |         move.l a1,-(sp)
    8aa6:	|  |  |         move.l a0,-(sp)
    8aa8:	|  |  |         pea 192ab <PutChar+0x13b3>
    8aae:	|  |  |         move.l d0,-(sp)
    8ab0:	|  |  |         jsr 1753e <debug_register_bitmap>
    8ab6:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8aba:	|  |  '-------> move.w 322(sp),d0
    8abe:	|  |            move.w d0,d1
    8ac0:	|  |            subq.w #1,d1
    8ac2:	|  |            move.w d1,322(sp)
    8ac6:	|  |            tst.w d0
    8ac8:	|  '----------- bne.w 891e <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8acc:	|               jsr 7782 <finishAccess>
	
	return TRUE;
    8ad2:	|               moveq #1,d0
}
    8ad4:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8ad8:	                lea 304(sp),sp
    8adc:	                rts

00008ade <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8ade:	          lea -32(sp),sp
    8ae2:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8ae4:	          move.l 40(sp),d0
    8ae8:	          addq.l #8,d0
    8aea:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8aee:	          clr.l 32(sp)
    8af2:	   ,----- bra.s 8b38 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8af4:	,--|----> movea.l 24(sp),a0
    8af8:	|  |      movea.l 8(a0),a0
    8afc:	|  |      move.l 32(sp),d1
    8b00:	|  |      move.l d1,d0
    8b02:	|  |      lsl.l #3,d0
    8b04:	|  |      sub.l d1,d0
    8b06:	|  |      add.l d0,d0
    8b08:	|  |      add.l d0,d0
    8b0a:	|  |      adda.l d0,a0
    8b0c:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8b10:	|  |      movea.l 8(sp),a0
    8b14:	|  |      move.l 24(a0),d0
    8b18:	|  |  ,-- beq.s 8b34 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8b1a:	|  |  |   movea.l 8(sp),a0
    8b1e:	|  |  |   move.l 24(a0),4(sp)
    8b24:	|  |  |   move.l 1cca4 <SysBase>,d0
    8b2a:	|  |  |   movea.l d0,a6
    8b2c:	|  |  |   movea.l 4(sp),a1
    8b30:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8b34:	|  |  '-> addq.l #1,32(sp)
    8b38:	|  '----> movea.l 24(sp),a0
    8b3c:	|         move.l (a0),d0
    8b3e:	|         cmp.l 32(sp),d0
    8b42:	'-------- bgt.s 8af4 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8b44:	          movea.l 24(sp),a0
    8b48:	          move.l 8(a0),20(sp)
    8b4e:	          move.l 1cca4 <SysBase>,d0
    8b54:	          movea.l d0,a6
    8b56:	          movea.l 20(sp),a1
    8b5a:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8b5e:	          move.l 1cdb8 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b66:	      ,-- bra.s 8b72 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8b68:	   ,--|-> movea.l 28(sp),a0
    8b6c:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b72:	   |  '-> movea.l 28(sp),a0
    8b76:	   |      movea.l 22(a0),a0
    8b7a:	   |      move.l (a0),d1
    8b7c:	   |      movea.l 40(sp),a0
    8b80:	   |      move.l (a0),d0
    8b82:	   |      cmp.l d1,d0
    8b84:	   |  ,-- beq.s 8b8c <forgetSpriteBank+0xae>
    8b86:	   |  |   tst.l 28(sp)
    8b8a:	   '--|-- bne.s 8b68 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8b8c:	      '-> tst.l 28(sp)
    8b90:	   ,----- beq.s 8bba <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8b92:	   |      movea.l 40(sp),a0
    8b96:	   |      move.l 22(a0),d0
    8b9a:	   |      movea.l 28(sp),a0
    8b9e:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8ba2:	   |      move.l 40(sp),12(sp)
    8ba8:	   |      move.l 1cca4 <SysBase>,d0
    8bae:	   |      movea.l d0,a6
    8bb0:	   |      movea.l 12(sp),a1
    8bb4:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8bb8:	   |  ,-- bra.s 8be0 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8bba:	   '--|-> movea.l 1cdb8 <allLoadedBanks>,a0
    8bc0:	      |   move.l 22(a0),d0
    8bc4:	      |   move.l d0,1cdb8 <allLoadedBanks>
		FreeVec( forgetme);
    8bca:	      |   move.l 40(sp),16(sp)
    8bd0:	      |   move.l 1cca4 <SysBase>,d0
    8bd6:	      |   movea.l d0,a6
    8bd8:	      |   movea.l 16(sp),a1
    8bdc:	      |   jsr -690(a6)
}
    8be0:	      '-> nop
    8be2:	          movea.l (sp)+,a6
    8be4:	          lea 32(sp),sp
    8be8:	          rts

00008bea <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8bea:	                      lea -84(sp),sp
    8bee:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8bf2:	                      pea 192b7 <PutChar+0x13bf>
    8bf8:	                      jsr 17456 <KPrintF>
    8bfe:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8c00:	                      clr.l 94(sp)
    8c04:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8c08:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8c0c:	                      move.l 108(sp),-(sp)
    8c10:	                      jsr 788a <openFileFromNum>
    8c16:	                      addq.l #4,sp
    8c18:	                      tst.l d0
    8c1a:	                  ,-- bne.s 8c30 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8c1c:	                  |   pea 192d1 <PutChar+0x13d9>
    8c22:	                  |   jsr 17456 <KPrintF>
    8c28:	                  |   addq.l #4,sp
		return FALSE;
    8c2a:	                  |   clr.w d0
    8c2c:	,-----------------|-- bra.w 9024 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8c30:	|                 '-> move.l 1cc8c <bigDataFile>,d0
    8c36:	|                     move.l d0,-(sp)
    8c38:	|                     jsr 6bc <get2bytes>
    8c3e:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8c40:	|                     move.l 1cc8c <bigDataFile>,82(sp)
    8c48:	|                     move.l 1ccac <DOSBase>,d0
    8c4e:	|                     movea.l d0,a6
    8c50:	|                     move.l 82(sp),d1
    8c54:	|                     jsr -306(a6)
    8c58:	|                     move.l d0,78(sp)
    8c5c:	|                     move.l 78(sp),d0
    8c60:	|                     movea.l 112(sp),a0
    8c64:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8c68:	|                     move.l 1cc8c <bigDataFile>,d0
    8c6e:	|                     move.l d0,-(sp)
    8c70:	|                     jsr 6bc <get2bytes>
    8c76:	|                     addq.l #4,sp
    8c78:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8c7c:	|                 ,-- bgt.s 8c92 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8c7e:	|                 |   pea 192ff <PutChar+0x1407>
    8c84:	|                 |   jsr 17456 <KPrintF>
    8c8a:	|                 |   addq.l #4,sp
		return FALSE;
    8c8c:	|                 |   clr.w d0
    8c8e:	+-----------------|-- bra.w 9024 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8c92:	|                 '-> movea.l 112(sp),a0
    8c96:	|                     move.l 4(a0),d0
    8c9a:	|                     moveq #3,d1
    8c9c:	|                     cmp.l d0,d1
    8c9e:	|                 ,-- bne.s 8cac <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8ca0:	|                 |   movea.l 112(sp),a0
    8ca4:	|                 |   move.w #1,12(a0)
    8caa:	|              ,--|-- bra.s 8cce <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8cac:	|              |  '-> movea.l 112(sp),a0
    8cb0:	|              |      move.l 4(a0),d0
    8cb4:	|              |      moveq #3,d1
    8cb6:	|              |      cmp.l d0,d1
    8cb8:	|              +----- bge.s 8cce <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8cba:	|              |      pea 1933f <PutChar+0x1447>
    8cc0:	|              |      jsr 17456 <KPrintF>
    8cc6:	|              |      addq.l #4,sp
		return FALSE;
    8cc8:	|              |      clr.w d0
    8cca:	+--------------|----- bra.w 9024 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8cce:	|              '----> movea.l 112(sp),a0
    8cd2:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8cd6:	|                     move.l 74(sp),d1
    8cda:	|                     move.l d1,d0
    8cdc:	|                     lsl.l #3,d0
    8cde:	|                     sub.l d1,d0
    8ce0:	|                     add.l d0,d0
    8ce2:	|                     add.l d0,d0
    8ce4:	|                     move.l d0,70(sp)
    8ce8:	|                     clr.l 66(sp)
    8cec:	|                     move.l 1cca4 <SysBase>,d0
    8cf2:	|                     movea.l d0,a6
    8cf4:	|                     move.l 70(sp),d0
    8cf8:	|                     move.l 66(sp),d1
    8cfc:	|                     jsr -684(a6)
    8d00:	|                     move.l d0,62(sp)
    8d04:	|                     move.l 62(sp),d0
    8d08:	|                     movea.l 112(sp),a0
    8d0c:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8d10:	|                     movea.l 112(sp),a0
    8d14:	|                     move.l 8(a0),d0
    8d18:	|                 ,-- bne.s 8d20 <loadSpriteBank+0x136>
    8d1a:	|                 |   clr.w d0
    8d1c:	+-----------------|-- bra.w 9024 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8d20:	|                 '-> moveq #1,d0
    8d22:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8d26:	|                     clr.l 100(sp)
    8d2a:	|     ,-------------- bra.w 9002 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8d2e:	|  ,--|-------------> move.l 1cc8c <bigDataFile>,d0
    8d34:	|  |  |               move.l d0,-(sp)
    8d36:	|  |  |               jsr 6bc <get2bytes>
    8d3c:	|  |  |               addq.l #4,sp
    8d3e:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8d42:	|  |  |               movea.l 112(sp),a0
    8d46:	|  |  |               movea.l 8(a0),a0
    8d4a:	|  |  |               move.l 100(sp),d1
    8d4e:	|  |  |               move.l d1,d0
    8d50:	|  |  |               lsl.l #3,d0
    8d52:	|  |  |               sub.l d1,d0
    8d54:	|  |  |               add.l d0,d0
    8d56:	|  |  |               add.l d0,d0
    8d58:	|  |  |               adda.l d0,a0
    8d5a:	|  |  |               moveq #0,d0
    8d5c:	|  |  |               move.w 60(sp),d0
    8d60:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8d62:	|  |  |               movea.l 1cc8c <bigDataFile>,a1
    8d68:	|  |  |               movea.l 112(sp),a0
    8d6c:	|  |  |               movea.l 8(a0),a0
    8d70:	|  |  |               move.l 100(sp),d1
    8d74:	|  |  |               move.l d1,d0
    8d76:	|  |  |               lsl.l #3,d0
    8d78:	|  |  |               sub.l d1,d0
    8d7a:	|  |  |               add.l d0,d0
    8d7c:	|  |  |               add.l d0,d0
    8d7e:	|  |  |               lea (0,a0,d0.l),a2
    8d82:	|  |  |               move.l a1,-(sp)
    8d84:	|  |  |               jsr 6bc <get2bytes>
    8d8a:	|  |  |               addq.l #4,sp
    8d8c:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8d90:	|  |  |               movea.l 1cc8c <bigDataFile>,a1
    8d96:	|  |  |               movea.l 112(sp),a0
    8d9a:	|  |  |               movea.l 8(a0),a0
    8d9e:	|  |  |               move.l 100(sp),d1
    8da2:	|  |  |               move.l d1,d0
    8da4:	|  |  |               lsl.l #3,d0
    8da6:	|  |  |               sub.l d1,d0
    8da8:	|  |  |               add.l d0,d0
    8daa:	|  |  |               add.l d0,d0
    8dac:	|  |  |               lea (0,a0,d0.l),a2
    8db0:	|  |  |               move.l a1,-(sp)
    8db2:	|  |  |               jsr 6bc <get2bytes>
    8db8:	|  |  |               addq.l #4,sp
    8dba:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8dbe:	|  |  |               movea.l 1cc8c <bigDataFile>,a1
    8dc4:	|  |  |               movea.l 112(sp),a0
    8dc8:	|  |  |               movea.l 8(a0),a0
    8dcc:	|  |  |               move.l 100(sp),d1
    8dd0:	|  |  |               move.l d1,d0
    8dd2:	|  |  |               lsl.l #3,d0
    8dd4:	|  |  |               sub.l d1,d0
    8dd6:	|  |  |               add.l d0,d0
    8dd8:	|  |  |               add.l d0,d0
    8dda:	|  |  |               lea (0,a0,d0.l),a2
    8dde:	|  |  |               move.l a1,-(sp)
    8de0:	|  |  |               jsr 6bc <get2bytes>
    8de6:	|  |  |               addq.l #4,sp
    8de8:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8dec:	|  |  |               movea.l 112(sp),a0
    8df0:	|  |  |               move.l 4(a0),d0
    8df4:	|  |  |               moveq #3,d1
    8df6:	|  |  |               cmp.l d0,d1
    8df8:	|  |  |     ,-------- beq.w 8e94 <loadSpriteBank+0x2aa>
    8dfc:	|  |  |     |         moveq #3,d1
    8dfe:	|  |  |     |         cmp.l d0,d1
    8e00:	|  |  |  ,--|-------- blt.w 8f3a <loadSpriteBank+0x350>
    8e04:	|  |  |  |  |         moveq #1,d1
    8e06:	|  |  |  |  |         cmp.l d0,d1
    8e08:	|  |  |  |  |     ,-- beq.s 8e14 <loadSpriteBank+0x22a>
    8e0a:	|  |  |  |  |     |   moveq #2,d1
    8e0c:	|  |  |  |  |     |   cmp.l d0,d1
    8e0e:	|  |  |  |  |  ,--|-- beq.s 8e40 <loadSpriteBank+0x256>
    8e10:	|  |  |  +--|--|--|-- bra.w 8f3a <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8e14:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8e18:	|  |  |  |  |  |      movea.l 8(a0),a0
    8e1c:	|  |  |  |  |  |      move.l 100(sp),d1
    8e20:	|  |  |  |  |  |      move.l d1,d0
    8e22:	|  |  |  |  |  |      lsl.l #3,d0
    8e24:	|  |  |  |  |  |      sub.l d1,d0
    8e26:	|  |  |  |  |  |      add.l d0,d0
    8e28:	|  |  |  |  |  |      add.l d0,d0
    8e2a:	|  |  |  |  |  |      adda.l d0,a0
    8e2c:	|  |  |  |  |  |      move.l 4(a0),d0
    8e30:	|  |  |  |  |  |      addq.l #2,d0
    8e32:	|  |  |  |  |  |      move.l d0,d0
    8e34:	|  |  |  |  |  |      add.w d0,d0
    8e36:	|  |  |  |  |  |      add.w d0,d0
    8e38:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8e3c:	|  |  |  +--|--|----- bra.w 8f3a <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8e40:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8e44:	|  |  |  |  |         movea.l 8(a0),a0
    8e48:	|  |  |  |  |         move.l 100(sp),d1
    8e4c:	|  |  |  |  |         move.l d1,d0
    8e4e:	|  |  |  |  |         lsl.l #3,d0
    8e50:	|  |  |  |  |         sub.l d1,d0
    8e52:	|  |  |  |  |         add.l d0,d0
    8e54:	|  |  |  |  |         add.l d0,d0
    8e56:	|  |  |  |  |         adda.l d0,a0
    8e58:	|  |  |  |  |         move.l (a0),d0
    8e5a:	|  |  |  |  |     ,-- bpl.s 8e5e <loadSpriteBank+0x274>
    8e5c:	|  |  |  |  |     |   addq.l #7,d0
    8e5e:	|  |  |  |  |     '-> asr.l #3,d0
    8e60:	|  |  |  |  |         move.l d0,d2
    8e62:	|  |  |  |  |         movea.l 112(sp),a0
    8e66:	|  |  |  |  |         movea.l 8(a0),a0
    8e6a:	|  |  |  |  |         move.l 100(sp),d1
    8e6e:	|  |  |  |  |         move.l d1,d0
    8e70:	|  |  |  |  |         lsl.l #3,d0
    8e72:	|  |  |  |  |         sub.l d1,d0
    8e74:	|  |  |  |  |         add.l d0,d0
    8e76:	|  |  |  |  |         add.l d0,d0
    8e78:	|  |  |  |  |         adda.l d0,a0
    8e7a:	|  |  |  |  |         move.l 4(a0),d0
    8e7e:	|  |  |  |  |         move.l d0,d0
    8e80:	|  |  |  |  |         move.w d2,d1
    8e82:	|  |  |  |  |         muls.w d0,d1
    8e84:	|  |  |  |  |         move.w d1,d0
    8e86:	|  |  |  |  |         add.w d0,d0
    8e88:	|  |  |  |  |         add.w d1,d0
    8e8a:	|  |  |  |  |         add.w d0,d0
    8e8c:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8e90:	|  |  |  +--|-------- bra.w 8f3a <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8e94:	|  |  |  |  '-------> movea.l 112(sp),a0
    8e98:	|  |  |  |            movea.l 8(a0),a0
    8e9c:	|  |  |  |            move.l 100(sp),d1
    8ea0:	|  |  |  |            move.l d1,d0
    8ea2:	|  |  |  |            lsl.l #3,d0
    8ea4:	|  |  |  |            sub.l d1,d0
    8ea6:	|  |  |  |            add.l d0,d0
    8ea8:	|  |  |  |            add.l d0,d0
    8eaa:	|  |  |  |            adda.l d0,a0
    8eac:	|  |  |  |            move.l (a0),d0
    8eae:	|  |  |  |            andi.l #-2147483633,d0
    8eb4:	|  |  |  |        ,-- bpl.s 8ebe <loadSpriteBank+0x2d4>
    8eb6:	|  |  |  |        |   subq.l #1,d0
    8eb8:	|  |  |  |        |   moveq #-16,d1
    8eba:	|  |  |  |        |   or.l d1,d0
    8ebc:	|  |  |  |        |   addq.l #1,d0
    8ebe:	|  |  |  |        '-> tst.l d0
    8ec0:	|  |  |  |     ,----- ble.s 8ec6 <loadSpriteBank+0x2dc>
    8ec2:	|  |  |  |     |      moveq #2,d0
    8ec4:	|  |  |  |     |  ,-- bra.s 8ec8 <loadSpriteBank+0x2de>
    8ec6:	|  |  |  |     '--|-> clr.w d0
    8ec8:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8ecc:	|  |  |  |            movea.l 112(sp),a0
    8ed0:	|  |  |  |            movea.l 8(a0),a0
    8ed4:	|  |  |  |            move.l 100(sp),d1
    8ed8:	|  |  |  |            move.l d1,d0
    8eda:	|  |  |  |            lsl.l #3,d0
    8edc:	|  |  |  |            sub.l d1,d0
    8ede:	|  |  |  |            add.l d0,d0
    8ee0:	|  |  |  |            add.l d0,d0
    8ee2:	|  |  |  |            adda.l d0,a0
    8ee4:	|  |  |  |            move.l (a0),d0
    8ee6:	|  |  |  |            movea.l d0,a0
    8ee8:	|  |  |  |            cmpa.w #0,a0
    8eec:	|  |  |  |        ,-- bge.s 8ef2 <loadSpriteBank+0x308>
    8eee:	|  |  |  |        |   lea 15(a0),a0
    8ef2:	|  |  |  |        '-> move.l a0,d0
    8ef4:	|  |  |  |            asr.l #4,d0
    8ef6:	|  |  |  |            add.l d0,d0
    8ef8:	|  |  |  |            move.l d0,d1
    8efa:	|  |  |  |            moveq #0,d0
    8efc:	|  |  |  |            move.w 58(sp),d0
    8f00:	|  |  |  |            add.l d1,d0
    8f02:	|  |  |  |            move.l d0,d2
    8f04:	|  |  |  |            movea.l 112(sp),a0
    8f08:	|  |  |  |            movea.l 8(a0),a0
    8f0c:	|  |  |  |            move.l 100(sp),d1
    8f10:	|  |  |  |            move.l d1,d0
    8f12:	|  |  |  |            lsl.l #3,d0
    8f14:	|  |  |  |            sub.l d1,d0
    8f16:	|  |  |  |            add.l d0,d0
    8f18:	|  |  |  |            add.l d0,d0
    8f1a:	|  |  |  |            adda.l d0,a0
    8f1c:	|  |  |  |            move.l 4(a0),d0
    8f20:	|  |  |  |            move.l d0,d0
    8f22:	|  |  |  |            move.w d2,d1
    8f24:	|  |  |  |            muls.w d0,d1
    8f26:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8f2a:	|  |  |  |            cmpi.w #100,98(sp)
    8f30:	|  |  |  |        ,-- bls.s 8f38 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8f32:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8f38:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8f3a:	|  |  |  '----------> moveq #0,d0
    8f3c:	|  |  |               move.w 98(sp),d0
    8f40:	|  |  |               add.l d0,d0
    8f42:	|  |  |               move.l d0,52(sp)
    8f46:	|  |  |               moveq #2,d0
    8f48:	|  |  |               move.l d0,48(sp)
    8f4c:	|  |  |               move.l 1cca4 <SysBase>,d0
    8f52:	|  |  |               movea.l d0,a6
    8f54:	|  |  |               move.l 52(sp),d0
    8f58:	|  |  |               move.l 48(sp),d1
    8f5c:	|  |  |               jsr -684(a6)
    8f60:	|  |  |               move.l d0,44(sp)
    8f64:	|  |  |               movea.l 44(sp),a1
    8f68:	|  |  |               movea.l 112(sp),a0
    8f6c:	|  |  |               movea.l 8(a0),a0
    8f70:	|  |  |               move.l 100(sp),d1
    8f74:	|  |  |               move.l d1,d0
    8f76:	|  |  |               lsl.l #3,d0
    8f78:	|  |  |               sub.l d1,d0
    8f7a:	|  |  |               add.l d0,d0
    8f7c:	|  |  |               add.l d0,d0
    8f7e:	|  |  |               adda.l d0,a0
    8f80:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f84:	|  |  |               move.l 1cc8c <bigDataFile>,40(sp)
    8f8c:	|  |  |               movea.l 112(sp),a0
    8f90:	|  |  |               movea.l 8(a0),a0
    8f94:	|  |  |               move.l 100(sp),d1
    8f98:	|  |  |               move.l d1,d0
    8f9a:	|  |  |               lsl.l #3,d0
    8f9c:	|  |  |               sub.l d1,d0
    8f9e:	|  |  |               add.l d0,d0
    8fa0:	|  |  |               add.l d0,d0
    8fa2:	|  |  |               adda.l d0,a0
    8fa4:	|  |  |               move.l 24(a0),36(sp)
    8faa:	|  |  |               moveq #2,d1
    8fac:	|  |  |               move.l d1,32(sp)
    8fb0:	|  |  |               move.w 98(sp),d0
    8fb4:	|  |  |               lsr.w #1,d0
    8fb6:	|  |  |               move.w d0,d0
    8fb8:	|  |  |               andi.l #65535,d0
    8fbe:	|  |  |               move.l d0,28(sp)
    8fc2:	|  |  |               move.l 1ccac <DOSBase>,d0
    8fc8:	|  |  |               movea.l d0,a6
    8fca:	|  |  |               move.l 40(sp),d1
    8fce:	|  |  |               move.l 36(sp),d2
    8fd2:	|  |  |               move.l 32(sp),d3
    8fd6:	|  |  |               move.l 28(sp),d4
    8fda:	|  |  |               jsr -324(a6)
    8fde:	|  |  |               move.l d0,24(sp)
    8fe2:	|  |  |               move.l 24(sp),d0
    8fe6:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8fea:	|  |  |           ,-- bne.s 8ffe <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8fec:	|  |  |           |   pea 19374 <PutChar+0x147c>
    8ff2:	|  |  |           |   jsr 17456 <KPrintF>
    8ff8:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8ffa:	|  |  |           |   clr.w d0
    8ffc:	+--|--|-----------|-- bra.s 9024 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8ffe:	|  |  |           '-> addq.l #1,100(sp)
    9002:	|  |  '-------------> move.l 100(sp),d0
    9006:	|  |                  cmp.l 74(sp),d0
    900a:	|  '----------------- blt.w 8d2e <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    900e:	|                     jsr 7782 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9014:	|                     pea 193a7 <PutChar+0x14af>
    901a:	|                     jsr 17456 <KPrintF>
    9020:	|                     addq.l #4,sp
	return TRUE;
    9022:	|                     moveq #1,d0
}
    9024:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    9028:	                      lea 84(sp),sp
    902c:	                      rts

0000902e <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    902e:	                   lea -16(sp),sp
    9032:	                   move.l d2,-(sp)
    9034:	                   move.l 32(sp),d0
    9038:	                   move.w d0,d0
    903a:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    903e:	                   movea.l 28(sp),a0
    9042:	                   move.l (a0),d2
    9044:	                   movea.l 24(sp),a0
    9048:	                   move.l 8(a0),d0
    904c:	                   move.l d0,-(sp)
    904e:	                   jsr 17888 <__floatsisf>
    9054:	                   addq.l #4,sp
    9056:	                   move.l d0,-(sp)
    9058:	                   move.l d2,-(sp)
    905a:	                   jsr 17b7c <__subsf3>
    9060:	                   addq.l #8,sp
    9062:	                   move.l d0,-(sp)
    9064:	                   jsr 17820 <__fixsfsi>
    906a:	                   addq.l #4,sp
    906c:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    9070:	                   movea.l 28(sp),a0
    9074:	                   move.l 4(a0),d2
    9078:	                   movea.l 24(sp),a0
    907c:	                   move.l 12(a0),d0
    9080:	                   move.l d0,-(sp)
    9082:	                   jsr 17888 <__floatsisf>
    9088:	                   addq.l #4,sp
    908a:	                   move.l d0,-(sp)
    908c:	                   move.l d2,-(sp)
    908e:	                   jsr 17b7c <__subsf3>
    9094:	                   addq.l #8,sp
    9096:	                   move.l d0,-(sp)
    9098:	                   jsr 17820 <__fixsfsi>
    909e:	                   addq.l #4,sp
    90a0:	                   move.w d0,8(sp)

	if( x < 0)
    90a4:	                   tst.w 18(sp)
    90a8:	               ,-- bge.s 90dc <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    90aa:	               |   movea.l 28(sp),a0
    90ae:	               |   move.l (a0),d2
    90b0:	               |   movea.l 24(sp),a0
    90b4:	               |   move.l 8(a0),d0
    90b8:	               |   move.l d0,-(sp)
    90ba:	               |   jsr 17888 <__floatsisf>
    90c0:	               |   addq.l #4,sp
    90c2:	               |   move.l d0,-(sp)
    90c4:	               |   move.l d2,-(sp)
    90c6:	               |   jsr 17b7c <__subsf3>
    90cc:	               |   addq.l #8,sp
    90ce:	               |   move.l d0,-(sp)
    90d0:	               |   jsr 17820 <__fixsfsi>
    90d6:	               |   addq.l #4,sp
    90d8:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    90dc:	               '-> movea.w 8(sp),a1
    90e0:	                   movea.w 18(sp),a0
    90e4:	                   pea 1 <_start+0x1>
    90e8:	                   move.l a1,-(sp)
    90ea:	                   move.l a0,-(sp)
    90ec:	                   move.l 40(sp),-(sp)
    90f0:	                   move.l 40(sp),-(sp)
    90f4:	                   jsr 2d86 <CstScaleSprite>
    90fa:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    90fe:	                   movea.l 28(sp),a0
    9102:	                   move.l 118(a0),d0
    9106:	                   moveq #8,d1
    9108:	                   and.l d1,d0
    910a:	   ,-------------- beq.w 91d6 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    910e:	   |               movea.l 24(sp),a0
    9112:	   |               move.l 8(a0),d0
    9116:	   |  ,----------- bpl.s 9152 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9118:	   |  |            move.w 18(sp),d0
    911c:	   |  |            tst.w 6(sp)
    9120:	   |  |     ,----- beq.s 913a <scaleSprite+0x10c>
    9122:	   |  |     |      movea.l 24(sp),a0
    9126:	   |  |     |      move.l (a0),d1
    9128:	   |  |     |      move.l d1,d2
    912a:	   |  |     |      movea.l 24(sp),a0
    912e:	   |  |     |      move.l 8(a0),d1
    9132:	   |  |     |      move.l d1,d1
    9134:	   |  |     |      movea.w d2,a0
    9136:	   |  |     |      suba.w d1,a0
    9138:	   |  |     |  ,-- bra.s 9148 <scaleSprite+0x11a>
    913a:	   |  |     '--|-> movea.l 24(sp),a0
    913e:	   |  |        |   move.l 8(a0),d1
    9142:	   |  |        |   move.l d1,d1
    9144:	   |  |        |   movea.w d1,a0
    9146:	   |  |        |   addq.w #1,a0
    9148:	   |  |        '-> move.w d0,d1
    914a:	   |  |            sub.w a0,d1
    914c:	   |  |            move.w d1,16(sp)
    9150:	   |  |  ,-------- bra.s 918a <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9152:	   |  '--|-------> move.w 18(sp),d1
    9156:	   |     |         tst.w 6(sp)
    915a:	   |     |  ,----- beq.s 9178 <scaleSprite+0x14a>
    915c:	   |     |  |      movea.l 24(sp),a0
    9160:	   |     |  |      move.l (a0),d0
    9162:	   |     |  |      move.l d0,d2
    9164:	   |     |  |      movea.l 24(sp),a0
    9168:	   |     |  |      move.l 8(a0),d0
    916c:	   |     |  |      move.l d0,d0
    916e:	   |     |  |      movea.w d2,a0
    9170:	   |     |  |      suba.w d0,a0
    9172:	   |     |  |      move.w a0,d0
    9174:	   |     |  |      subq.w #1,d0
    9176:	   |     |  |  ,-- bra.s 9182 <scaleSprite+0x154>
    9178:	   |     |  '--|-> movea.l 24(sp),a0
    917c:	   |     |     |   move.l 8(a0),d0
    9180:	   |     |     |   move.l d0,d0
    9182:	   |     |     '-> movea.w d1,a0
    9184:	   |     |         suba.w d0,a0
    9186:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    918a:	   |     '-------> movea.l 28(sp),a0
    918e:	   |               move.l 24(a0),d0
    9192:	   |               move.l d0,d1
    9194:	   |               movea.l 24(sp),a0
    9198:	   |               move.l 12(a0),d0
    919c:	   |               move.l d0,d0
    919e:	   |               sub.w d0,d1
    91a0:	   |               move.w 8(sp),d0
    91a4:	   |               movea.w d1,a0
    91a6:	   |               adda.w d0,a0
    91a8:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    91ac:	   |               movea.l 24(sp),a0
    91b0:	   |               move.l (a0),d0
    91b2:	   |               move.l d0,d0
    91b4:	   |               move.w 16(sp),d1
    91b8:	   |               add.w d0,d1
    91ba:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    91be:	   |               movea.l 24(sp),a0
    91c2:	   |               move.l 4(a0),d0
    91c6:	   |               move.l d0,d0
    91c8:	   |               movea.w 14(sp),a0
    91cc:	   |               adda.w d0,a0
    91ce:	   |               move.w a0,10(sp)
    91d2:	,--|-------------- bra.w 92be <scaleSprite+0x290>
	} else {
		x -= cameraX;
    91d6:	|  '-------------> move.w 18(sp),d1
    91da:	|                  move.l 1cd5a <cameraX>,d0
    91e0:	|                  move.l d0,d0
    91e2:	|                  sub.w d0,d1
    91e4:	|                  move.w d1,18(sp)
		y -= cameraY;
    91e8:	|                  move.w 8(sp),d1
    91ec:	|                  move.l 1cd5e <cameraY>,d0
    91f2:	|                  move.l d0,d0
    91f4:	|                  sub.w d0,d1
    91f6:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    91fa:	|                  movea.l 24(sp),a0
    91fe:	|                  move.l 8(a0),d0
    9202:	|     ,----------- bpl.s 923e <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9204:	|     |            move.w 18(sp),d0
    9208:	|     |            tst.w 6(sp)
    920c:	|     |     ,----- beq.s 9226 <scaleSprite+0x1f8>
    920e:	|     |     |      movea.l 24(sp),a0
    9212:	|     |     |      move.l (a0),d1
    9214:	|     |     |      move.l d1,d2
    9216:	|     |     |      movea.l 24(sp),a0
    921a:	|     |     |      move.l 8(a0),d1
    921e:	|     |     |      move.l d1,d1
    9220:	|     |     |      movea.w d2,a0
    9222:	|     |     |      suba.w d1,a0
    9224:	|     |     |  ,-- bra.s 9234 <scaleSprite+0x206>
    9226:	|     |     '--|-> movea.l 24(sp),a0
    922a:	|     |        |   move.l 8(a0),d1
    922e:	|     |        |   move.l d1,d1
    9230:	|     |        |   movea.w d1,a0
    9232:	|     |        |   addq.w #1,a0
    9234:	|     |        '-> move.w d0,d1
    9236:	|     |            sub.w a0,d1
    9238:	|     |            move.w d1,16(sp)
    923c:	|     |  ,-------- bra.s 9276 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    923e:	|     '--|-------> move.w 18(sp),d1
    9242:	|        |         tst.w 6(sp)
    9246:	|        |  ,----- beq.s 9264 <scaleSprite+0x236>
    9248:	|        |  |      movea.l 24(sp),a0
    924c:	|        |  |      move.l (a0),d0
    924e:	|        |  |      move.l d0,d2
    9250:	|        |  |      movea.l 24(sp),a0
    9254:	|        |  |      move.l 8(a0),d0
    9258:	|        |  |      move.l d0,d0
    925a:	|        |  |      movea.w d2,a0
    925c:	|        |  |      suba.w d0,a0
    925e:	|        |  |      move.w a0,d0
    9260:	|        |  |      subq.w #1,d0
    9262:	|        |  |  ,-- bra.s 926e <scaleSprite+0x240>
    9264:	|        |  '--|-> movea.l 24(sp),a0
    9268:	|        |     |   move.l 8(a0),d0
    926c:	|        |     |   move.l d0,d0
    926e:	|        |     '-> movea.w d1,a0
    9270:	|        |         suba.w d0,a0
    9272:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9276:	|        '-------> movea.l 28(sp),a0
    927a:	|                  move.l 24(a0),d0
    927e:	|                  move.l d0,d1
    9280:	|                  movea.l 24(sp),a0
    9284:	|                  move.l 12(a0),d0
    9288:	|                  move.l d0,d0
    928a:	|                  sub.w d0,d1
    928c:	|                  move.w 8(sp),d0
    9290:	|                  movea.w d1,a0
    9292:	|                  adda.w d0,a0
    9294:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9298:	|                  movea.l 24(sp),a0
    929c:	|                  move.l (a0),d0
    929e:	|                  move.l d0,d0
    92a0:	|                  move.w 16(sp),d1
    92a4:	|                  add.w d0,d1
    92a6:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    92aa:	|                  movea.l 24(sp),a0
    92ae:	|                  move.l 4(a0),d0
    92b2:	|                  move.l d0,d0
    92b4:	|                  movea.w 14(sp),a0
    92b8:	|                  adda.w d0,a0
    92ba:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    92be:	'----------------> move.l 1cc60 <input+0xa>,d1
    92c4:	                   moveq #0,d0
    92c6:	                   move.w 16(sp),d0
    92ca:	                   cmp.l d1,d0
    92cc:	            ,----- bgt.s 9302 <scaleSprite+0x2d4>
    92ce:	            |      move.l 1cc60 <input+0xa>,d1
    92d4:	            |      moveq #0,d0
    92d6:	            |      move.w 12(sp),d0
    92da:	            |      cmp.l d1,d0
    92dc:	            +----- blt.s 9302 <scaleSprite+0x2d4>
    92de:	            |      move.l 1cc64 <input+0xe>,d1
    92e4:	            |      moveq #0,d0
    92e6:	            |      move.w 14(sp),d0
    92ea:	            |      cmp.l d1,d0
    92ec:	            +----- bgt.s 9302 <scaleSprite+0x2d4>
    92ee:	            |      move.l 1cc64 <input+0xe>,d1
    92f4:	            |      moveq #0,d0
    92f6:	            |      move.w 10(sp),d0
    92fa:	            |      cmp.l d1,d0
    92fc:	            +----- blt.s 9302 <scaleSprite+0x2d4>
		return TRUE;
    92fe:	            |      moveq #1,d0
    9300:	            |  ,-- bra.s 9304 <scaleSprite+0x2d6>
	}
	return FALSE;
    9302:	            '--|-> clr.w d0
    9304:	               '-> move.l (sp)+,d2
    9306:	                   lea 16(sp),sp
    930a:	                   rts

0000930c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    930c:	    move.l 4(sp),d0
    9310:	,-- bpl.s 9314 <TF_abs+0x8>
    9312:	|   neg.l d0
}
    9314:	'-> rts

00009316 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9316:	             lea -28(sp),sp
    931a:	             move.l a6,-(sp)
    931c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    931e:	             move.l #132,28(sp)
    9326:	             clr.l 24(sp)
    932a:	             move.l 1cca4 <SysBase>,d0
    9330:	             movea.l d0,a6
    9332:	             move.l 28(sp),d0
    9336:	             move.l 24(sp),d1
    933a:	             jsr -684(a6)
    933e:	             move.l d0,20(sp)
    9342:	             move.l 20(sp),d0
    9346:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    934a:	         ,-- bne.s 9352 <addPerson+0x3c>
    934c:	         |   clr.w d0
    934e:	,--------|-- bra.w 9582 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9352:	|        '-> move.l 48(sp),-(sp)
    9356:	|            jsr d77a <loadObjectType>
    935c:	|            addq.l #4,sp
    935e:	|            movea.l 16(sp),a0
    9362:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9366:	|            movea.l 16(sp),a0
    936a:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9372:	|            movea.l 16(sp),a0
    9376:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    937a:	|            movea.l 16(sp),a0
    937e:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9382:	|            move.l 44(sp),-(sp)
    9386:	|            jsr 17888 <__floatsisf>
    938c:	|            addq.l #4,sp
    938e:	|            move.l d0,d2
    9390:	|            move.l 40(sp),-(sp)
    9394:	|            jsr 17888 <__floatsisf>
    939a:	|            addq.l #4,sp
    939c:	|            move.l d2,-(sp)
    939e:	|            move.l d0,-(sp)
    93a0:	|            move.l 24(sp),-(sp)
    93a4:	|            jsr aec6 <moveAndScale>
    93aa:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    93ae:	|            movea.l 16(sp),a0
    93b2:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    93b6:	|            movea.l 16(sp),a0
    93ba:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    93c0:	|            movea.l 16(sp),a0
    93c4:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    93ca:	|            movea.l 16(sp),a0
    93ce:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    93d2:	|            movea.l 16(sp),a0
    93d6:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    93da:	|            movea.l 16(sp),a0
    93de:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    93e4:	|            movea.l 16(sp),a0
    93e8:	|            clr.l 106(a0)
    newPerson->angle = 180;
    93ec:	|            movea.l 16(sp),a0
    93f0:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    93f8:	|            movea.l 16(sp),a0
    93fc:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9404:	|            movea.l 16(sp),a0
    9408:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    940c:	|            movea.l 16(sp),a0
    9410:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9414:	|            movea.l 16(sp),a0
    9418:	|            movea.l 114(a0),a0
    941c:	|            move.l 24(a0),d0
    9420:	|            movea.l 16(sp),a0
    9424:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9428:	|            movea.l 16(sp),a0
    942c:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9430:	|            movea.l 16(sp),a0
    9434:	|            movea.l 114(a0),a0
    9438:	|            move.l 32(a0),d0
    943c:	|            movea.l 16(sp),a0
    9440:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9444:	|            movea.l 16(sp),a0
    9448:	|            clr.b 126(a0)
    newPerson->g = 0;
    944c:	|            movea.l 16(sp),a0
    9450:	|            clr.b 127(a0)
    newPerson->b = 0;
    9454:	|            movea.l 16(sp),a0
    9458:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    945c:	|            movea.l 16(sp),a0
    9460:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9464:	|            movea.l 16(sp),a0
    9468:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    946c:	|            movea.l 16(sp),a0
    9470:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9476:	|            clr.l -(sp)
    9478:	|            move.l 20(sp),-(sp)
    947c:	|            jsr 42b8 <setFrames>
    9482:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9484:	|            movea.l 52(sp),a0
    9488:	|            movea.l (a0),a0
    948a:	|            movea.l (a0),a0
    948c:	|            movea.l 4(a0),a0
    9490:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9494:	|     ,----- bpl.s 949e <addPerson+0x188>
    9496:	|     |      move.l 12(sp),d0
    949a:	|     |      neg.l d0
    949c:	|     |  ,-- bra.s 94a0 <addPerson+0x18a>
    949e:	|     '--|-> moveq #1,d0
    94a0:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    94a4:	|            movea.l 52(sp),a0
    94a8:	|            movea.l (a0),a0
    94aa:	|            movea.l (a0),a0
    94ac:	|            movea.l (a0),a0
    94ae:	|            move.l 8(a0),d0
    94b2:	|            cmp.l 8(sp),d0
    94b6:	|     ,----- bgt.s 94e8 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    94b8:	|     |      tst.l 12(sp)
    94bc:	|     |  ,-- bge.s 94ca <addPerson+0x1b4>
            newPerson->height = 5;
    94be:	|     |  |   movea.l 16(sp),a0
    94c2:	|     |  |   moveq #5,d0
    94c4:	|     |  |   move.l d0,20(a0)
    94c8:	|  ,--|--|-- bra.s 9514 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    94ca:	|  |  |  '-> movea.l 52(sp),a0
    94ce:	|  |  |      movea.l (a0),a0
    94d0:	|  |  |      movea.l (a0),a0
    94d2:	|  |  |      movea.l (a0),a0
    94d4:	|  |  |      movea.l 16(a0),a0
    94d8:	|  |  |      move.l 12(a0),d0
    94dc:	|  |  |      addq.l #5,d0
    94de:	|  |  |      movea.l 16(sp),a0
    94e2:	|  |  |      move.l d0,20(a0)
    94e6:	|  +--|----- bra.s 9514 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    94e8:	|  |  '----> movea.l 52(sp),a0
    94ec:	|  |         movea.l (a0),a0
    94ee:	|  |         movea.l (a0),a0
    94f0:	|  |         movea.l (a0),a0
    94f2:	|  |         movea.l 16(a0),a0
    94f6:	|  |         move.l 8(sp),d1
    94fa:	|  |         move.l d1,d0
    94fc:	|  |         lsl.l #3,d0
    94fe:	|  |         sub.l d1,d0
    9500:	|  |         add.l d0,d0
    9502:	|  |         add.l d0,d0
    9504:	|  |         adda.l d0,a0
    9506:	|  |         move.l 12(a0),d0
    950a:	|  |         addq.l #5,d0
    950c:	|  |         movea.l 16(sp),a0
    9510:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9514:	|  '-------> move.l #118020,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    951c:	|        ,-- bra.s 952c <addPerson+0x216>
        changethat = &((*changethat)->next);
    951e:	|     ,--|-> movea.l 32(sp),a0
    9522:	|     |  |   move.l (a0),d0
    9524:	|     |  |   moveq #36,d1
    9526:	|     |  |   add.l d0,d1
    9528:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    952c:	|     |  '-> movea.l 32(sp),a0
    9530:	|     |      move.l (a0),d0
    9532:	|     |  ,-- beq.s 955a <addPerson+0x244>
    9534:	|     |  |   movea.l 32(sp),a0
    9538:	|     |  |   movea.l (a0),a0
    953a:	|     |  |   move.l 4(a0),d2
    953e:	|     |  |   move.l 44(sp),-(sp)
    9542:	|     |  |   jsr 17888 <__floatsisf>
    9548:	|     |  |   addq.l #4,sp
    954a:	|     |  |   move.l d0,-(sp)
    954c:	|     |  |   move.l d2,-(sp)
    954e:	|     |  |   jsr 17aae <__ltsf2>
    9554:	|     |  |   addq.l #8,sp
    9556:	|     |  |   tst.l d0
    9558:	|     '--|-- blt.s 951e <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    955a:	|        '-> movea.l 32(sp),a0
    955e:	|            move.l (a0),d0
    9560:	|            movea.l 16(sp),a0
    9564:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9568:	|            movea.l 32(sp),a0
    956c:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9570:	|            movea.l 16(sp),a0
    9574:	|            move.l 114(a0),d0
    9578:	|            sne d0
    957a:	|            neg.b d0
    957c:	|            move.b d0,d0
    957e:	|            andi.w #255,d0
}
    9582:	'----------> move.l (sp)+,d2
    9584:	             movea.l (sp)+,a6
    9586:	             lea 28(sp),sp
    958a:	             rts

0000958c <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    958c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    958e:	       move.l 8(sp),-(sp)
    9592:	       jsr a71c <findPerson>
    9598:	       addq.l #4,sp
    959a:	       move.l d0,(sp)
    if (moveMe) {
    959c:	,----- beq.s 95d0 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    959e:	|      movea.l (sp),a0
    95a0:	|      move.l 68(a0),d0
    95a4:	|  ,-- beq.s 95b6 <animatePerson+0x2a>
    95a6:	|  |   movea.l (sp),a0
    95a8:	|  |   move.l 68(a0),d0
    95ac:	|  |   move.l d0,-(sp)
    95ae:	|  |   jsr 5116 <abortFunction>
    95b4:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    95b6:	|  '-> movea.l (sp),a0
    95b8:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    95bc:	|      movea.l (sp),a0
    95be:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    95c2:	|      movea.l (sp),a0
    95c4:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    95c8:	|      movea.l (sp),a0
    95ca:	|      move.l 12(sp),72(a0)
    }
}
    95d0:	'----> nop
    95d2:	       addq.l #4,sp
    95d4:	       rts

000095d6 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    95d6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    95d8:	       move.l 8(sp),-(sp)
    95dc:	       jsr a71c <findPerson>
    95e2:	       addq.l #4,sp
    95e4:	       move.l d0,(sp)
    if (moveMe) {
    95e6:	,----- beq.s 9628 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    95e8:	|      movea.l (sp),a0
    95ea:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    95ee:	|      movea.l (sp),a0
    95f0:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    95f6:	|      move.l (sp),-(sp)
    95f8:	|      jsr b054 <rethinkAngle>
    95fe:	|      addq.l #4,sp
        if (moveMe->walking) {
    9600:	|      movea.l (sp),a0
    9602:	|      move.w 64(a0),d0
    9606:	|  ,-- beq.s 961a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9608:	|  |   pea 1 <_start+0x1>
    960c:	|  |   move.l 4(sp),-(sp)
    9610:	|  |   jsr 42b8 <setFrames>
    9616:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9618:	+--|-- bra.s 9628 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    961a:	|  '-> clr.l -(sp)
    961c:	|      move.l 4(sp),-(sp)
    9620:	|      jsr 42b8 <setFrames>
    9626:	|      addq.l #8,sp
}
    9628:	'----> nop
    962a:	       addq.l #4,sp
    962c:	       rts

0000962e <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    962e:	             lea -36(sp),sp
    9632:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9634:	             movea.l 44(sp),a0
    9638:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    963e:	             moveq #12,d0
    9640:	             move.l d0,28(sp)
    9644:	             clr.l 24(sp)
    9648:	             move.l 1cca4 <SysBase>,d0
    964e:	             movea.l d0,a6
    9650:	             move.l 28(sp),d0
    9654:	             move.l 24(sp),d1
    9658:	             jsr -684(a6)
    965c:	             move.l d0,20(sp)
    9660:	             move.l 20(sp),d0
    9664:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9668:	         ,-- bne.s 967e <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    966a:	         |   pea 193c1 <PutChar+0x14c9>
    9670:	         |   jsr 17456 <KPrintF>
    9676:	         |   addq.l #4,sp
		return NULL;
    9678:	         |   moveq #0,d0
    967a:	,--------|-- bra.w 97d0 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    967e:	|        '-> movea.l 44(sp),a0
    9682:	|            move.l (a0),d0
    9684:	|            movea.l 16(sp),a0
    9688:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    968a:	|            movea.l 16(sp),a0
    968e:	|            movea.l (a0),a0
    9690:	|            move.l 4(a0),d0
    9694:	|            addq.l #1,d0
    9696:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    969a:	|            movea.l 16(sp),a0
    969e:	|            move.l 32(sp),8(a0)

	if (num) {
    96a4:	|  ,-------- beq.w 97c4 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    96a8:	|  |         move.l 32(sp),d1
    96ac:	|  |         move.l d1,d0
    96ae:	|  |         add.l d0,d0
    96b0:	|  |         add.l d1,d0
    96b2:	|  |         add.l d0,d0
    96b4:	|  |         add.l d0,d0
    96b6:	|  |         move.l d0,12(sp)
    96ba:	|  |         clr.l 8(sp)
    96be:	|  |         move.l 1cca4 <SysBase>,d0
    96c4:	|  |         movea.l d0,a6
    96c6:	|  |         move.l 12(sp),d0
    96ca:	|  |         move.l 8(sp),d1
    96ce:	|  |         jsr -684(a6)
    96d2:	|  |         move.l d0,4(sp)
    96d6:	|  |         move.l 4(sp),d0
    96da:	|  |         movea.l 16(sp),a0
    96de:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    96e2:	|  |         movea.l 16(sp),a0
    96e6:	|  |         move.l 4(a0),d0
    96ea:	|  |     ,-- bne.s 9700 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    96ec:	|  |     |   pea 193c1 <PutChar+0x14c9>
    96f2:	|  |     |   jsr 17456 <KPrintF>
    96f8:	|  |     |   addq.l #4,sp
			return NULL;
    96fa:	|  |     |   moveq #0,d0
    96fc:	+--|-----|-- bra.w 97d0 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9700:	|  |     '-> clr.l 36(sp)
    9704:	|  |     ,-- bra.w 97b6 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9708:	|  |  ,--|-> movea.l 44(sp),a0
    970c:	|  |  |  |   movea.l 4(a0),a0
    9710:	|  |  |  |   move.l 36(sp),d1
    9714:	|  |  |  |   move.l d1,d0
    9716:	|  |  |  |   add.l d0,d0
    9718:	|  |  |  |   add.l d1,d0
    971a:	|  |  |  |   add.l d0,d0
    971c:	|  |  |  |   add.l d0,d0
    971e:	|  |  |  |   lea (0,a0,d0.l),a1
    9722:	|  |  |  |   movea.l 16(sp),a0
    9726:	|  |  |  |   movea.l 4(a0),a0
    972a:	|  |  |  |   move.l 36(sp),d1
    972e:	|  |  |  |   move.l d1,d0
    9730:	|  |  |  |   add.l d0,d0
    9732:	|  |  |  |   add.l d1,d0
    9734:	|  |  |  |   add.l d0,d0
    9736:	|  |  |  |   add.l d0,d0
    9738:	|  |  |  |   adda.l d0,a0
    973a:	|  |  |  |   move.l (a1),d0
    973c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    973e:	|  |  |  |   movea.l 44(sp),a0
    9742:	|  |  |  |   movea.l 4(a0),a0
    9746:	|  |  |  |   move.l 36(sp),d1
    974a:	|  |  |  |   move.l d1,d0
    974c:	|  |  |  |   add.l d0,d0
    974e:	|  |  |  |   add.l d1,d0
    9750:	|  |  |  |   add.l d0,d0
    9752:	|  |  |  |   add.l d0,d0
    9754:	|  |  |  |   lea (0,a0,d0.l),a1
    9758:	|  |  |  |   movea.l 16(sp),a0
    975c:	|  |  |  |   movea.l 4(a0),a0
    9760:	|  |  |  |   move.l 36(sp),d1
    9764:	|  |  |  |   move.l d1,d0
    9766:	|  |  |  |   add.l d0,d0
    9768:	|  |  |  |   add.l d1,d0
    976a:	|  |  |  |   add.l d0,d0
    976c:	|  |  |  |   add.l d0,d0
    976e:	|  |  |  |   adda.l d0,a0
    9770:	|  |  |  |   move.l 4(a1),d0
    9774:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9778:	|  |  |  |   movea.l 44(sp),a0
    977c:	|  |  |  |   movea.l 4(a0),a0
    9780:	|  |  |  |   move.l 36(sp),d1
    9784:	|  |  |  |   move.l d1,d0
    9786:	|  |  |  |   add.l d0,d0
    9788:	|  |  |  |   add.l d1,d0
    978a:	|  |  |  |   add.l d0,d0
    978c:	|  |  |  |   add.l d0,d0
    978e:	|  |  |  |   lea (0,a0,d0.l),a1
    9792:	|  |  |  |   movea.l 16(sp),a0
    9796:	|  |  |  |   movea.l 4(a0),a0
    979a:	|  |  |  |   move.l 36(sp),d1
    979e:	|  |  |  |   move.l d1,d0
    97a0:	|  |  |  |   add.l d0,d0
    97a2:	|  |  |  |   add.l d1,d0
    97a4:	|  |  |  |   add.l d0,d0
    97a6:	|  |  |  |   add.l d0,d0
    97a8:	|  |  |  |   adda.l d0,a0
    97aa:	|  |  |  |   move.l 8(a1),d0
    97ae:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    97b2:	|  |  |  |   addq.l #1,36(sp)
    97b6:	|  |  |  '-> move.l 36(sp),d0
    97ba:	|  |  |      cmp.l 32(sp),d0
    97be:	|  |  '----- blt.w 9708 <copyAnim+0xda>
    97c2:	|  |     ,-- bra.s 97cc <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    97c4:	|  '-----|-> movea.l 16(sp),a0
    97c8:	|        |   clr.l 4(a0)
	}

	return newAnim;
    97cc:	|        '-> move.l 16(sp),d0
}
    97d0:	'----------> movea.l (sp)+,a6
    97d2:	             lea 36(sp),sp
    97d6:	             rts

000097d8 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    97d8:	                lea -44(sp),sp
    97dc:	                move.l a6,-(sp)
    97de:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    97e0:	                moveq #12,d0
    97e2:	                move.l d0,40(sp)
    97e6:	                clr.l 36(sp)
    97ea:	                move.l 1cca4 <SysBase>,d0
    97f0:	                movea.l d0,a6
    97f2:	                move.l 40(sp),d0
    97f6:	                move.l 36(sp),d1
    97fa:	                jsr -684(a6)
    97fe:	                move.l d0,32(sp)
    9802:	                move.l 32(sp),d0
    9806:	                move.l d0,28(sp)
	if( !newP) {
    980a:	            ,-- bne.s 9820 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    980c:	            |   pea 193e2 <PutChar+0x14ea>
    9812:	            |   jsr 17456 <KPrintF>
    9818:	            |   addq.l #4,sp
		return NULL;
    981a:	            |   moveq #0,d0
    981c:	,-----------|-- bra.w 99f0 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9820:	|           '-> movea.l 28(sp),a0
    9824:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    982a:	|               move.l 56(sp),d1
    982e:	|               move.l d1,d0
    9830:	|               add.l d0,d0
    9832:	|               add.l d1,d0
    9834:	|               add.l d0,d0
    9836:	|               add.l d0,d0
    9838:	|               move.l d0,24(sp)
    983c:	|               clr.l 20(sp)
    9840:	|               move.l 1cca4 <SysBase>,d0
    9846:	|               movea.l d0,a6
    9848:	|               move.l 24(sp),d0
    984c:	|               move.l 20(sp),d1
    9850:	|               jsr -684(a6)
    9854:	|               move.l d0,16(sp)
    9858:	|               move.l 16(sp),d0
    985c:	|               movea.l 28(sp),a0
    9860:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9864:	|               movea.l 28(sp),a0
    9868:	|               move.l 4(a0),d0
    986c:	|           ,-- bne.s 9882 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    986e:	|           |   pea 193e2 <PutChar+0x14ea>
    9874:	|           |   jsr 17456 <KPrintF>
    987a:	|           |   addq.l #4,sp
		return NULL;
    987c:	|           |   moveq #0,d0
    987e:	+-----------|-- bra.w 99f0 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9882:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9888:	|               movea.l 60(sp),a0
    988c:	|               move.l (a0),44(sp)
	while (a) {
    9890:	|     ,-------- bra.w 99e4 <createPersonaAnim+0x20c>
		a --;
    9894:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9898:	|  |  |         movea.l 28(sp),a0
    989c:	|  |  |         movea.l 4(a0),a0
    98a0:	|  |  |         move.l 48(sp),d1
    98a4:	|  |  |         move.l d1,d0
    98a6:	|  |  |         add.l d0,d0
    98a8:	|  |  |         add.l d1,d0
    98aa:	|  |  |         add.l d0,d0
    98ac:	|  |  |         add.l d0,d0
    98ae:	|  |  |         adda.l d0,a0
    98b0:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    98b4:	|  |  |         movea.l 44(sp),a0
    98b8:	|  |  |         move.l (a0),d0
    98ba:	|  |  |         moveq #5,d1
    98bc:	|  |  |         cmp.l d0,d1
    98be:	|  |  |     ,-- bne.s 98ea <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    98c0:	|  |  |     |   movea.l 28(sp),a0
    98c4:	|  |  |     |   movea.l 4(a0),a0
    98c8:	|  |  |     |   move.l 48(sp),d1
    98cc:	|  |  |     |   move.l d1,d0
    98ce:	|  |  |     |   add.l d0,d0
    98d0:	|  |  |     |   add.l d1,d0
    98d2:	|  |  |     |   add.l d0,d0
    98d4:	|  |  |     |   add.l d0,d0
    98d6:	|  |  |     |   lea (0,a0,d0.l),a1
    98da:	|  |  |     |   movea.l 44(sp),a0
    98de:	|  |  |     |   move.l 4(a0),d0
    98e2:	|  |  |     |   move.l d0,8(a1)
    98e6:	|  |  |  ,--|-- bra.w 9992 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    98ea:	|  |  |  |  '-> movea.l 44(sp),a0
    98ee:	|  |  |  |      move.l (a0),d0
    98f0:	|  |  |  |      moveq #2,d1
    98f2:	|  |  |  |      cmp.l d0,d1
    98f4:	|  |  |  |  ,-- bne.s 9920 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    98f6:	|  |  |  |  |   movea.l 44(sp),a0
    98fa:	|  |  |  |  |   move.l 4(a0),d2
    98fe:	|  |  |  |  |   movea.l 28(sp),a0
    9902:	|  |  |  |  |   movea.l 4(a0),a0
    9906:	|  |  |  |  |   move.l 48(sp),d1
    990a:	|  |  |  |  |   move.l d1,d0
    990c:	|  |  |  |  |   add.l d0,d0
    990e:	|  |  |  |  |   add.l d1,d0
    9910:	|  |  |  |  |   add.l d0,d0
    9912:	|  |  |  |  |   add.l d0,d0
    9914:	|  |  |  |  |   adda.l d0,a0
    9916:	|  |  |  |  |   move.l d2,d0
    9918:	|  |  |  |  |   neg.l d0
    991a:	|  |  |  |  |   move.l d0,8(a0)
    991e:	|  |  |  +--|-- bra.s 9992 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9920:	|  |  |  |  '-> movea.l 44(sp),a0
    9924:	|  |  |  |      move.l (a0),d0
    9926:	|  |  |  |      moveq #6,d1
    9928:	|  |  |  |      cmp.l d0,d1
    992a:	|  |  |  |  ,-- bne.s 9972 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    992c:	|  |  |  |  |   movea.l 44(sp),a0
    9930:	|  |  |  |  |   movea.l 4(a0),a0
    9934:	|  |  |  |  |   move.l (a0),d0
    9936:	|  |  |  |  |   move.l d0,-(sp)
    9938:	|  |  |  |  |   pea 1 <_start+0x1>
    993c:	|  |  |  |  |   lea 20(sp),a0
    9940:	|  |  |  |  |   move.l a0,-(sp)
    9942:	|  |  |  |  |   jsr 14976 <getValueType>
    9948:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    994c:	|  |  |  |  |   movea.l 44(sp),a0
    9950:	|  |  |  |  |   movea.l 4(a0),a0
    9954:	|  |  |  |  |   movea.l (a0),a0
    9956:	|  |  |  |  |   move.l 8(a0),d0
    995a:	|  |  |  |  |   move.l d0,-(sp)
    995c:	|  |  |  |  |   pea 1 <_start+0x1>
    9960:	|  |  |  |  |   lea 16(sp),a0
    9964:	|  |  |  |  |   move.l a0,-(sp)
    9966:	|  |  |  |  |   jsr 14976 <getValueType>
    996c:	|  |  |  |  |   lea 12(sp),sp
    9970:	|  |  |  +--|-- bra.s 9992 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9972:	|  |  |  |  '-> move.l 44(sp),d0
    9976:	|  |  |  |      move.l d0,-(sp)
    9978:	|  |  |  |      pea 1 <_start+0x1>
    997c:	|  |  |  |      lea 20(sp),a0
    9980:	|  |  |  |      move.l a0,-(sp)
    9982:	|  |  |  |      jsr 14976 <getValueType>
    9988:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    998c:	|  |  |  |      moveq #1,d0
    998e:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9992:	|  |  |  '----> move.l 60(sp),-(sp)
    9996:	|  |  |         jsr 152fa <trimStack>
    999c:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    999e:	|  |  |         movea.l 28(sp),a0
    99a2:	|  |  |         movea.l 4(a0),a0
    99a6:	|  |  |         move.l 48(sp),d1
    99aa:	|  |  |         move.l d1,d0
    99ac:	|  |  |         add.l d0,d0
    99ae:	|  |  |         add.l d1,d0
    99b0:	|  |  |         add.l d0,d0
    99b2:	|  |  |         add.l d0,d0
    99b4:	|  |  |         adda.l d0,a0
    99b6:	|  |  |         move.l 12(sp),d0
    99ba:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    99bc:	|  |  |         movea.l 28(sp),a0
    99c0:	|  |  |         movea.l 4(a0),a0
    99c4:	|  |  |         move.l 48(sp),d1
    99c8:	|  |  |         move.l d1,d0
    99ca:	|  |  |         add.l d0,d0
    99cc:	|  |  |         add.l d1,d0
    99ce:	|  |  |         add.l d0,d0
    99d0:	|  |  |         add.l d0,d0
    99d2:	|  |  |         adda.l d0,a0
    99d4:	|  |  |         move.l 8(sp),d0
    99d8:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    99dc:	|  |  |         movea.l 60(sp),a0
    99e0:	|  |  |         move.l (a0),44(sp)
	while (a) {
    99e4:	|  |  '-------> tst.l 48(sp)
    99e8:	|  '----------- bne.w 9894 <createPersonaAnim+0xbc>
	}

	return newP;
    99ec:	|               move.l 28(sp),d0
}
    99f0:	'-------------> move.l (sp)+,d2
    99f2:	                movea.l (sp)+,a6
    99f4:	                lea 44(sp),sp
    99f8:	                rts

000099fa <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    99fa:	       lea -12(sp),sp
    99fe:	       move.l a6,-(sp)

	if(orig->theSprites)
    9a00:	       movea.l 20(sp),a0
    9a04:	       move.l (a0),d0
    9a06:	   ,-- beq.s 9a30 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9a08:	   |   movea.l 20(sp),a0
    9a0c:	   |   movea.l (a0),a0
    9a0e:	   |   move.l 4(a0),d0
    9a12:	   |   subq.l #1,d0
    9a14:	   |   move.l d0,4(a0)
    9a18:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9a1e:	   +-- bne.s 9a30 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9a20:	   |   movea.l 20(sp),a0
    9a24:	   |   move.l (a0),d0
    9a26:	   |   move.l d0,-(sp)
    9a28:	   |   jsr 8ade <forgetSpriteBank>
    9a2e:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9a30:	   '-> tst.l 20(sp)
    9a34:	,----- beq.s 9a74 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9a36:	|      movea.l 20(sp),a0
    9a3a:	|      move.l 8(a0),d0
    9a3e:	|  ,-- beq.s 9a5a <deleteAnim+0x60>
			FreeVec( orig->frames);
    9a40:	|  |   movea.l 20(sp),a0
    9a44:	|  |   move.l 4(a0),8(sp)
    9a4a:	|  |   move.l 1cca4 <SysBase>,d0
    9a50:	|  |   movea.l d0,a6
    9a52:	|  |   movea.l 8(sp),a1
    9a56:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9a5a:	|  '-> move.l 20(sp),4(sp)
    9a60:	|      move.l 1cca4 <SysBase>,d0
    9a66:	|      movea.l d0,a6
    9a68:	|      movea.l 4(sp),a1
    9a6c:	|      jsr -690(a6)
		orig = NULL;
    9a70:	|      clr.l 20(sp)
	}	
	
}
    9a74:	'----> nop
    9a76:	       movea.l (sp)+,a6
    9a78:	       lea 12(sp),sp
    9a7c:	       rts

00009a7e <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9a7e:	          lea -124(sp),sp
    9a82:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9a86:	          movea.l 152(sp),a0
    9a8a:	          move.l 56(a0),d1
    9a8e:	          movea.l 152(sp),a0
    9a92:	          move.l 60(a0),d0
    9a96:	          cmp.l d1,d0
    9a98:	      ,-- bne.s 9ac8 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9a9a:	      |   movea.l 152(sp),a0
    9a9e:	      |   moveq #-1,d0
    9aa0:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9aa4:	      |   movea.l 152(sp),a0
    9aa8:	      |   move.l 40(a0),d0
    9aac:	      |   movea.l 152(sp),a0
    9ab0:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9ab4:	      |   movea.l 152(sp),a0
    9ab8:	      |   move.l 44(a0),d0
    9abc:	      |   movea.l 152(sp),a0
    9ac0:	      |   move.l d0,52(a0)
    9ac4:	   ,--|-- bra.w a02e <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9ac8:	   |  '-> movea.l 1cdbc <currentFloor>,a0
    9ace:	   |      move.l 16(a0),d1
    9ad2:	   |      movea.l 152(sp),a0
    9ad6:	   |      move.l 56(a0),d0
    9ada:	   |      add.l d0,d0
    9adc:	   |      add.l d0,d0
    9ade:	   |      movea.l d1,a0
    9ae0:	   |      adda.l d0,a0
    9ae2:	   |      move.l (a0),d1
    9ae4:	   |      movea.l 152(sp),a0
    9ae8:	   |      move.l 60(a0),d0
    9aec:	   |      add.l d0,d0
    9aee:	   |      add.l d0,d0
    9af0:	   |      movea.l d1,a0
    9af2:	   |      adda.l d0,a0
    9af4:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9af8:	   |      moveq #-1,d0
    9afa:	   |      cmp.l 144(sp),d0
    9afe:	   |  ,-- bne.s 9b06 <doBorderStuff+0x88>
    9b00:	   |  |   clr.w d0
    9b02:	,--|--|-- bra.w a12e <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9b06:	|  |  '-> movea.l 1cdbc <currentFloor>,a0
    9b0c:	|  |      move.l 12(a0),d1
    9b10:	|  |      move.l 144(sp),d0
    9b14:	|  |      lsl.l #3,d0
    9b16:	|  |      add.l d0,d1
    9b18:	|  |      movea.l 1cdbc <currentFloor>,a0
    9b1e:	|  |      movea.l 12(a0),a1
    9b22:	|  |      movea.l 152(sp),a0
    9b26:	|  |      move.l 56(a0),d0
    9b2a:	|  |      lsl.l #3,d0
    9b2c:	|  |      add.l a1,d0
    9b2e:	|  |      lea 40(sp),a0
    9b32:	|  |      move.l a0,-(sp)
    9b34:	|  |      lea 48(sp),a0
    9b38:	|  |      move.l a0,-(sp)
    9b3a:	|  |      move.l d1,-(sp)
    9b3c:	|  |      move.l d0,-(sp)
    9b3e:	|  |      jsr 166bc <getMatchingCorners>
    9b44:	|  |      lea 16(sp),sp
    9b48:	|  |      tst.w d0
    9b4a:	|  |  ,-- bne.s 9b60 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9b4c:	|  |  |   pea 1940c <PutChar+0x1514>
    9b52:	|  |  |   jsr 17456 <KPrintF>
    9b58:	|  |  |   addq.l #4,sp
            return FALSE;
    9b5a:	|  |  |   clr.w d0
    9b5c:	+--|--|-- bra.w a12e <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9b60:	|  |  '-> movea.l 152(sp),a0
    9b64:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9b6a:	|  |      movea.l 152(sp),a0
    9b6e:	|  |      move.l (a0),d0
    9b70:	|  |      move.l d0,-(sp)
    9b72:	|  |      jsr 17820 <__fixsfsi>
    9b78:	|  |      addq.l #4,sp
    9b7a:	|  |      move.l d0,140(sp)
    9b7e:	|  |      movea.l 152(sp),a0
    9b82:	|  |      move.l 4(a0),d0
    9b86:	|  |      move.l d0,-(sp)
    9b88:	|  |      jsr 17820 <__fixsfsi>
    9b8e:	|  |      addq.l #4,sp
    9b90:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9b94:	|  |      movea.l 152(sp),a0
    9b98:	|  |      move.l 40(a0),132(sp)
    9b9e:	|  |      movea.l 152(sp),a0
    9ba2:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9ba8:	|  |      movea.l 1cdbc <currentFloor>,a0
    9bae:	|  |      move.l 4(a0),d1
    9bb2:	|  |      move.l 44(sp),d0
    9bb6:	|  |      lsl.l #3,d0
    9bb8:	|  |      movea.l d1,a0
    9bba:	|  |      adda.l d0,a0
    9bbc:	|  |      move.l (a0),124(sp)
    9bc0:	|  |      movea.l 1cdbc <currentFloor>,a0
    9bc6:	|  |      move.l 4(a0),d1
    9bca:	|  |      move.l 44(sp),d0
    9bce:	|  |      lsl.l #3,d0
    9bd0:	|  |      movea.l d1,a0
    9bd2:	|  |      adda.l d0,a0
    9bd4:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9bda:	|  |      movea.l 1cdbc <currentFloor>,a0
    9be0:	|  |      move.l 4(a0),d1
    9be4:	|  |      move.l 40(sp),d0
    9be8:	|  |      lsl.l #3,d0
    9bea:	|  |      movea.l d1,a0
    9bec:	|  |      adda.l d0,a0
    9bee:	|  |      move.l (a0),116(sp)
    9bf2:	|  |      movea.l 1cdbc <currentFloor>,a0
    9bf8:	|  |      move.l 4(a0),d1
    9bfc:	|  |      move.l 40(sp),d0
    9c00:	|  |      lsl.l #3,d0
    9c02:	|  |      movea.l d1,a0
    9c04:	|  |      adda.l d0,a0
    9c06:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9c0c:	|  |      move.l 140(sp),d0
    9c10:	|  |      sub.l 132(sp),d0
    9c14:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9c18:	|  |      move.l 136(sp),d0
    9c1c:	|  |      sub.l 128(sp),d0
    9c20:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9c24:	|  |      move.l 116(sp),d0
    9c28:	|  |      sub.l 124(sp),d0
    9c2c:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9c30:	|  |      move.l 112(sp),d0
    9c34:	|  |      sub.l 120(sp),d0
    9c38:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9c3c:	|  |      move.l 124(sp),d0
    9c40:	|  |      sub.l 140(sp),d0
    9c44:	|  |      move.l 104(sp),-(sp)
    9c48:	|  |      move.l d0,-(sp)
    9c4a:	|  |      jsr 17de2 <__mulsi3>
    9c50:	|  |      addq.l #8,sp
    9c52:	|  |      move.l d0,d2
    9c54:	|  |      move.l 120(sp),d0
    9c58:	|  |      sub.l 136(sp),d0
    9c5c:	|  |      move.l 108(sp),-(sp)
    9c60:	|  |      move.l d0,-(sp)
    9c62:	|  |      jsr 17de2 <__mulsi3>
    9c68:	|  |      addq.l #8,sp
    9c6a:	|  |      move.l d2,d1
    9c6c:	|  |      sub.l d0,d1
    9c6e:	|  |      move.l d1,-(sp)
    9c70:	|  |      jsr 17848 <__floatsidf>
    9c76:	|  |      addq.l #4,sp
    9c78:	|  |      move.l d0,32(sp)
    9c7c:	|  |      move.l d1,36(sp)
    9c80:	|  |      move.l 32(sp),88(sp)
    9c86:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9c8c:	|  |      move.l 96(sp),-(sp)
    9c90:	|  |      move.l 112(sp),-(sp)
    9c94:	|  |      jsr 17de2 <__mulsi3>
    9c9a:	|  |      addq.l #8,sp
    9c9c:	|  |      move.l d0,d2
    9c9e:	|  |      move.l 100(sp),-(sp)
    9ca2:	|  |      move.l 108(sp),-(sp)
    9ca6:	|  |      jsr 17de2 <__mulsi3>
    9cac:	|  |      addq.l #8,sp
    9cae:	|  |      move.l d2,d1
    9cb0:	|  |      sub.l d0,d1
    9cb2:	|  |      move.l d1,-(sp)
    9cb4:	|  |      jsr 17848 <__floatsidf>
    9cba:	|  |      addq.l #4,sp
    9cbc:	|  |      move.l d1,-(sp)
    9cbe:	|  |      move.l d0,-(sp)
    9cc0:	|  |      move.l 100(sp),-(sp)
    9cc4:	|  |      move.l 100(sp),-(sp)
    9cc8:	|  |      jsr 176dc <__divdf3>
    9cce:	|  |      lea 16(sp),sp
    9cd2:	|  |      move.l d0,24(sp)
    9cd6:	|  |      move.l d1,28(sp)
    9cda:	|  |      move.l 24(sp),88(sp)
    9ce0:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9ce6:	|  |      clr.l -(sp)
    9ce8:	|  |      clr.l -(sp)
    9cea:	|  |      move.l 100(sp),-(sp)
    9cee:	|  |      move.l 100(sp),-(sp)
    9cf2:	|  |      jsr 179a6 <__gtdf2>
    9cf8:	|  |      lea 16(sp),sp
    9cfc:	|  |      tst.l d0
    9cfe:	|  |  ,-- ble.w 9dd6 <doBorderStuff+0x358>
    9d02:	|  |  |   clr.l -(sp)
    9d04:	|  |  |   move.l #1072693248,-(sp)
    9d0a:	|  |  |   move.l 100(sp),-(sp)
    9d0e:	|  |  |   move.l 100(sp),-(sp)
    9d12:	|  |  |   jsr 17a60 <__ltdf2>
    9d18:	|  |  |   lea 16(sp),sp
    9d1c:	|  |  |   tst.l d0
    9d1e:	|  |  +-- bge.w 9dd6 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9d22:	|  |  |   move.l 124(sp),-(sp)
    9d26:	|  |  |   jsr 17848 <__floatsidf>
    9d2c:	|  |  |   addq.l #4,sp
    9d2e:	|  |  |   move.l d0,d2
    9d30:	|  |  |   move.l d1,d3
    9d32:	|  |  |   move.l 100(sp),-(sp)
    9d36:	|  |  |   jsr 17848 <__floatsidf>
    9d3c:	|  |  |   addq.l #4,sp
    9d3e:	|  |  |   move.l 92(sp),-(sp)
    9d42:	|  |  |   move.l 92(sp),-(sp)
    9d46:	|  |  |   move.l d1,-(sp)
    9d48:	|  |  |   move.l d0,-(sp)
    9d4a:	|  |  |   jsr 178d8 <__muldf3>
    9d50:	|  |  |   lea 16(sp),sp
    9d54:	|  |  |   move.l d1,-(sp)
    9d56:	|  |  |   move.l d0,-(sp)
    9d58:	|  |  |   move.l d3,-(sp)
    9d5a:	|  |  |   move.l d2,-(sp)
    9d5c:	|  |  |   jsr 1767a <__adddf3>
    9d62:	|  |  |   lea 16(sp),sp
    9d66:	|  |  |   move.l d1,-(sp)
    9d68:	|  |  |   move.l d0,-(sp)
    9d6a:	|  |  |   jsr 177ea <__fixdfsi>
    9d70:	|  |  |   addq.l #8,sp
    9d72:	|  |  |   movea.l 152(sp),a0
    9d76:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9d7a:	|  |  |   move.l 120(sp),-(sp)
    9d7e:	|  |  |   jsr 17848 <__floatsidf>
    9d84:	|  |  |   addq.l #4,sp
    9d86:	|  |  |   move.l d0,d2
    9d88:	|  |  |   move.l d1,d3
    9d8a:	|  |  |   move.l 96(sp),-(sp)
    9d8e:	|  |  |   jsr 17848 <__floatsidf>
    9d94:	|  |  |   addq.l #4,sp
    9d96:	|  |  |   move.l 92(sp),-(sp)
    9d9a:	|  |  |   move.l 92(sp),-(sp)
    9d9e:	|  |  |   move.l d1,-(sp)
    9da0:	|  |  |   move.l d0,-(sp)
    9da2:	|  |  |   jsr 178d8 <__muldf3>
    9da8:	|  |  |   lea 16(sp),sp
    9dac:	|  |  |   move.l d1,-(sp)
    9dae:	|  |  |   move.l d0,-(sp)
    9db0:	|  |  |   move.l d3,-(sp)
    9db2:	|  |  |   move.l d2,-(sp)
    9db4:	|  |  |   jsr 1767a <__adddf3>
    9dba:	|  |  |   lea 16(sp),sp
    9dbe:	|  |  |   move.l d1,-(sp)
    9dc0:	|  |  |   move.l d0,-(sp)
    9dc2:	|  |  |   jsr 177ea <__fixdfsi>
    9dc8:	|  |  |   addq.l #8,sp
    9dca:	|  |  |   movea.l 152(sp),a0
    9dce:	|  |  |   move.l d0,52(a0)
    9dd2:	|  +--|-- bra.w a02e <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9dd6:	|  |  '-> move.l 140(sp),d0
    9dda:	|  |      sub.l 124(sp),d0
    9dde:	|  |      move.l d0,84(sp)
    9de2:	|  |      move.l 140(sp),d0
    9de6:	|  |      sub.l 116(sp),d0
    9dea:	|  |      move.l d0,80(sp)
    9dee:	|  |      move.l 132(sp),d0
    9df2:	|  |      sub.l 124(sp),d0
    9df6:	|  |      move.l d0,76(sp)
    9dfa:	|  |      move.l 132(sp),d0
    9dfe:	|  |      sub.l 116(sp),d0
    9e02:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9e06:	|  |      move.l 136(sp),d0
    9e0a:	|  |      sub.l 120(sp),d0
    9e0e:	|  |      move.l d0,68(sp)
    9e12:	|  |      move.l 136(sp),d0
    9e16:	|  |      sub.l 112(sp),d0
    9e1a:	|  |      move.l d0,64(sp)
    9e1e:	|  |      move.l 128(sp),d0
    9e22:	|  |      sub.l 120(sp),d0
    9e26:	|  |      move.l d0,60(sp)
    9e2a:	|  |      move.l 128(sp),d0
    9e2e:	|  |      sub.l 112(sp),d0
    9e32:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9e36:	|  |      move.l 84(sp),-(sp)
    9e3a:	|  |      move.l 88(sp),-(sp)
    9e3e:	|  |      jsr 17de2 <__mulsi3>
    9e44:	|  |      addq.l #8,sp
    9e46:	|  |      move.l d0,84(sp)
    9e4a:	|  |      move.l 80(sp),-(sp)
    9e4e:	|  |      move.l 84(sp),-(sp)
    9e52:	|  |      jsr 17de2 <__mulsi3>
    9e58:	|  |      addq.l #8,sp
    9e5a:	|  |      move.l d0,80(sp)
    9e5e:	|  |      move.l 76(sp),-(sp)
    9e62:	|  |      move.l 80(sp),-(sp)
    9e66:	|  |      jsr 17de2 <__mulsi3>
    9e6c:	|  |      addq.l #8,sp
    9e6e:	|  |      move.l d0,76(sp)
    9e72:	|  |      move.l 72(sp),-(sp)
    9e76:	|  |      move.l 76(sp),-(sp)
    9e7a:	|  |      jsr 17de2 <__mulsi3>
    9e80:	|  |      addq.l #8,sp
    9e82:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9e86:	|  |      move.l 68(sp),-(sp)
    9e8a:	|  |      move.l 72(sp),-(sp)
    9e8e:	|  |      jsr 17de2 <__mulsi3>
    9e94:	|  |      addq.l #8,sp
    9e96:	|  |      move.l d0,68(sp)
    9e9a:	|  |      move.l 64(sp),-(sp)
    9e9e:	|  |      move.l 68(sp),-(sp)
    9ea2:	|  |      jsr 17de2 <__mulsi3>
    9ea8:	|  |      addq.l #8,sp
    9eaa:	|  |      move.l d0,64(sp)
    9eae:	|  |      move.l 60(sp),-(sp)
    9eb2:	|  |      move.l 64(sp),-(sp)
    9eb6:	|  |      jsr 17de2 <__mulsi3>
    9ebc:	|  |      addq.l #8,sp
    9ebe:	|  |      move.l d0,60(sp)
    9ec2:	|  |      move.l 56(sp),-(sp)
    9ec6:	|  |      move.l 60(sp),-(sp)
    9eca:	|  |      jsr 17de2 <__mulsi3>
    9ed0:	|  |      addq.l #8,sp
    9ed2:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9ed6:	|  |      move.l 84(sp),-(sp)
    9eda:	|  |      jsr 17848 <__floatsidf>
    9ee0:	|  |      addq.l #4,sp
    9ee2:	|  |      move.l d0,d2
    9ee4:	|  |      move.l d1,d3
    9ee6:	|  |      move.l 68(sp),-(sp)
    9eea:	|  |      jsr 17848 <__floatsidf>
    9ef0:	|  |      addq.l #4,sp
    9ef2:	|  |      move.l d1,-(sp)
    9ef4:	|  |      move.l d0,-(sp)
    9ef6:	|  |      move.l d3,-(sp)
    9ef8:	|  |      move.l d2,-(sp)
    9efa:	|  |      jsr 1767a <__adddf3>
    9f00:	|  |      lea 16(sp),sp
    9f04:	|  |      move.l d1,-(sp)
    9f06:	|  |      move.l d0,-(sp)
    9f08:	|  |      jsr 17d98 <sqrt>
    9f0e:	|  |      addq.l #8,sp
    9f10:	|  |      move.l d0,d2
    9f12:	|  |      move.l d1,d3
    9f14:	|  |      move.l 76(sp),-(sp)
    9f18:	|  |      jsr 17848 <__floatsidf>
    9f1e:	|  |      addq.l #4,sp
    9f20:	|  |      move.l d0,d4
    9f22:	|  |      move.l d1,d5
    9f24:	|  |      move.l 60(sp),-(sp)
    9f28:	|  |      jsr 17848 <__floatsidf>
    9f2e:	|  |      addq.l #4,sp
    9f30:	|  |      move.l d1,-(sp)
    9f32:	|  |      move.l d0,-(sp)
    9f34:	|  |      move.l d5,-(sp)
    9f36:	|  |      move.l d4,-(sp)
    9f38:	|  |      jsr 1767a <__adddf3>
    9f3e:	|  |      lea 16(sp),sp
    9f42:	|  |      move.l d1,-(sp)
    9f44:	|  |      move.l d0,-(sp)
    9f46:	|  |      jsr 17d98 <sqrt>
    9f4c:	|  |      addq.l #8,sp
    9f4e:	|  |      move.l d1,-(sp)
    9f50:	|  |      move.l d0,-(sp)
    9f52:	|  |      move.l d3,-(sp)
    9f54:	|  |      move.l d2,-(sp)
    9f56:	|  |      jsr 1767a <__adddf3>
    9f5c:	|  |      lea 16(sp),sp
    9f60:	|  |      move.l d0,d2
    9f62:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9f64:	|  |      move.l 80(sp),-(sp)
    9f68:	|  |      jsr 17848 <__floatsidf>
    9f6e:	|  |      addq.l #4,sp
    9f70:	|  |      move.l d0,d4
    9f72:	|  |      move.l d1,d5
    9f74:	|  |      move.l 64(sp),-(sp)
    9f78:	|  |      jsr 17848 <__floatsidf>
    9f7e:	|  |      addq.l #4,sp
    9f80:	|  |      move.l d1,-(sp)
    9f82:	|  |      move.l d0,-(sp)
    9f84:	|  |      move.l d5,-(sp)
    9f86:	|  |      move.l d4,-(sp)
    9f88:	|  |      jsr 1767a <__adddf3>
    9f8e:	|  |      lea 16(sp),sp
    9f92:	|  |      move.l d1,-(sp)
    9f94:	|  |      move.l d0,-(sp)
    9f96:	|  |      jsr 17d98 <sqrt>
    9f9c:	|  |      addq.l #8,sp
    9f9e:	|  |      move.l d0,d4
    9fa0:	|  |      move.l d1,d5
    9fa2:	|  |      move.l 72(sp),-(sp)
    9fa6:	|  |      jsr 17848 <__floatsidf>
    9fac:	|  |      addq.l #4,sp
    9fae:	|  |      move.l d0,d6
    9fb0:	|  |      move.l d1,d7
    9fb2:	|  |      move.l 56(sp),-(sp)
    9fb6:	|  |      jsr 17848 <__floatsidf>
    9fbc:	|  |      addq.l #4,sp
    9fbe:	|  |      move.l d1,-(sp)
    9fc0:	|  |      move.l d0,-(sp)
    9fc2:	|  |      move.l d7,-(sp)
    9fc4:	|  |      move.l d6,-(sp)
    9fc6:	|  |      jsr 1767a <__adddf3>
    9fcc:	|  |      lea 16(sp),sp
    9fd0:	|  |      move.l d1,-(sp)
    9fd2:	|  |      move.l d0,-(sp)
    9fd4:	|  |      jsr 17d98 <sqrt>
    9fda:	|  |      addq.l #8,sp
    9fdc:	|  |      move.l d1,-(sp)
    9fde:	|  |      move.l d0,-(sp)
    9fe0:	|  |      move.l d5,-(sp)
    9fe2:	|  |      move.l d4,-(sp)
    9fe4:	|  |      jsr 1767a <__adddf3>
    9fea:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9fee:	|  |      move.l d1,-(sp)
    9ff0:	|  |      move.l d0,-(sp)
    9ff2:	|  |      move.l d3,-(sp)
    9ff4:	|  |      move.l d2,-(sp)
    9ff6:	|  |      jsr 17a60 <__ltdf2>
    9ffc:	|  |      lea 16(sp),sp
    a000:	|  |      tst.l d0
    a002:	|  |  ,-- bge.s a01a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a004:	|  |  |   movea.l 152(sp),a0
    a008:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a00e:	|  |  |   movea.l 152(sp),a0
    a012:	|  |  |   move.l 120(sp),52(a0)
    a018:	|  +--|-- bra.s a02e <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a01a:	|  |  '-> movea.l 152(sp),a0
    a01e:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a024:	|  |      movea.l 152(sp),a0
    a028:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a02e:	|  '----> movea.l 152(sp),a0
    a032:	|         move.l 52(a0),d0
    a036:	|         move.l d0,-(sp)
    a038:	|         jsr 17888 <__floatsisf>
    a03e:	|         addq.l #4,sp
    a040:	|         move.l d0,d1
    a042:	|         movea.l 152(sp),a0
    a046:	|         move.l 4(a0),d0
    a04a:	|         move.l d0,-(sp)
    a04c:	|         move.l d1,-(sp)
    a04e:	|         jsr 17b7c <__subsf3>
    a054:	|         addq.l #8,sp
    a056:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a05a:	|         movea.l 152(sp),a0
    a05e:	|         move.l (a0),d2
    a060:	|         movea.l 152(sp),a0
    a064:	|         move.l 48(a0),d0
    a068:	|         move.l d0,-(sp)
    a06a:	|         jsr 17888 <__floatsisf>
    a070:	|         addq.l #4,sp
    a072:	|         move.l d0,-(sp)
    a074:	|         move.l d2,-(sp)
    a076:	|         jsr 17b7c <__subsf3>
    a07c:	|         addq.l #8,sp
    a07e:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a082:	|         clr.l -(sp)
    a084:	|         move.l 52(sp),-(sp)
    a088:	|         jsr 17ae4 <__nesf2>
    a08e:	|         addq.l #8,sp
    a090:	|         tst.l d0
    a092:	|     ,-- bne.s a0a6 <doBorderStuff+0x628>
    a094:	|     |   clr.l -(sp)
    a096:	|     |   move.l 56(sp),-(sp)
    a09a:	|     |   jsr 17ae4 <__nesf2>
    a0a0:	|     |   addq.l #8,sp
    a0a2:	|     |   tst.l d0
    a0a4:	|  ,--|-- beq.s a11c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a0a6:	|  |  '-> move.l 52(sp),d0
    a0aa:	|  |      move.l d0,-(sp)
    a0ac:	|  |      move.l d0,-(sp)
    a0ae:	|  |      jsr 17644 <__addsf3>
    a0b4:	|  |      addq.l #8,sp
    a0b6:	|  |      move.l d0,-(sp)
    a0b8:	|  |      move.l 52(sp),-(sp)
    a0bc:	|  |      jsr 17be8 <atan2f>
    a0c2:	|  |      addq.l #8,sp
    a0c4:	|  |      move.l d0,-(sp)
    a0c6:	|  |      jsr 177aa <__extendsfdf2>
    a0cc:	|  |      addq.l #4,sp
    a0ce:	|  |      move.l #-1540411785,-(sp)
    a0d4:	|  |      move.l #1078765033,-(sp)
    a0da:	|  |      move.l d1,-(sp)
    a0dc:	|  |      move.l d0,-(sp)
    a0de:	|  |      jsr 178d8 <__muldf3>
    a0e4:	|  |      lea 16(sp),sp
    a0e8:	|  |      clr.l -(sp)
    a0ea:	|  |      move.l #1080459264,-(sp)
    a0f0:	|  |      move.l d1,-(sp)
    a0f2:	|  |      move.l d0,-(sp)
    a0f4:	|  |      jsr 1767a <__adddf3>
    a0fa:	|  |      lea 16(sp),sp
    a0fe:	|  |      move.l d1,-(sp)
    a100:	|  |      move.l d0,-(sp)
    a102:	|  |      jsr 177ea <__fixdfsi>
    a108:	|  |      addq.l #8,sp
    a10a:	|  |      movea.l 152(sp),a0
    a10e:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a112:	|  |      movea.l 152(sp),a0
    a116:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a11c:	|  '----> pea 1 <_start+0x1>
    a120:	|         move.l 156(sp),-(sp)
    a124:	|         jsr 42b8 <setFrames>
    a12a:	|         addq.l #8,sp
    return TRUE;
    a12c:	|         moveq #1,d0
}
    a12e:	'-------> movem.l (sp)+,d2-d7
    a132:	          lea 124(sp),sp
    a136:	          rts

0000a138 <drawPeople>:

void drawPeople () {
    a138:	                   lea -24(sp),sp
    a13c:	                   move.l d2,-(sp)

	shufflePeople ();
    a13e:	                   jsr bc36 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a144:	                   move.l 1cd04 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a14c:	                   clr.l 20(sp)
	overRegion = NULL;
    a150:	                   clr.l 1cdb4 <overRegion>

	while (thisPerson) {
    a156:	   ,-------------- bra.w a708 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a15a:	,--|-------------> movea.l 24(sp),a0
    a15e:	|  |               move.w 104(a0),d0
    a162:	|  |  ,----------- beq.w a4bc <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a166:	|  |  |            movea.l 24(sp),a0
    a16a:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a170:	|  |  |            movea.l 24(sp),a0
    a174:	|  |  |            move.l 76(a0),d0
    a178:	|  |  |            cmp.l 20(sp),d0
    a17c:	|  |  |  ,-------- beq.w a34a <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a180:	|  |  |  |         movea.l 24(sp),a0
    a184:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a188:	|  |  |  |         movea.l 24(sp),a0
    a18c:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a192:	|  |  |  |         movea.l 24(sp),a0
    a196:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a19a:	|  |  |  |         movea.l 20(sp),a0
    a19e:	|  |  |  |         movea.l 4(a0),a0
    a1a2:	|  |  |  |         move.l 4(a0),d0
    a1a6:	|  |  |  |         movea.l 24(sp),a0
    a1aa:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a1ae:	|  |  |  |         movea.l 20(sp),a0
    a1b2:	|  |  |  |         movea.l 4(a0),a1
    a1b6:	|  |  |  |         movea.l 24(sp),a0
    a1ba:	|  |  |  |         move.l 84(a0),d0
    a1be:	|  |  |  |         move.l d0,d1
    a1c0:	|  |  |  |         move.l d1,d0
    a1c2:	|  |  |  |         add.l d0,d0
    a1c4:	|  |  |  |         add.l d1,d0
    a1c6:	|  |  |  |         add.l d0,d0
    a1c8:	|  |  |  |         add.l d0,d0
    a1ca:	|  |  |  |         lea (0,a1,d0.l),a0
    a1ce:	|  |  |  |         move.l 8(a0),d0
    a1d2:	|  |  |  |     ,-- ble.w a274 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a1d6:	|  |  |  |     |   movea.l 20(sp),a0
    a1da:	|  |  |  |     |   movea.l 4(a0),a1
    a1de:	|  |  |  |     |   movea.l 24(sp),a0
    a1e2:	|  |  |  |     |   move.l 84(a0),d0
    a1e6:	|  |  |  |     |   move.l d0,d1
    a1e8:	|  |  |  |     |   move.l d1,d0
    a1ea:	|  |  |  |     |   add.l d0,d0
    a1ec:	|  |  |  |     |   add.l d1,d0
    a1ee:	|  |  |  |     |   add.l d0,d0
    a1f0:	|  |  |  |     |   add.l d0,d0
    a1f2:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a1f6:	|  |  |  |     |   move.l 8(a0),d0
    a1fa:	|  |  |  |     |   clr.l -(sp)
    a1fc:	|  |  |  |     |   move.l d0,-(sp)
    a1fe:	|  |  |  |     |   jsr d34a <startSound>
    a204:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a206:	|  |  |  |     |   movea.l 24(sp),a0
    a20a:	|  |  |  |     |   move.l 84(a0),d0
    a20e:	|  |  |  |     |   addq.l #1,d0
    a210:	|  |  |  |     |   movea.l 24(sp),a0
    a214:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a218:	|  |  |  |     |   movea.l 24(sp),a0
    a21c:	|  |  |  |     |   move.l 84(a0),d0
    a220:	|  |  |  |     |   movea.l 24(sp),a0
    a224:	|  |  |  |     |   movea.l 72(a0),a0
    a228:	|  |  |  |     |   move.l 8(a0),d1
    a22c:	|  |  |  |     |   move.l d1,-(sp)
    a22e:	|  |  |  |     |   move.l d0,-(sp)
    a230:	|  |  |  |     |   jsr 17e8e <__modsi3>
    a236:	|  |  |  |     |   addq.l #8,sp
    a238:	|  |  |  |     |   movea.l 24(sp),a0
    a23c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a240:	|  |  |  |     |   movea.l 24(sp),a0
    a244:	|  |  |  |     |   movea.l 72(a0),a0
    a248:	|  |  |  |     |   movea.l 4(a0),a1
    a24c:	|  |  |  |     |   movea.l 24(sp),a0
    a250:	|  |  |  |     |   move.l 84(a0),d0
    a254:	|  |  |  |     |   move.l d0,d1
    a256:	|  |  |  |     |   move.l d1,d0
    a258:	|  |  |  |     |   add.l d0,d0
    a25a:	|  |  |  |     |   add.l d1,d0
    a25c:	|  |  |  |     |   add.l d0,d0
    a25e:	|  |  |  |     |   add.l d0,d0
    a260:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a264:	|  |  |  |     |   move.l 4(a0),d0
    a268:	|  |  |  |     |   movea.l 24(sp),a0
    a26c:	|  |  |  |     |   move.l d0,88(a0)
    a270:	|  |  |  |  ,--|-- bra.w a3b2 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a274:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a278:	|  |  |  |  |      movea.l 4(a0),a1
    a27c:	|  |  |  |  |      movea.l 24(sp),a0
    a280:	|  |  |  |  |      move.l 84(a0),d0
    a284:	|  |  |  |  |      move.l d0,d1
    a286:	|  |  |  |  |      move.l d1,d0
    a288:	|  |  |  |  |      add.l d0,d0
    a28a:	|  |  |  |  |      add.l d1,d0
    a28c:	|  |  |  |  |      add.l d0,d0
    a28e:	|  |  |  |  |      add.l d0,d0
    a290:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a294:	|  |  |  |  |      move.l 8(a0),d0
    a298:	|  |  |  |  +----- beq.w a3b2 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a29c:	|  |  |  |  |      movea.l 1cc74 <noStack>,a1
    a2a2:	|  |  |  |  |      movea.l 20(sp),a0
    a2a6:	|  |  |  |  |      move.l 4(a0),d2
    a2aa:	|  |  |  |  |      movea.l 24(sp),a0
    a2ae:	|  |  |  |  |      move.l 84(a0),d0
    a2b2:	|  |  |  |  |      move.l d0,d1
    a2b4:	|  |  |  |  |      move.l d1,d0
    a2b6:	|  |  |  |  |      add.l d0,d0
    a2b8:	|  |  |  |  |      add.l d1,d0
    a2ba:	|  |  |  |  |      add.l d0,d0
    a2bc:	|  |  |  |  |      add.l d0,d0
    a2be:	|  |  |  |  |      movea.l d2,a0
    a2c0:	|  |  |  |  |      adda.l d0,a0
    a2c2:	|  |  |  |  |      move.l 8(a0),d0
    a2c6:	|  |  |  |  |      neg.l d0
    a2c8:	|  |  |  |  |      pea 1 <_start+0x1>
    a2cc:	|  |  |  |  |      move.l a1,-(sp)
    a2ce:	|  |  |  |  |      clr.l -(sp)
    a2d0:	|  |  |  |  |      clr.l -(sp)
    a2d2:	|  |  |  |  |      move.l d0,-(sp)
    a2d4:	|  |  |  |  |      jsr 75e4 <startNewFunctionNum>
    a2da:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a2de:	|  |  |  |  |      movea.l 24(sp),a0
    a2e2:	|  |  |  |  |      move.l 84(a0),d0
    a2e6:	|  |  |  |  |      addq.l #1,d0
    a2e8:	|  |  |  |  |      movea.l 24(sp),a0
    a2ec:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a2f0:	|  |  |  |  |      movea.l 24(sp),a0
    a2f4:	|  |  |  |  |      move.l 84(a0),d0
    a2f8:	|  |  |  |  |      movea.l 24(sp),a0
    a2fc:	|  |  |  |  |      movea.l 72(a0),a0
    a300:	|  |  |  |  |      move.l 8(a0),d1
    a304:	|  |  |  |  |      move.l d1,-(sp)
    a306:	|  |  |  |  |      move.l d0,-(sp)
    a308:	|  |  |  |  |      jsr 17e8e <__modsi3>
    a30e:	|  |  |  |  |      addq.l #8,sp
    a310:	|  |  |  |  |      movea.l 24(sp),a0
    a314:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a318:	|  |  |  |  |      movea.l 24(sp),a0
    a31c:	|  |  |  |  |      movea.l 72(a0),a0
    a320:	|  |  |  |  |      movea.l 4(a0),a1
    a324:	|  |  |  |  |      movea.l 24(sp),a0
    a328:	|  |  |  |  |      move.l 84(a0),d0
    a32c:	|  |  |  |  |      move.l d0,d1
    a32e:	|  |  |  |  |      move.l d1,d0
    a330:	|  |  |  |  |      add.l d0,d0
    a332:	|  |  |  |  |      add.l d1,d0
    a334:	|  |  |  |  |      add.l d0,d0
    a336:	|  |  |  |  |      add.l d0,d0
    a338:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a33c:	|  |  |  |  |      move.l 4(a0),d0
    a340:	|  |  |  |  |      movea.l 24(sp),a0
    a344:	|  |  |  |  |      move.l d0,88(a0)
    a348:	|  |  |  |  +----- bra.s a3b2 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a34a:	|  |  |  '--|----> movea.l 24(sp),a0
    a34e:	|  |  |     |      move.l (a0),d0
    a350:	|  |  |     |      movea.l 24(sp),a0
    a354:	|  |  |     |      move.l 8(a0),d1
    a358:	|  |  |     |      move.l d1,-(sp)
    a35a:	|  |  |     |      move.l d0,-(sp)
    a35c:	|  |  |     |      jsr 17774 <__eqsf2>
    a362:	|  |  |     |      addq.l #8,sp
    a364:	|  |  |     |      tst.l d0
    a366:	|  |  |     |  ,-- bne.s a3aa <drawPeople+0x272>
    a368:	|  |  |     |  |   movea.l 24(sp),a0
    a36c:	|  |  |     |  |   move.l 4(a0),d0
    a370:	|  |  |     |  |   movea.l 24(sp),a0
    a374:	|  |  |     |  |   move.l 12(a0),d1
    a378:	|  |  |     |  |   move.l d1,-(sp)
    a37a:	|  |  |     |  |   move.l d0,-(sp)
    a37c:	|  |  |     |  |   jsr 17774 <__eqsf2>
    a382:	|  |  |     |  |   addq.l #8,sp
    a384:	|  |  |     |  |   tst.l d0
    a386:	|  |  |     |  +-- bne.s a3aa <drawPeople+0x272>
    a388:	|  |  |     |  |   movea.l 20(sp),a0
    a38c:	|  |  |     |  |   move.l 8(a0),d0
    a390:	|  |  |     |  |   moveq #1,d1
    a392:	|  |  |     |  |   cmp.l d0,d1
    a394:	|  |  |     |  +-- bne.s a3aa <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a396:	|  |  |     |  |   movea.l 24(sp),a0
    a39a:	|  |  |     |  |   move.l 16(a0),d0
    a39e:	|  |  |     |  |   addq.l #1,d0
    a3a0:	|  |  |     |  |   movea.l 24(sp),a0
    a3a4:	|  |  |     |  |   move.l d0,16(a0)
    a3a8:	|  |  |     +--|-- bra.s a3b2 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a3aa:	|  |  |     |  '-> movea.l 24(sp),a0
    a3ae:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a3b2:	|  |  |     '----> movea.l 24(sp),a0
    a3b6:	|  |  |            move.l (a0),d0
    a3b8:	|  |  |            movea.l 24(sp),a0
    a3bc:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a3c0:	|  |  |            movea.l 24(sp),a0
    a3c4:	|  |  |            move.l 4(a0),d0
    a3c8:	|  |  |            movea.l 24(sp),a0
    a3cc:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a3d0:	|  |  |            movea.l 20(sp),a0
    a3d4:	|  |  |            movea.l 4(a0),a1
    a3d8:	|  |  |            movea.l 24(sp),a0
    a3dc:	|  |  |            move.l 84(a0),d0
    a3e0:	|  |  |            move.l d0,d1
    a3e2:	|  |  |            move.l d1,d0
    a3e4:	|  |  |            add.l d0,d0
    a3e6:	|  |  |            add.l d1,d0
    a3e8:	|  |  |            add.l d0,d0
    a3ea:	|  |  |            add.l d0,d0
    a3ec:	|  |  |            lea (0,a1,d0.l),a0
    a3f0:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a3f4:	|  |  |            move.l 8(sp),d0
    a3f8:	|  |  |            add.l d0,d0
    a3fa:	|  |  |            subx.l d0,d0
    a3fc:	|  |  |            neg.l d0
    a3fe:	|  |  |            move.b d0,d0
    a400:	|  |  |            move.b d0,d0
    a402:	|  |  |            andi.l #255,d0
    a408:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a40c:	|  |  |            move.l 8(sp),-(sp)
    a410:	|  |  |            jsr 930c <TF_abs>
    a416:	|  |  |            addq.l #4,sp
    a418:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a41c:	|  |  |            movea.l 20(sp),a0
    a420:	|  |  |            movea.l (a0),a0
    a422:	|  |  |            move.l 8(a0),d0
    a426:	|  |  |            cmp.l 12(sp),d0
    a42a:	|  |  |        ,-- bgt.s a43a <drawPeople+0x302>
				fNum = 0;
    a42c:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a430:	|  |  |        |   moveq #2,d0
    a432:	|  |  |        |   sub.l 16(sp),d0
    a436:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a43a:	|  |  |        '-> moveq #2,d1
    a43c:	|  |  |            cmp.l 16(sp),d1
    a440:	|  |  +----------- beq.s a4bc <drawPeople+0x384>
				BOOL r = FALSE;
    a442:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a446:	|  |  |            move.l 16(sp),d0
    a44a:	|  |  |            movea.w d0,a0
    a44c:	|  |  |            movea.l 20(sp),a1
    a450:	|  |  |            movea.l (a1),a1
    a452:	|  |  |            movea.l 16(a1),a1
    a456:	|  |  |            move.l 12(sp),d1
    a45a:	|  |  |            move.l d1,d0
    a45c:	|  |  |            lsl.l #3,d0
    a45e:	|  |  |            sub.l d1,d0
    a460:	|  |  |            add.l d0,d0
    a462:	|  |  |            add.l d0,d0
    a464:	|  |  |            add.l a1,d0
    a466:	|  |  |            move.l a0,-(sp)
    a468:	|  |  |            move.l 28(sp),-(sp)
    a46c:	|  |  |            move.l d0,-(sp)
    a46e:	|  |  |            jsr 902e <scaleSprite>
    a474:	|  |  |            lea 12(sp),sp
    a478:	|  |  |            move.w d0,6(sp)
				if (r) {
    a47c:	|  |  +----------- beq.s a4bc <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a47e:	|  |  |            movea.l 24(sp),a0
    a482:	|  |  |            movea.l 114(a0),a0
    a486:	|  |  |            movea.l (a0),a0
    a488:	|  |  |            move.b (a0),d0
    a48a:	|  |  +----------- beq.s a4bc <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a48c:	|  |  |            move.l 1cd24 <personRegion+0x1c>,d1
    a492:	|  |  |            movea.l 24(sp),a0
    a496:	|  |  |            move.l 114(a0),d0
    a49a:	|  |  |            cmp.l d1,d0
    a49c:	|  |  |        ,-- beq.s a4a4 <drawPeople+0x36c>
    a49e:	|  |  |        |   clr.l 1cc6c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a4a4:	|  |  |        '-> movea.l 24(sp),a0
    a4a8:	|  |  |            move.l 114(a0),d0
    a4ac:	|  |  |            move.l d0,1cd24 <personRegion+0x1c>
						overRegion = & personRegion;
    a4b2:	|  |  |            move.l #118024,1cdb4 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a4bc:	|  |  '----------> movea.l 24(sp),a0
    a4c0:	|  |               move.l 88(a0),d0
    a4c4:	|  |               subq.l #1,d0
    a4c6:	|  |               movea.l 24(sp),a0
    a4ca:	|  |               move.l d0,88(a0)
    a4ce:	|  |               movea.l 24(sp),a0
    a4d2:	|  |               move.l 88(a0),d0
    a4d6:	|  |        ,----- bne.w a6fe <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a4da:	|  |        |      movea.l 24(sp),a0
    a4de:	|  |        |      move.l 84(a0),d0
    a4e2:	|  |        |      addq.l #1,d0
    a4e4:	|  |        |      movea.l 24(sp),a0
    a4e8:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4ec:	|  |        |      movea.l 24(sp),a0
    a4f0:	|  |        |      move.l 84(a0),d0
    a4f4:	|  |        |      movea.l 24(sp),a0
    a4f8:	|  |        |      movea.l 72(a0),a0
    a4fc:	|  |        |      move.l 8(a0),d1
    a500:	|  |        |      move.l d1,-(sp)
    a502:	|  |        |      move.l d0,-(sp)
    a504:	|  |        |      jsr 17e8e <__modsi3>
    a50a:	|  |        |      addq.l #8,sp
    a50c:	|  |        |      movea.l 24(sp),a0
    a510:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a514:	|  |        |      movea.l 24(sp),a0
    a518:	|  |        |      movea.l 72(a0),a0
    a51c:	|  |        |      movea.l 4(a0),a1
    a520:	|  |        |      movea.l 24(sp),a0
    a524:	|  |        |      move.l 84(a0),d0
    a528:	|  |        |      move.l d0,d1
    a52a:	|  |        |      move.l d1,d0
    a52c:	|  |        |      add.l d0,d0
    a52e:	|  |        |      add.l d1,d0
    a530:	|  |        |      add.l d0,d0
    a532:	|  |        |      add.l d0,d0
    a534:	|  |        |      lea (0,a1,d0.l),a0
    a538:	|  |        |      move.l 4(a0),d0
    a53c:	|  |        |      movea.l 24(sp),a0
    a540:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a544:	|  |        |      movea.l 24(sp),a0
    a548:	|  |        |      move.w 104(a0),d0
    a54c:	|  |        +----- beq.w a6fe <drawPeople+0x5c6>
    a550:	|  |        |      tst.l 20(sp)
    a554:	|  |        +----- beq.w a6fe <drawPeople+0x5c6>
    a558:	|  |        |      movea.l 20(sp),a0
    a55c:	|  |        |      move.l 4(a0),d0
    a560:	|  |        +----- beq.w a6fe <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a564:	|  |        |      movea.l 20(sp),a0
    a568:	|  |        |      movea.l 4(a0),a1
    a56c:	|  |        |      movea.l 24(sp),a0
    a570:	|  |        |      move.l 84(a0),d0
    a574:	|  |        |      move.l d0,d1
    a576:	|  |        |      move.l d1,d0
    a578:	|  |        |      add.l d0,d0
    a57a:	|  |        |      add.l d1,d0
    a57c:	|  |        |      add.l d0,d0
    a57e:	|  |        |      add.l d0,d0
    a580:	|  |        |      lea (0,a1,d0.l),a0
    a584:	|  |        |      move.l 8(a0),d0
    a588:	|  |        |  ,-- ble.w a62a <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a58c:	|  |        |  |   movea.l 20(sp),a0
    a590:	|  |        |  |   movea.l 4(a0),a1
    a594:	|  |        |  |   movea.l 24(sp),a0
    a598:	|  |        |  |   move.l 84(a0),d0
    a59c:	|  |        |  |   move.l d0,d1
    a59e:	|  |        |  |   move.l d1,d0
    a5a0:	|  |        |  |   add.l d0,d0
    a5a2:	|  |        |  |   add.l d1,d0
    a5a4:	|  |        |  |   add.l d0,d0
    a5a6:	|  |        |  |   add.l d0,d0
    a5a8:	|  |        |  |   lea (0,a1,d0.l),a0
    a5ac:	|  |        |  |   move.l 8(a0),d0
    a5b0:	|  |        |  |   clr.l -(sp)
    a5b2:	|  |        |  |   move.l d0,-(sp)
    a5b4:	|  |        |  |   jsr d34a <startSound>
    a5ba:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a5bc:	|  |        |  |   movea.l 24(sp),a0
    a5c0:	|  |        |  |   move.l 84(a0),d0
    a5c4:	|  |        |  |   addq.l #1,d0
    a5c6:	|  |        |  |   movea.l 24(sp),a0
    a5ca:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5ce:	|  |        |  |   movea.l 24(sp),a0
    a5d2:	|  |        |  |   move.l 84(a0),d0
    a5d6:	|  |        |  |   movea.l 24(sp),a0
    a5da:	|  |        |  |   movea.l 72(a0),a0
    a5de:	|  |        |  |   move.l 8(a0),d1
    a5e2:	|  |        |  |   move.l d1,-(sp)
    a5e4:	|  |        |  |   move.l d0,-(sp)
    a5e6:	|  |        |  |   jsr 17e8e <__modsi3>
    a5ec:	|  |        |  |   addq.l #8,sp
    a5ee:	|  |        |  |   movea.l 24(sp),a0
    a5f2:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5f6:	|  |        |  |   movea.l 24(sp),a0
    a5fa:	|  |        |  |   movea.l 72(a0),a0
    a5fe:	|  |        |  |   movea.l 4(a0),a1
    a602:	|  |        |  |   movea.l 24(sp),a0
    a606:	|  |        |  |   move.l 84(a0),d0
    a60a:	|  |        |  |   move.l d0,d1
    a60c:	|  |        |  |   move.l d1,d0
    a60e:	|  |        |  |   add.l d0,d0
    a610:	|  |        |  |   add.l d1,d0
    a612:	|  |        |  |   add.l d0,d0
    a614:	|  |        |  |   add.l d0,d0
    a616:	|  |        |  |   lea (0,a1,d0.l),a0
    a61a:	|  |        |  |   move.l 4(a0),d0
    a61e:	|  |        |  |   movea.l 24(sp),a0
    a622:	|  |        |  |   move.l d0,88(a0)
    a626:	|  |        +--|-- bra.w a6fe <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a62a:	|  |        |  '-> movea.l 20(sp),a0
    a62e:	|  |        |      movea.l 4(a0),a1
    a632:	|  |        |      movea.l 24(sp),a0
    a636:	|  |        |      move.l 84(a0),d0
    a63a:	|  |        |      move.l d0,d1
    a63c:	|  |        |      move.l d1,d0
    a63e:	|  |        |      add.l d0,d0
    a640:	|  |        |      add.l d1,d0
    a642:	|  |        |      add.l d0,d0
    a644:	|  |        |      add.l d0,d0
    a646:	|  |        |      lea (0,a1,d0.l),a0
    a64a:	|  |        |      move.l 8(a0),d0
    a64e:	|  |        +----- beq.w a6fe <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a652:	|  |        |      movea.l 1cc74 <noStack>,a1
    a658:	|  |        |      movea.l 20(sp),a0
    a65c:	|  |        |      move.l 4(a0),d2
    a660:	|  |        |      movea.l 24(sp),a0
    a664:	|  |        |      move.l 84(a0),d0
    a668:	|  |        |      move.l d0,d1
    a66a:	|  |        |      move.l d1,d0
    a66c:	|  |        |      add.l d0,d0
    a66e:	|  |        |      add.l d1,d0
    a670:	|  |        |      add.l d0,d0
    a672:	|  |        |      add.l d0,d0
    a674:	|  |        |      movea.l d2,a0
    a676:	|  |        |      adda.l d0,a0
    a678:	|  |        |      move.l 8(a0),d0
    a67c:	|  |        |      neg.l d0
    a67e:	|  |        |      pea 1 <_start+0x1>
    a682:	|  |        |      move.l a1,-(sp)
    a684:	|  |        |      clr.l -(sp)
    a686:	|  |        |      clr.l -(sp)
    a688:	|  |        |      move.l d0,-(sp)
    a68a:	|  |        |      jsr 75e4 <startNewFunctionNum>
    a690:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a694:	|  |        |      movea.l 24(sp),a0
    a698:	|  |        |      move.l 84(a0),d0
    a69c:	|  |        |      addq.l #1,d0
    a69e:	|  |        |      movea.l 24(sp),a0
    a6a2:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a6a6:	|  |        |      movea.l 24(sp),a0
    a6aa:	|  |        |      move.l 84(a0),d0
    a6ae:	|  |        |      movea.l 24(sp),a0
    a6b2:	|  |        |      movea.l 72(a0),a0
    a6b6:	|  |        |      move.l 8(a0),d1
    a6ba:	|  |        |      move.l d1,-(sp)
    a6bc:	|  |        |      move.l d0,-(sp)
    a6be:	|  |        |      jsr 17e8e <__modsi3>
    a6c4:	|  |        |      addq.l #8,sp
    a6c6:	|  |        |      movea.l 24(sp),a0
    a6ca:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a6ce:	|  |        |      movea.l 24(sp),a0
    a6d2:	|  |        |      movea.l 72(a0),a0
    a6d6:	|  |        |      movea.l 4(a0),a1
    a6da:	|  |        |      movea.l 24(sp),a0
    a6de:	|  |        |      move.l 84(a0),d0
    a6e2:	|  |        |      move.l d0,d1
    a6e4:	|  |        |      move.l d1,d0
    a6e6:	|  |        |      add.l d0,d0
    a6e8:	|  |        |      add.l d1,d0
    a6ea:	|  |        |      add.l d0,d0
    a6ec:	|  |        |      add.l d0,d0
    a6ee:	|  |        |      lea (0,a1,d0.l),a0
    a6f2:	|  |        |      move.l 4(a0),d0
    a6f6:	|  |        |      movea.l 24(sp),a0
    a6fa:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a6fe:	|  |        '----> movea.l 24(sp),a0
    a702:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a708:	|  '-------------> tst.l 24(sp)
    a70c:	'----------------- bne.w a15a <drawPeople+0x22>
	}
}
    a710:	                   nop
    a712:	                   nop
    a714:	                   move.l (sp)+,d2
    a716:	                   lea 24(sp),sp
    a71a:	                   rts

0000a71c <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a71c:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a71e:	          pea 19424 <PutChar+0x152c>
    a724:	          jsr 17456 <KPrintF>
    a72a:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a72c:	          move.l 1cd04 <allPeople>,(sp)
	while (thisPerson) {
    a732:	      ,-- bra.s a74a <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a734:	,-----|-> movea.l (sp),a0
    a736:	|     |   movea.l 114(a0),a0
    a73a:	|     |   move.l 4(a0),d0
    a73e:	|     |   cmp.l 8(sp),d0
    a742:	|  ,--|-- beq.s a750 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a744:	|  |  |   movea.l (sp),a0
    a746:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a74a:	|  |  '-> tst.l (sp)
    a74c:	'--|----- bne.s a734 <findPerson+0x18>
    a74e:	   |  ,-- bra.s a752 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a750:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a752:	      '-> pea 19438 <PutChar+0x1540>
    a758:	          jsr 17456 <KPrintF>
    a75e:	          addq.l #4,sp
	return thisPerson;
    a760:	          move.l (sp),d0
}
    a762:	          addq.l #4,sp
    a764:	          rts

0000a766 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a766:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a768:	       move.l 12(sp),-(sp)
    a76c:	       jsr a71c <findPerson>
    a772:	       addq.l #4,sp
    a774:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a776:	   ,-- bne.s a77c <floatCharacter+0x16>
    a778:	   |   clr.w d0
    a77a:	,--|-- bra.s a786 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a77c:	|  '-> movea.l (sp),a0
    a77e:	|      move.l 8(sp),24(a0)
	return TRUE;
    a784:	|      moveq #1,d0
}
    a786:	'----> addq.l #4,sp
    a788:	       rts

0000a78a <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a78a:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a78c:	          tst.l 8(sp)
    a790:	      ,-- bne.s a79e <forceWalkingPerson+0x14>
    a792:	      |   tst.l 12(sp)
    a796:	      +-- bne.s a79e <forceWalkingPerson+0x14>
    a798:	      |   clr.w d0
    a79a:	,-----|-- bra.w a830 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a79e:	|     '-> move.l 16(sp),-(sp)
    a7a2:	|         jsr a71c <findPerson>
    a7a8:	|         addq.l #4,sp
    a7aa:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a7ac:	|     ,-- bne.s a7b2 <forceWalkingPerson+0x28>
    a7ae:	|     |   clr.w d0
    a7b0:	+-----|-- bra.s a830 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a7b2:	|     '-> movea.l (sp),a0
    a7b4:	|         move.l 68(a0),d0
    a7b8:	|     ,-- beq.s a7ca <forceWalkingPerson+0x40>
    a7ba:	|     |   movea.l (sp),a0
    a7bc:	|     |   move.l 68(a0),d0
    a7c0:	|     |   move.l d0,-(sp)
    a7c2:	|     |   jsr 5116 <abortFunction>
    a7c8:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a7ca:	|     '-> movea.l (sp),a0
    a7cc:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a7d2:	|         movea.l (sp),a0
    a7d4:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a7d8:	|         movea.l (sp),a0
    a7da:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a7e0:	|         movea.l (sp),a0
    a7e2:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a7e8:	|         movea.l (sp),a0
    a7ea:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a7f0:	|         movea.l (sp),a0
    a7f2:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a7f6:	|         movea.l (sp),a0
    a7f8:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a7fc:	|         move.l (sp),-(sp)
    a7fe:	|         jsr 9a7e <doBorderStuff>
    a804:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a806:	|         pea 1 <_start+0x1>
    a80a:	|         move.l 4(sp),-(sp)
    a80e:	|         jsr c0c4 <walkMe>
    a814:	|         addq.l #8,sp
    a816:	|         tst.w d0
    a818:	|     ,-- bne.s a822 <forceWalkingPerson+0x98>
    a81a:	|     |   movea.l (sp),a0
    a81c:	|     |   move.w 66(a0),d0
    a820:	|  ,--|-- beq.s a82e <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a822:	|  |  '-> movea.l (sp),a0
    a824:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a82a:	|  |      moveq #1,d0
    a82c:	+--|----- bra.s a830 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a82e:	|  '----> clr.w d0
    }
}
    a830:	'-------> addq.l #4,sp
    a832:	          rts

0000a834 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a834:	                lea -56(sp),sp
    a838:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    a83a:	                pea 1944d <PutChar+0x1555>
    a840:	                jsr 17456 <KPrintF>
    a846:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a848:	                move.l #320,56(sp)
    a850:	                move.l #200,52(sp)
    a858:	                moveq #-1,d0
    a85a:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a85e:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a866:	                clr.l 44(sp)
    a86a:	   ,----------- bra.w aa42 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a86e:	,--|----------> movea.l 1cdbc <currentFloor>,a0
    a874:	|  |            move.l 12(a0),d1
    a878:	|  |            move.l 44(sp),d0
    a87c:	|  |            lsl.l #3,d0
    a87e:	|  |            movea.l d1,a0
    a880:	|  |            adda.l d0,a0
    a882:	|  |            move.l (a0),d0
    a884:	|  |            move.l d0,d1
    a886:	|  |            subq.l #1,d1
    a888:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a88c:	|  |            clr.l 40(sp)
    a890:	|  |     ,----- bra.w aa20 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a894:	|  |  ,--|----> movea.l 1cdbc <currentFloor>,a0
    a89a:	|  |  |  |      move.l 4(a0),d1
    a89e:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a8a4:	|  |  |  |      movea.l 12(a0),a0
    a8a8:	|  |  |  |      move.l 44(sp),d0
    a8ac:	|  |  |  |      lsl.l #3,d0
    a8ae:	|  |  |  |      adda.l d0,a0
    a8b0:	|  |  |  |      movea.l 4(a0),a0
    a8b4:	|  |  |  |      move.l 40(sp),d0
    a8b8:	|  |  |  |      add.l d0,d0
    a8ba:	|  |  |  |      add.l d0,d0
    a8bc:	|  |  |  |      adda.l d0,a0
    a8be:	|  |  |  |      move.l (a0),d0
    a8c0:	|  |  |  |      lsl.l #3,d0
    a8c2:	|  |  |  |      movea.l d1,a0
    a8c4:	|  |  |  |      adda.l d0,a0
    a8c6:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a8ca:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a8d0:	|  |  |  |      move.l 4(a0),d1
    a8d4:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a8da:	|  |  |  |      movea.l 12(a0),a0
    a8de:	|  |  |  |      move.l 44(sp),d0
    a8e2:	|  |  |  |      lsl.l #3,d0
    a8e4:	|  |  |  |      adda.l d0,a0
    a8e6:	|  |  |  |      movea.l 4(a0),a0
    a8ea:	|  |  |  |      move.l 40(sp),d0
    a8ee:	|  |  |  |      add.l d0,d0
    a8f0:	|  |  |  |      add.l d0,d0
    a8f2:	|  |  |  |      adda.l d0,a0
    a8f4:	|  |  |  |      move.l (a0),d0
    a8f6:	|  |  |  |      lsl.l #3,d0
    a8f8:	|  |  |  |      movea.l d1,a0
    a8fa:	|  |  |  |      adda.l d0,a0
    a8fc:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a902:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a908:	|  |  |  |      move.l 4(a0),d1
    a90c:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a912:	|  |  |  |      movea.l 12(a0),a0
    a916:	|  |  |  |      move.l 44(sp),d0
    a91a:	|  |  |  |      lsl.l #3,d0
    a91c:	|  |  |  |      adda.l d0,a0
    a91e:	|  |  |  |      movea.l 4(a0),a0
    a922:	|  |  |  |      move.l 36(sp),d0
    a926:	|  |  |  |      add.l d0,d0
    a928:	|  |  |  |      add.l d0,d0
    a92a:	|  |  |  |      adda.l d0,a0
    a92c:	|  |  |  |      move.l (a0),d0
    a92e:	|  |  |  |      lsl.l #3,d0
    a930:	|  |  |  |      movea.l d1,a0
    a932:	|  |  |  |      adda.l d0,a0
    a934:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a938:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a93e:	|  |  |  |      move.l 4(a0),d1
    a942:	|  |  |  |      movea.l 1cdbc <currentFloor>,a0
    a948:	|  |  |  |      movea.l 12(a0),a0
    a94c:	|  |  |  |      move.l 44(sp),d0
    a950:	|  |  |  |      lsl.l #3,d0
    a952:	|  |  |  |      adda.l d0,a0
    a954:	|  |  |  |      movea.l 4(a0),a0
    a958:	|  |  |  |      move.l 36(sp),d0
    a95c:	|  |  |  |      add.l d0,d0
    a95e:	|  |  |  |      add.l d0,d0
    a960:	|  |  |  |      adda.l d0,a0
    a962:	|  |  |  |      move.l (a0),d0
    a964:	|  |  |  |      lsl.l #3,d0
    a966:	|  |  |  |      movea.l d1,a0
    a968:	|  |  |  |      adda.l d0,a0
    a96a:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a970:	|  |  |  |      movea.l 68(sp),a0
    a974:	|  |  |  |      move.l (a0),d1
    a976:	|  |  |  |      movea.l 64(sp),a0
    a97a:	|  |  |  |      move.l (a0),d0
    a97c:	|  |  |  |      move.l d1,-(sp)
    a97e:	|  |  |  |      move.l d0,-(sp)
    a980:	|  |  |  |      move.l 24(sp),-(sp)
    a984:	|  |  |  |      move.l 32(sp),-(sp)
    a988:	|  |  |  |      move.l 40(sp),-(sp)
    a98c:	|  |  |  |      move.l 48(sp),-(sp)
    a990:	|  |  |  |      lea 28(sp),a0
    a994:	|  |  |  |      move.l a0,-(sp)
    a996:	|  |  |  |      lea 36(sp),a0
    a99a:	|  |  |  |      move.l a0,-(sp)
    a99c:	|  |  |  |      jsr 16254 <closestPointOnLine>
    a9a2:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a9a6:	|  |  |  |      movea.l 64(sp),a0
    a9aa:	|  |  |  |      move.l (a0),d0
    a9ac:	|  |  |  |      move.l 8(sp),d1
    a9b0:	|  |  |  |      move.l d0,d2
    a9b2:	|  |  |  |      sub.l d1,d2
    a9b4:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a9b8:	|  |  |  |      movea.l 68(sp),a0
    a9bc:	|  |  |  |      move.l (a0),d0
    a9be:	|  |  |  |      move.l 4(sp),d1
    a9c2:	|  |  |  |      move.l d0,d2
    a9c4:	|  |  |  |      sub.l d1,d2
    a9c6:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a9ca:	|  |  |  |      move.l 28(sp),-(sp)
    a9ce:	|  |  |  |      move.l 32(sp),-(sp)
    a9d2:	|  |  |  |      jsr 17de2 <__mulsi3>
    a9d8:	|  |  |  |      addq.l #8,sp
    a9da:	|  |  |  |      move.l d0,d2
    a9dc:	|  |  |  |      move.l 24(sp),-(sp)
    a9e0:	|  |  |  |      move.l 28(sp),-(sp)
    a9e4:	|  |  |  |      jsr 17de2 <__mulsi3>
    a9ea:	|  |  |  |      addq.l #8,sp
    a9ec:	|  |  |  |      move.l d2,d1
    a9ee:	|  |  |  |      add.l d0,d1
    a9f0:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a9f4:	|  |  |  |      move.l 12(sp),d2
    a9f8:	|  |  |  |      cmp.l 32(sp),d2
    a9fc:	|  |  |  |  ,-- bge.s aa16 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    a9fe:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    aa04:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    aa0a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    aa10:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    aa16:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aa1c:	|  |  |  |      addq.l #1,40(sp)
    aa20:	|  |  |  '----> movea.l 1cdbc <currentFloor>,a0
    aa26:	|  |  |         move.l 12(a0),d1
    aa2a:	|  |  |         move.l 44(sp),d0
    aa2e:	|  |  |         lsl.l #3,d0
    aa30:	|  |  |         movea.l d1,a0
    aa32:	|  |  |         adda.l d0,a0
    aa34:	|  |  |         move.l (a0),d0
    aa36:	|  |  |         cmp.l 40(sp),d0
    aa3a:	|  |  '-------- bgt.w a894 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    aa3e:	|  |            addq.l #1,44(sp)
    aa42:	|  '----------> movea.l 1cdbc <currentFloor>,a0
    aa48:	|               move.l 8(a0),d0
    aa4c:	|               cmp.l 44(sp),d0
    aa50:	'-------------- bgt.w a86e <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    aa54:	                moveq #-1,d0
    aa56:	                cmp.l 48(sp),d0
    aa5a:	            ,-- bne.s aa60 <handleClosestPoint+0x22c>
    aa5c:	            |   clr.w d0
    aa5e:	         ,--|-- bra.s aa7a <handleClosestPoint+0x246>
	*setX = gotX;
    aa60:	         |  '-> movea.l 64(sp),a0
    aa64:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    aa68:	         |      movea.l 68(sp),a0
    aa6c:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    aa70:	         |      movea.l 72(sp),a0
    aa74:	         |      move.l 48(sp),(a0)

	return TRUE;
    aa78:	         |      moveq #1,d0
}
    aa7a:	         '----> move.l (sp)+,d2
    aa7c:	                lea 56(sp),sp
    aa80:	                rts

0000aa82 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    aa82:	clr.l 1cd18 <personRegion+0x10>
	personRegion.sY = 0;
    aa88:	clr.l 1cd1c <personRegion+0x14>
	personRegion.di = -1;
    aa8e:	moveq #-1,d0
    aa90:	move.l d0,1cd20 <personRegion+0x18>
	allScreenRegions = NULL;
    aa96:	clr.l 1cdb0 <allScreenRegions>

	return TRUE;
    aa9c:	moveq #1,d0
}
    aa9e:	rts

0000aaa0 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    aaa0:	          subq.l #4,sp
    aaa2:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    aaa4:	          tst.l 12(sp)
    aaa8:	      ,-- bne.s aab0 <jumpPerson+0x10>
    aaaa:	      |   tst.l 16(sp)
    aaae:	,-----|-- beq.s ab24 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    aab0:	|     '-> move.l 20(sp),-(sp)
    aab4:	|         jsr a71c <findPerson>
    aaba:	|         addq.l #4,sp
    aabc:	|         move.l d0,4(sp)
    if (!moveMe) return;
    aac0:	|  ,----- beq.s ab28 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    aac2:	|  |      movea.l 4(sp),a0
    aac6:	|  |      move.l 68(a0),d0
    aaca:	|  |  ,-- beq.s aade <jumpPerson+0x3e>
    aacc:	|  |  |   movea.l 4(sp),a0
    aad0:	|  |  |   move.l 68(a0),d0
    aad4:	|  |  |   move.l d0,-(sp)
    aad6:	|  |  |   jsr 5116 <abortFunction>
    aadc:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aade:	|  |  '-> movea.l 4(sp),a0
    aae2:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aae6:	|  |      movea.l 4(sp),a0
    aaea:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    aaee:	|  |      movea.l 4(sp),a0
    aaf2:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    aaf6:	|  |      move.l 16(sp),-(sp)
    aafa:	|  |      jsr 17888 <__floatsisf>
    ab00:	|  |      addq.l #4,sp
    ab02:	|  |      move.l d0,d2
    ab04:	|  |      move.l 12(sp),-(sp)
    ab08:	|  |      jsr 17888 <__floatsisf>
    ab0e:	|  |      addq.l #4,sp
    ab10:	|  |      move.l d2,-(sp)
    ab12:	|  |      move.l d0,-(sp)
    ab14:	|  |      move.l 12(sp),-(sp)
    ab18:	|  |      jsr aec6 <moveAndScale>
    ab1e:	|  |      lea 12(sp),sp
    ab22:	|  |  ,-- bra.s ab2a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ab24:	'--|--|-> nop
    ab26:	   |  +-- bra.s ab2a <jumpPerson+0x8a>
    if (!moveMe) return;
    ab28:	   '--|-> nop
}
    ab2a:	      '-> move.l (sp)+,d2
    ab2c:	          addq.l #4,sp
    ab2e:	          rts

0000ab30 <killAllPeople>:


void killAllPeople () {
    ab30:	          subq.l #8,sp
    ab32:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ab34:	   ,----- bra.s aba0 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ab36:	,--|----> movea.l 1cd04 <allPeople>,a0
    ab3c:	|  |      move.l 68(a0),d0
    ab40:	|  |  ,-- beq.s ab56 <killAllPeople+0x26>
    ab42:	|  |  |   movea.l 1cd04 <allPeople>,a0
    ab48:	|  |  |   move.l 68(a0),d0
    ab4c:	|  |  |   move.l d0,-(sp)
    ab4e:	|  |  |   jsr 5116 <abortFunction>
    ab54:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    ab56:	|  |  '-> movea.l 1cd04 <allPeople>,a0
    ab5c:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    ab60:	|  |      move.l 1cd04 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    ab68:	|  |      movea.l 1cd04 <allPeople>,a0
    ab6e:	|  |      move.l 36(a0),d0
    ab72:	|  |      move.l d0,1cd04 <allPeople>
		removeObjectType (killPeople -> thisType);
    ab78:	|  |      movea.l 8(sp),a0
    ab7c:	|  |      move.l 114(a0),d0
    ab80:	|  |      move.l d0,-(sp)
    ab82:	|  |      jsr da32 <removeObjectType>
    ab88:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    ab8a:	|  |      move.l 8(sp),4(sp)
    ab90:	|  |      move.l 1cca4 <SysBase>,d0
    ab96:	|  |      movea.l d0,a6
    ab98:	|  |      movea.l 4(sp),a1
    ab9c:	|  |      jsr -690(a6)
	while (allPeople) {
    aba0:	|  '----> move.l 1cd04 <allPeople>,d0
    aba6:	'-------- bne.s ab36 <killAllPeople+0x6>
	}
}
    aba8:	          nop
    abaa:	          nop
    abac:	          movea.l (sp)+,a6
    abae:	          addq.l #8,sp
    abb0:	          rts

0000abb2 <killMostPeople>:

void killMostPeople() {
    abb2:	          lea -12(sp),sp
    abb6:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    abb8:	          move.l #118020,12(sp)

    while (*lookyHere) {
    abc0:	   ,----- bra.w ac46 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    abc4:	,--|----> movea.l 12(sp),a0
    abc8:	|  |      movea.l (a0),a0
    abca:	|  |      move.l 118(a0),d0
    abce:	|  |      moveq #32,d1
    abd0:	|  |      and.l d1,d0
    abd2:	|  |  ,-- beq.s abe4 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    abd4:	|  |  |   movea.l 12(sp),a0
    abd8:	|  |  |   move.l (a0),d0
    abda:	|  |  |   moveq #36,d1
    abdc:	|  |  |   add.l d0,d1
    abde:	|  |  |   move.l d1,12(sp)
    abe2:	|  +--|-- bra.s ac46 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    abe4:	|  |  '-> movea.l 12(sp),a0
    abe8:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    abec:	|  |      movea.l 8(sp),a0
    abf0:	|  |      move.l 36(a0),d0
    abf4:	|  |      movea.l 12(sp),a0
    abf8:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    abfa:	|  |      movea.l 8(sp),a0
    abfe:	|  |      move.l 68(a0),d0
    ac02:	|  |  ,-- beq.s ac16 <killMostPeople+0x64>
    ac04:	|  |  |   movea.l 8(sp),a0
    ac08:	|  |  |   move.l 68(a0),d0
    ac0c:	|  |  |   move.l d0,-(sp)
    ac0e:	|  |  |   jsr 5116 <abortFunction>
    ac14:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ac16:	|  |  '-> movea.l 8(sp),a0
    ac1a:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ac1e:	|  |      movea.l 8(sp),a0
    ac22:	|  |      move.l 114(a0),d0
    ac26:	|  |      move.l d0,-(sp)
    ac28:	|  |      jsr da32 <removeObjectType>
    ac2e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ac30:	|  |      move.l 8(sp),4(sp)
    ac36:	|  |      move.l 1cca4 <SysBase>,d0
    ac3c:	|  |      movea.l d0,a6
    ac3e:	|  |      movea.l 4(sp),a1
    ac42:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ac46:	|  '----> movea.l 12(sp),a0
    ac4a:	|         move.l (a0),d0
    ac4c:	'-------- bne.w abc4 <killMostPeople+0x12>
        }
    }
}
    ac50:	          nop
    ac52:	          nop
    ac54:	          movea.l (sp)+,a6
    ac56:	          lea 12(sp),sp
    ac5a:	          rts

0000ac5c <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ac5c:	clr.l -(sp)
    ac5e:	move.l sp,d0
    ac60:	addq.l #8,d0
    ac62:	move.l d0,-(sp)
    ac64:	jsr 42b8 <setFrames>
    ac6a:	addq.l #8,sp
}
    ac6c:	nop
    ac6e:	rts

0000ac70 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ac70:	          lea -12(sp),sp
    ac74:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    ac76:	          pea 194d1 <PutChar+0x15d9>
    ac7c:	          jsr 17456 <KPrintF>
    ac82:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    ac84:	          tst.l 20(sp)
    ac88:	      ,-- bne.s ac96 <makeWalkingPerson+0x26>
    ac8a:	      |   tst.l 24(sp)
    ac8e:	      +-- bne.s ac96 <makeWalkingPerson+0x26>
    ac90:	      |   clr.w d0
    ac92:	,-----|-- bra.w ae58 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ac96:	|     '-> movea.l 1cdbc <currentFloor>,a0
    ac9c:	|         move.l 8(a0),d0
    aca0:	|     ,-- bne.s aca8 <makeWalkingPerson+0x38>
    aca2:	|     |   clr.w d0
    aca4:	+-----|-- bra.w ae58 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    aca8:	|     '-> move.l 28(sp),d0
    acac:	|         move.l d0,-(sp)
    acae:	|         jsr a71c <findPerson>
    acb4:	|         addq.l #4,sp
    acb6:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    acba:	|     ,-- bne.s acd6 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    acbc:	|     |   move.l 28(sp),d0
    acc0:	|     |   move.l d0,-(sp)
    acc2:	|     |   pea 194ec <PutChar+0x15f4>
    acc8:	|     |   jsr 17456 <KPrintF>
    acce:	|     |   addq.l #8,sp
		return FALSE;
    acd0:	|     |   clr.w d0
    acd2:	+-----|-- bra.w ae58 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    acd6:	|     '-> movea.l 12(sp),a0
    acda:	|         move.l 68(a0),d0
    acde:	|     ,-- beq.s acf2 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    ace0:	|     |   movea.l 12(sp),a0
    ace4:	|     |   move.l 68(a0),d0
    ace8:	|     |   move.l d0,-(sp)
    acea:	|     |   jsr 5116 <abortFunction>
    acf0:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    acf2:	|     '-> movea.l 12(sp),a0
    acf6:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    acfa:	|         movea.l 12(sp),a0
    acfe:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    ad04:	|         movea.l 12(sp),a0
    ad08:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    ad0e:	|         movea.l 12(sp),a0
    ad12:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ad18:	|         movea.l 12(sp),a0
    ad1c:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ad22:	|         move.l 24(sp),-(sp)
    ad26:	|         move.l 24(sp),-(sp)
    ad2a:	|         jsr 1679c <inFloor>
    ad30:	|         addq.l #8,sp
    ad32:	|         movea.l 12(sp),a0
    ad36:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ad3a:	|         movea.l 12(sp),a0
    ad3e:	|         move.l 60(a0),d0
    ad42:	|         moveq #-1,d1
    ad44:	|         cmp.l d0,d1
    ad46:	|     ,-- bne.s ad76 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ad48:	|     |   movea.w #60,a0
    ad4c:	|     |   adda.l 12(sp),a0
    ad50:	|     |   moveq #44,d1
    ad52:	|     |   add.l 12(sp),d1
    ad56:	|     |   moveq #40,d0
    ad58:	|     |   add.l 12(sp),d0
    ad5c:	|     |   move.l a0,-(sp)
    ad5e:	|     |   move.l d1,-(sp)
    ad60:	|     |   move.l d0,-(sp)
    ad62:	|     |   jsr a834 <handleClosestPoint>
    ad68:	|     |   lea 12(sp),sp
    ad6c:	|     |   tst.w d0
    ad6e:	|     +-- bne.s ad76 <makeWalkingPerson+0x106>
    ad70:	|     |   clr.w d0
    ad72:	+-----|-- bra.w ae58 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ad76:	|     '-> movea.l 12(sp),a0
    ad7a:	|         move.l 4(a0),d0
    ad7e:	|         move.l d0,-(sp)
    ad80:	|         jsr 17820 <__fixsfsi>
    ad86:	|         addq.l #4,sp
    ad88:	|         move.l d0,d2
    ad8a:	|         movea.l 12(sp),a0
    ad8e:	|         move.l (a0),d0
    ad90:	|         move.l d0,-(sp)
    ad92:	|         jsr 17820 <__fixsfsi>
    ad98:	|         addq.l #4,sp
    ad9a:	|         move.l d2,-(sp)
    ad9c:	|         move.l d0,-(sp)
    ad9e:	|         jsr 1679c <inFloor>
    ada4:	|         addq.l #8,sp
    ada6:	|         movea.l 12(sp),a0
    adaa:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    adae:	|         movea.l 12(sp),a0
    adb2:	|         move.l 56(a0),d0
    adb6:	|         moveq #-1,d1
    adb8:	|         cmp.l d0,d1
    adba:	|     ,-- bne.s ae0c <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    adbc:	|     |   movea.l 12(sp),a0
    adc0:	|     |   move.l (a0),d0
    adc2:	|     |   move.l d0,-(sp)
    adc4:	|     |   jsr 17820 <__fixsfsi>
    adca:	|     |   addq.l #4,sp
    adcc:	|     |   move.l d0,8(sp)
    add0:	|     |   movea.l 12(sp),a0
    add4:	|     |   move.l 4(a0),d0
    add8:	|     |   move.l d0,-(sp)
    adda:	|     |   jsr 17820 <__fixsfsi>
    ade0:	|     |   addq.l #4,sp
    ade2:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ade6:	|     |   moveq #56,d0
    ade8:	|     |   add.l 12(sp),d0
    adec:	|     |   move.l d0,-(sp)
    adee:	|     |   lea 8(sp),a0
    adf2:	|     |   move.l a0,-(sp)
    adf4:	|     |   moveq #16,d0
    adf6:	|     |   add.l sp,d0
    adf8:	|     |   move.l d0,-(sp)
    adfa:	|     |   jsr a834 <handleClosestPoint>
    ae00:	|     |   lea 12(sp),sp
    ae04:	|     |   tst.w d0
    ae06:	|     +-- bne.s ae0c <makeWalkingPerson+0x19c>
    ae08:	|     |   clr.w d0
    ae0a:	+-----|-- bra.s ae58 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    ae0c:	|     '-> move.l 12(sp),-(sp)
    ae10:	|         jsr 9a7e <doBorderStuff>
    ae16:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ae18:	|         clr.l -(sp)
    ae1a:	|         move.l 16(sp),-(sp)
    ae1e:	|         jsr c0c4 <walkMe>
    ae24:	|         addq.l #8,sp
    ae26:	|         tst.w d0
    ae28:	|     ,-- bne.s ae34 <makeWalkingPerson+0x1c4>
    ae2a:	|     |   movea.l 12(sp),a0
    ae2e:	|     |   move.w 66(a0),d0
    ae32:	|  ,--|-- beq.s ae56 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    ae34:	|  |  '-> lea 28(sp),a0
    ae38:	|  |      move.l a0,-(sp)
    ae3a:	|  |      pea 19515 <PutChar+0x161d>
    ae40:	|  |      jsr 17456 <KPrintF>
    ae46:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    ae48:	|  |      movea.l 12(sp),a0
    ae4c:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ae52:	|  |      moveq #1,d0
    ae54:	+--|----- bra.s ae58 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    ae56:	|  '----> clr.w d0
	}
}
    ae58:	'-------> move.l (sp)+,d2
    ae5a:	          lea 12(sp),sp
    ae5e:	          rts

0000ae60 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ae60:	       lea -16(sp),sp
    ae64:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ae66:	       moveq #12,d0
    ae68:	       move.l d0,16(sp)
    ae6c:	       clr.l 12(sp)
    ae70:	       move.l 1cca4 <SysBase>,d0
    ae76:	       movea.l d0,a6
    ae78:	       move.l 16(sp),d0
    ae7c:	       move.l 12(sp),d1
    ae80:	       jsr -684(a6)
    ae84:	       move.l d0,8(sp)
    ae88:	       move.l 8(sp),d0
    ae8c:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ae90:	   ,-- bne.s aea4 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ae92:	   |   pea 19548 <PutChar+0x1650>
    ae98:	   |   jsr 17456 <KPrintF>
    ae9e:	   |   addq.l #4,sp
        return NULL;    
    aea0:	   |   moveq #0,d0
    aea2:	,--|-- bra.s aebe <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    aea4:	|  '-> movea.l 4(sp),a0
    aea8:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    aeaa:	|      movea.l 4(sp),a0
    aeae:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    aeb2:	|      movea.l 4(sp),a0
    aeb6:	|      clr.l 4(a0)
	return newAnim;
    aeba:	|      move.l 4(sp),d0
}
    aebe:	'----> movea.l (sp)+,a6
    aec0:	       lea 16(sp),sp
    aec4:	       rts

0000aec6 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    aec6:	    move.l d2,-(sp)
	me->x = x;
    aec8:	    movea.l 8(sp),a0
    aecc:	    move.l 12(sp),(a0)
	me->y = y;
    aed0:	    movea.l 8(sp),a0
    aed4:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    aeda:	    movea.l 8(sp),a0
    aede:	    clr.l 8(a0)
	me->oldy = 0;
    aee2:	    movea.l 8(sp),a0
    aee6:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    aeea:	    movea.l 8(sp),a0
    aeee:	    move.l 118(a0),d0
    aef2:	    moveq #2,d1
    aef4:	    and.l d1,d0
    aef6:	,-- bne.s af4e <moveAndScale+0x88>
    aef8:	|   move.w 1c62c <scaleDivide>,d0
    aefe:	+-- beq.s af4e <moveAndScale+0x88>
    af00:	|   movea.l 8(sp),a0
    af04:	|   move.l 4(a0),d2
    af08:	|   move.w 1c62a <scaleHorizon>,d0
    af0e:	|   movea.w d0,a0
    af10:	|   move.l a0,-(sp)
    af12:	|   jsr 17888 <__floatsisf>
    af18:	|   addq.l #4,sp
    af1a:	|   move.l d0,-(sp)
    af1c:	|   move.l d2,-(sp)
    af1e:	|   jsr 17b7c <__subsf3>
    af24:	|   addq.l #8,sp
    af26:	|   move.l d0,d2
    af28:	|   move.w 1c62c <scaleDivide>,d0
    af2e:	|   movea.w d0,a0
    af30:	|   move.l a0,-(sp)
    af32:	|   jsr 17888 <__floatsisf>
    af38:	|   addq.l #4,sp
    af3a:	|   move.l d0,-(sp)
    af3c:	|   move.l d2,-(sp)
    af3e:	|   jsr 1773e <__divsf3>
    af44:	|   addq.l #8,sp
    af46:	|   movea.l 8(sp),a0
    af4a:	|   move.l d0,32(a0)
}
    af4e:	'-> nop
    af50:	    move.l (sp)+,d2
    af52:	    rts

0000af54 <removeOneCharacter>:

void removeOneCharacter (int i) {
    af54:	          lea -16(sp),sp
    af58:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    af5a:	          move.l 24(sp),-(sp)
    af5e:	          jsr a71c <findPerson>
    af64:	          addq.l #4,sp
    af66:	          move.l d0,8(sp)

    if (p) {
    af6a:	,-------- beq.w b04a <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    af6e:	|         move.l 1cdb4 <overRegion>,d0
    af74:	|         cmpi.l #118024,d0
    af7a:	|     ,-- bne.s af98 <removeOneCharacter+0x44>
    af7c:	|     |   movea.l 1cdb4 <overRegion>,a0
    af82:	|     |   move.l 28(a0),d1
    af86:	|     |   movea.l 8(sp),a0
    af8a:	|     |   move.l 114(a0),d0
    af8e:	|     |   cmp.l d1,d0
    af90:	|     +-- bne.s af98 <removeOneCharacter+0x44>
            overRegion = NULL;
    af92:	|     |   clr.l 1cdb4 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    af98:	|     '-> movea.l 8(sp),a0
    af9c:	|         move.l 68(a0),d0
    afa0:	|     ,-- beq.s afb4 <removeOneCharacter+0x60>
    afa2:	|     |   movea.l 8(sp),a0
    afa6:	|     |   move.l 68(a0),d0
    afaa:	|     |   move.l d0,-(sp)
    afac:	|     |   jsr 5116 <abortFunction>
    afb2:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    afb4:	|     '-> movea.l 8(sp),a0
    afb8:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    afbc:	|         clr.l 12(sp)
    afc0:	|     ,-- bra.s afe8 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    afc2:	|  ,--|-> movea.l 8(sp),a0
    afc6:	|  |  |   movea.l 80(a0),a0
    afca:	|  |  |   move.l (a0),d1
    afcc:	|  |  |   move.l 12(sp),d0
    afd0:	|  |  |   add.l d0,d0
    afd2:	|  |  |   add.l d0,d0
    afd4:	|  |  |   movea.l d1,a0
    afd6:	|  |  |   adda.l d0,a0
    afd8:	|  |  |   move.l (a0),d0
    afda:	|  |  |   move.l d0,-(sp)
    afdc:	|  |  |   jsr 99fa <deleteAnim>
    afe2:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    afe4:	|  |  |   addq.l #1,12(sp)
    afe8:	|  |  '-> moveq #2,d0
    afea:	|  |      cmp.l 12(sp),d0
    afee:	|  '----- bge.s afc2 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    aff0:	|         move.l #118020,16(sp)
    aff8:	|     ,-- bra.s b008 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    affa:	|  ,--|-> movea.l 16(sp),a0
    affe:	|  |  |   move.l (a0),d0
    b000:	|  |  |   moveq #36,d1
    b002:	|  |  |   add.l d0,d1
    b004:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b008:	|  |  '-> movea.l 16(sp),a0
    b00c:	|  |      move.l (a0),d0
    b00e:	|  |      cmp.l 8(sp),d0
    b012:	|  '----- bne.s affa <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b014:	|         movea.l 8(sp),a0
    b018:	|         move.l 36(a0),d0
    b01c:	|         movea.l 16(sp),a0
    b020:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b022:	|         movea.l 8(sp),a0
    b026:	|         move.l 114(a0),d0
    b02a:	|         move.l d0,-(sp)
    b02c:	|         jsr da32 <removeObjectType>
    b032:	|         addq.l #4,sp
        FreeVec(p);
    b034:	|         move.l 8(sp),4(sp)
    b03a:	|         move.l 1cca4 <SysBase>,d0
    b040:	|         movea.l d0,a6
    b042:	|         movea.l 4(sp),a1
    b046:	|         jsr -690(a6)
		
    }
}
    b04a:	'-------> nop
    b04c:	          movea.l (sp)+,a6
    b04e:	          lea 16(sp),sp
    b052:	          rts

0000b054 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b054:	       subq.l #8,sp
    b056:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b058:	       movea.l 16(sp),a0
    b05c:	       movea.l 80(a0),a0
    b060:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b066:	       movea.l 16(sp),a0
    b06a:	       move.l 92(a0),d2
    b06e:	       move.l 4(sp),-(sp)
    b072:	       pea b4 <_start+0xb4>
    b076:	       jsr 17e60 <__divsi3>
    b07c:	       addq.l #8,sp
    b07e:	       add.l d2,d0
    b080:	       move.l d0,d1
    b082:	       addi.l #180,d1
    b088:	       movea.l 16(sp),a0
    b08c:	       move.l 100(a0),d0
    b090:	       move.l d1,d2
    b092:	       add.l d0,d2
    b094:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b098:	   ,-- bra.s b0a2 <rethinkAngle+0x4e>
    b09a:	,--|-> addi.l #-360,8(sp)
    b0a2:	|  '-> cmpi.l #359,8(sp)
    b0aa:	'----- bgt.s b09a <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b0ac:	       move.l 4(sp),-(sp)
    b0b0:	       move.l 12(sp),-(sp)
    b0b4:	       jsr 17de2 <__mulsi3>
    b0ba:	       addq.l #8,sp
    b0bc:	       pea 168 <decodeFilename+0x50>
    b0c0:	       move.l d0,-(sp)
    b0c2:	       jsr 17e60 <__divsi3>
    b0c8:	       addq.l #8,sp
    b0ca:	       movea.l 16(sp),a0
    b0ce:	       move.l d0,106(a0)
}
    b0d2:	       nop
    b0d4:	       move.l (sp)+,d2
    b0d6:	       addq.l #8,sp
    b0d8:	       rts

0000b0da <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b0da:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b0dc:	          movea.l 8(sp),a0
    b0e0:	          move.l 8(a0),d0
    b0e4:	          move.l 12(sp),-(sp)
    b0e8:	          move.l d0,-(sp)
    b0ea:	          jsr 8d0 <put2bytes>
    b0f0:	          addq.l #8,sp
	if (p -> numFrames) {
    b0f2:	          movea.l 8(sp),a0
    b0f6:	          move.l 8(a0),d0
    b0fa:	,-------- beq.w b19e <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b0fe:	|         movea.l 8(sp),a0
    b102:	|         movea.l (a0),a0
    b104:	|         move.l (a0),d0
    b106:	|         move.l 12(sp),-(sp)
    b10a:	|         move.l d0,-(sp)
    b10c:	|         jsr 958 <put4bytes>
    b112:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b114:	|         clr.l (sp)
    b116:	|     ,-- bra.s b190 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b118:	|  ,--|-> movea.l 8(sp),a0
    b11c:	|  |  |   movea.l 4(a0),a0
    b120:	|  |  |   move.l (sp),d1
    b122:	|  |  |   move.l d1,d0
    b124:	|  |  |   add.l d0,d0
    b126:	|  |  |   add.l d1,d0
    b128:	|  |  |   add.l d0,d0
    b12a:	|  |  |   add.l d0,d0
    b12c:	|  |  |   adda.l d0,a0
    b12e:	|  |  |   move.l (a0),d0
    b130:	|  |  |   move.l 12(sp),-(sp)
    b134:	|  |  |   move.l d0,-(sp)
    b136:	|  |  |   jsr 958 <put4bytes>
    b13c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b13e:	|  |  |   movea.l 8(sp),a0
    b142:	|  |  |   movea.l 4(a0),a0
    b146:	|  |  |   move.l (sp),d1
    b148:	|  |  |   move.l d1,d0
    b14a:	|  |  |   add.l d0,d0
    b14c:	|  |  |   add.l d1,d0
    b14e:	|  |  |   add.l d0,d0
    b150:	|  |  |   add.l d0,d0
    b152:	|  |  |   adda.l d0,a0
    b154:	|  |  |   move.l 4(a0),d0
    b158:	|  |  |   move.l 12(sp),-(sp)
    b15c:	|  |  |   move.l d0,-(sp)
    b15e:	|  |  |   jsr 958 <put4bytes>
    b164:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b166:	|  |  |   movea.l 8(sp),a0
    b16a:	|  |  |   movea.l 4(a0),a0
    b16e:	|  |  |   move.l (sp),d1
    b170:	|  |  |   move.l d1,d0
    b172:	|  |  |   add.l d0,d0
    b174:	|  |  |   add.l d1,d0
    b176:	|  |  |   add.l d0,d0
    b178:	|  |  |   add.l d0,d0
    b17a:	|  |  |   adda.l d0,a0
    b17c:	|  |  |   move.l 8(a0),d0
    b180:	|  |  |   move.l 12(sp),-(sp)
    b184:	|  |  |   move.l d0,-(sp)
    b186:	|  |  |   jsr 958 <put4bytes>
    b18c:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b18e:	|  |  |   addq.l #1,(sp)
    b190:	|  |  '-> movea.l 8(sp),a0
    b194:	|  |      move.l 8(a0),d0
    b198:	|  |      cmp.l (sp),d0
    b19a:	|  '----- bgt.w b118 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b19e:	'-------> moveq #1,d0
}
    b1a0:	          addq.l #4,sp
    b1a2:	          rts

0000b1a4 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b1a4:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b1a6:	             movea.l 8(sp),a0
    b1aa:	             move.l 4(a0),d0
    b1ae:	             move.l 12(sp),-(sp)
    b1b2:	             move.l d0,-(sp)
    b1b4:	             jsr 8d0 <put2bytes>
    b1ba:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b1bc:	             clr.l (sp)
    b1be:	   ,-------- bra.s b1ea <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b1c0:	,--|-------> movea.l 8(sp),a0
    b1c4:	|  |         move.l (a0),d1
    b1c6:	|  |         move.l (sp),d0
    b1c8:	|  |         add.l d0,d0
    b1ca:	|  |         add.l d0,d0
    b1cc:	|  |         movea.l d1,a0
    b1ce:	|  |         adda.l d0,a0
    b1d0:	|  |         move.l (a0),d0
    b1d2:	|  |         move.l 12(sp),-(sp)
    b1d6:	|  |         move.l d0,-(sp)
    b1d8:	|  |         jsr b0da <saveAnim>
    b1de:	|  |         addq.l #8,sp
    b1e0:	|  |         tst.w d0
    b1e2:	|  |     ,-- bne.s b1e8 <saveCostume+0x44>
    b1e4:	|  |     |   clr.w d0
    b1e6:	|  |  ,--|-- bra.s b1fe <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b1e8:	|  |  |  '-> addq.l #1,(sp)
    b1ea:	|  '--|----> movea.l 8(sp),a0
    b1ee:	|     |      move.l 4(a0),d1
    b1f2:	|     |      move.l d1,d0
    b1f4:	|     |      add.l d0,d0
    b1f6:	|     |      add.l d1,d0
    b1f8:	|     |      cmp.l (sp),d0
    b1fa:	'-----|----- bgt.s b1c0 <saveCostume+0x1c>
	}

	return TRUE;
    b1fc:	      |      moveq #1,d0
}
    b1fe:	      '----> addq.l #4,sp
    b200:	             rts

0000b202 <savePeople>:

BOOL savePeople (BPTR fp) {
    b202:	             lea -144(sp),sp
    b206:	             move.l a6,-(sp)
    b208:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b20a:	             move.l 1cd04 <allPeople>,148(sp)
	int countPeople = 0, a;
    b212:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b216:	             move.w 1c62a <scaleHorizon>,d0
    b21c:	             movea.w d0,a0
    b21e:	             move.l 156(sp),-(sp)
    b222:	             move.l a0,-(sp)
    b224:	             jsr a9c <putSigned>
    b22a:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b22c:	             move.w 1c62c <scaleDivide>,d0
    b232:	             movea.w d0,a0
    b234:	             move.l 156(sp),-(sp)
    b238:	             move.l a0,-(sp)
    b23a:	             jsr a9c <putSigned>
    b240:	             addq.l #8,sp

	while (me) {
    b242:	         ,-- bra.s b252 <savePeople+0x50>
		countPeople ++;
    b244:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b248:	      |  |   movea.l 148(sp),a0
    b24c:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b252:	      |  '-> tst.l 148(sp)
    b256:	      '----- bne.s b244 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b258:	             move.l 156(sp),-(sp)
    b25c:	             move.l 148(sp),-(sp)
    b260:	             jsr 8d0 <put2bytes>
    b266:	             addq.l #8,sp

	me = allPeople;
    b268:	             move.l 1cd04 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b270:	             clr.l 140(sp)
    b274:	   ,-------- bra.w b6cc <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b278:	,--|-------> movea.l 148(sp),a0
    b27c:	|  |         move.l (a0),d0
    b27e:	|  |         move.l 156(sp),-(sp)
    b282:	|  |         move.l d0,-(sp)
    b284:	|  |         jsr a46 <putFloat>
    b28a:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b28c:	|  |         movea.l 148(sp),a0
    b290:	|  |         move.l 4(a0),d0
    b294:	|  |         move.l 156(sp),-(sp)
    b298:	|  |         move.l d0,-(sp)
    b29a:	|  |         jsr a46 <putFloat>
    b2a0:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b2a2:	|  |         movea.l 148(sp),a0
    b2a6:	|  |         move.l 80(a0),d0
    b2aa:	|  |         move.l 156(sp),-(sp)
    b2ae:	|  |         move.l d0,-(sp)
    b2b0:	|  |         jsr b1a4 <saveCostume>
    b2b6:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b2b8:	|  |         movea.l 148(sp),a0
    b2bc:	|  |         move.l 72(a0),d0
    b2c0:	|  |         move.l 156(sp),-(sp)
    b2c4:	|  |         move.l d0,-(sp)
    b2c6:	|  |         jsr b0da <saveAnim>
    b2cc:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b2ce:	|  |         move.l 156(sp),136(sp)
    b2d4:	|  |         movea.l 148(sp),a0
    b2d8:	|  |         move.l 72(a0),d1
    b2dc:	|  |         movea.l 148(sp),a0
    b2e0:	|  |         move.l 76(a0),d0
    b2e4:	|  |         cmp.l d1,d0
    b2e6:	|  |         seq d0
    b2e8:	|  |         neg.b d0
    b2ea:	|  |         move.b d0,d0
    b2ec:	|  |         andi.l #255,d0
    b2f2:	|  |         move.l d0,132(sp)
    b2f6:	|  |         move.l 1ccac <DOSBase>,d0
    b2fc:	|  |         movea.l d0,a6
    b2fe:	|  |         move.l 136(sp),d1
    b302:	|  |         move.l 132(sp),d2
    b306:	|  |         jsr -312(a6)
    b30a:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b30e:	|  |         movea.l 148(sp),a0
    b312:	|  |         move.l 32(a0),d0
    b316:	|  |         move.l 156(sp),-(sp)
    b31a:	|  |         move.l d0,-(sp)
    b31c:	|  |         jsr a46 <putFloat>
    b322:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b324:	|  |         movea.l 148(sp),a0
    b328:	|  |         move.l 118(a0),d0
    b32c:	|  |         move.l 156(sp),-(sp)
    b330:	|  |         move.l d0,-(sp)
    b332:	|  |         jsr 8d0 <put2bytes>
    b338:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b33a:	|  |         movea.l 148(sp),a0
    b33e:	|  |         move.l 20(a0),d0
    b342:	|  |         move.l 156(sp),-(sp)
    b346:	|  |         move.l d0,-(sp)
    b348:	|  |         jsr 8d0 <put2bytes>
    b34e:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b350:	|  |         movea.l 148(sp),a0
    b354:	|  |         move.l 40(a0),d0
    b358:	|  |         move.l 156(sp),-(sp)
    b35c:	|  |         move.l d0,-(sp)
    b35e:	|  |         jsr 8d0 <put2bytes>
    b364:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b366:	|  |         movea.l 148(sp),a0
    b36a:	|  |         move.l 44(a0),d0
    b36e:	|  |         move.l 156(sp),-(sp)
    b372:	|  |         move.l d0,-(sp)
    b374:	|  |         jsr 8d0 <put2bytes>
    b37a:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b37c:	|  |         movea.l 148(sp),a0
    b380:	|  |         move.l 48(a0),d0
    b384:	|  |         move.l 156(sp),-(sp)
    b388:	|  |         move.l d0,-(sp)
    b38a:	|  |         jsr 8d0 <put2bytes>
    b390:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b392:	|  |         movea.l 148(sp),a0
    b396:	|  |         move.l 52(a0),d0
    b39a:	|  |         move.l 156(sp),-(sp)
    b39e:	|  |         move.l d0,-(sp)
    b3a0:	|  |         jsr 8d0 <put2bytes>
    b3a6:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b3a8:	|  |         movea.l 148(sp),a0
    b3ac:	|  |         move.l 84(a0),d0
    b3b0:	|  |         move.l 156(sp),-(sp)
    b3b4:	|  |         move.l d0,-(sp)
    b3b6:	|  |         jsr 8d0 <put2bytes>
    b3bc:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b3be:	|  |         movea.l 148(sp),a0
    b3c2:	|  |         move.l 88(a0),d0
    b3c6:	|  |         move.l 156(sp),-(sp)
    b3ca:	|  |         move.l d0,-(sp)
    b3cc:	|  |         jsr 8d0 <put2bytes>
    b3d2:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b3d4:	|  |         movea.l 148(sp),a0
    b3d8:	|  |         move.l 28(a0),d0
    b3dc:	|  |         move.l 156(sp),-(sp)
    b3e0:	|  |         move.l d0,-(sp)
    b3e2:	|  |         jsr 8d0 <put2bytes>
    b3e8:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b3ea:	|  |         movea.l 148(sp),a0
    b3ee:	|  |         move.l 122(a0),d0
    b3f2:	|  |         move.l 156(sp),-(sp)
    b3f6:	|  |         move.l d0,-(sp)
    b3f8:	|  |         jsr 8d0 <put2bytes>
    b3fe:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b400:	|  |         movea.l 148(sp),a0
    b404:	|  |         move.l 24(a0),d0
    b408:	|  |         move.l d0,d0
    b40a:	|  |         movea.w d0,a0
    b40c:	|  |         move.l 156(sp),-(sp)
    b410:	|  |         move.l a0,-(sp)
    b412:	|  |         jsr a9c <putSigned>
    b418:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b41a:	|  |         move.l 156(sp),124(sp)
    b420:	|  |         movea.l 148(sp),a0
    b424:	|  |         move.w 104(a0),d0
    b428:	|  |         movea.w d0,a0
    b42a:	|  |         move.l a0,120(sp)
    b42e:	|  |         move.l 1ccac <DOSBase>,d0
    b434:	|  |         movea.l d0,a6
    b436:	|  |         move.l 124(sp),d1
    b43a:	|  |         move.l 120(sp),d2
    b43e:	|  |         jsr -312(a6)
    b442:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b446:	|  |         move.l 156(sp),112(sp)
    b44c:	|  |         movea.l 148(sp),a0
    b450:	|  |         move.w 64(a0),d0
    b454:	|  |         movea.w d0,a0
    b456:	|  |         move.l a0,108(sp)
    b45a:	|  |         move.l 1ccac <DOSBase>,d0
    b460:	|  |         movea.l d0,a6
    b462:	|  |         move.l 112(sp),d1
    b466:	|  |         move.l 108(sp),d2
    b46a:	|  |         jsr -312(a6)
    b46e:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b472:	|  |         move.l 156(sp),100(sp)
    b478:	|  |         movea.l 148(sp),a0
    b47c:	|  |         move.w 66(a0),d0
    b480:	|  |         movea.w d0,a0
    b482:	|  |         move.l a0,96(sp)
    b486:	|  |         move.l 1ccac <DOSBase>,d0
    b48c:	|  |         movea.l d0,a6
    b48e:	|  |         move.l 100(sp),d1
    b492:	|  |         move.l 96(sp),d2
    b496:	|  |         jsr -312(a6)
    b49a:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b49e:	|  |         movea.l 148(sp),a0
    b4a2:	|  |         move.l 68(a0),d0
    b4a6:	|  |  ,----- beq.s b4e4 <savePeople+0x2e2>
			FPutC (fp, 1);
    b4a8:	|  |  |      move.l 156(sp),76(sp)
    b4ae:	|  |  |      moveq #1,d0
    b4b0:	|  |  |      move.l d0,72(sp)
    b4b4:	|  |  |      move.l 1ccac <DOSBase>,d0
    b4ba:	|  |  |      movea.l d0,a6
    b4bc:	|  |  |      move.l 76(sp),d1
    b4c0:	|  |  |      move.l 72(sp),d2
    b4c4:	|  |  |      jsr -312(a6)
    b4c8:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b4cc:	|  |  |      movea.l 148(sp),a0
    b4d0:	|  |  |      move.l 68(a0),d0
    b4d4:	|  |  |      move.l 156(sp),-(sp)
    b4d8:	|  |  |      move.l d0,-(sp)
    b4da:	|  |  |      jsr c6fe <saveFunction>
    b4e0:	|  |  |      addq.l #8,sp
    b4e2:	|  |  |  ,-- bra.s b508 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b4e4:	|  |  '--|-> move.l 156(sp),88(sp)
    b4ea:	|  |     |   moveq #1,d0
    b4ec:	|  |     |   move.l d0,84(sp)
    b4f0:	|  |     |   move.l 1ccac <DOSBase>,d0
    b4f6:	|  |     |   movea.l d0,a6
    b4f8:	|  |     |   move.l 88(sp),d1
    b4fc:	|  |     |   move.l 84(sp),d2
    b500:	|  |     |   jsr -312(a6)
    b504:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b508:	|  |     '-> movea.l 148(sp),a0
    b50c:	|  |         move.l 106(a0),d0
    b510:	|  |         move.l 156(sp),-(sp)
    b514:	|  |         move.l d0,-(sp)
    b516:	|  |         jsr 8d0 <put2bytes>
    b51c:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b51e:	|  |         movea.l 148(sp),a0
    b522:	|  |         move.l 92(a0),d0
    b526:	|  |         move.l 156(sp),-(sp)
    b52a:	|  |         move.l d0,-(sp)
    b52c:	|  |         jsr 8d0 <put2bytes>
    b532:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b534:	|  |         movea.l 148(sp),a0
    b538:	|  |         move.l 100(a0),d0
    b53c:	|  |         move.l 156(sp),-(sp)
    b540:	|  |         move.l d0,-(sp)
    b542:	|  |         jsr 8d0 <put2bytes>
    b548:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b54a:	|  |         movea.l 148(sp),a0
    b54e:	|  |         move.l 96(a0),d0
    b552:	|  |         move.l 156(sp),-(sp)
    b556:	|  |         move.l d0,-(sp)
    b558:	|  |         jsr 8d0 <put2bytes>
    b55e:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b560:	|  |         movea.l 148(sp),a0
    b564:	|  |         move.l 110(a0),d0
    b568:	|  |         move.l d0,d0
    b56a:	|  |         movea.w d0,a0
    b56c:	|  |         move.l 156(sp),-(sp)
    b570:	|  |         move.l a0,-(sp)
    b572:	|  |         jsr a9c <putSigned>
    b578:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b57a:	|  |         movea.l 148(sp),a0
    b57e:	|  |         move.l 56(a0),d0
    b582:	|  |         move.l d0,d0
    b584:	|  |         movea.w d0,a0
    b586:	|  |         move.l 156(sp),-(sp)
    b58a:	|  |         move.l a0,-(sp)
    b58c:	|  |         jsr a9c <putSigned>
    b592:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b594:	|  |         movea.l 148(sp),a0
    b598:	|  |         move.l 60(a0),d0
    b59c:	|  |         move.l d0,d0
    b59e:	|  |         movea.w d0,a0
    b5a0:	|  |         move.l 156(sp),-(sp)
    b5a4:	|  |         move.l a0,-(sp)
    b5a6:	|  |         jsr a9c <putSigned>
    b5ac:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b5ae:	|  |         move.l 156(sp),64(sp)
    b5b4:	|  |         movea.l 148(sp),a0
    b5b8:	|  |         move.b 126(a0),d0
    b5bc:	|  |         move.b d0,d0
    b5be:	|  |         andi.l #255,d0
    b5c4:	|  |         move.l d0,60(sp)
    b5c8:	|  |         move.l 1ccac <DOSBase>,d0
    b5ce:	|  |         movea.l d0,a6
    b5d0:	|  |         move.l 64(sp),d1
    b5d4:	|  |         move.l 60(sp),d2
    b5d8:	|  |         jsr -312(a6)
    b5dc:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b5e0:	|  |         move.l 156(sp),52(sp)
    b5e6:	|  |         movea.l 148(sp),a0
    b5ea:	|  |         move.b 127(a0),d0
    b5ee:	|  |         move.b d0,d0
    b5f0:	|  |         andi.l #255,d0
    b5f6:	|  |         move.l d0,48(sp)
    b5fa:	|  |         move.l 1ccac <DOSBase>,d0
    b600:	|  |         movea.l d0,a6
    b602:	|  |         move.l 52(sp),d1
    b606:	|  |         move.l 48(sp),d2
    b60a:	|  |         jsr -312(a6)
    b60e:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b612:	|  |         move.l 156(sp),40(sp)
    b618:	|  |         movea.l 148(sp),a0
    b61c:	|  |         move.b 128(a0),d0
    b620:	|  |         move.b d0,d0
    b622:	|  |         andi.l #255,d0
    b628:	|  |         move.l d0,36(sp)
    b62c:	|  |         move.l 1ccac <DOSBase>,d0
    b632:	|  |         movea.l d0,a6
    b634:	|  |         move.l 40(sp),d1
    b638:	|  |         move.l 36(sp),d2
    b63c:	|  |         jsr -312(a6)
    b640:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b644:	|  |         move.l 156(sp),28(sp)
    b64a:	|  |         movea.l 148(sp),a0
    b64e:	|  |         move.b 129(a0),d0
    b652:	|  |         move.b d0,d0
    b654:	|  |         andi.l #255,d0
    b65a:	|  |         move.l d0,24(sp)
    b65e:	|  |         move.l 1ccac <DOSBase>,d0
    b664:	|  |         movea.l d0,a6
    b666:	|  |         move.l 28(sp),d1
    b66a:	|  |         move.l 24(sp),d2
    b66e:	|  |         jsr -312(a6)
    b672:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b676:	|  |         move.l 156(sp),16(sp)
    b67c:	|  |         movea.l 148(sp),a0
    b680:	|  |         move.b 130(a0),d0
    b684:	|  |         move.b d0,d0
    b686:	|  |         andi.l #255,d0
    b68c:	|  |         move.l d0,12(sp)
    b690:	|  |         move.l 1ccac <DOSBase>,d0
    b696:	|  |         movea.l d0,a6
    b698:	|  |         move.l 16(sp),d1
    b69c:	|  |         move.l 12(sp),d2
    b6a0:	|  |         jsr -312(a6)
    b6a4:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b6a8:	|  |         movea.l 148(sp),a0
    b6ac:	|  |         move.l 114(a0),d0
    b6b0:	|  |         move.l 156(sp),-(sp)
    b6b4:	|  |         move.l d0,-(sp)
    b6b6:	|  |         jsr dad2 <saveObjectRef>
    b6bc:	|  |         addq.l #8,sp

		me = me -> next;
    b6be:	|  |         movea.l 148(sp),a0
    b6c2:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b6c8:	|  |         addq.l #1,140(sp)
    b6cc:	|  '-------> movea.l 140(sp),a0
    b6d0:	|            cmpa.l 144(sp),a0
    b6d4:	'----------- blt.w b278 <savePeople+0x76>
	}
	return TRUE;
    b6d8:	             moveq #1,d0
}
    b6da:	             move.l (sp)+,d2
    b6dc:	             movea.l (sp)+,a6
    b6de:	             lea 144(sp),sp
    b6e2:	             rts

0000b6e4 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b6e4:	movea.l 4(sp),a0
    b6e8:	move.l 8(sp),(a0)
}
    b6ec:	nop
    b6ee:	rts

0000b6f0 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b6f0:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b6f2:	       move.l 12(sp),-(sp)
    b6f6:	       jsr a71c <findPerson>
    b6fc:	       addq.l #4,sp
    b6fe:	       move.l d0,(sp)
	if (! moveMe) return;
    b700:	,----- beq.s b714 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b702:	|      move.l 8(sp),-(sp)
    b706:	|      move.l 4(sp),-(sp)
    b70a:	|      jsr b71a <setMyDrawMode>
    b710:	|      addq.l #8,sp
    b712:	|  ,-- bra.s b716 <setDrawMode+0x26>
	if (! moveMe) return;
    b714:	'--|-> nop
}
    b716:	   '-> addq.l #4,sp
    b718:	       rts

0000b71a <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b71a:	       moveq #19,d0
    b71c:	       cmp.l 8(sp),d0
    b720:	,----- bcs.w bbf8 <setMyDrawMode+0x4de>
    b724:	|      move.l 8(sp),d0
    b728:	|      add.l d0,d0
    b72a:	|      movea.l d0,a0
    b72c:	|      adda.l #46904,a0
    b732:	|      move.w (a0),d0
    b734:	|      jmp (b738 <setMyDrawMode+0x1e>,pc,d0.w)
    b738:	|      .short 0x04c0
    b73a:	|      ori.l #6684712,-(a4)
    b740:	|      btst d0,-(a0)
    b742:	|      bchg d0,(a6)+
    b744:	|      bclr d0,(a4)+
    b746:	|      bset d0,(a2)+
    b748:	|      andi.b #84,(a6)
    b74c:	|      andi.l #55575312,(a2)
    b752:	|      .short 0x02d0
    b754:	|      bclr d1,(a0)
    b756:	|      .short 0x044a
    b758:	|      .short 0x040c
    b75a:	|      movep.l d1,1158(a6)
    b75e:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b760:	|      movea.l 4(sp),a0
    b764:	|      clr.b 128(a0)
    b768:	|      movea.l 4(sp),a0
    b76c:	|      move.b 128(a0),d0
    b770:	|      movea.l 4(sp),a0
    b774:	|      move.b d0,127(a0)
    b778:	|      movea.l 4(sp),a0
    b77c:	|      move.b 127(a0),d0
    b780:	|      movea.l 4(sp),a0
    b784:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b788:	|      movea.l 4(sp),a0
    b78c:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b790:	|      movea.l 4(sp),a0
    b794:	|      move.b #64,130(a0)
			break;
    b79a:	|  ,-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b79e:	|  |   movea.l 4(sp),a0
    b7a2:	|  |   clr.b 128(a0)
    b7a6:	|  |   movea.l 4(sp),a0
    b7aa:	|  |   move.b 128(a0),d0
    b7ae:	|  |   movea.l 4(sp),a0
    b7b2:	|  |   move.b d0,127(a0)
    b7b6:	|  |   movea.l 4(sp),a0
    b7ba:	|  |   move.b 127(a0),d0
    b7be:	|  |   movea.l 4(sp),a0
    b7c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7c6:	|  |   movea.l 4(sp),a0
    b7ca:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b7ce:	|  |   movea.l 4(sp),a0
    b7d2:	|  |   move.b #-128,130(a0)
			break;
    b7d8:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7dc:	|  |   movea.l 4(sp),a0
    b7e0:	|  |   clr.b 128(a0)
    b7e4:	|  |   movea.l 4(sp),a0
    b7e8:	|  |   move.b 128(a0),d0
    b7ec:	|  |   movea.l 4(sp),a0
    b7f0:	|  |   move.b d0,127(a0)
    b7f4:	|  |   movea.l 4(sp),a0
    b7f8:	|  |   move.b 127(a0),d0
    b7fc:	|  |   movea.l 4(sp),a0
    b800:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b804:	|  |   movea.l 4(sp),a0
    b808:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b80c:	|  |   movea.l 4(sp),a0
    b810:	|  |   move.b #-64,130(a0)
			break;
    b816:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b81a:	|  |   movea.l 4(sp),a0
    b81e:	|  |   clr.b 128(a0)
    b822:	|  |   movea.l 4(sp),a0
    b826:	|  |   move.b 128(a0),d0
    b82a:	|  |   movea.l 4(sp),a0
    b82e:	|  |   move.b d0,127(a0)
    b832:	|  |   movea.l 4(sp),a0
    b836:	|  |   move.b 127(a0),d0
    b83a:	|  |   movea.l 4(sp),a0
    b83e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b842:	|  |   movea.l 4(sp),a0
    b846:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b84a:	|  |   movea.l 4(sp),a0
    b84e:	|  |   move.b #-2,130(a0)
			break;
    b854:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b858:	|  |   movea.l 4(sp),a0
    b85c:	|  |   clr.b 128(a0)
    b860:	|  |   movea.l 4(sp),a0
    b864:	|  |   move.b 128(a0),d0
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   move.b d0,127(a0)
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b 127(a0),d0
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b88a:	|  |   movea.l 4(sp),a0
    b88e:	|  |   clr.b 130(a0)
			break;
    b892:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b896:	|  |   movea.l 4(sp),a0
    b89a:	|  |   clr.b 128(a0)
    b89e:	|  |   movea.l 4(sp),a0
    b8a2:	|  |   move.b 128(a0),d0
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   move.b d0,127(a0)
    b8ae:	|  |   movea.l 4(sp),a0
    b8b2:	|  |   move.b 127(a0),d0
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b8be:	|  |   movea.l 4(sp),a0
    b8c2:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b8c8:	|  |   movea.l 4(sp),a0
    b8cc:	|  |   clr.b 130(a0)
			break;
    b8d0:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8d4:	|  |   movea.l 4(sp),a0
    b8d8:	|  |   clr.b 128(a0)
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   move.b 128(a0),d0
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   move.b d0,127(a0)
    b8ec:	|  |   movea.l 4(sp),a0
    b8f0:	|  |   move.b 127(a0),d0
    b8f4:	|  |   movea.l 4(sp),a0
    b8f8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8fc:	|  |   movea.l 4(sp),a0
    b900:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b906:	|  |   movea.l 4(sp),a0
    b90a:	|  |   clr.b 130(a0)
			break;
    b90e:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b912:	|  |   movea.l 4(sp),a0
    b916:	|  |   clr.b 128(a0)
    b91a:	|  |   movea.l 4(sp),a0
    b91e:	|  |   move.b 128(a0),d0
    b922:	|  |   movea.l 4(sp),a0
    b926:	|  |   move.b d0,127(a0)
    b92a:	|  |   movea.l 4(sp),a0
    b92e:	|  |   move.b 127(a0),d0
    b932:	|  |   movea.l 4(sp),a0
    b936:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b93a:	|  |   movea.l 4(sp),a0
    b93e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b942:	|  |   movea.l 4(sp),a0
    b946:	|  |   clr.b 130(a0)
			break;
    b94a:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b94e:	|  |   movea.l 4(sp),a0
    b952:	|  |   clr.b 128(a0)
    b956:	|  |   movea.l 4(sp),a0
    b95a:	|  |   move.b 128(a0),d0
    b95e:	|  |   movea.l 4(sp),a0
    b962:	|  |   move.b d0,127(a0)
    b966:	|  |   movea.l 4(sp),a0
    b96a:	|  |   move.b 127(a0),d0
    b96e:	|  |   movea.l 4(sp),a0
    b972:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b976:	|  |   movea.l 4(sp),a0
    b97a:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b97e:	|  |   movea.l 4(sp),a0
    b982:	|  |   move.b #64,130(a0)
			break;
    b988:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b98c:	|  |   movea.l 4(sp),a0
    b990:	|  |   clr.b 128(a0)
    b994:	|  |   movea.l 4(sp),a0
    b998:	|  |   move.b 128(a0),d0
    b99c:	|  |   movea.l 4(sp),a0
    b9a0:	|  |   move.b d0,127(a0)
    b9a4:	|  |   movea.l 4(sp),a0
    b9a8:	|  |   move.b 127(a0),d0
    b9ac:	|  |   movea.l 4(sp),a0
    b9b0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9b4:	|  |   movea.l 4(sp),a0
    b9b8:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b9bc:	|  |   movea.l 4(sp),a0
    b9c0:	|  |   move.b #-128,130(a0)
			break;
    b9c6:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9ca:	|  |   movea.l 4(sp),a0
    b9ce:	|  |   clr.b 128(a0)
    b9d2:	|  |   movea.l 4(sp),a0
    b9d6:	|  |   move.b 128(a0),d0
    b9da:	|  |   movea.l 4(sp),a0
    b9de:	|  |   move.b d0,127(a0)
    b9e2:	|  |   movea.l 4(sp),a0
    b9e6:	|  |   move.b 127(a0),d0
    b9ea:	|  |   movea.l 4(sp),a0
    b9ee:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9f2:	|  |   movea.l 4(sp),a0
    b9f6:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b9fa:	|  |   movea.l 4(sp),a0
    b9fe:	|  |   move.b #-64,130(a0)
			break;
    ba04:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba08:	|  |   movea.l 4(sp),a0
    ba0c:	|  |   move.b #-128,128(a0)
    ba12:	|  |   movea.l 4(sp),a0
    ba16:	|  |   move.b 128(a0),d0
    ba1a:	|  |   movea.l 4(sp),a0
    ba1e:	|  |   move.b d0,127(a0)
    ba22:	|  |   movea.l 4(sp),a0
    ba26:	|  |   move.b 127(a0),d0
    ba2a:	|  |   movea.l 4(sp),a0
    ba2e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ba32:	|  |   movea.l 4(sp),a0
    ba36:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba3c:	|  |   movea.l 4(sp),a0
    ba40:	|  |   clr.b 130(a0)
			break;
    ba44:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba48:	|  |   movea.l 4(sp),a0
    ba4c:	|  |   move.b #-128,128(a0)
    ba52:	|  |   movea.l 4(sp),a0
    ba56:	|  |   move.b 128(a0),d0
    ba5a:	|  |   movea.l 4(sp),a0
    ba5e:	|  |   move.b d0,127(a0)
    ba62:	|  |   movea.l 4(sp),a0
    ba66:	|  |   move.b 127(a0),d0
    ba6a:	|  |   movea.l 4(sp),a0
    ba6e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba72:	|  |   movea.l 4(sp),a0
    ba76:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba7c:	|  |   movea.l 4(sp),a0
    ba80:	|  |   clr.b 130(a0)
			break;
    ba84:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba88:	|  |   movea.l 4(sp),a0
    ba8c:	|  |   move.b #-128,128(a0)
    ba92:	|  |   movea.l 4(sp),a0
    ba96:	|  |   move.b 128(a0),d0
    ba9a:	|  |   movea.l 4(sp),a0
    ba9e:	|  |   move.b d0,127(a0)
    baa2:	|  |   movea.l 4(sp),a0
    baa6:	|  |   move.b 127(a0),d0
    baaa:	|  |   movea.l 4(sp),a0
    baae:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bab2:	|  |   movea.l 4(sp),a0
    bab6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    babc:	|  |   movea.l 4(sp),a0
    bac0:	|  |   clr.b 130(a0)
			break;
    bac4:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bac8:	|  |   movea.l 4(sp),a0
    bacc:	|  |   move.b #-128,128(a0)
    bad2:	|  |   movea.l 4(sp),a0
    bad6:	|  |   move.b 128(a0),d0
    bada:	|  |   movea.l 4(sp),a0
    bade:	|  |   move.b d0,127(a0)
    bae2:	|  |   movea.l 4(sp),a0
    bae6:	|  |   move.b 127(a0),d0
    baea:	|  |   movea.l 4(sp),a0
    baee:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    baf2:	|  |   movea.l 4(sp),a0
    baf6:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bafa:	|  |   movea.l 4(sp),a0
    bafe:	|  |   clr.b 130(a0)
			break;
    bb02:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb06:	|  |   movea.l 4(sp),a0
    bb0a:	|  |   st 128(a0)
    bb0e:	|  |   movea.l 4(sp),a0
    bb12:	|  |   move.b 128(a0),d0
    bb16:	|  |   movea.l 4(sp),a0
    bb1a:	|  |   move.b d0,127(a0)
    bb1e:	|  |   movea.l 4(sp),a0
    bb22:	|  |   move.b 127(a0),d0
    bb26:	|  |   movea.l 4(sp),a0
    bb2a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bb2e:	|  |   movea.l 4(sp),a0
    bb32:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bb38:	|  |   movea.l 4(sp),a0
    bb3c:	|  |   clr.b 130(a0)
			break;
    bb40:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb44:	|  |   movea.l 4(sp),a0
    bb48:	|  |   st 128(a0)
    bb4c:	|  |   movea.l 4(sp),a0
    bb50:	|  |   move.b 128(a0),d0
    bb54:	|  |   movea.l 4(sp),a0
    bb58:	|  |   move.b d0,127(a0)
    bb5c:	|  |   movea.l 4(sp),a0
    bb60:	|  |   move.b 127(a0),d0
    bb64:	|  |   movea.l 4(sp),a0
    bb68:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bb6c:	|  |   movea.l 4(sp),a0
    bb70:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bb76:	|  |   movea.l 4(sp),a0
    bb7a:	|  |   clr.b 130(a0)
			break;
    bb7e:	|  +-- bra.w bc32 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb82:	|  |   movea.l 4(sp),a0
    bb86:	|  |   st 128(a0)
    bb8a:	|  |   movea.l 4(sp),a0
    bb8e:	|  |   move.b 128(a0),d0
    bb92:	|  |   movea.l 4(sp),a0
    bb96:	|  |   move.b d0,127(a0)
    bb9a:	|  |   movea.l 4(sp),a0
    bb9e:	|  |   move.b 127(a0),d0
    bba2:	|  |   movea.l 4(sp),a0
    bba6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bbaa:	|  |   movea.l 4(sp),a0
    bbae:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bbb4:	|  |   movea.l 4(sp),a0
    bbb8:	|  |   clr.b 130(a0)
			break;
    bbbc:	|  +-- bra.s bc32 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bbbe:	|  |   movea.l 4(sp),a0
    bbc2:	|  |   st 128(a0)
    bbc6:	|  |   movea.l 4(sp),a0
    bbca:	|  |   move.b 128(a0),d0
    bbce:	|  |   movea.l 4(sp),a0
    bbd2:	|  |   move.b d0,127(a0)
    bbd6:	|  |   movea.l 4(sp),a0
    bbda:	|  |   move.b 127(a0),d0
    bbde:	|  |   movea.l 4(sp),a0
    bbe2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bbe6:	|  |   movea.l 4(sp),a0
    bbea:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bbee:	|  |   movea.l 4(sp),a0
    bbf2:	|  |   clr.b 130(a0)
			break;
    bbf6:	|  +-- bra.s bc32 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbf8:	'--|-> movea.l 4(sp),a0
    bbfc:	   |   clr.b 128(a0)
    bc00:	   |   movea.l 4(sp),a0
    bc04:	   |   move.b 128(a0),d0
    bc08:	   |   movea.l 4(sp),a0
    bc0c:	   |   move.b d0,127(a0)
    bc10:	   |   movea.l 4(sp),a0
    bc14:	   |   move.b 127(a0),d0
    bc18:	   |   movea.l 4(sp),a0
    bc1c:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bc20:	   |   movea.l 4(sp),a0
    bc24:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bc28:	   |   movea.l 4(sp),a0
    bc2c:	   |   clr.b 130(a0)
			break;
    bc30:	   |   nop
	}
}
    bc32:	   '-> nop
    bc34:	       rts

0000bc36 <shufflePeople>:

void shufflePeople () {
    bc36:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bc3a:	             move.l #118020,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bc42:	             move.l 1cd04 <allPeople>,d0
    bc48:	,----------- beq.w bd1e <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bc4c:	|     ,----- bra.w bd0e <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bc50:	|  ,--|----> movea.l 16(sp),a0
    bc54:	|  |  |      movea.l (a0),a0
    bc56:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bc5c:	|  |  |      movea.l 16(sp),a0
    bc60:	|  |  |      movea.l (a0),a0
    bc62:	|  |  |      move.l 118(a0),d0
    bc66:	|  |  |      moveq #1,d1
    bc68:	|  |  |      and.l d1,d0
    bc6a:	|  |  |  ,-- beq.s bc82 <shufflePeople+0x4c>
    bc6c:	|  |  |  |   move.l #1148846080,-(sp)
    bc72:	|  |  |  |   move.l 16(sp),-(sp)
    bc76:	|  |  |  |   jsr 17644 <__addsf3>
    bc7c:	|  |  |  |   addq.l #8,sp
    bc7e:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bc82:	|  |  |  '-> movea.l 16(sp),a0
    bc86:	|  |  |      movea.l (a0),a0
    bc88:	|  |  |      movea.l 36(a0),a0
    bc8c:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bc92:	|  |  |      movea.l 16(sp),a0
    bc96:	|  |  |      movea.l (a0),a0
    bc98:	|  |  |      movea.l 36(a0),a0
    bc9c:	|  |  |      move.l 118(a0),d0
    bca0:	|  |  |      moveq #1,d1
    bca2:	|  |  |      and.l d1,d0
    bca4:	|  |  |  ,-- beq.s bcbc <shufflePeople+0x86>
    bca6:	|  |  |  |   move.l #1148846080,-(sp)
    bcac:	|  |  |  |   move.l 12(sp),-(sp)
    bcb0:	|  |  |  |   jsr 17644 <__addsf3>
    bcb6:	|  |  |  |   addq.l #8,sp
    bcb8:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bcbc:	|  |  |  '-> move.l 8(sp),-(sp)
    bcc0:	|  |  |      move.l 16(sp),-(sp)
    bcc4:	|  |  |      jsr 179f4 <__gtsf2>
    bcca:	|  |  |      addq.l #8,sp
    bccc:	|  |  |      tst.l d0
    bcce:	|  |  |  ,-- ble.s bd00 <shufflePeople+0xca>
			A = (*thisReference);
    bcd0:	|  |  |  |   movea.l 16(sp),a0
    bcd4:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bcd8:	|  |  |  |   movea.l 16(sp),a0
    bcdc:	|  |  |  |   movea.l (a0),a0
    bcde:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bce2:	|  |  |  |   movea.l (sp),a0
    bce4:	|  |  |  |   move.l 36(a0),d0
    bce8:	|  |  |  |   movea.l 4(sp),a0
    bcec:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bcf0:	|  |  |  |   movea.l (sp),a0
    bcf2:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bcf8:	|  |  |  |   movea.l 16(sp),a0
    bcfc:	|  |  |  |   move.l (sp),(a0)
    bcfe:	|  |  +--|-- bra.s bd0e <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bd00:	|  |  |  '-> movea.l 16(sp),a0
    bd04:	|  |  |      move.l (a0),d0
    bd06:	|  |  |      moveq #36,d1
    bd08:	|  |  |      add.l d0,d1
    bd0a:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bd0e:	|  |  '----> movea.l 16(sp),a0
    bd12:	|  |         movea.l (a0),a0
    bd14:	|  |         move.l 36(a0),d0
    bd18:	|  '-------- bne.w bc50 <shufflePeople+0x1a>
    bd1c:	|        ,-- bra.s bd20 <shufflePeople+0xea>
	if (!allPeople) return;
    bd1e:	'--------|-> nop
		}
	}
}
    bd20:	         '-> lea 20(sp),sp
    bd24:	             rts

0000bd26 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bd26:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bd28:	       tst.l 8(sp)
    bd2c:	   ,-- bgt.s bd32 <setCharacterWalkSpeed+0xc>
    bd2e:	   |   clr.w d0
    bd30:	,--|-- bra.s bd50 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bd32:	|  '-> move.l 12(sp),-(sp)
    bd36:	|      jsr a71c <findPerson>
    bd3c:	|      addq.l #4,sp
    bd3e:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bd40:	|  ,-- bne.s bd46 <setCharacterWalkSpeed+0x20>
    bd42:	|  |   clr.w d0
    bd44:	+--|-- bra.s bd50 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bd46:	|  '-> movea.l (sp),a0
    bd48:	|      move.l 8(sp),28(a0)
	return TRUE;
    bd4e:	|      moveq #1,d0
}
    bd50:	'----> addq.l #4,sp
    bd52:	       rts

0000bd54 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bd54:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bd56:	       move.l 8(sp),-(sp)
    bd5a:	       jsr a71c <findPerson>
    bd60:	       addq.l #4,sp
    bd62:	       move.l d0,(sp)
    if (thisPerson) {
    bd64:	,----- beq.s bd84 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bd66:	|      movea.l (sp),a0
    bd68:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bd6e:	|      moveq #2,d0
    bd70:	|      and.l 12(sp),d0
    bd74:	|  ,-- beq.s bd80 <setPersonExtra+0x2c>
    bd76:	|  |   movea.l (sp),a0
    bd78:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bd80:	|  '-> moveq #1,d0
    bd82:	|  ,-- bra.s bd86 <setPersonExtra+0x32>
    }
    return FALSE;
    bd84:	'--|-> clr.w d0
}
    bd86:	   '-> addq.l #4,sp
    bd88:	       rts

0000bd8a <setScale>:


void setScale (short int h, short int d) {
    bd8a:	subq.l #4,sp
    bd8c:	move.l 8(sp),d1
    bd90:	move.l 12(sp),d0
    bd94:	move.w d1,d1
    bd96:	move.w d1,2(sp)
    bd9a:	move.w d0,d0
    bd9c:	move.w d0,(sp)
	scaleHorizon = h;
    bd9e:	move.w 2(sp),1c62a <scaleHorizon>
	scaleDivide = d;
    bda6:	move.w (sp),1c62c <scaleDivide>
}
    bdac:	nop
    bdae:	addq.l #4,sp
    bdb0:	rts

0000bdb2 <setShown>:

void setShown (BOOL h, int ob) {
    bdb2:	    subq.l #8,sp
    bdb4:	    move.l 12(sp),d0
    bdb8:	    move.w d0,d0
    bdba:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bdbe:	    move.l 16(sp),-(sp)
    bdc2:	    jsr a71c <findPerson>
    bdc8:	    addq.l #4,sp
    bdca:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bdce:	,-- beq.s bdda <setShown+0x28>
    bdd0:	|   movea.l 4(sp),a0
    bdd4:	|   move.w 2(sp),104(a0)
}
    bdda:	'-> nop
    bddc:	    addq.l #8,sp
    bdde:	    rts

0000bde0 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bde0:	       subq.l #8,sp
    bde2:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bde4:	       movea.l 16(sp),a0
    bde8:	       move.l 92(a0),d0
    bdec:	       move.l d0,d1
    bdee:	       addi.l #360,d1
    bdf4:	       movea.l 16(sp),a0
    bdf8:	       move.l 96(a0),d0
    bdfc:	       move.l d1,d2
    bdfe:	       sub.l d0,d2
    be00:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    be04:	       movea.l 16(sp),a0
    be08:	       move.l 122(a0),d0
    be0c:	   ,-- beq.s be18 <spinStep+0x38>
    be0e:	   |   movea.l 16(sp),a0
    be12:	   |   move.l 122(a0),d0
    be16:	,--|-- bra.s be32 <spinStep+0x52>
    be18:	|  '-> movea.l 16(sp),a0
    be1c:	|      movea.l 80(a0),a0
    be20:	|      move.l 4(a0),d0
    be24:	|      move.l d0,-(sp)
    be26:	|      pea 168 <decodeFilename+0x50>
    be2a:	|      jsr 17e60 <__divsi3>
    be30:	|      addq.l #8,sp
    be32:	'----> move.l d0,4(sp)
	while (diff > 180) {
    be36:	   ,-- bra.s be40 <spinStep+0x60>
		diff -= 360;
    be38:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    be40:	|  '-> cmpi.l #180,8(sp)
    be48:	'----- bgt.s be38 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    be4a:	       move.l 8(sp),d0
    be4e:	       cmp.l 4(sp),d0
    be52:	   ,-- blt.s be70 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    be54:	   |   movea.l 16(sp),a0
    be58:	   |   move.l 92(a0),d0
    be5c:	   |   sub.l 4(sp),d0
    be60:	   |   move.l d0,-(sp)
    be62:	   |   move.l 20(sp),-(sp)
    be66:	   |   jsr bf50 <turnMeAngle>
    be6c:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    be6e:	,--|-- bra.s beb6 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    be70:	|  '-> move.l 4(sp),d0
    be74:	|      neg.l d0
    be76:	|      cmp.l 8(sp),d0
    be7a:	|  ,-- blt.s be98 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    be7c:	|  |   movea.l 16(sp),a0
    be80:	|  |   move.l 92(a0),d0
    be84:	|  |   add.l 4(sp),d0
    be88:	|  |   move.l d0,-(sp)
    be8a:	|  |   move.l 20(sp),-(sp)
    be8e:	|  |   jsr bf50 <turnMeAngle>
    be94:	|  |   addq.l #8,sp
}
    be96:	+--|-- bra.s beb6 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    be98:	|  '-> movea.l 16(sp),a0
    be9c:	|      move.l 96(a0),d0
    bea0:	|      move.l d0,-(sp)
    bea2:	|      move.l 20(sp),-(sp)
    bea6:	|      jsr bf50 <turnMeAngle>
    beac:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    beae:	|      movea.l 16(sp),a0
    beb2:	|      clr.w 66(a0)
}
    beb6:	'----> nop
    beb8:	       move.l (sp)+,d2
    beba:	       addq.l #8,sp
    bebc:	       rts

0000bebe <stopPerson>:


BOOL stopPerson (int o) {
    bebe:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bec0:	       move.l 8(sp),-(sp)
    bec4:	       jsr a71c <findPerson>
    beca:	       addq.l #4,sp
    becc:	       move.l d0,(sp)
    if (moveMe)
    bece:	,----- beq.s bf0c <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bed0:	|      movea.l (sp),a0
    bed2:	|      move.l 68(a0),d0
    bed6:	+----- beq.s bf0c <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bed8:	|      movea.l (sp),a0
    beda:	|      move.l 68(a0),d0
    bede:	|      move.l d0,-(sp)
    bee0:	|      jsr 5116 <abortFunction>
    bee6:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bee8:	|      movea.l (sp),a0
    beea:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    beee:	|      movea.l (sp),a0
    bef0:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bef4:	|      movea.l (sp),a0
    bef6:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    befa:	|      clr.l -(sp)
    befc:	|      move.l 4(sp),-(sp)
    bf00:	|      jsr 42b8 <setFrames>
    bf06:	|      addq.l #8,sp
            return TRUE;
    bf08:	|      moveq #1,d0
    bf0a:	|  ,-- bra.s bf0e <stopPerson+0x50>
        }
    return FALSE;
    bf0c:	'--|-> clr.w d0
}
    bf0e:	   '-> addq.l #4,sp
    bf10:	       rts

0000bf12 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bf12:	       subq.l #8,sp
	int total = 0;
    bf14:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bf18:	       clr.l (sp)
    bf1a:	   ,-- bra.s bf3c <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bf1c:	,--|-> movea.l 12(sp),a0
    bf20:	|  |   movea.l 4(a0),a0
    bf24:	|  |   move.l (sp),d1
    bf26:	|  |   move.l d1,d0
    bf28:	|  |   add.l d0,d0
    bf2a:	|  |   add.l d1,d0
    bf2c:	|  |   add.l d0,d0
    bf2e:	|  |   add.l d0,d0
    bf30:	|  |   adda.l d0,a0
    bf32:	|  |   move.l 4(a0),d0
    bf36:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bf3a:	|  |   addq.l #1,(sp)
    bf3c:	|  '-> movea.l 12(sp),a0
    bf40:	|      move.l 8(a0),d0
    bf44:	|      cmp.l (sp),d0
    bf46:	'----- bgt.s bf1c <timeForAnim+0xa>
	}
	return total;
    bf48:	       move.l 4(sp),d0
}
    bf4c:	       addq.l #8,sp
    bf4e:	       rts

0000bf50 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bf50:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bf52:	       movea.l 8(sp),a0
    bf56:	       movea.l 80(a0),a0
    bf5a:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bf5e:	       movea.l 8(sp),a0
    bf62:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bf68:	       move.l (sp),-(sp)
    bf6a:	       pea b4 <_start+0xb4>
    bf6e:	       jsr 17e60 <__divsi3>
    bf74:	       addq.l #8,sp
    bf76:	       move.l d0,d1
    bf78:	       addi.l #180,d1
    bf7e:	       movea.l 8(sp),a0
    bf82:	       move.l 100(a0),d0
    bf86:	       add.l d1,d0
    bf88:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bf8c:	   ,-- bra.s bf96 <turnMeAngle+0x46>
    bf8e:	,--|-> addi.l #-360,12(sp)
    bf96:	|  '-> cmpi.l #359,12(sp)
    bf9e:	'----- bgt.s bf8e <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bfa0:	       move.l (sp),-(sp)
    bfa2:	       move.l 16(sp),-(sp)
    bfa6:	       jsr 17de2 <__mulsi3>
    bfac:	       addq.l #8,sp
    bfae:	       pea 168 <decodeFilename+0x50>
    bfb2:	       move.l d0,-(sp)
    bfb4:	       jsr 17e60 <__divsi3>
    bfba:	       addq.l #8,sp
    bfbc:	       movea.l 8(sp),a0
    bfc0:	       move.l d0,106(a0)
}
    bfc4:	       nop
    bfc6:	       addq.l #4,sp
    bfc8:	       rts

0000bfca <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bfca:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bfcc:	          move.l 8(sp),-(sp)
    bfd0:	          jsr a71c <findPerson>
    bfd6:	          addq.l #4,sp
    bfd8:	          move.l d0,(sp)
    if (thisPerson) {
    bfda:	,-------- beq.s c03a <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bfdc:	|         movea.l (sp),a0
    bfde:	|         move.l 68(a0),d0
    bfe2:	|     ,-- beq.s bff4 <turnPersonToFace+0x2a>
    bfe4:	|     |   movea.l (sp),a0
    bfe6:	|     |   move.l 68(a0),d0
    bfea:	|     |   move.l d0,-(sp)
    bfec:	|     |   jsr 5116 <abortFunction>
    bff2:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bff4:	|     '-> movea.l (sp),a0
    bff6:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bffa:	|         movea.l (sp),a0
    bffc:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c000:	|         movea.l (sp),a0
    c002:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c006:	|         move.l 12(sp),-(sp)
    c00a:	|         move.l 4(sp),-(sp)
    c00e:	|         jsr bf50 <turnMeAngle>
    c014:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c016:	|         movea.l 1cbf4 <speech>,a0
    c01c:	|         move.l (a0),d0
    c01e:	|         cmp.l (sp),d0
    c020:	|  ,----- bne.s c026 <turnPersonToFace+0x5c>
    c022:	|  |      moveq #2,d0
    c024:	|  |  ,-- bra.s c028 <turnPersonToFace+0x5e>
    c026:	|  '--|-> moveq #0,d0
    c028:	|     '-> move.l d0,-(sp)
    c02a:	|         move.l 4(sp),-(sp)
    c02e:	|         jsr 42b8 <setFrames>
    c034:	|         addq.l #8,sp
        return TRUE;
    c036:	|         moveq #1,d0
    c038:	|     ,-- bra.s c03c <turnPersonToFace+0x72>
    }
    return FALSE;
    c03a:	'-----|-> clr.w d0
}
    c03c:	      '-> addq.l #4,sp
    c03e:	          rts

0000c040 <walkAllPeople>:

void walkAllPeople() {
    c040:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c042:	             move.l 1cd04 <allPeople>,(sp)

	while (thisPerson) {
    c048:	   ,-------- bra.s c0b8 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c04a:	,--|-------> movea.l (sp),a0
    c04c:	|  |         move.w 64(a0),d0
    c050:	|  |     ,-- beq.s c064 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c052:	|  |     |   pea 1 <_start+0x1>
    c056:	|  |     |   move.l 4(sp),-(sp)
    c05a:	|  |     |   jsr c0c4 <walkMe>
    c060:	|  |     |   addq.l #8,sp
    c062:	|  |  ,--|-- bra.s c084 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c064:	|  |  |  '-> movea.l (sp),a0
    c066:	|  |  |      move.w 66(a0),d0
    c06a:	|  |  +----- beq.s c084 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c06c:	|  |  |      move.l (sp),-(sp)
    c06e:	|  |  |      jsr bde0 <spinStep>
    c074:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c076:	|  |  |      clr.l -(sp)
    c078:	|  |  |      move.l 4(sp),-(sp)
    c07c:	|  |  |      jsr 42b8 <setFrames>
    c082:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c084:	|  |  '----> movea.l (sp),a0
    c086:	|  |         move.w 64(a0),d0
    c08a:	|  |     ,-- bne.s c0b2 <walkAllPeople+0x72>
    c08c:	|  |     |   movea.l (sp),a0
    c08e:	|  |     |   move.w 66(a0),d0
    c092:	|  |     +-- bne.s c0b2 <walkAllPeople+0x72>
    c094:	|  |     |   movea.l (sp),a0
    c096:	|  |     |   move.l 68(a0),d0
    c09a:	|  |     +-- beq.s c0b2 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c09c:	|  |     |   movea.l (sp),a0
    c09e:	|  |     |   move.l 68(a0),d0
    c0a2:	|  |     |   move.l d0,-(sp)
    c0a4:	|  |     |   jsr 7288 <restartFunction>
    c0aa:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c0ac:	|  |     |   movea.l (sp),a0
    c0ae:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c0b2:	|  |     '-> movea.l (sp),a0
    c0b4:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c0b8:	|  '-------> tst.l (sp)
    c0ba:	'----------- bne.s c04a <walkAllPeople+0xa>
	}
}
    c0bc:	             nop
    c0be:	             nop
    c0c0:	             addq.l #4,sp
    c0c2:	             rts

0000c0c4 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c0c4:	                lea -20(sp),sp
    c0c8:	                move.l d3,-(sp)
    c0ca:	                move.l d2,-(sp)
    c0cc:	                move.l 36(sp),d0
    c0d0:	                move.w d0,d0
    c0d2:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c0d6:	                cmpi.w #-1,10(sp)
    c0dc:	,-------------- bne.s c0e4 <walkMe+0x20>
    c0de:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c0e4:	>-------------> movea.l 32(sp),a0
    c0e8:	|               move.l 48(a0),d0
    c0ec:	|               move.l d0,-(sp)
    c0ee:	|               jsr 17888 <__floatsisf>
    c0f4:	|               addq.l #4,sp
    c0f6:	|               move.l d0,d1
    c0f8:	|               movea.l 32(sp),a0
    c0fc:	|               move.l (a0),d0
    c0fe:	|               move.l d0,-(sp)
    c100:	|               move.l d1,-(sp)
    c102:	|               jsr 17b7c <__subsf3>
    c108:	|               addq.l #8,sp
    c10a:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c10e:	|               movea.l 32(sp),a0
    c112:	|               move.l 52(a0),d0
    c116:	|               move.l d0,-(sp)
    c118:	|               jsr 17888 <__floatsisf>
    c11e:	|               addq.l #4,sp
    c120:	|               move.l d0,d1
    c122:	|               movea.l 32(sp),a0
    c126:	|               move.l 4(a0),d0
    c12a:	|               move.l d0,-(sp)
    c12c:	|               move.l d1,-(sp)
    c12e:	|               jsr 17b7c <__subsf3>
    c134:	|               addq.l #8,sp
    c136:	|               move.l d0,-(sp)
    c138:	|               move.l d0,-(sp)
    c13a:	|               jsr 17644 <__addsf3>
    c140:	|               addq.l #8,sp
    c142:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c146:	|               movea.l 32(sp),a0
    c14a:	|               move.l 32(a0),d2
    c14e:	|               movea.l 32(sp),a0
    c152:	|               move.l 28(a0),d0
    c156:	|               move.l d0,-(sp)
    c158:	|               jsr 17888 <__floatsisf>
    c15e:	|               addq.l #4,sp
    c160:	|               move.l d0,-(sp)
    c162:	|               move.l d2,-(sp)
    c164:	|               jsr 1793a <__mulsf3>
    c16a:	|               addq.l #8,sp
    c16c:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c170:	|               move.l 24(sp),-(sp)
    c174:	|               jsr 177aa <__extendsfdf2>
    c17a:	|               addq.l #4,sp
    c17c:	|               move.l #-1717986918,-(sp)
    c182:	|               move.l #1070176665,-(sp)
    c188:	|               move.l d1,-(sp)
    c18a:	|               move.l d0,-(sp)
    c18c:	|               jsr 17a60 <__ltdf2>
    c192:	|               lea 16(sp),sp
    c196:	|               tst.l d0
    c198:	|           ,-- bge.s c1a2 <walkMe+0xde>
    c19a:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c1a2:	|           '-> move.l 20(sp),-(sp)
    c1a6:	|               jsr 17820 <__fixsfsi>
    c1ac:	|               addq.l #4,sp
    c1ae:	|               move.l d0,-(sp)
    c1b0:	|               jsr 930c <TF_abs>
    c1b6:	|               addq.l #4,sp
    c1b8:	|               move.l d0,d2
    c1ba:	|               move.l 16(sp),-(sp)
    c1be:	|               jsr 17820 <__fixsfsi>
    c1c4:	|               addq.l #4,sp
    c1c6:	|               move.l d0,-(sp)
    c1c8:	|               jsr 930c <TF_abs>
    c1ce:	|               addq.l #4,sp
    c1d0:	|               cmp.l d2,d0
    c1d2:	|        ,----- bgt.s c1f6 <walkMe+0x132>
    c1d4:	|        |      move.l 20(sp),-(sp)
    c1d8:	|        |      jsr 17820 <__fixsfsi>
    c1de:	|        |      addq.l #4,sp
    c1e0:	|        |      move.l d0,-(sp)
    c1e2:	|        |      jsr 930c <TF_abs>
    c1e8:	|        |      addq.l #4,sp
    c1ea:	|        |      move.l d0,-(sp)
    c1ec:	|        |      jsr 17888 <__floatsisf>
    c1f2:	|        |      addq.l #4,sp
    c1f4:	|        |  ,-- bra.s c216 <walkMe+0x152>
    c1f6:	|        '--|-> move.l 16(sp),-(sp)
    c1fa:	|           |   jsr 17820 <__fixsfsi>
    c200:	|           |   addq.l #4,sp
    c202:	|           |   move.l d0,-(sp)
    c204:	|           |   jsr 930c <TF_abs>
    c20a:	|           |   addq.l #4,sp
    c20c:	|           |   move.l d0,-(sp)
    c20e:	|           |   jsr 17888 <__floatsisf>
    c214:	|           |   addq.l #4,sp
    c216:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c21a:	|               move.l 12(sp),-(sp)
    c21e:	|               jsr 17820 <__fixsfsi>
    c224:	|               addq.l #4,sp
    c226:	|               move.l d0,-(sp)
    c228:	|               jsr 930c <TF_abs>
    c22e:	|               addq.l #4,sp
    c230:	|               move.l d0,-(sp)
    c232:	|               jsr 17888 <__floatsisf>
    c238:	|               addq.l #4,sp
    c23a:	|               move.l d0,-(sp)
    c23c:	|               move.l 28(sp),-(sp)
    c240:	|               jsr 17aae <__ltsf2>
    c246:	|               addq.l #8,sp
    c248:	|               tst.l d0
    c24a:	|        ,----- bge.w c2fc <walkMe+0x238>
			if (thisPerson->spinning) {
    c24e:	|        |      movea.l 32(sp),a0
    c252:	|        |      move.w 66(a0),d0
    c256:	|        |  ,-- beq.s c274 <walkMe+0x1b0>
				spinStep(thisPerson);
    c258:	|        |  |   move.l 32(sp),-(sp)
    c25c:	|        |  |   jsr bde0 <spinStep>
    c262:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c264:	|        |  |   pea 1 <_start+0x1>
    c268:	|        |  |   move.l 36(sp),-(sp)
    c26c:	|        |  |   jsr 42b8 <setFrames>
    c272:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c274:	|        |  '-> move.l 24(sp),-(sp)
    c278:	|        |      move.l 16(sp),-(sp)
    c27c:	|        |      jsr 1773e <__divsf3>
    c282:	|        |      addq.l #8,sp
    c284:	|        |      move.l d0,24(sp)
			if (move)
    c288:	|        |      tst.w 10(sp)
    c28c:	|        |  ,-- beq.s c2f6 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c28e:	|        |  |   movea.l 32(sp),a0
    c292:	|        |  |   move.l 4(a0),d2
    c296:	|        |  |   move.l 24(sp),d0
    c29a:	|        |  |   move.l d0,-(sp)
    c29c:	|        |  |   move.l d0,-(sp)
    c29e:	|        |  |   jsr 17644 <__addsf3>
    c2a4:	|        |  |   addq.l #8,sp
    c2a6:	|        |  |   move.l d0,-(sp)
    c2a8:	|        |  |   move.l 20(sp),-(sp)
    c2ac:	|        |  |   jsr 1773e <__divsf3>
    c2b2:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c2b4:	|        |  |   move.l d0,-(sp)
    c2b6:	|        |  |   move.l d2,-(sp)
    c2b8:	|        |  |   jsr 17644 <__addsf3>
    c2be:	|        |  |   addq.l #8,sp
    c2c0:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c2c2:	|        |  |   movea.l 32(sp),a0
    c2c6:	|        |  |   move.l (a0),d3
    c2c8:	|        |  |   move.l 24(sp),-(sp)
    c2cc:	|        |  |   move.l 24(sp),-(sp)
    c2d0:	|        |  |   jsr 1773e <__divsf3>
    c2d6:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c2d8:	|        |  |   move.l d0,-(sp)
    c2da:	|        |  |   move.l d3,-(sp)
    c2dc:	|        |  |   jsr 17644 <__addsf3>
    c2e2:	|        |  |   addq.l #8,sp
    c2e4:	|        |  |   move.l d2,-(sp)
    c2e6:	|        |  |   move.l d0,-(sp)
    c2e8:	|        |  |   move.l 40(sp),-(sp)
    c2ec:	|        |  |   jsr aec6 <moveAndScale>
    c2f2:	|        |  |   lea 12(sp),sp
			return TRUE;
    c2f6:	|        |  '-> moveq #1,d0
    c2f8:	|  ,-----|----- bra.w c3aa <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c2fc:	|  |     '----> movea.l 32(sp),a0
    c300:	|  |            move.l 56(a0),d0
    c304:	|  |            moveq #-1,d1
    c306:	|  |            cmp.l d0,d1
    c308:	|  |        ,-- bne.s c340 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c30a:	|  |        |   movea.l 32(sp),a0
    c30e:	|  |        |   move.l 110(a0),d0
    c312:	|  |        |   moveq #-1,d1
    c314:	|  |        |   cmp.l d0,d1
    c316:	|  |  ,-----|-- beq.s c354 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c318:	|  |  |     |   movea.l 32(sp),a0
    c31c:	|  |  |     |   move.l 110(a0),d0
    c320:	|  |  |     |   movea.l 32(sp),a0
    c324:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c328:	|  |  |     |   movea.l 32(sp),a0
    c32c:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c332:	|  |  |     |   move.l 32(sp),-(sp)
    c336:	|  |  |     |   jsr bde0 <spinStep>
    c33c:	|  |  |     |   addq.l #4,sp
			}
			break;
    c33e:	|  |  +-----|-- bra.s c354 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c340:	|  |  |     '-> move.l 32(sp),-(sp)
    c344:	|  |  |         jsr 9a7e <doBorderStuff>
    c34a:	|  |  |         addq.l #4,sp
    c34c:	|  |  |         tst.w d0
    c34e:	|  |  |  ,----- beq.s c358 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c350:	'--|--|--|----- bra.w c0e4 <walkMe+0x20>
			break;
    c354:	   |  '--|----> nop
    c356:	   |     |  ,-- bra.s c35a <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c358:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c35a:	   |        '-> movea.l 32(sp),a0
    c35e:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c362:	   |            clr.l -(sp)
    c364:	   |            move.l 36(sp),-(sp)
    c368:	   |            jsr 42b8 <setFrames>
    c36e:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c370:	   |            movea.l 32(sp),a0
    c374:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c378:	   |            move.l d0,-(sp)
    c37a:	   |            jsr 17888 <__floatsisf>
    c380:	   |            addq.l #4,sp
    c382:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c384:	   |            movea.l 32(sp),a0
    c388:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c38c:	   |            move.l d0,-(sp)
    c38e:	   |            jsr 17888 <__floatsisf>
    c394:	   |            addq.l #4,sp
    c396:	   |            move.l d2,-(sp)
    c398:	   |            move.l d0,-(sp)
    c39a:	   |            move.l 40(sp),-(sp)
    c39e:	   |            jsr aec6 <moveAndScale>
    c3a4:	   |            lea 12(sp),sp
	return FALSE;
    c3a8:	   |            clr.w d0
}
    c3aa:	   '----------> move.l (sp)+,d2
    c3ac:	                move.l (sp)+,d3
    c3ae:	                lea 20(sp),sp
    c3b2:	                rts

0000c3b4 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c3b4:	       subq.l #8,sp
    c3b6:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c3b8:	   ,-- bra.s c3e8 <clearStackLib+0x34>
		k = stackLib;
    c3ba:	,--|-> move.l 1cd30 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c3c2:	|  |   movea.l 1cd30 <stackLib>,a0
    c3c8:	|  |   move.l 4(a0),d0
    c3cc:	|  |   move.l d0,1cd30 <stackLib>
		FreeVec(k);
    c3d2:	|  |   move.l 8(sp),4(sp)
    c3d8:	|  |   move.l 1cca4 <SysBase>,d0
    c3de:	|  |   movea.l d0,a6
    c3e0:	|  |   movea.l 4(sp),a1
    c3e4:	|  |   jsr -690(a6)
	while (stackLib) {
    c3e8:	|  '-> move.l 1cd30 <stackLib>,d0
    c3ee:	'----- bne.s c3ba <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c3f0:	       clr.l 1cd2c <stackLibTotal>
}
    c3f6:	       nop
    c3f8:	       movea.l (sp)+,a6
    c3fa:	       addq.l #8,sp
    c3fc:	       rts

0000c3fe <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c3fe:	          lea -128(sp),sp
    c402:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c406:	      ,-- bra.s c418 <loadGame+0x1a>
    c408:	   ,--|-> move.l 1cc3c <allRunningFunctions>,d0
    c40e:	   |  |   move.l d0,-(sp)
    c410:	   |  |   jsr 614a <finishFunction>
    c416:	   |  |   addq.l #4,sp
    c418:	   |  '-> move.l 1cc3c <allRunningFunctions>,d0
    c41e:	   '----- bne.s c408 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c420:	          pea 1cd34 <ssgVersion>
    c426:	          pea 19591 <PutChar+0x1699>
    c42c:	          pea 41 <_start+0x41>
    c430:	          pea 53 <_start+0x53>
    c434:	          move.l 160(sp),-(sp)
    c438:	          jsr 6e70 <openAndVerify>
    c43e:	          lea 20(sp),sp
    c442:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c446:	      ,-- bne.s c44e <loadGame+0x50>
    c448:	      |   clr.w d0
    c44a:	,-----|-- bra.w c6f4 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c44e:	|     '-> move.l 112(sp),108(sp)
    c454:	|         lea 140(sp),a0
    c458:	|         lea -126(a0),a0
    c45c:	|         move.l a0,120(sp)
    c460:	|         moveq #8,d0
    c462:	|         move.l d0,116(sp)
    c466:	|         move.l 1ccac <DOSBase>,d0
    c46c:	|         movea.l d0,a6
    c46e:	|         move.l 108(sp),d1
    c472:	|         move.l 120(sp),d2
    c476:	|         move.l 116(sp),d3
    c47a:	|         jsr -42(a6)
    c47e:	|         move.l d0,132(sp)
    c482:	|         move.l 132(sp),d0
    c486:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c48a:	|         moveq #8,d0
    c48c:	|         cmp.l 128(sp),d0
    c490:	|     ,-- beq.s c4a0 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c492:	|     |   pea 195b2 <PutChar+0x16ba>
    c498:	|     |   jsr 17456 <KPrintF>
    c49e:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c4a0:	|     '-> move.l 14(sp),d1
    c4a4:	|         move.l 1cc46 <fileTime>,d0
    c4aa:	|         cmp.l d1,d0
    c4ac:	|     ,-- bne.s c4bc <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c4ae:	|     |   move.l 18(sp),d1
    c4b2:	|     |   move.l 1cc4a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c4b8:	|     |   cmp.l d1,d0
    c4ba:	|  ,--|-- beq.s c4dc <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c4bc:	|  |  '-> move.l 144(sp),-(sp)
    c4c0:	|  |      pea 195ce <PutChar+0x16d6>
    c4c6:	|  |      pea 19695 <PutChar+0x179d>
    c4cc:	|  |      jsr 17456 <KPrintF>
    c4d2:	|  |      lea 12(sp),sp
		return FALSE; 
    c4d6:	|  |      clr.w d0
    c4d8:	+--|----- bra.w c6f4 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c4dc:	|  '----> move.l 112(sp),124(sp)
    c4e2:	|         move.l 1ccac <DOSBase>,d0
    c4e8:	|         movea.l d0,a6
    c4ea:	|         move.l 124(sp),d1
    c4ee:	|         jsr -306(a6)
    c4f2:	|         move.l d0,136(sp)
    c4f6:	|         move.l 136(sp),d0
    c4fa:	|         move.l d0,d0
    c4fc:	|         move.w d0,1c4f4 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c502:	|         move.l 112(sp),100(sp)
    c508:	|         move.l 1ccac <DOSBase>,d0
    c50e:	|         movea.l d0,a6
    c510:	|         move.l 100(sp),d1
    c514:	|         jsr -306(a6)
    c518:	|         move.l d0,96(sp)
    c51c:	|         move.l 96(sp),d0
    c520:	|         move.l d0,d0
    c522:	|         move.w d0,1cc44 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c528:	|         move.l 112(sp),92(sp)
    c52e:	|         move.l 1ccac <DOSBase>,d0
    c534:	|         movea.l d0,a6
    c536:	|         move.l 92(sp),d1
    c53a:	|         jsr -306(a6)
    c53e:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c542:	|         move.l 112(sp),84(sp)
    c548:	|         move.l 1ccac <DOSBase>,d0
    c54e:	|         movea.l d0,a6
    c550:	|         move.l 84(sp),d1
    c554:	|         jsr -306(a6)
    c558:	|         move.l d0,80(sp)
    c55c:	|         move.l 80(sp),d0
    c560:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c564:	|     ,-- beq.s c598 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c566:	|     |   move.l 112(sp),-(sp)
    c56a:	|     |   jsr 6bc <get2bytes>
    c570:	|     |   addq.l #4,sp
    c572:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c576:	|     |   move.l 112(sp),-(sp)
    c57a:	|     |   jsr 6bc <get2bytes>
    c580:	|     |   addq.l #4,sp
    c582:	|     |   move.l d0,1cd98 <fontHeight>
		charOrder = readString(fp);		
    c588:	|     |   move.l 112(sp),-(sp)
    c58c:	|     |   jsr b02 <readString>
    c592:	|     |   addq.l #4,sp
    c594:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c598:	|     '-> move.l 104(sp),70(sp)
    c59e:	|         move.l 1cca4 <SysBase>,d0
    c5a4:	|         movea.l d0,a6
    c5a6:	|         movea.l 70(sp),a1
    c5aa:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c5ae:	|         move.l 112(sp),-(sp)
    c5b2:	|         jsr 854 <getSigned>
    c5b8:	|         addq.l #4,sp
    c5ba:	|         move.w d0,1cb9c <fontSpace>

	killAllPeople ();
    c5c0:	|         jsr ab30 <killAllPeople>
	killAllRegions ();
    c5c6:	|         jsr 15c66 <killAllRegions>

	int camerX = get2bytes (fp);
    c5cc:	|         move.l 112(sp),-(sp)
    c5d0:	|         jsr 6bc <get2bytes>
    c5d6:	|         addq.l #4,sp
    c5d8:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c5dc:	|         move.l 112(sp),-(sp)
    c5e0:	|         jsr 6bc <get2bytes>
    c5e6:	|         addq.l #4,sp
    c5e8:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c5ec:	|         move.l 112(sp),-(sp)
    c5f0:	|         jsr 7d8 <getFloat>
    c5f6:	|         addq.l #4,sp
    c5f8:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c5fc:	|         move.l 112(sp),54(sp)
    c602:	|         move.l 1ccac <DOSBase>,d0
    c608:	|         movea.l d0,a6
    c60a:	|         move.l 54(sp),d1
    c60e:	|         jsr -306(a6)
    c612:	|         move.l d0,50(sp)
    c616:	|         move.l 50(sp),d0
    c61a:	|         move.l d0,d0
    c61c:	|         move.b d0,1c612 <brightnessLevel>

	loadHandlers (fp);
    c622:	|         move.l 112(sp),-(sp)
    c626:	|         jsr 6dd0 <loadHandlers>
    c62c:	|         addq.l #4,sp
	loadRegions (fp);
    c62e:	|         move.l 112(sp),-(sp)
    c632:	|         jsr 15cc2 <loadRegions>
    c638:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c63a:	|         moveq #12,d0
    c63c:	|         move.l d0,46(sp)
    c640:	|         clr.l 42(sp)
    c644:	|         move.l 1cca4 <SysBase>,d0
    c64a:	|         movea.l d0,a6
    c64c:	|         move.l 46(sp),d0
    c650:	|         move.l 42(sp),d1
    c654:	|         jsr -684(a6)
    c658:	|         move.l d0,38(sp)
    c65c:	|         move.l 38(sp),d0
    c660:	|         move.l d0,1cb9e <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c666:	|         move.l 1cb9e <mouseCursorAnim>,d0
    c66c:	|     ,-- bne.s c680 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c66e:	|     |   pea 1969f <PutChar+0x17a7>
    c674:	|     |   jsr 17456 <KPrintF>
    c67a:	|     |   addq.l #4,sp
		return FALSE;
    c67c:	|     |   clr.w d0
    c67e:	+-----|-- bra.s c6f4 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c680:	|     '-> jsr d524 <nosnapshot>
	if (FGetC (fp)) {
    c686:	|         move.l 112(sp),34(sp)
    c68c:	|         move.l 1ccac <DOSBase>,d0
    c692:	|         movea.l d0,a6
    c694:	|         move.l 34(sp),d1
    c698:	|         jsr -306(a6)
    c69c:	|         move.l d0,30(sp)
    c6a0:	|         move.l 30(sp),d0
    c6a4:	|     ,-- beq.s c6ba <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c6a6:	|     |   move.l 112(sp),-(sp)
    c6aa:	|     |   jsr d5a4 <restoreSnapshot>
    c6b0:	|     |   addq.l #4,sp
    c6b2:	|     |   tst.w d0
    c6b4:	|     +-- bne.s c6ba <loadGame+0x2bc>
    c6b6:	|     |   clr.w d0
    c6b8:	+-----|-- bra.s c6f4 <loadGame+0x2f6>
	}

	Close (fp);
    c6ba:	|     '-> move.l 112(sp),26(sp)
    c6c0:	|         move.l 1ccac <DOSBase>,d0
    c6c6:	|         movea.l d0,a6
    c6c8:	|         move.l 26(sp),d1
    c6cc:	|         jsr -36(a6)
    c6d0:	|         move.l d0,22(sp)
	clearStackLib ();
    c6d4:	|         jsr c3b4 <clearStackLib>

	cameraX = camerX;
    c6da:	|         move.l 66(sp),1cd5a <cameraX>
	cameraY = camerY;
    c6e2:	|         move.l 62(sp),1cd5e <cameraY>
	cameraZoom = camerZ;
    c6ea:	|         move.l 58(sp),1c636 <cameraZoom>

	return TRUE;
    c6f2:	|         moveq #1,d0
}
    c6f4:	'-------> movem.l (sp)+,d2-d3/a6
    c6f8:	          lea 128(sp),sp
    c6fc:	          rts

0000c6fe <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c6fe:	   ,-> lea -64(sp),sp
    c702:	   |   move.l a6,-(sp)
    c704:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c706:	   |   movea.l 76(sp),a0
    c70a:	   |   move.l (a0),d0
    c70c:	   |   move.l 80(sp),-(sp)
    c710:	   |   move.l d0,-(sp)
    c712:	   |   jsr 8d0 <put2bytes>
    c718:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c71a:	   |   movea.l 76(sp),a0
    c71e:	   |   move.l 40(a0),d0
    c722:	,--|-- beq.s c75e <saveFunction+0x60>
		FPutC (fp, 1);
    c724:	|  |   move.l 80(sp),52(sp)
    c72a:	|  |   moveq #1,d0
    c72c:	|  |   move.l d0,48(sp)
    c730:	|  |   move.l 1ccac <DOSBase>,d0
    c736:	|  |   movea.l d0,a6
    c738:	|  |   move.l 52(sp),d1
    c73c:	|  |   move.l 48(sp),d2
    c740:	|  |   jsr -312(a6)
    c744:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c748:	|  |   movea.l 76(sp),a0
    c74c:	|  |   move.l 40(a0),d0
    c750:	|  |   move.l 80(sp),-(sp)
    c754:	|  |   move.l d0,-(sp)
    c756:	|  '-- jsr c6fe <saveFunction>(pc)
    c75a:	|      addq.l #8,sp
    c75c:	|  ,-- bra.s c780 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c75e:	'--|-> move.l 80(sp),64(sp)
    c764:	   |   clr.l 60(sp)
    c768:	   |   move.l 1ccac <DOSBase>,d0
    c76e:	   |   movea.l d0,a6
    c770:	   |   move.l 64(sp),d1
    c774:	   |   move.l 60(sp),d2
    c778:	   |   jsr -312(a6)
    c77c:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c780:	   '-> movea.l 76(sp),a0
    c784:	       move.l 12(a0),d0
    c788:	       move.l 80(sp),-(sp)
    c78c:	       move.l d0,-(sp)
    c78e:	       jsr 958 <put4bytes>
    c794:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c796:	       movea.l 76(sp),a0
    c79a:	       move.l 36(a0),d0
    c79e:	       move.l 80(sp),-(sp)
    c7a2:	       move.l d0,-(sp)
    c7a4:	       jsr 8d0 <put2bytes>
    c7aa:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c7ac:	       move.l 80(sp),40(sp)
    c7b2:	       movea.l 76(sp),a0
    c7b6:	       move.w 54(a0),d0
    c7ba:	       movea.w d0,a0
    c7bc:	       move.l a0,36(sp)
    c7c0:	       move.l 1ccac <DOSBase>,d0
    c7c6:	       movea.l d0,a6
    c7c8:	       move.l 40(sp),d1
    c7cc:	       move.l 36(sp),d2
    c7d0:	       jsr -312(a6)
    c7d4:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c7d8:	       move.l 80(sp),28(sp)
    c7de:	       movea.l 76(sp),a0
    c7e2:	       move.w 48(a0),d0
    c7e6:	       movea.w d0,a0
    c7e8:	       move.l a0,24(sp)
    c7ec:	       move.l 1ccac <DOSBase>,d0
    c7f2:	       movea.l d0,a6
    c7f4:	       move.l 28(sp),d1
    c7f8:	       move.l 24(sp),d2
    c7fc:	       jsr -312(a6)
    c800:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c804:	       move.l 80(sp),16(sp)
    c80a:	       movea.l 76(sp),a0
    c80e:	       move.w 50(a0),d0
    c812:	       movea.w d0,a0
    c814:	       move.l a0,12(sp)
    c818:	       move.l 1ccac <DOSBase>,d0
    c81e:	       movea.l d0,a6
    c820:	       move.l 16(sp),d1
    c824:	       move.l 12(sp),d2
    c828:	       jsr -312(a6)
    c82c:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c830:	       moveq #28,d0
    c832:	       add.l 76(sp),d0
    c836:	       move.l 80(sp),-(sp)
    c83a:	       move.l d0,-(sp)
    c83c:	       jsr cf56 <saveVariable>
    c842:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c844:	       movea.l 76(sp),a0
    c848:	       move.b 56(a0),d0
    c84c:	   ,-- beq.s c85c <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c84e:	   |   pea 196c0 <PutChar+0x17c8>
    c854:	   |   jsr 17456 <KPrintF>
    c85a:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c85c:	   '-> movea.l 76(sp),a0
    c860:	       move.l 24(a0),d0
    c864:	       move.l 80(sp),-(sp)
    c868:	       move.l d0,-(sp)
    c86a:	       jsr cdca <saveStack>
    c870:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c872:	       clr.l 68(sp)
    c876:	   ,-- bra.s c89a <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c878:	,--|-> movea.l 76(sp),a0
    c87c:	|  |   move.l 20(a0),d1
    c880:	|  |   move.l 68(sp),d0
    c884:	|  |   lsl.l #3,d0
    c886:	|  |   add.l d1,d0
    c888:	|  |   move.l 80(sp),-(sp)
    c88c:	|  |   move.l d0,-(sp)
    c88e:	|  |   jsr cf56 <saveVariable>
    c894:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c896:	|  |   addq.l #1,68(sp)
    c89a:	|  '-> movea.l 76(sp),a0
    c89e:	|      move.l 8(a0),d0
    c8a2:	|      cmp.l 68(sp),d0
    c8a6:	'----- bgt.s c878 <saveFunction+0x17a>
	}
}
    c8a8:	       nop
    c8aa:	       nop
    c8ac:	       move.l (sp)+,d2
    c8ae:	       movea.l (sp)+,a6
    c8b0:	       lea 64(sp),sp
    c8b4:	       rts

0000c8b6 <saveGame>:

BOOL saveGame (char * fname) {
    c8b6:	          lea -248(sp),sp
    c8ba:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c8be:	          move.l 264(sp),244(sp)
    c8c4:	          move.l #1006,240(sp)
    c8cc:	          move.l 1ccac <DOSBase>,d0
    c8d2:	          movea.l d0,a6
    c8d4:	          move.l 244(sp),d1
    c8d8:	          move.l 240(sp),d2
    c8dc:	          jsr -30(a6)
    c8e0:	          move.l d0,236(sp)
    c8e4:	          move.l 236(sp),d0
    c8e8:	          move.l d0,232(sp)
	if (fp == NULL) {
    c8ec:	      ,-- bne.s c902 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c8ee:	      |   pea 196e2 <PutChar+0x17ea>
    c8f4:	      |   jsr 17456 <KPrintF>
    c8fa:	      |   addq.l #4,sp
		return FALSE;
    c8fc:	      |   clr.w d0
    c8fe:	,-----|-- bra.w cdc0 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c902:	|     '-> move.l 232(sp),228(sp)
    c908:	|         move.l #104191,224(sp)
    c910:	|         moveq #6,d0
    c912:	|         move.l d0,220(sp)
    c916:	|         move.l 1ccac <DOSBase>,d0
    c91c:	|         movea.l d0,a6
    c91e:	|         move.l 228(sp),d1
    c922:	|         move.l 224(sp),d2
    c926:	|         move.l 220(sp),d3
    c92a:	|         jsr -48(a6)
    c92e:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c932:	|         move.l 232(sp),212(sp)
    c938:	|         clr.l 208(sp)
    c93c:	|         move.l 1ccac <DOSBase>,d0
    c942:	|         movea.l d0,a6
    c944:	|         move.l 212(sp),d1
    c948:	|         move.l 208(sp),d2
    c94c:	|         jsr -312(a6)
    c950:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c954:	|         move.l 232(sp),200(sp)
    c95a:	|         clr.l 196(sp)
    c95e:	|         move.l 1ccac <DOSBase>,d0
    c964:	|         movea.l d0,a6
    c966:	|         move.l 200(sp),d1
    c96a:	|         move.l 196(sp),d2
    c96e:	|         jsr -312(a6)
    c972:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c976:	|         move.l 232(sp),188(sp)
    c97c:	|         moveq #2,d0
    c97e:	|         move.l d0,184(sp)
    c982:	|         move.l 1ccac <DOSBase>,d0
    c988:	|         movea.l d0,a6
    c98a:	|         move.l 188(sp),d1
    c98e:	|         move.l 184(sp),d2
    c992:	|         jsr -312(a6)
    c996:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c99a:	|         move.l 232(sp),176(sp)
    c9a0:	|         moveq #2,d0
    c9a2:	|         move.l d0,172(sp)
    c9a6:	|         move.l 1ccac <DOSBase>,d0
    c9ac:	|         movea.l d0,a6
    c9ae:	|         move.l 176(sp),d1
    c9b2:	|         move.l 172(sp),d2
    c9b6:	|         jsr -312(a6)
    c9ba:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c9be:	|         move.l 232(sp),164(sp)
    c9c4:	|         move.l #117830,160(sp)
    c9cc:	|         moveq #8,d0
    c9ce:	|         move.l d0,156(sp)
    c9d2:	|         move.l 1ccac <DOSBase>,d0
    c9d8:	|         movea.l d0,a6
    c9da:	|         move.l 164(sp),d1
    c9de:	|         move.l 160(sp),d2
    c9e2:	|         move.l 156(sp),d3
    c9e6:	|         jsr -48(a6)
    c9ea:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c9ee:	|         move.l 232(sp),148(sp)
    c9f4:	|         move.w 1c4f4 <allowAnyFilename>,d0
    c9fa:	|         movea.w d0,a0
    c9fc:	|         move.l a0,144(sp)
    ca00:	|         move.l 1ccac <DOSBase>,d0
    ca06:	|         movea.l d0,a6
    ca08:	|         move.l 148(sp),d1
    ca0c:	|         move.l 144(sp),d2
    ca10:	|         jsr -312(a6)
    ca14:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    ca18:	|         move.l 232(sp),136(sp)
    ca1e:	|         move.w 1cc44 <captureAllKeys>,d0
    ca24:	|         movea.w d0,a0
    ca26:	|         move.l a0,132(sp)
    ca2a:	|         move.l 1ccac <DOSBase>,d0
    ca30:	|         movea.l d0,a6
    ca32:	|         move.l 136(sp),d1
    ca36:	|         move.l 132(sp),d2
    ca3a:	|         jsr -312(a6)
    ca3e:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    ca42:	|         move.l 232(sp),124(sp)
    ca48:	|         moveq #1,d0
    ca4a:	|         move.l d0,120(sp)
    ca4e:	|         move.l 1ccac <DOSBase>,d0
    ca54:	|         movea.l d0,a6
    ca56:	|         move.l 124(sp),d1
    ca5a:	|         move.l 120(sp),d2
    ca5e:	|         jsr -312(a6)
    ca62:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    ca66:	|         move.l 232(sp),112(sp)
    ca6c:	|         move.l 1cda8 <fontTableSize>,d0
    ca72:	|         sgt d0
    ca74:	|         neg.b d0
    ca76:	|         move.b d0,d0
    ca78:	|         andi.l #255,d0
    ca7e:	|         move.l d0,108(sp)
    ca82:	|         move.l 1ccac <DOSBase>,d0
    ca88:	|         movea.l d0,a6
    ca8a:	|         move.l 112(sp),d1
    ca8e:	|         move.l 108(sp),d2
    ca92:	|         jsr -312(a6)
    ca96:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    ca9a:	|         move.l 1cda8 <fontTableSize>,d0
    caa0:	|     ,-- ble.s cade <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    caa2:	|     |   move.l 1cd9c <loadedFontNum>,d0
    caa8:	|     |   move.l 232(sp),-(sp)
    caac:	|     |   move.l d0,-(sp)
    caae:	|     |   jsr 8d0 <put2bytes>
    cab4:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    cab6:	|     |   move.l 1cd98 <fontHeight>,d0
    cabc:	|     |   move.l 232(sp),-(sp)
    cac0:	|     |   move.l d0,-(sp)
    cac2:	|     |   jsr 8d0 <put2bytes>
    cac8:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    caca:	|     |   move.l 1cda0 <fontOrderString>,d0
    cad0:	|     |   move.l 232(sp),-(sp)
    cad4:	|     |   move.l d0,-(sp)
    cad6:	|     |   jsr bd8 <writeString>
    cadc:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    cade:	|     '-> move.w 1cb9c <fontSpace>,d0
    cae4:	|         movea.w d0,a0
    cae6:	|         move.l 232(sp),-(sp)
    caea:	|         move.l a0,-(sp)
    caec:	|         jsr a9c <putSigned>
    caf2:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    caf4:	|         move.l 1cd5a <cameraX>,d0
    cafa:	|         move.l 232(sp),-(sp)
    cafe:	|         move.l d0,-(sp)
    cb00:	|         jsr 8d0 <put2bytes>
    cb06:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cb08:	|         move.l 1cd5e <cameraY>,d0
    cb0e:	|         move.l 232(sp),-(sp)
    cb12:	|         move.l d0,-(sp)
    cb14:	|         jsr 8d0 <put2bytes>
    cb1a:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    cb1c:	|         move.l 1c636 <cameraZoom>,d0
    cb22:	|         move.l 232(sp),-(sp)
    cb26:	|         move.l d0,-(sp)
    cb28:	|         jsr a46 <putFloat>
    cb2e:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cb30:	|         move.l 232(sp),100(sp)
    cb36:	|         move.b 1c612 <brightnessLevel>,d0
    cb3c:	|         move.b d0,d0
    cb3e:	|         andi.l #255,d0
    cb44:	|         move.l d0,96(sp)
    cb48:	|         move.l 1ccac <DOSBase>,d0
    cb4e:	|         movea.l d0,a6
    cb50:	|         move.l 100(sp),d1
    cb54:	|         move.l 96(sp),d2
    cb58:	|         jsr -312(a6)
    cb5c:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cb60:	|         move.l 232(sp),-(sp)
    cb64:	|         jsr 73ba <saveHandlers>
    cb6a:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cb6c:	|         move.l 232(sp),-(sp)
    cb70:	|         jsr 15e7c <saveRegions>
    cb76:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cb78:	|         move.l 1cb9e <mouseCursorAnim>,d0
    cb7e:	|         move.l 232(sp),-(sp)
    cb82:	|         move.l d0,-(sp)
    cb84:	|         jsr b0da <saveAnim>
    cb8a:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cb8c:	|         move.l 1cba2 <mouseCursorFrameNum>,d0
    cb92:	|         move.l 232(sp),-(sp)
    cb96:	|         move.l d0,-(sp)
    cb98:	|         jsr 8d0 <put2bytes>
    cb9e:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cba0:	|         move.l 1cc3c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cba8:	|         clr.l 248(sp)
	while (thisFunction) {
    cbac:	|     ,-- bra.s cbbc <saveGame+0x306>
		countFunctions ++;
    cbae:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cbb2:	|  |  |   movea.l 252(sp),a0
    cbb6:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cbbc:	|  |  '-> tst.l 252(sp)
    cbc0:	|  '----- bne.s cbae <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cbc2:	|         move.l 232(sp),-(sp)
    cbc6:	|         move.l 252(sp),-(sp)
    cbca:	|         jsr 8d0 <put2bytes>
    cbd0:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cbd2:	|         move.l 1cc3c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cbda:	|     ,-- bra.s cbf6 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cbdc:	|  ,--|-> move.l 232(sp),-(sp)
    cbe0:	|  |  |   move.l 256(sp),-(sp)
    cbe4:	|  |  |   jsr c6fe <saveFunction>
    cbea:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cbec:	|  |  |   movea.l 252(sp),a0
    cbf0:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cbf6:	|  |  '-> tst.l 252(sp)
    cbfa:	|  '----- bne.s cbdc <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cbfc:	|         clr.l 256(sp)
    cc00:	|     ,-- bra.s cc22 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cc02:	|  ,--|-> move.l 1cc52 <globalVars>,d1
    cc08:	|  |  |   move.l 256(sp),d0
    cc0c:	|  |  |   lsl.l #3,d0
    cc0e:	|  |  |   add.l d1,d0
    cc10:	|  |  |   move.l 232(sp),-(sp)
    cc14:	|  |  |   move.l d0,-(sp)
    cc16:	|  |  |   jsr cf56 <saveVariable>
    cc1c:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cc1e:	|  |  |   addq.l #1,256(sp)
    cc22:	|  |  '-> move.l 1cc7c <numGlobals>,d0
    cc28:	|  |      cmp.l 256(sp),d0
    cc2c:	|  '----- bgt.s cc02 <saveGame+0x34c>
	}

	savePeople (fp);
    cc2e:	|         move.l 232(sp),-(sp)
    cc32:	|         jsr b202 <savePeople>
    cc38:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cc3a:	|         movea.l 1cdbc <currentFloor>,a0
    cc40:	|         move.l 8(a0),d0
    cc44:	|  ,----- beq.s cc82 <saveGame+0x3cc>
		FPutC (fp, 1);
    cc46:	|  |      move.l 232(sp),76(sp)
    cc4c:	|  |      moveq #1,d0
    cc4e:	|  |      move.l d0,72(sp)
    cc52:	|  |      move.l 1ccac <DOSBase>,d0
    cc58:	|  |      movea.l d0,a6
    cc5a:	|  |      move.l 76(sp),d1
    cc5e:	|  |      move.l 72(sp),d2
    cc62:	|  |      jsr -312(a6)
    cc66:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cc6a:	|  |      movea.l 1cdbc <currentFloor>,a0
    cc70:	|  |      move.l (a0),d0
    cc72:	|  |      move.l 232(sp),-(sp)
    cc76:	|  |      move.l d0,-(sp)
    cc78:	|  |      jsr 8d0 <put2bytes>
    cc7e:	|  |      addq.l #8,sp
    cc80:	|  |  ,-- bra.s cca4 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cc82:	|  '--|-> move.l 232(sp),88(sp)
    cc88:	|     |   clr.l 84(sp)
    cc8c:	|     |   move.l 1ccac <DOSBase>,d0
    cc92:	|     |   movea.l d0,a6
    cc94:	|     |   move.l 88(sp),d1
    cc98:	|     |   move.l 84(sp),d2
    cc9c:	|     |   jsr -312(a6)
    cca0:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cca4:	|     '-> move.l 232(sp),64(sp)
    ccaa:	|         move.l 1cd6e <speechMode>,60(sp)
    ccb2:	|         move.l 1ccac <DOSBase>,d0
    ccb8:	|         movea.l d0,a6
    ccba:	|         move.l 64(sp),d1
    ccbe:	|         move.l 60(sp),d2
    ccc2:	|         jsr -312(a6)
    ccc6:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    ccca:	|         move.b 1cb72 <fadeMode>,d0
    ccd0:	|         move.b d0,d0
    ccd2:	|         andi.l #255,d0
    ccd8:	|         move.l d0,52(sp)
    ccdc:	|         move.l 232(sp),48(sp)
    cce2:	|         move.l 1ccac <DOSBase>,d0
    cce8:	|         movea.l d0,a6
    ccea:	|         move.l 52(sp),d1
    ccee:	|         move.l 48(sp),d2
    ccf2:	|         jsr -312(a6)
    ccf6:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    ccfa:	|         move.l 1cbf4 <speech>,d0
    cd00:	|         move.l 232(sp),-(sp)
    cd04:	|         move.l d0,-(sp)
    cd06:	|         jsr 416c <saveSpeech>
    cd0c:	|         addq.l #8,sp
	saveStatusBars (fp);
    cd0e:	|         move.l 232(sp),-(sp)
    cd12:	|         jsr 8534 <saveStatusBars>
    cd18:	|         addq.l #4,sp
	saveSounds (fp);
    cd1a:	|         move.l 232(sp),-(sp)
    cd1e:	|         jsr d2c8 <saveSounds>
    cd24:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cd26:	|         move.w 1cd58 <saveEncoding>,d0
    cd2c:	|         move.w d0,d0
    cd2e:	|         andi.l #65535,d0
    cd34:	|         move.l 232(sp),-(sp)
    cd38:	|         move.l d0,-(sp)
    cd3a:	|         jsr 8d0 <put2bytes>
    cd40:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cd42:	|         move.l 1cd4a <parallaxStuff>,d0
    cd48:	|         move.l 232(sp),-(sp)
    cd4c:	|         move.l d0,-(sp)
    cd4e:	|         jsr d5ca <saveParallaxRecursive>
    cd54:	|         addq.l #8,sp
	FPutC (fp, 0);
    cd56:	|         move.l 232(sp),40(sp)
    cd5c:	|         clr.l 36(sp)
    cd60:	|         move.l 1ccac <DOSBase>,d0
    cd66:	|         movea.l d0,a6
    cd68:	|         move.l 40(sp),d1
    cd6c:	|         move.l 36(sp),d2
    cd70:	|         jsr -312(a6)
    cd74:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cd78:	|         move.l 232(sp),28(sp)
    cd7e:	|         move.l 1c618 <languageNum>,24(sp)
    cd86:	|         move.l 1ccac <DOSBase>,d0
    cd8c:	|         movea.l d0,a6
    cd8e:	|         move.l 28(sp),d1
    cd92:	|         move.l 24(sp),d2
    cd96:	|         jsr -312(a6)
    cd9a:	|         move.l d0,20(sp)

	Close(fp);
    cd9e:	|         move.l 232(sp),16(sp)
    cda4:	|         move.l 1ccac <DOSBase>,d0
    cdaa:	|         movea.l d0,a6
    cdac:	|         move.l 16(sp),d1
    cdb0:	|         jsr -36(a6)
    cdb4:	|         move.l d0,12(sp)
	clearStackLib ();
    cdb8:	|         jsr c3b4 <clearStackLib>
	return TRUE;
    cdbe:	|         moveq #1,d0
}
    cdc0:	'-------> movem.l (sp)+,d2-d3/a6
    cdc4:	          lea 248(sp),sp
    cdc8:	          rts

0000cdca <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cdca:	       lea -12(sp),sp
	int elements = 0;
    cdce:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cdd2:	       move.l 16(sp),(sp)
	while (search) {
    cdd6:	   ,-- bra.s cde2 <saveStack+0x18>
		elements ++;
    cdd8:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cddc:	|  |   movea.l (sp),a0
    cdde:	|  |   move.l 8(a0),(sp)
	while (search) {
    cde2:	|  '-> tst.l (sp)
    cde4:	'----- bne.s cdd8 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cde6:	       move.l 20(sp),-(sp)
    cdea:	       move.l 12(sp),-(sp)
    cdee:	       jsr 8d0 <put2bytes>
    cdf4:	       addq.l #8,sp
	search = vs;
    cdf6:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cdfa:	       clr.l 4(sp)
    cdfe:	   ,-- bra.s ce1a <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    ce00:	,--|-> move.l (sp),d0
    ce02:	|  |   move.l 20(sp),-(sp)
    ce06:	|  |   move.l d0,-(sp)
    ce08:	|  |   jsr cf56 <saveVariable>
    ce0e:	|  |   addq.l #8,sp
		search = search -> next;
    ce10:	|  |   movea.l (sp),a0
    ce12:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    ce16:	|  |   addq.l #1,4(sp)
    ce1a:	|  '-> move.l 4(sp),d0
    ce1e:	|      cmp.l 8(sp),d0
    ce22:	'----- blt.s ce00 <saveStack+0x36>
	}
}
    ce24:	       nop
    ce26:	       nop
    ce28:	       lea 12(sp),sp
    ce2c:	       rts

0000ce2e <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ce2e:	             lea -44(sp),sp
    ce32:	             move.l a6,-(sp)
    ce34:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ce36:	             move.l 1cd30 <stackLib>,48(sp)
	int a = 0;
    ce3e:	             clr.l 44(sp)
	while (s) {
    ce42:	      ,----- bra.s cea0 <saveStackRef+0x72>
		if (s -> stack == vs) {
    ce44:	   ,--|----> movea.l 48(sp),a0
    ce48:	   |  |      move.l (a0),d0
    ce4a:	   |  |      cmp.l 56(sp),d0
    ce4e:	   |  |  ,-- bne.s ce92 <saveStackRef+0x64>
			FPutC (fp, 1);
    ce50:	   |  |  |   move.l 60(sp),16(sp)
    ce56:	   |  |  |   moveq #1,d0
    ce58:	   |  |  |   move.l d0,12(sp)
    ce5c:	   |  |  |   move.l 1ccac <DOSBase>,d0
    ce62:	   |  |  |   movea.l d0,a6
    ce64:	   |  |  |   move.l 16(sp),d1
    ce68:	   |  |  |   move.l 12(sp),d2
    ce6c:	   |  |  |   jsr -312(a6)
    ce70:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ce74:	   |  |  |   move.l 1cd2c <stackLibTotal>,d0
    ce7a:	   |  |  |   sub.l 44(sp),d0
    ce7e:	   |  |  |   move.l 60(sp),-(sp)
    ce82:	   |  |  |   move.l d0,-(sp)
    ce84:	   |  |  |   jsr 8d0 <put2bytes>
    ce8a:	   |  |  |   addq.l #8,sp
			return TRUE;
    ce8c:	   |  |  |   moveq #1,d0
    ce8e:	,--|--|--|-- bra.w cf4c <saveStackRef+0x11e>
		}
		s = s -> next;
    ce92:	|  |  |  '-> movea.l 48(sp),a0
    ce96:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ce9c:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cea0:	|  |  '----> tst.l 48(sp)
    cea4:	|  '-------- bne.s ce44 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cea6:	|            move.l 60(sp),40(sp)
    ceac:	|            clr.l 36(sp)
    ceb0:	|            move.l 1ccac <DOSBase>,d0
    ceb6:	|            movea.l d0,a6
    ceb8:	|            move.l 40(sp),d1
    cebc:	|            move.l 36(sp),d2
    cec0:	|            jsr -312(a6)
    cec4:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cec8:	|            movea.l 56(sp),a0
    cecc:	|            move.l (a0),d0
    cece:	|            move.l 60(sp),-(sp)
    ced2:	|            move.l d0,-(sp)
    ced4:	|            jsr cdca <saveStack>
    ceda:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cedc:	|            moveq #8,d0
    cede:	|            move.l d0,28(sp)
    cee2:	|            clr.l 24(sp)
    cee6:	|            move.l 1cca4 <SysBase>,d0
    ceec:	|            movea.l d0,a6
    ceee:	|            move.l 28(sp),d0
    cef2:	|            move.l 24(sp),d1
    cef6:	|            jsr -684(a6)
    cefa:	|            move.l d0,20(sp)
    cefe:	|            move.l 20(sp),d0
    cf02:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cf06:	|            move.l 1cd2c <stackLibTotal>,d0
    cf0c:	|            addq.l #1,d0
    cf0e:	|            move.l d0,1cd2c <stackLibTotal>
	if (! s) {
    cf14:	|            tst.l 48(sp)
    cf18:	|        ,-- bne.s cf2c <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cf1a:	|        |   pea 1972e <PutChar+0x1836>
    cf20:	|        |   jsr 17456 <KPrintF>
    cf26:	|        |   addq.l #4,sp
		return FALSE;
    cf28:	|        |   clr.w d0
    cf2a:	+--------|-- bra.s cf4c <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cf2c:	|        '-> move.l 1cd30 <stackLib>,d0
    cf32:	|            movea.l 48(sp),a0
    cf36:	|            move.l d0,4(a0)
	s -> stack = vs;
    cf3a:	|            movea.l 48(sp),a0
    cf3e:	|            move.l 56(sp),(a0)
	stackLib = s;
    cf42:	|            move.l 48(sp),1cd30 <stackLib>
	return TRUE;
    cf4a:	|            moveq #1,d0
}
    cf4c:	'----------> move.l (sp)+,d2
    cf4e:	             movea.l (sp)+,a6
    cf50:	             lea 44(sp),sp
    cf54:	             rts

0000cf56 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cf56:	          lea -12(sp),sp
    cf5a:	          move.l a6,-(sp)
    cf5c:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cf5e:	          move.l 28(sp),16(sp)
    cf64:	          movea.l 24(sp),a0
    cf68:	          move.l (a0),d0
    cf6a:	          move.l d0,12(sp)
    cf6e:	          move.l 1ccac <DOSBase>,d0
    cf74:	          movea.l d0,a6
    cf76:	          move.l 16(sp),d1
    cf7a:	          move.l 12(sp),d2
    cf7e:	          jsr -312(a6)
    cf82:	          move.l d0,8(sp)
	switch (from -> varType) {
    cf86:	          movea.l 24(sp),a0
    cf8a:	          move.l (a0),d0
    cf8c:	          moveq #9,d1
    cf8e:	          cmp.l d0,d1
    cf90:	      ,-- bcs.w d040 <saveVariable+0xea>
    cf94:	      |   add.l d0,d0
    cf96:	      |   movea.l d0,a0
    cf98:	      |   adda.l #53156,a0
    cf9e:	      |   move.w (a0),d0
    cfa0:	      |   jmp (cfa4 <saveVariable+0x4e>,pc,d0.w)
    cfa4:	      |   ori.l #1310740,(a0)+
    cfaa:	      |   ori.b #20,(20,a0,d0.w)
    cfb0:	      |   .short 0x004c
    cfb2:	      |   ori.b #126,(a4)
    cfb6:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cfba:	      |   ori.b #40,(a0)+
    cfbe:	      |   ori.b #47,d4
    cfc2:	      |   ori.b #0,(a4)+
    cfc6:	      |   jsr 958 <put4bytes>
    cfcc:	      |   addq.l #8,sp
		return TRUE;
    cfce:	      |   moveq #1,d0
    cfd0:	,-----|-- bra.w d07c <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cfd4:	|     |   movea.l 24(sp),a0
    cfd8:	|     |   move.l 4(a0),d0
    cfdc:	|     |   move.l 28(sp),-(sp)
    cfe0:	|     |   move.l d0,-(sp)
    cfe2:	|     |   jsr bd8 <writeString>
    cfe8:	|     |   addq.l #8,sp
		return TRUE;
    cfea:	|     |   moveq #1,d0
    cfec:	+-----|-- bra.w d07c <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cff0:	|     |   movea.l 24(sp),a0
    cff4:	|     |   move.l 4(a0),d0
    cff8:	|     |   move.l 28(sp),-(sp)
    cffc:	|     |   move.l d0,-(sp)
    cffe:	|     |   jsr ce2e <saveStackRef>
    d004:	|     |   addq.l #8,sp
    d006:	+-----|-- bra.s d07c <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d008:	|     |   movea.l 24(sp),a0
    d00c:	|     |   move.l 4(a0),d0
    d010:	|     |   move.l 28(sp),-(sp)
    d014:	|     |   move.l d0,-(sp)
    d016:	|     |   jsr b1a4 <saveCostume>
    d01c:	|     |   addq.l #8,sp
		return FALSE;
    d01e:	|     |   clr.w d0
    d020:	+-----|-- bra.s d07c <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d022:	|     |   movea.l 24(sp),a0
    d026:	|     |   move.l 4(a0),d0
    d02a:	|     |   move.l 28(sp),-(sp)
    d02e:	|     |   move.l d0,-(sp)
    d030:	|     |   jsr b0da <saveAnim>
    d036:	|     |   addq.l #8,sp
		return FALSE;
    d038:	|     |   clr.w d0
    d03a:	+-----|-- bra.s d07c <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d03c:	|     |   clr.w d0
    d03e:	+-----|-- bra.s d07c <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d040:	|     '-> movea.l 24(sp),a0
    d044:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d046:	|         moveq #10,d1
    d048:	|         cmp.l d0,d1
    d04a:	|  ,----- bcs.s d064 <saveVariable+0x10e>
						typeName[from->varType] :
    d04c:	|  |      movea.l 24(sp),a0
    d050:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d052:	|  |      add.l d0,d0
    d054:	|  |      movea.l d0,a1
    d056:	|  |      adda.l d0,a1
    d058:	|  |      lea 1cb74 <typeName>,a0
    d05e:	|  |      move.l (0,a1,a0.l),d0
    d062:	|  |  ,-- bra.s d06a <saveVariable+0x114>
    d064:	|  '--|-> move.l #104275,d0
    d06a:	|     '-> move.l d0,-(sp)
    d06c:	|         pea 1975a <PutChar+0x1862>
    d072:	|         jsr 17456 <KPrintF>
    d078:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d07a:	|         moveq #1,d0
    d07c:	'-------> move.l (sp)+,d2
    d07e:	          movea.l (sp)+,a6
    d080:	          lea 12(sp),sp
    d084:	          rts

0000d086 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d086:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d08a:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d092:	          movea.l 4(sp),a0
    d096:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d09c:	          movea.l 4(sp),a0
    d0a0:	          move.w 10(a0),d0
    d0a4:	          lsr.w #8,d0
    d0a6:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d0aa:	          movea.l 4(sp),a0
    d0ae:	          move.w 10(a0),d0
    d0b2:	          move.b d0,(sp)

    if(counterx_new)
    d0b4:	,-------- beq.w d15a <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d0b8:	|         clr.w d1
    d0ba:	|         move.b (sp),d1
    d0bc:	|         move.w 1cd38 <counterx_old>,d0
    d0c2:	|         sub.w d0,d1
    d0c4:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d0c8:	|         cmpi.w #128,10(sp)
    d0ce:	|     ,-- blt.s d0e6 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d0d0:	|     |   move.w #1,1cc5a <input+0x4>
            counterx_diff -= 256;    
    d0d8:	|     |   move.w 10(sp),d0
    d0dc:	|     |   addi.w #-256,d0
    d0e0:	|     |   move.w d0,10(sp)
    d0e4:	|  ,--|-- bra.s d112 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d0e6:	|  |  '-> cmpi.w #-129,10(sp)
    d0ec:	|  |  ,-- bgt.s d104 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d0ee:	|  |  |   move.w 10(sp),d0
    d0f2:	|  |  |   addi.w #256,d0
    d0f6:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d0fa:	|  |  |   move.w #1,1cc5a <input+0x4>
    d102:	|  +--|-- bra.s d112 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d104:	|  |  '-> tst.w 10(sp)
    d108:	|  +----- beq.s d112 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d10a:	|  |      move.w #1,1cc5a <input+0x4>
        }

        input.mouseX += counterx_diff;
    d112:	|  '----> move.l 1cc60 <input+0xa>,d0
    d118:	|         movea.w 10(sp),a0
    d11c:	|         add.l a0,d0
    d11e:	|         move.l d0,1cc60 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d124:	|         move.l 1cc60 <input+0xa>,d1
    d12a:	|         move.l 1cbf8 <winWidth>,d0
    d130:	|         cmp.l d1,d0
    d132:	|     ,-- bge.s d142 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d134:	|     |   move.l 1cbf8 <winWidth>,d0
    d13a:	|     |   move.l d0,1cc60 <input+0xa>
    d140:	|  ,--|-- bra.s d150 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d142:	|  |  '-> move.l 1cc60 <input+0xa>,d0
    d148:	|  +----- bpl.s d150 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d14a:	|  |      clr.l 1cc60 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d150:	|  '----> clr.w d0
    d152:	|         move.b (sp),d0
    d154:	|         move.w d0,1cd38 <counterx_old>
    }    

    if(countery_new)
    d15a:	'-------> tst.b 1(sp)
    d15e:	,-------- beq.w d208 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d162:	|         clr.w d1
    d164:	|         move.b 1(sp),d1
    d168:	|         move.w 1cd3a <countery_old>,d0
    d16e:	|         sub.w d0,d1
    d170:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d174:	|         cmpi.w #128,8(sp)
    d17a:	|     ,-- blt.s d192 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d17c:	|     |   move.w #1,1cc5a <input+0x4>
            countery_diff -= 256;    
    d184:	|     |   move.w 8(sp),d0
    d188:	|     |   addi.w #-256,d0
    d18c:	|     |   move.w d0,8(sp)
    d190:	|  ,--|-- bra.s d1be <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d192:	|  |  '-> cmpi.w #-129,8(sp)
    d198:	|  |  ,-- bgt.s d1b0 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d19a:	|  |  |   move.w #1,1cc5a <input+0x4>
            countery_diff += 256;
    d1a2:	|  |  |   move.w 8(sp),d0
    d1a6:	|  |  |   addi.w #256,d0
    d1aa:	|  |  |   move.w d0,8(sp)
    d1ae:	|  +--|-- bra.s d1be <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d1b0:	|  |  '-> tst.w 8(sp)
    d1b4:	|  +----- beq.s d1be <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d1b6:	|  |      move.w #1,1cc5a <input+0x4>
        }

        input.mouseY += countery_diff;
    d1be:	|  '----> move.l 1cc64 <input+0xe>,d0
    d1c4:	|         movea.w 8(sp),a0
    d1c8:	|         add.l a0,d0
    d1ca:	|         move.l d0,1cc64 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d1d0:	|         move.l 1cc64 <input+0xe>,d1
    d1d6:	|         move.l 1cbfc <winHeight>,d0
    d1dc:	|         cmp.l d1,d0
    d1de:	|     ,-- bge.s d1ee <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d1e0:	|     |   move.l 1cbfc <winHeight>,d0
    d1e6:	|     |   move.l d0,1cc64 <input+0xe>
    d1ec:	|  ,--|-- bra.s d1fc <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d1ee:	|  |  '-> move.l 1cc64 <input+0xe>,d0
    d1f4:	|  +----- bpl.s d1fc <CsiCheckInput+0x176>
            input.mouseY = 0;
    d1f6:	|  |      clr.l 1cc64 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d1fc:	|  '----> clr.w d0
    d1fe:	|         move.b 1(sp),d0
    d202:	|         move.w d0,1cd3a <countery_old>
    } 

    input.leftRelease = FALSE;
    d208:	'-------> clr.w 1cc5c <input+0x6>
    input.rightRelease = FALSE;
    d20e:	          clr.w 1cc5e <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d214:	          move.w 1cc56 <input>,d0
    d21a:	      ,-- beq.s d240 <CsiCheckInput+0x1ba>
    d21c:	      |   movea.l #12574721,a0
    d222:	      |   move.b (a0),d0
    d224:	      |   move.b d0,d0
    d226:	      |   andi.l #255,d0
    d22c:	      |   moveq #64,d1
    d22e:	      |   and.l d1,d0
    d230:	      +-- beq.s d240 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d232:	      |   clr.w 1cc56 <input>
        input.leftRelease = TRUE;
    d238:	      |   move.w #1,1cc5c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d240:	      '-> move.w 1cc58 <input+0x2>,d0
    d246:	      ,-- beq.s d26e <CsiCheckInput+0x1e8>
    d248:	      |   movea.l #14675990,a0
    d24e:	      |   move.w (a0),d0
    d250:	      |   move.w d0,d0
    d252:	      |   andi.l #65535,d0
    d258:	      |   andi.l #1024,d0
    d25e:	      +-- beq.s d26e <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d260:	      |   clr.w 1cc58 <input+0x2>
        input.rightRelease = TRUE;
    d266:	      |   move.w #1,1cc5e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d26e:	      '-> movea.l #12574721,a0
    d274:	          move.b (a0),d0
    d276:	          move.b d0,d0
    d278:	          andi.l #255,d0
    d27e:	          moveq #64,d1
    d280:	          and.l d1,d0
    d282:	      ,-- bne.s d28c <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d284:	      |   move.w #1,1cc56 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d28c:	      '-> movea.l #14675990,a0
    d292:	          move.w (a0),d0
    d294:	          move.w d0,d0
    d296:	          andi.l #65535,d0
    d29c:	          andi.l #1024,d0
    d2a2:	      ,-- bne.s d2ac <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d2a4:	      |   move.w #1,1cc58 <input+0x2>
    }

    d2ac:	      '-> nop
    d2ae:	          lea 12(sp),sp
    d2b2:	          rts

0000d2b4 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d2b4:	moveq #0,d0
}
    d2b6:	rts

0000d2b8 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d2b8:	nop
    d2ba:	rts

0000d2bc <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d2bc:	nop
    d2be:	rts

0000d2c0 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d2c0:	moveq #1,d0
}
    d2c2:	rts

0000d2c4 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d2c4:	nop
    d2c6:	rts

0000d2c8 <saveSounds>:

void saveSounds (BPTR fp) {
    d2c8:	lea -12(sp),sp
    d2cc:	move.l a6,-(sp)
    d2ce:	move.l d2,-(sp)
	FPutC (fp,0);
    d2d0:	move.l 24(sp),16(sp)
    d2d6:	clr.l 12(sp)
    d2da:	move.l 1ccac <DOSBase>,d0
    d2e0:	movea.l d0,a6
    d2e2:	move.l 16(sp),d1
    d2e6:	move.l 12(sp),d2
    d2ea:	jsr -312(a6)
    d2ee:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d2f2:	move.l 1c632 <defSoundVol>,d0
    d2f8:	move.l 24(sp),-(sp)
    d2fc:	move.l d0,-(sp)
    d2fe:	jsr 8d0 <put2bytes>
    d304:	addq.l #8,sp
	put2bytes (defVol, fp);
    d306:	move.l 1c62e <defVol>,d0
    d30c:	move.l 24(sp),-(sp)
    d310:	move.l d0,-(sp)
    d312:	jsr 8d0 <put2bytes>
    d318:	addq.l #8,sp
}
    d31a:	nop
    d31c:	move.l (sp)+,d2
    d31e:	movea.l (sp)+,a6
    d320:	lea 12(sp),sp
    d324:	rts

0000d326 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d326:	move.l 4(sp),1c62e <defVol>
}
    d32e:	nop
    d330:	rts

0000d332 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d332:	move.l 4(sp),1c632 <defSoundVol>
}
    d33a:	nop
    d33c:	rts

0000d33e <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d33e:	nop
    d340:	rts

0000d342 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d342:	nop
    d344:	rts

0000d346 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d346:	nop
    d348:	rts

0000d34a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d34a:	subq.l #4,sp
    d34c:	move.l 12(sp),d0
    d350:	move.w d0,d0
    d352:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d356:	moveq #1,d0
}
    d358:	addq.l #4,sp
    d35a:	rts

0000d35c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d35c:	nop
    d35e:	rts

0000d360 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d360:	move.l 16(sp),-(sp)
    d364:	move.l 16(sp),-(sp)
    d368:	move.l 16(sp),-(sp)
    d36c:	move.l 16(sp),-(sp)
    d370:	jsr e0e <CstBlankScreen>
    d376:	lea 16(sp),sp
}
    d37a:	nop
    d37c:	rts

0000d37e <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d37e:	pea 1977d <PutChar+0x1885>
    d384:	jsr 17456 <KPrintF>
    d38a:	addq.l #4,sp
}
    d38c:	nop
    d38e:	rts

0000d390 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d390:	movea.l 8(sp),a1
    d394:	movea.l 12(sp),a0
    d398:	move.l 8(sp),d1
    d39c:	move.l 4(sp),d0
    d3a0:	move.l a1,-(sp)
    d3a2:	move.l a0,-(sp)
    d3a4:	move.l d1,-(sp)
    d3a6:	move.l d0,-(sp)
    d3a8:	jsr 4866 <drawLine>
    d3ae:	lea 16(sp),sp
}
    d3b2:	nop
    d3b4:	rts

0000d3b6 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d3b6:	movea.l 12(sp),a1
    d3ba:	movea.l 4(sp),a0
    d3be:	move.l 8(sp),d1
    d3c2:	move.l 4(sp),d0
    d3c6:	move.l a1,-(sp)
    d3c8:	move.l a0,-(sp)
    d3ca:	move.l d1,-(sp)
    d3cc:	move.l d0,-(sp)
    d3ce:	jsr 4866 <drawLine>
    d3d4:	lea 16(sp),sp
}
    d3d8:	nop
    d3da:	rts

0000d3dc <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d3dc:	pea 197b6 <PutChar+0x18be>
    d3e2:	jsr 17456 <KPrintF>
    d3e8:	addq.l #4,sp
}
    d3ea:	nop
    d3ec:	rts

0000d3ee <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d3ee:	jsr 1c02 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d3f4:	pea 1cd44 <backdropTextureName>
    d3fa:	pea 1 <_start+0x1>
    d3fe:	jsr 49e8 <deleteTextures>
    d404:	addq.l #8,sp
	backdropTextureName = 0;
    d406:	clr.l 1cd44 <backdropTextureName>
	backdropExists = FALSE;
    d40c:	clr.w 1cd48 <backdropExists>
}
    d412:	nop
    d414:	rts

0000d416 <killParallax>:

void killParallax () {
    d416:	          lea -12(sp),sp
    d41a:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d41c:	   ,----- bra.s d488 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d41e:	,--|----> move.l 1cd4a <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d426:	|  |      movea.l 12(sp),a0
    d42a:	|  |      move.l 42(a0),d0
    d42e:	|  |      move.l d0,1cd4a <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d434:	|  |      move.l 12(sp),d0
    d438:	|  |      addq.l #4,d0
    d43a:	|  |      move.l d0,-(sp)
    d43c:	|  |      pea 1 <_start+0x1>
    d440:	|  |      jsr 49e8 <deleteTextures>
    d446:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d448:	|  |      movea.l 12(sp),a0
    d44c:	|  |      move.l (a0),d0
    d44e:	|  |  ,-- beq.s d468 <killParallax+0x52>
    d450:	|  |  |   movea.l 12(sp),a0
    d454:	|  |  |   move.l (a0),8(sp)
    d458:	|  |  |   move.l 1cca4 <SysBase>,d0
    d45e:	|  |  |   movea.l d0,a6
    d460:	|  |  |   movea.l 8(sp),a1
    d464:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d468:	|  |  '-> tst.l 12(sp)
    d46c:	|  |  ,-- beq.s d484 <killParallax+0x6e>
    d46e:	|  |  |   move.l 12(sp),4(sp)
    d474:	|  |  |   move.l 1cca4 <SysBase>,d0
    d47a:	|  |  |   movea.l d0,a6
    d47c:	|  |  |   movea.l 4(sp),a1
    d480:	|  |  |   jsr -690(a6)
		k = NULL;
    d484:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d488:	|  '----> move.l 1cd4a <parallaxStuff>,d0
    d48e:	'-------- bne.s d41e <killParallax+0x8>
	}
}
    d490:	          nop
    d492:	          nop
    d494:	          movea.l (sp)+,a6
    d496:	          lea 12(sp),sp
    d49a:	          rts

0000d49c <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d49c:	       move.l 4(sp),-(sp)
    d4a0:	       jsr 788a <openFileFromNum>
    d4a6:	       addq.l #4,sp
    d4a8:	       tst.l d0
    d4aa:	   ,-- bne.s d4bc <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d4ac:	   |   pea 197d7 <PutChar+0x18df>
    d4b2:	   |   jsr 17456 <KPrintF>
    d4b8:	   |   addq.l #4,sp
		return;
    d4ba:	,--|-- bra.s d4dc <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d4bc:	|  '-> move.l 1cc8c <bigDataFile>,d0
    d4c2:	|      move.l 12(sp),-(sp)
    d4c6:	|      move.l 12(sp),-(sp)
    d4ca:	|      move.l d0,-(sp)
    d4cc:	|      jsr 1ea6 <CstLoadBackdrop>
    d4d2:	|      lea 12(sp),sp
	finishAccess ();
    d4d6:	|      jsr 7782 <finishAccess>
	
}
    d4dc:	'----> rts

0000d4de <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d4de:	subq.l #8,sp
    d4e0:	movea.l 12(sp),a0
    d4e4:	move.l 16(sp),d1
    d4e8:	move.l 20(sp),d0
    d4ec:	movea.w a0,a0
    d4ee:	move.w a0,6(sp)
    d4f2:	move.w d1,d1
    d4f4:	move.w d1,4(sp)
    d4f8:	move.w d0,d0
    d4fa:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d4fe:	pea 19826 <PutChar+0x192e>
    d504:	jsr 17456 <KPrintF>
    d50a:	addq.l #4,sp

}
    d50c:	nop
    d50e:	addq.l #8,sp
    d510:	rts

0000d512 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d512:	pea 19849 <PutChar+0x1951>
    d518:	jsr 17456 <KPrintF>
    d51e:	addq.l #4,sp
}
    d520:	nop
    d522:	rts

0000d524 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d524:	pea 1cd4e <snapshotTextureName>
    d52a:	pea 1 <_start+0x1>
    d52e:	jsr 49e8 <deleteTextures>
    d534:	addq.l #8,sp
	snapshotTextureName = 0;
    d536:	clr.l 1cd4e <snapshotTextureName>
}
    d53c:	nop
    d53e:	rts

0000d540 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d540:	clr.l 1cd5a <cameraX>
	cameraY = 0;
    d546:	clr.l 1cd5e <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d54c:	move.l 1cd40 <sceneHeight>,d0
    d552:	move.l d0,d1
    d554:	move.l 1cd3c <sceneWidth>,d0
    d55a:	move.l d1,-(sp)
    d55c:	move.l d0,-(sp)
    d55e:	jsr 3876 <CstReserveBackdrop>
    d564:	addq.l #8,sp
}
    d566:	rts

0000d568 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d568:	jsr d3ee <killBackDrop>
	killParallax ();
    d56e:	jsr d416 <killParallax>
	killZBuffer ();
    d574:	jsr 87a0 <killZBuffer>
	sceneWidth = x;
    d57a:	move.l 4(sp),d0
    d57e:	move.l d0,1cd3c <sceneWidth>
	sceneHeight = y;
    d584:	move.l 8(sp),d0
    d588:	move.l d0,1cd40 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d58e:	pea 19882 <PutChar+0x198a>
    d594:	jsr 17456 <KPrintF>
    d59a:	addq.l #4,sp
	return reserveBackdrop();
    d59c:	jsr d540 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d5a2:	rts

0000d5a4 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d5a4:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d5a6:	move.l 12(sp),-(sp)
    d5aa:	jsr 6bc <get2bytes>
    d5b0:	addq.l #4,sp
    d5b2:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d5b6:	move.l 12(sp),-(sp)
    d5ba:	jsr 6bc <get2bytes>
    d5c0:	addq.l #4,sp
    d5c2:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d5c4:	moveq #1,d0
}
    d5c6:	addq.l #8,sp
    d5c8:	rts

0000d5ca <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d5ca:	   ,-> lea -12(sp),sp
    d5ce:	   |   move.l a6,-(sp)
    d5d0:	   |   move.l d2,-(sp)
	if (me) {
    d5d2:	   |   tst.l 24(sp)
    d5d6:	,--|-- beq.w d66c <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d5da:	|  |   movea.l 24(sp),a0
    d5de:	|  |   move.l 42(a0),d0
    d5e2:	|  |   move.l 28(sp),-(sp)
    d5e6:	|  |   move.l d0,-(sp)
    d5e8:	|  '-- jsr d5ca <saveParallaxRecursive>(pc)
    d5ec:	|      addq.l #8,sp
		FPutC (fp, 1);
    d5ee:	|      move.l 28(sp),16(sp)
    d5f4:	|      moveq #1,d0
    d5f6:	|      move.l d0,12(sp)
    d5fa:	|      move.l 1ccac <DOSBase>,d0
    d600:	|      movea.l d0,a6
    d602:	|      move.l 16(sp),d1
    d606:	|      move.l 12(sp),d2
    d60a:	|      jsr -312(a6)
    d60e:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d612:	|      movea.l 24(sp),a0
    d616:	|      move.w 28(a0),d0
    d61a:	|      move.w d0,d0
    d61c:	|      andi.l #65535,d0
    d622:	|      move.l 28(sp),-(sp)
    d626:	|      move.l d0,-(sp)
    d628:	|      jsr 8d0 <put2bytes>
    d62e:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d630:	|      movea.l 24(sp),a0
    d634:	|      move.w 30(a0),d0
    d638:	|      move.w d0,d0
    d63a:	|      andi.l #65535,d0
    d640:	|      move.l 28(sp),-(sp)
    d644:	|      move.l d0,-(sp)
    d646:	|      jsr 8d0 <put2bytes>
    d64c:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d64e:	|      movea.l 24(sp),a0
    d652:	|      move.w 32(a0),d0
    d656:	|      move.w d0,d0
    d658:	|      andi.l #65535,d0
    d65e:	|      move.l 28(sp),-(sp)
    d662:	|      move.l d0,-(sp)
    d664:	|      jsr 8d0 <put2bytes>
    d66a:	|      addq.l #8,sp
	}
}
    d66c:	'----> nop
    d66e:	       move.l (sp)+,d2
    d670:	       movea.l (sp)+,a6
    d672:	       lea 12(sp),sp
    d676:	       rts

0000d678 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d678:	pea 198a9 <PutChar+0x19b1>
    d67e:	jsr 17456 <KPrintF>
    d684:	addq.l #4,sp
	return TRUE;
    d686:	moveq #1,d0
    d688:	rts

0000d68a <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d68a:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d68c:	             move.l 1cd52 <allObjectTypes>,(sp)

	while (huntType) {
    d692:	      ,----- bra.s d6aa <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d694:	   ,--|----> movea.l (sp),a0
    d696:	   |  |      move.l 4(a0),d0
    d69a:	   |  |      cmp.l 8(sp),d0
    d69e:	   |  |  ,-- bne.s d6a4 <findObjectType+0x1a>
    d6a0:	   |  |  |   move.l (sp),d0
    d6a2:	,--|--|--|-- bra.s d6ba <findObjectType+0x30>
		huntType = huntType -> next;
    d6a4:	|  |  |  '-> movea.l (sp),a0
    d6a6:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d6aa:	|  |  '----> tst.l (sp)
    d6ac:	|  '-------- bne.s d694 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d6ae:	|            move.l 8(sp),-(sp)
    d6b2:	|            jsr d77a <loadObjectType>
    d6b8:	|            addq.l #4,sp
}
    d6ba:	'----------> addq.l #4,sp
    d6bc:	             rts

0000d6be <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d6be:	             lea -12(sp),sp
	int i, num = 0;
    d6c2:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d6c6:	             move.l 20(sp),-(sp)
    d6ca:	             jsr d68a <findObjectType>
    d6d0:	             addq.l #4,sp
    d6d2:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d6d4:	             clr.l 8(sp)
    d6d8:	   ,-------- bra.s d70e <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d6da:	,--|-------> movea.l (sp),a0
    d6dc:	|  |         move.l 38(a0),d1
    d6e0:	|  |         move.l 8(sp),d0
    d6e4:	|  |         lsl.l #3,d0
    d6e6:	|  |         movea.l d1,a0
    d6e8:	|  |         adda.l d0,a0
    d6ea:	|  |         move.l (a0),d0
    d6ec:	|  |         cmp.l 16(sp),d0
    d6f0:	|  |  ,----- bne.s d70a <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d6f2:	|  |  |      movea.l (sp),a0
    d6f4:	|  |  |      move.l 38(a0),d1
    d6f8:	|  |  |      move.l 8(sp),d0
    d6fc:	|  |  |      lsl.l #3,d0
    d6fe:	|  |  |      movea.l d1,a0
    d700:	|  |  |      adda.l d0,a0
    d702:	|  |  |      move.l 4(a0),4(sp)
			break;
    d708:	|  |  |  ,-- bra.s d71a <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d70a:	|  |  '--|-> addq.l #1,8(sp)
    d70e:	|  '-----|-> movea.l (sp),a0
    d710:	|        |   move.l 16(a0),d0
    d714:	|        |   cmp.l 8(sp),d0
    d718:	'--------|-- bgt.s d6da <getCombinationFunction+0x1c>
		}
	}

	return num;
    d71a:	         '-> move.l 4(sp),d0
}
    d71e:	             lea 12(sp),sp
    d722:	             rts

0000d724 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d724:	moveq #1,d0
}
    d726:	rts

0000d728 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d728:	subq.l #8,sp
    d72a:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d72c:	move.l 16(sp),-(sp)
    d730:	jsr 6bc <get2bytes>
    d736:	addq.l #4,sp
    d738:	move.l d0,-(sp)
    d73a:	jsr d77a <loadObjectType>
    d740:	addq.l #4,sp
    d742:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d746:	movea.l 8(sp),a0
    d74a:	move.l (a0),4(sp)
    d74e:	move.l 1cca4 <SysBase>,d0
    d754:	movea.l d0,a6
    d756:	movea.l 4(sp),a1
    d75a:	jsr -690(a6)
	r -> screenName = readString (fp);
    d75e:	move.l 16(sp),-(sp)
    d762:	jsr b02 <readString>
    d768:	addq.l #4,sp
    d76a:	movea.l 8(sp),a0
    d76e:	move.l d0,(a0)
	return r;
    d770:	move.l 8(sp),d0
}
    d774:	movea.l (sp)+,a6
    d776:	addq.l #8,sp
    d778:	rts

0000d77a <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d77a:	          lea -84(sp),sp
    d77e:	          move.l a6,-(sp)
    d780:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d782:	          moveq #42,d0
    d784:	          move.l d0,84(sp)
    d788:	          clr.l 80(sp)
    d78c:	          move.l 1cca4 <SysBase>,d0
    d792:	          movea.l d0,a6
    d794:	          move.l 84(sp),d0
    d798:	          move.l 80(sp),d1
    d79c:	          jsr -684(a6)
    d7a0:	          move.l d0,76(sp)
    d7a4:	          move.l 76(sp),d0
    d7a8:	          move.l d0,72(sp)

    if (newType) {
    d7ac:	,-------- beq.w da26 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d7b0:	|         move.l 96(sp),-(sp)
    d7b4:	|         jsr 7952 <openObjectSlice>
    d7ba:	|         addq.l #4,sp
    d7bc:	|         tst.w d0
    d7be:	+-------- beq.w da26 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d7c2:	|         move.l 1cc8c <bigDataFile>,d0
    d7c8:	|         move.l d0,-(sp)
    d7ca:	|         jsr 6bc <get2bytes>
    d7d0:	|         addq.l #4,sp
    d7d2:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d7d6:	|         move.l 1cc8c <bigDataFile>,64(sp)
    d7de:	|         move.l 1ccac <DOSBase>,d0
    d7e4:	|         movea.l d0,a6
    d7e6:	|         move.l 64(sp),d1
    d7ea:	|         jsr -306(a6)
    d7ee:	|         move.l d0,60(sp)
    d7f2:	|         move.l 60(sp),d0
    d7f6:	|         move.l d0,d0
    d7f8:	|         movea.l 72(sp),a0
    d7fc:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d800:	|         move.l 1cc8c <bigDataFile>,56(sp)
    d808:	|         move.l 1ccac <DOSBase>,d0
    d80e:	|         movea.l d0,a6
    d810:	|         move.l 56(sp),d1
    d814:	|         jsr -306(a6)
    d818:	|         move.l d0,52(sp)
    d81c:	|         move.l 52(sp),d0
    d820:	|         move.l d0,d0
    d822:	|         movea.l 72(sp),a0
    d826:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d82a:	|         move.l 1cc8c <bigDataFile>,48(sp)
    d832:	|         move.l 1ccac <DOSBase>,d0
    d838:	|         movea.l d0,a6
    d83a:	|         move.l 48(sp),d1
    d83e:	|         jsr -306(a6)
    d842:	|         move.l d0,44(sp)
    d846:	|         move.l 44(sp),d0
    d84a:	|         move.l d0,d0
    d84c:	|         movea.l 72(sp),a0
    d850:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d854:	|         move.l 1cc8c <bigDataFile>,40(sp)
    d85c:	|         move.l 1ccac <DOSBase>,d0
    d862:	|         movea.l d0,a6
    d864:	|         move.l 40(sp),d1
    d868:	|         jsr -306(a6)
    d86c:	|         move.l d0,36(sp)
    d870:	|         move.l 36(sp),d0
    d874:	|         movea.l 72(sp),a0
    d878:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d87c:	|         move.l 1cc8c <bigDataFile>,32(sp)
    d884:	|         move.l 1ccac <DOSBase>,d0
    d88a:	|         movea.l d0,a6
    d88c:	|         move.l 32(sp),d1
    d890:	|         jsr -306(a6)
    d894:	|         move.l d0,28(sp)
    d898:	|         move.l 28(sp),d0
    d89c:	|         movea.l 72(sp),a0
    d8a0:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d8a4:	|         move.l 1cc8c <bigDataFile>,d0
    d8aa:	|         move.l d0,-(sp)
    d8ac:	|         jsr 718 <get4bytes>
    d8b2:	|         addq.l #4,sp
    d8b4:	|         movea.l 72(sp),a0
    d8b8:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d8bc:	|         move.l 1cc8c <bigDataFile>,d0
    d8c2:	|         move.l d0,-(sp)
    d8c4:	|         jsr 6bc <get2bytes>
    d8ca:	|         addq.l #4,sp
    d8cc:	|         movea.l 72(sp),a0
    d8d0:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d8d4:	|         move.l 1cc8c <bigDataFile>,24(sp)
    d8dc:	|         move.l 1ccac <DOSBase>,d0
    d8e2:	|         movea.l d0,a6
    d8e4:	|         move.l 24(sp),d1
    d8e8:	|         jsr -306(a6)
    d8ec:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d8f0:	|         move.l 1cc8c <bigDataFile>,d0
    d8f6:	|         move.l d0,-(sp)
    d8f8:	|         jsr 7d8 <getFloat>
    d8fe:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d900:	|         move.l 1cc8c <bigDataFile>,d0
    d906:	|         move.l d0,-(sp)
    d908:	|         jsr 7d8 <getFloat>
    d90e:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d910:	|         move.l 1cc8c <bigDataFile>,d0
    d916:	|         move.l d0,-(sp)
    d918:	|         jsr 6bc <get2bytes>
    d91e:	|         addq.l #4,sp
    d920:	|         move.l d0,d0
    d922:	|         movea.l 72(sp),a0
    d926:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d92a:	|         move.l 1cc8c <bigDataFile>,d0
    d930:	|         move.l d0,-(sp)
    d932:	|         jsr 6bc <get2bytes>
    d938:	|         addq.l #4,sp
    d93a:	|         movea.l 72(sp),a0
    d93e:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d942:	|         movea.l 72(sp),a0
    d946:	|         move.l 16(a0),d0
    d94a:	|  ,----- beq.s d97c <loadObjectType+0x202>
    d94c:	|  |      movea.l 72(sp),a0
    d950:	|  |      move.l 16(a0),d0
    d954:	|  |      lsl.l #3,d0
    d956:	|  |      move.l d0,16(sp)
    d95a:	|  |      clr.l 12(sp)
    d95e:	|  |      move.l 1cca4 <SysBase>,d0
    d964:	|  |      movea.l d0,a6
    d966:	|  |      move.l 16(sp),d0
    d96a:	|  |      move.l 12(sp),d1
    d96e:	|  |      jsr -684(a6)
    d972:	|  |      move.l d0,8(sp)
    d976:	|  |      move.l 8(sp),d0
    d97a:	|  |  ,-- bra.s d97e <loadObjectType+0x204>
    d97c:	|  '--|-> moveq #0,d0
    d97e:	|     '-> movea.l 72(sp),a0
    d982:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d986:	|         clr.l 88(sp)
    d98a:	|     ,-- bra.s d9da <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d98c:	|  ,--|-> move.l 1cc8c <bigDataFile>,d1
    d992:	|  |  |   movea.l 72(sp),a0
    d996:	|  |  |   movea.l 38(a0),a0
    d99a:	|  |  |   move.l 88(sp),d0
    d99e:	|  |  |   lsl.l #3,d0
    d9a0:	|  |  |   lea (0,a0,d0.l),a2
    d9a4:	|  |  |   move.l d1,-(sp)
    d9a6:	|  |  |   jsr 6bc <get2bytes>
    d9ac:	|  |  |   addq.l #4,sp
    d9ae:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d9b0:	|  |  |   move.l 1cc8c <bigDataFile>,d1
    d9b6:	|  |  |   movea.l 72(sp),a0
    d9ba:	|  |  |   movea.l 38(a0),a0
    d9be:	|  |  |   move.l 88(sp),d0
    d9c2:	|  |  |   lsl.l #3,d0
    d9c4:	|  |  |   lea (0,a0,d0.l),a2
    d9c8:	|  |  |   move.l d1,-(sp)
    d9ca:	|  |  |   jsr 6bc <get2bytes>
    d9d0:	|  |  |   addq.l #4,sp
    d9d2:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d9d6:	|  |  |   addq.l #1,88(sp)
    d9da:	|  |  '-> movea.l 72(sp),a0
    d9de:	|  |      move.l 16(a0),d0
    d9e2:	|  |      cmp.l 88(sp),d0
    d9e6:	|  '----- bgt.s d98c <loadObjectType+0x212>
            }
            finishAccess();
    d9e8:	|         jsr 7782 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d9ee:	|         move.l 68(sp),-(sp)
    d9f2:	|         jsr 778c <getNumberedString>
    d9f8:	|         addq.l #4,sp
    d9fa:	|         movea.l 72(sp),a0
    d9fe:	|         move.l d0,(a0)
            newType->objectNum = i;
    da00:	|         movea.l 72(sp),a0
    da04:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    da0a:	|         move.l 1cd52 <allObjectTypes>,d0
    da10:	|         movea.l 72(sp),a0
    da14:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    da18:	|         move.l 72(sp),1cd52 <allObjectTypes>
            return newType;
    da20:	|         move.l 72(sp),d0
    da24:	|     ,-- bra.s da28 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    da26:	'-----|-> moveq #0,d0
}
    da28:	      '-> movea.l (sp)+,a2
    da2a:	          movea.l (sp)+,a6
    da2c:	          lea 84(sp),sp
    da30:	          rts

0000da32 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    da32:	             lea -16(sp),sp
    da36:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    da38:	             move.l #118098,16(sp)

	while (* huntRegion) {
    da40:	   ,-------- bra.s dab4 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    da42:	,--|-------> movea.l 16(sp),a0
    da46:	|  |         move.l (a0),d0
    da48:	|  |         cmp.l 24(sp),d0
    da4c:	|  |  ,----- bne.s daa6 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    da4e:	|  |  |      movea.l 24(sp),a0
    da52:	|  |  |      move.l 8(a0),d0
    da56:	|  |  |      movea.l 16(sp),a0
    da5a:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    da5c:	|  |  |      movea.l 24(sp),a0
    da60:	|  |  |      move.l 38(a0),12(sp)
    da66:	|  |  |      move.l 1cca4 <SysBase>,d0
    da6c:	|  |  |      movea.l d0,a6
    da6e:	|  |  |      movea.l 12(sp),a1
    da72:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    da76:	|  |  |      movea.l 24(sp),a0
    da7a:	|  |  |      move.l (a0),8(sp)
    da7e:	|  |  |      move.l 1cca4 <SysBase>,d0
    da84:	|  |  |      movea.l d0,a6
    da86:	|  |  |      movea.l 8(sp),a1
    da8a:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    da8e:	|  |  |      move.l 24(sp),4(sp)
    da94:	|  |  |      move.l 1cca4 <SysBase>,d0
    da9a:	|  |  |      movea.l d0,a6
    da9c:	|  |  |      movea.l 4(sp),a1
    daa0:	|  |  |      jsr -690(a6)
			return;
    daa4:	|  |  |  ,-- bra.s daca <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    daa6:	|  |  '--|-> movea.l 16(sp),a0
    daaa:	|  |     |   move.l (a0),d0
    daac:	|  |     |   move.l d0,d1
    daae:	|  |     |   addq.l #8,d1
    dab0:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    dab4:	|  '-----|-> movea.l 16(sp),a0
    dab8:	|        |   move.l (a0),d0
    daba:	'--------|-- bne.s da42 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    dabc:	         |   pea 198d0 <PutChar+0x19d8>
    dac2:	         |   jsr 17456 <KPrintF>
    dac8:	         |   addq.l #4,sp
}
    daca:	         '-> movea.l (sp)+,a6
    dacc:	             lea 16(sp),sp
    dad0:	             rts

0000dad2 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    dad2:	movea.l 4(sp),a0
    dad6:	move.l 4(a0),d0
    dada:	move.l 8(sp),-(sp)
    dade:	move.l d0,-(sp)
    dae0:	jsr 8d0 <put2bytes>
    dae6:	addq.l #8,sp
	writeString (r -> screenName, fp);
    dae8:	movea.l 4(sp),a0
    daec:	move.l (a0),d0
    daee:	move.l 8(sp),-(sp)
    daf2:	move.l d0,-(sp)
    daf4:	jsr bd8 <writeString>
    dafa:	addq.l #8,sp
    dafc:	nop
    dafe:	rts

0000db00 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    db00:	                         lea -112(sp),sp
    db04:	                         move.l a6,-(sp)
    db06:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    db08:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    db0c:	                         move.w 1cd58 <saveEncoding>,d0
    db12:	                  ,----- beq.s db1c <fileToStack+0x1c>
    db14:	                  |      move.l #104694,d0
    db1a:	                  |  ,-- bra.s db22 <fileToStack+0x22>
    db1c:	                  '--|-> move.l #104720,d0
    db22:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    db26:	                         move.l 124(sp),112(sp)
    db2c:	                         move.l #1005,108(sp)
    db34:	                         move.l 1ccac <DOSBase>,d0
    db3a:	                         movea.l d0,a6
    db3c:	                         move.l 112(sp),d1
    db40:	                         move.l 108(sp),d2
    db44:	                         jsr -30(a6)
    db48:	                         move.l d0,104(sp)
    db4c:	                         move.l 104(sp),d0
    db50:	                         move.l d0,100(sp)
    if (!fp) {
    db54:	                     ,-- bne.s db6e <fileToStack+0x6e>
        KPrintF("No such file", filename);
    db56:	                     |   move.l 124(sp),-(sp)
    db5a:	                     |   pea 19927 <PutChar+0x1a2f>
    db60:	                     |   jsr 17456 <KPrintF>
    db66:	                     |   addq.l #8,sp
        return FALSE;
    db68:	                     |   clr.w d0
    db6a:	,--------------------|-- bra.w de64 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    db6e:	|                    '-> move.w 1cd58 <saveEncoding>,d0
    db74:	|                        move.l d0,d0
    db76:	|                        move.b d0,1cd56 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    db7c:	|                        move.w 1cd58 <saveEncoding>,d0
    db82:	|                        lsr.w #8,d0
    db84:	|                        move.l d0,d0
    db86:	|                        move.b d0,1cd57 <encode2>

    while (*checker) {
    db8c:	|                 ,----- bra.s dbf0 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    db8e:	|              ,--|----> move.l 100(sp),30(sp)
    db94:	|              |  |      move.l 1ccac <DOSBase>,d0
    db9a:	|              |  |      movea.l d0,a6
    db9c:	|              |  |      move.l 30(sp),d1
    dba0:	|              |  |      jsr -306(a6)
    dba4:	|              |  |      move.l d0,26(sp)
    dba8:	|              |  |      move.l 26(sp),d1
    dbac:	|              |  |      movea.l 116(sp),a0
    dbb0:	|              |  |      move.b (a0),d0
    dbb2:	|              |  |      ext.w d0
    dbb4:	|              |  |      movea.w d0,a0
    dbb6:	|              |  |      cmpa.l d1,a0
    dbb8:	|              |  |  ,-- beq.s dbec <fileToStack+0xec>
            Close(fp);
    dbba:	|              |  |  |   move.l 100(sp),22(sp)
    dbc0:	|              |  |  |   move.l 1ccac <DOSBase>,d0
    dbc6:	|              |  |  |   movea.l d0,a6
    dbc8:	|              |  |  |   move.l 22(sp),d1
    dbcc:	|              |  |  |   jsr -36(a6)
    dbd0:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    dbd4:	|              |  |  |   move.l 124(sp),-(sp)
    dbd8:	|              |  |  |   pea 19934 <PutChar+0x1a3c>
    dbde:	|              |  |  |   jsr 17456 <KPrintF>
    dbe4:	|              |  |  |   addq.l #8,sp
            return FALSE;
    dbe6:	|              |  |  |   clr.w d0
    dbe8:	+--------------|--|--|-- bra.w de64 <fileToStack+0x364>
        }
        checker++;
    dbec:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    dbf0:	|              |  '----> movea.l 116(sp),a0
    dbf4:	|              |         move.b (a0),d0
    dbf6:	|              '-------- bne.s db8e <fileToStack+0x8e>
    }

    if (saveEncoding) {
    dbf8:	|                        move.w 1cd58 <saveEncoding>,d0
    dbfe:	|  ,-------------------- beq.s dc72 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    dc00:	|  |                     move.l 100(sp),-(sp)
    dc04:	|  |                     jsr de6e <readStringEncoded>
    dc0a:	|  |                     addq.l #4,sp
    dc0c:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    dc10:	|  |                     pea 19975 <PutChar+0x1a7d>
    dc16:	|  |                     move.l 100(sp),-(sp)
    dc1a:	|  |                     jsr 13e22 <strcmp>
    dc20:	|  |                     addq.l #8,sp
    dc22:	|  |                     tst.l d0
    dc24:	|  |                 ,-- beq.s dc58 <fileToStack+0x158>
            Close(fp);
    dc26:	|  |                 |   move.l 100(sp),88(sp)
    dc2c:	|  |                 |   move.l 1ccac <DOSBase>,d0
    dc32:	|  |                 |   movea.l d0,a6
    dc34:	|  |                 |   move.l 88(sp),d1
    dc38:	|  |                 |   jsr -36(a6)
    dc3c:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dc40:	|  |                 |   move.l 124(sp),-(sp)
    dc44:	|  |                 |   pea 19984 <PutChar+0x1a8c>
    dc4a:	|  |                 |   jsr 17456 <KPrintF>
    dc50:	|  |                 |   addq.l #8,sp
            return FALSE;
    dc52:	|  |                 |   clr.w d0
    dc54:	+--|-----------------|-- bra.w de64 <fileToStack+0x364>
        }
        FreeVec(checker);
    dc58:	|  |                 '-> move.l 96(sp),92(sp)
    dc5e:	|  |                     move.l 1cca4 <SysBase>,d0
    dc64:	|  |                     movea.l d0,a6
    dc66:	|  |                     movea.l 92(sp),a1
    dc6a:	|  |                     jsr -690(a6)
        checker = NULL;
    dc6e:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dc72:	|  >-------------------> move.w 1cd58 <saveEncoding>,d0
    dc78:	|  |     ,-------------- beq.w ddac <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dc7c:	|  |     |               move.l 100(sp),76(sp)
    dc82:	|  |     |               move.l 1ccac <DOSBase>,d0
    dc88:	|  |     |               movea.l d0,a6
    dc8a:	|  |     |               move.l 76(sp),d1
    dc8e:	|  |     |               jsr -306(a6)
    dc92:	|  |     |               move.l d0,72(sp)
    dc96:	|  |     |               move.l 72(sp),d0
    dc9a:	|  |     |               move.b 1cd56 <encode1>,d1
    dca0:	|  |     |               ext.w d1
    dca2:	|  |     |               ext.l d1
    dca4:	|  |     |               move.l d0,d2
    dca6:	|  |     |               eor.l d1,d2
    dca8:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dcac:	|  |     |               moveq #-1,d0
    dcae:	|  |     |               cmp.l 68(sp),d0
    dcb2:	|  |  ,--|-------------- beq.w de42 <fileToStack+0x342>

            char i = (char) tmp;
    dcb6:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dcbc:	|  |  |  |               move.b 67(sp),d0
    dcc0:	|  |  |  |               ext.w d0
    dcc2:	|  |  |  |               movea.w d0,a0
    dcc4:	|  |  |  |               moveq #2,d2
    dcc6:	|  |  |  |               cmp.l a0,d2
    dcc8:	|  |  |  |     ,-------- beq.s dd44 <fileToStack+0x244>
    dcca:	|  |  |  |     |         moveq #2,d0
    dccc:	|  |  |  |     |         cmp.l a0,d0
    dcce:	|  |  |  |  ,--|-------- blt.w dd7a <fileToStack+0x27a>
    dcd2:	|  |  |  |  |  |         cmpa.w #0,a0
    dcd6:	|  |  |  |  |  |     ,-- beq.s dce2 <fileToStack+0x1e2>
    dcd8:	|  |  |  |  |  |     |   moveq #1,d2
    dcda:	|  |  |  |  |  |     |   cmp.l a0,d2
    dcdc:	|  |  |  |  |  |  ,--|-- beq.s dd1e <fileToStack+0x21e>
    dcde:	|  |  |  |  +--|--|--|-- bra.w dd7a <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    dce2:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    dce6:	|  |  |  |  |  |  |      jsr de6e <readStringEncoded>
    dcec:	|  |  |  |  |  |  |      addq.l #4,sp
    dcee:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dcf2:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dcf6:	|  |  |  |  |  |  |      lea 14(sp),a0
    dcfa:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dcfc:	|  |  |  |  |  |  |      jsr 14b98 <makeTextVar>
    dd02:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dd04:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dd0a:	|  |  |  |  |  |  |      move.l 1cca4 <SysBase>,d0
    dd10:	|  |  |  |  |  |  |      movea.l d0,a6
    dd12:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dd16:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dd1a:	|  |  |  |  |  |  |  ,-- bra.w ddd2 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dd1e:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    dd22:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dd28:	|  |  |  |  |  |     |   addq.l #4,sp
    dd2a:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dd2c:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dd30:	|  |  |  |  |  |     |   lea 18(sp),a0
    dd34:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dd36:	|  |  |  |  |  |     |   jsr 15268 <setVariable>
    dd3c:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dd40:	|  |  |  |  |  |     +-- bra.w ddd2 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dd44:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    dd4a:	|  |  |  |  |        |   move.l 1ccac <DOSBase>,d0
    dd50:	|  |  |  |  |        |   movea.l d0,a6
    dd52:	|  |  |  |  |        |   move.l 62(sp),d1
    dd56:	|  |  |  |  |        |   jsr -306(a6)
    dd5a:	|  |  |  |  |        |   move.l d0,58(sp)
    dd5e:	|  |  |  |  |        |   move.l 58(sp),d0
    dd62:	|  |  |  |  |        |   move.l d0,-(sp)
    dd64:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dd68:	|  |  |  |  |        |   lea 18(sp),a0
    dd6c:	|  |  |  |  |        |   move.l a0,-(sp)
    dd6e:	|  |  |  |  |        |   jsr 15268 <setVariable>
    dd74:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dd78:	|  |  |  |  |        +-- bra.s ddd2 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dd7a:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    dd7e:	|  |  |  |           |   pea 19a06 <PutChar+0x1b0e>
    dd84:	|  |  |  |           |   jsr 17456 <KPrintF>
    dd8a:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dd8c:	|  |  |  |           |   move.l 100(sp),46(sp)
    dd92:	|  |  |  |           |   move.l 1ccac <DOSBase>,d0
    dd98:	|  |  |  |           |   movea.l d0,a6
    dd9a:	|  |  |  |           |   move.l 46(sp),d1
    dd9e:	|  |  |  |           |   jsr -36(a6)
    dda2:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dda6:	|  |  |  |           |   clr.w d0
    dda8:	+--|--|--|-----------|-- bra.w de64 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    ddac:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    ddb0:	|  |  |              |   jsr df34 <readTextPlain>
    ddb6:	|  |  |              |   addq.l #4,sp
    ddb8:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    ddbc:	|  |  |        ,-----|-- beq.w de46 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    ddc0:	|  |  |        |     |   move.l 80(sp),-(sp)
    ddc4:	|  |  |        |     |   lea 14(sp),a0
    ddc8:	|  |  |        |     |   move.l a0,-(sp)
    ddca:	|  |  |        |     |   jsr 14b98 <makeTextVar>
    ddd0:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    ddd2:	|  |  |        |     '-> movea.l 128(sp),a0
    ddd6:	|  |  |        |         move.l (a0),d0
    ddd8:	|  |  |        |  ,----- bne.s de08 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    ddda:	|  |  |        |  |      move.l 128(sp),d0
    ddde:	|  |  |        |  |      move.l d0,-(sp)
    dde0:	|  |  |        |  |      lea 14(sp),a0
    dde4:	|  |  |        |  |      move.l a0,-(sp)
    dde6:	|  |  |        |  |      jsr 14238 <addVarToStackQuick>
    ddec:	|  |  |        |  |      addq.l #8,sp
    ddee:	|  |  |        |  |      tst.w d0
    ddf0:	|  |  |        |  |  ,-- bne.s ddf6 <fileToStack+0x2f6>
    ddf2:	|  |  |        |  |  |   clr.w d0
    ddf4:	+--|--|--------|--|--|-- bra.s de64 <fileToStack+0x364>
            sH->last = sH->first;
    ddf6:	|  |  |        |  |  '-> movea.l 128(sp),a0
    ddfa:	|  |  |        |  |      move.l (a0),d0
    ddfc:	|  |  |        |  |      movea.l 128(sp),a0
    de00:	|  |  |        |  |      move.l d0,4(a0)
    de04:	|  +--|--------|--|----- bra.w dc72 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    de08:	|  |  |        |  '----> movea.l 128(sp),a0
    de0c:	|  |  |        |         move.l 4(a0),d0
    de10:	|  |  |        |         addq.l #8,d0
    de12:	|  |  |        |         move.l d0,-(sp)
    de14:	|  |  |        |         lea 14(sp),a0
    de18:	|  |  |        |         move.l a0,-(sp)
    de1a:	|  |  |        |         jsr 14238 <addVarToStackQuick>
    de20:	|  |  |        |         addq.l #8,sp
    de22:	|  |  |        |         tst.w d0
    de24:	|  |  |        |     ,-- bne.s de2a <fileToStack+0x32a>
    de26:	|  |  |        |     |   clr.w d0
    de28:	+--|--|--------|-----|-- bra.s de64 <fileToStack+0x364>
            sH->last = sH->last->next;
    de2a:	|  |  |        |     '-> movea.l 128(sp),a0
    de2e:	|  |  |        |         movea.l 4(a0),a0
    de32:	|  |  |        |         move.l 8(a0),d0
    de36:	|  |  |        |         movea.l 128(sp),a0
    de3a:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    de3e:	|  '--|--------|-------- bra.w dc72 <fileToStack+0x172>
            if (tmp == -1) break;
    de42:	|     '--------|-------> nop
    de44:	|              |     ,-- bra.s de48 <fileToStack+0x348>
            if (!line) break;
    de46:	|              '-----|-> nop
        }
    }
    Close(fp);
    de48:	|                    '-> move.l 100(sp),38(sp)
    de4e:	|                        move.l 1ccac <DOSBase>,d0
    de54:	|                        movea.l d0,a6
    de56:	|                        move.l 38(sp),d1
    de5a:	|                        jsr -36(a6)
    de5e:	|                        move.l d0,34(sp)
    return TRUE;
    de62:	|                        moveq #1,d0
}
    de64:	'----------------------> move.l (sp)+,d2
    de66:	                         movea.l (sp)+,a6
    de68:	                         lea 112(sp),sp
    de6c:	                         rts

0000de6e <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    de6e:	          lea -32(sp),sp
    de72:	          move.l a6,-(sp)
    de74:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    de76:	          move.l 44(sp),-(sp)
    de7a:	          jsr 6bc <get2bytes>
    de80:	          addq.l #4,sp
    de82:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    de86:	          move.l 32(sp),d0
    de8a:	          addq.l #1,d0
    de8c:	          move.l d0,28(sp)
    de90:	          clr.l 24(sp)
    de94:	          move.l 1cca4 <SysBase>,d0
    de9a:	          movea.l d0,a6
    de9c:	          move.l 28(sp),d0
    dea0:	          move.l 24(sp),d1
    dea4:	          jsr -684(a6)
    dea8:	          move.l d0,20(sp)
    deac:	          move.l 20(sp),d0
    deb0:	          move.l d0,16(sp)
    if (!s) return NULL;
    deb4:	      ,-- bne.s deba <readStringEncoded+0x4c>
    deb6:	      |   moveq #0,d0
    deb8:	,-----|-- bra.s df2a <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    deba:	|     '-> clr.l 36(sp)
    debe:	|     ,-- bra.s df10 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dec0:	|  ,--|-> move.l 44(sp),12(sp)
    dec6:	|  |  |   move.l 1ccac <DOSBase>,d0
    decc:	|  |  |   movea.l d0,a6
    dece:	|  |  |   move.l 12(sp),d1
    ded2:	|  |  |   jsr -306(a6)
    ded6:	|  |  |   move.l d0,8(sp)
    deda:	|  |  |   move.l 8(sp),d0
    dede:	|  |  |   move.l d0,d1
    dee0:	|  |  |   move.b 1cd56 <encode1>,d2
    dee6:	|  |  |   move.l 36(sp),d0
    deea:	|  |  |   movea.l 16(sp),a0
    deee:	|  |  |   adda.l d0,a0
    def0:	|  |  |   move.b d1,d0
    def2:	|  |  |   eor.b d2,d0
    def4:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    def6:	|  |  |   move.b 1cd56 <encode1>,d0
    defc:	|  |  |   move.b d0,d1
    defe:	|  |  |   move.b 1cd57 <encode2>,d0
    df04:	|  |  |   add.b d1,d0
    df06:	|  |  |   move.b d0,1cd56 <encode1>
    for (a = 0; a < len; a++) {
    df0c:	|  |  |   addq.l #1,36(sp)
    df10:	|  |  '-> move.l 36(sp),d0
    df14:	|  |      cmp.l 32(sp),d0
    df18:	|  '----- blt.s dec0 <readStringEncoded+0x52>
    }
    s[len] = 0;
    df1a:	|         move.l 32(sp),d0
    df1e:	|         movea.l 16(sp),a0
    df22:	|         adda.l d0,a0
    df24:	|         clr.b (a0)
    return s;
    df26:	|         move.l 16(sp),d0
}
    df2a:	'-------> move.l (sp)+,d2
    df2c:	          movea.l (sp)+,a6
    df2e:	          lea 32(sp),sp
    df32:	          rts

0000df34 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    df34:	             lea -104(sp),sp
    df38:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    df3c:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    df40:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    df46:	             move.l 124(sp),106(sp)
    df4c:	             clr.l 102(sp)
    df50:	             clr.l 98(sp)
    df54:	             move.l 1ccac <DOSBase>,d0
    df5a:	             movea.l d0,a6
    df5c:	             move.l 106(sp),d1
    df60:	             move.l 102(sp),d2
    df64:	             move.l 98(sp),d3
    df68:	             jsr -66(a6)
    df6c:	             move.l d0,94(sp)
    df70:	             move.l 94(sp),d0
    df74:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    df78:	   ,-------- bra.s dfbc <readTextPlain+0x88>
        tmp = FGetC(fp);
    df7a:	,--|-------> move.l 124(sp),22(sp)
    df80:	|  |         move.l 1ccac <DOSBase>,d0
    df86:	|  |         movea.l d0,a6
    df88:	|  |         move.l 22(sp),d1
    df8c:	|  |         jsr -306(a6)
    df90:	|  |         move.l d0,18(sp)
    df94:	|  |         move.l 18(sp),d0
    df98:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    df9c:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dfa2:	|  |         cmpi.b #10,17(sp)
    dfa8:	|  |  ,----- beq.s dfb2 <readTextPlain+0x7e>
    dfaa:	|  |  |      moveq #-1,d0
    dfac:	|  |  |      cmp.l 110(sp),d0
    dfb0:	|  |  |  ,-- bne.s dfb8 <readTextPlain+0x84>
            keepGoing = FALSE;
    dfb2:	|  |  '--|-> clr.w 114(sp)
    dfb6:	|  +-----|-- bra.s dfbc <readTextPlain+0x88>
        } else {
            stringSize++;
    dfb8:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    dfbc:	|  '-------> tst.w 114(sp)
    dfc0:	'----------- bne.s df7a <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dfc2:	             tst.l 116(sp)
    dfc6:	         ,-- bne.s dfd6 <readTextPlain+0xa2>
    dfc8:	         |   moveq #-1,d0
    dfca:	         |   cmp.l 110(sp),d0
    dfce:	         +-- bne.s dfd6 <readTextPlain+0xa2>
        return NULL;
    dfd0:	         |   moveq #0,d0
    dfd2:	      ,--|-- bra.w e0bc <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dfd6:	      |  '-> move.l 124(sp),86(sp)
    dfdc:	      |      move.l 90(sp),82(sp)
    dfe2:	      |      moveq #-1,d0
    dfe4:	      |      move.l d0,78(sp)
    dfe8:	      |      move.l 1ccac <DOSBase>,d0
    dfee:	      |      movea.l d0,a6
    dff0:	      |      move.l 86(sp),d1
    dff4:	      |      move.l 82(sp),d2
    dff8:	      |      move.l 78(sp),d3
    dffc:	      |      jsr -66(a6)
    e000:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e004:	      |      move.l 116(sp),d0
    e008:	      |      addq.l #1,d0
    e00a:	      |      move.l d0,70(sp)
    e00e:	      |      clr.l 66(sp)
    e012:	      |      move.l 1cca4 <SysBase>,d0
    e018:	      |      movea.l d0,a6
    e01a:	      |      move.l 70(sp),d0
    e01e:	      |      move.l 66(sp),d1
    e022:	      |      jsr -684(a6)
    e026:	      |      move.l d0,62(sp)
    e02a:	      |      move.l 62(sp),d0
    e02e:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e032:	      |  ,-- bne.s e03a <readTextPlain+0x106>
    e034:	      |  |   moveq #0,d0
    e036:	      +--|-- bra.w e0bc <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e03a:	      |  '-> move.l 124(sp),54(sp)
    e040:	      |      move.l 58(sp),50(sp)
    e046:	      |      moveq #1,d0
    e048:	      |      move.l d0,46(sp)
    e04c:	      |      move.l 116(sp),42(sp)
    e052:	      |      move.l 1ccac <DOSBase>,d0
    e058:	      |      movea.l d0,a6
    e05a:	      |      move.l 54(sp),d1
    e05e:	      |      move.l 50(sp),d2
    e062:	      |      move.l 46(sp),d3
    e066:	      |      move.l 42(sp),d4
    e06a:	      |      jsr -324(a6)
    e06e:	      |      move.l d0,38(sp)
    e072:	      |      move.l 38(sp),d0
    e076:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e07a:	      |      move.l 34(sp),d0
    e07e:	      |      cmp.l 116(sp),d0
    e082:	      |  ,-- beq.s e092 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e084:	      |  |   pea 19a3b <PutChar+0x1b43>
    e08a:	      |  |   jsr 17456 <KPrintF>
    e090:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e092:	      |  '-> move.l 124(sp),30(sp)
    e098:	      |      move.l 1ccac <DOSBase>,d0
    e09e:	      |      movea.l d0,a6
    e0a0:	      |      move.l 30(sp),d1
    e0a4:	      |      jsr -306(a6)
    e0a8:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e0ac:	      |      move.l 116(sp),d0
    e0b0:	      |      movea.l 58(sp),a0
    e0b4:	      |      adda.l d0,a0
    e0b6:	      |      clr.b (a0)
    }

    return reply;
    e0b8:	      |      move.l 58(sp),d0
}
    e0bc:	      '----> movem.l (sp)+,d2-d4/a6
    e0c0:	             lea 104(sp),sp
    e0c4:	             rts

0000e0c6 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e0c6:	                      lea -144(sp),sp
    e0ca:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e0ce:	                      move.l 160(sp),148(sp)
    e0d4:	                      move.l #1006,144(sp)
    e0dc:	                      move.l 1ccac <DOSBase>,d0
    e0e2:	                      movea.l d0,a6
    e0e4:	                      move.l 148(sp),d1
    e0e8:	                      move.l 144(sp),d2
    e0ec:	                      jsr -30(a6)
    e0f0:	                      move.l d0,140(sp)
    e0f4:	                      move.l 140(sp),d0
    e0f8:	                      move.l d0,136(sp)

    if (!fp) {
    e0fc:	                  ,-- bne.s e116 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e0fe:	                  |   move.l 160(sp),-(sp)
    e102:	                  |   pea 19a5c <PutChar+0x1b64>
    e108:	                  |   jsr 17456 <KPrintF>
    e10e:	                  |   addq.l #8,sp
        return FALSE;
    e110:	                  |   clr.w d0
    e112:	,-----------------|-- bra.w e3d2 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e116:	|                 '-> movea.l 164(sp),a0
    e11a:	|                     movea.l 4(a0),a0
    e11e:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e122:	|                     move.w 1cd58 <saveEncoding>,d0
    e128:	|                     move.l d0,d0
    e12a:	|                     move.b d0,1cd56 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e130:	|                     move.w 1cd58 <saveEncoding>,d0
    e136:	|                     lsr.w #8,d0
    e138:	|                     move.l d0,d0
    e13a:	|                     move.b d0,1cd57 <encode2>

    if (saveEncoding) {
    e140:	|                     move.w 1cd58 <saveEncoding>,d0
    e146:	|                 ,-- beq.s e198 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e148:	|                 |   move.l 136(sp),116(sp)
    e14e:	|                 |   move.l #104694,112(sp)
    e156:	|                 |   moveq #99,d0
    e158:	|                 |   not.b d0
    e15a:	|                 |   add.l sp,d0
    e15c:	|                 |   addi.l #-144,d0
    e162:	|                 |   move.l d0,108(sp)
    e166:	|                 |   move.l 1ccac <DOSBase>,d0
    e16c:	|                 |   movea.l d0,a6
    e16e:	|                 |   move.l 116(sp),d1
    e172:	|                 |   move.l 112(sp),d2
    e176:	|                 |   move.l 108(sp),d3
    e17a:	|                 |   jsr -354(a6)
    e17e:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e182:	|                 |   move.l 136(sp),-(sp)
    e186:	|                 |   pea 19975 <PutChar+0x1a7d>
    e18c:	|                 |   jsr e3dc <writeStringEncoded>
    e192:	|                 |   addq.l #8,sp
    e194:	|  ,--------------|-- bra.w e3aa <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e198:	|  |              '-> move.l 136(sp),132(sp)
    e19e:	|  |                  move.l #104720,128(sp)
    e1a6:	|  |                  moveq #99,d1
    e1a8:	|  |                  not.b d1
    e1aa:	|  |                  add.l sp,d1
    e1ac:	|  |                  addi.l #-144,d1
    e1b2:	|  |                  move.l d1,124(sp)
    e1b6:	|  |                  move.l 1ccac <DOSBase>,d0
    e1bc:	|  |                  movea.l d0,a6
    e1be:	|  |                  move.l 132(sp),d1
    e1c2:	|  |                  move.l 128(sp),d2
    e1c6:	|  |                  move.l 124(sp),d3
    e1ca:	|  |                  jsr -354(a6)
    e1ce:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e1d2:	|  +----------------- bra.w e3aa <stackToFile+0x2e4>
        if (saveEncoding) {
    e1d6:	|  |  ,-------------> move.w 1cd58 <saveEncoding>,d0
    e1dc:	|  |  |     ,-------- beq.w e32e <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e1e0:	|  |  |     |         movea.l 152(sp),a0
    e1e4:	|  |  |     |         move.l (a0),d0
    e1e6:	|  |  |     |         moveq #1,d1
    e1e8:	|  |  |     |         cmp.l d0,d1
    e1ea:	|  |  |     |     ,-- beq.s e23a <stackToFile+0x174>
    e1ec:	|  |  |     |     |   moveq #3,d1
    e1ee:	|  |  |     |     |   cmp.l d0,d1
    e1f0:	|  |  |     |  ,--|-- bne.w e2fc <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e1f4:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e1fa:	|  |  |     |  |  |   move.b 1cd56 <encode1>,d0
    e200:	|  |  |     |  |  |   ext.w d0
    e202:	|  |  |     |  |  |   movea.w d0,a0
    e204:	|  |  |     |  |  |   move.l a0,72(sp)
    e208:	|  |  |     |  |  |   move.l 1ccac <DOSBase>,d0
    e20e:	|  |  |     |  |  |   movea.l d0,a6
    e210:	|  |  |     |  |  |   move.l 76(sp),d1
    e214:	|  |  |     |  |  |   move.l 72(sp),d2
    e218:	|  |  |     |  |  |   jsr -312(a6)
    e21c:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e220:	|  |  |     |  |  |   movea.l 152(sp),a0
    e224:	|  |  |     |  |  |   move.l 4(a0),d0
    e228:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e22c:	|  |  |     |  |  |   move.l d0,-(sp)
    e22e:	|  |  |     |  |  |   jsr e3dc <writeStringEncoded>
    e234:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e236:	|  |  |  ,--|--|--|-- bra.w e3a0 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e23a:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e23e:	|  |  |  |  |  |      move.l 4(a0),d0
    e242:	|  |  |  |  |  |  ,-- bmi.s e2b2 <stackToFile+0x1ec>
    e244:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e248:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e24c:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e252:	|  |  |  |  |  |  +-- bgt.s e2b2 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e254:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e25a:	|  |  |  |  |  |  |   move.b 1cd56 <encode1>,d0
    e260:	|  |  |  |  |  |  |   eori.b #2,d0
    e264:	|  |  |  |  |  |  |   ext.w d0
    e266:	|  |  |  |  |  |  |   movea.w d0,a0
    e268:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e26c:	|  |  |  |  |  |  |   move.l 1ccac <DOSBase>,d0
    e272:	|  |  |  |  |  |  |   movea.l d0,a6
    e274:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e278:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e27c:	|  |  |  |  |  |  |   jsr -312(a6)
    e280:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e284:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e28a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e28e:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e294:	|  |  |  |  |  |  |   move.l 1ccac <DOSBase>,d0
    e29a:	|  |  |  |  |  |  |   movea.l d0,a6
    e29c:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e2a0:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e2a4:	|  |  |  |  |  |  |   jsr -312(a6)
    e2a8:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e2ac:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e2ae:	|  |  |  +--|--|--|-- bra.w e3a0 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e2b2:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e2b8:	|  |  |  |  |  |      move.b 1cd56 <encode1>,d0
    e2be:	|  |  |  |  |  |      eori.b #1,d0
    e2c2:	|  |  |  |  |  |      ext.w d0
    e2c4:	|  |  |  |  |  |      movea.w d0,a0
    e2c6:	|  |  |  |  |  |      move.l a0,36(sp)
    e2ca:	|  |  |  |  |  |      move.l 1ccac <DOSBase>,d0
    e2d0:	|  |  |  |  |  |      movea.l d0,a6
    e2d2:	|  |  |  |  |  |      move.l 40(sp),d1
    e2d6:	|  |  |  |  |  |      move.l 36(sp),d2
    e2da:	|  |  |  |  |  |      jsr -312(a6)
    e2de:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e2e2:	|  |  |  |  |  |      movea.l 152(sp),a0
    e2e6:	|  |  |  |  |  |      move.l 4(a0),d0
    e2ea:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e2ee:	|  |  |  |  |  |      move.l d0,-(sp)
    e2f0:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e2f6:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e2f8:	|  |  |  +--|--|----- bra.w e3a0 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e2fc:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e300:	|  |  |  |  |         pea 19a6e <PutChar+0x1b76>
    e306:	|  |  |  |  |         jsr 17456 <KPrintF>
    e30c:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e30e:	|  |  |  |  |         move.l 136(sp),28(sp)
    e314:	|  |  |  |  |         move.l 1ccac <DOSBase>,d0
    e31a:	|  |  |  |  |         movea.l d0,a6
    e31c:	|  |  |  |  |         move.l 28(sp),d1
    e320:	|  |  |  |  |         jsr -36(a6)
    e324:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e328:	|  |  |  |  |         clr.w d0
    e32a:	+--|--|--|--|-------- bra.w e3d2 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e32e:	|  |  |  |  '-------> move.l 152(sp),d0
    e332:	|  |  |  |            move.l d0,-(sp)
    e334:	|  |  |  |            jsr 14f4c <getTextFromAnyVar>
    e33a:	|  |  |  |            addq.l #4,sp
    e33c:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e340:	|  |  |  |     ,----- beq.s e3b4 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e342:	|  |  |  |     |      movea.l 100(sp),a0
    e346:	|  |  |  |     |      move.b (a0),d0
    e348:	|  |  |  |     |      ext.w d0
    e34a:	|  |  |  |     |      movea.w d0,a0
    e34c:	|  |  |  |     |      move.l a0,12(sp)
    e350:	|  |  |  |     |      move.l 136(sp),96(sp)
    e356:	|  |  |  |     |      move.l #105162,92(sp)
    e35e:	|  |  |  |     |      moveq #99,d0
    e360:	|  |  |  |     |      not.b d0
    e362:	|  |  |  |     |      add.l sp,d0
    e364:	|  |  |  |     |      addi.l #-144,d0
    e36a:	|  |  |  |     |      move.l d0,88(sp)
    e36e:	|  |  |  |     |      move.l 1ccac <DOSBase>,d0
    e374:	|  |  |  |     |      movea.l d0,a6
    e376:	|  |  |  |     |      move.l 96(sp),d1
    e37a:	|  |  |  |     |      move.l 92(sp),d2
    e37e:	|  |  |  |     |      move.l 88(sp),d3
    e382:	|  |  |  |     |      jsr -354(a6)
    e386:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e38a:	|  |  |  |     |      move.l 100(sp),80(sp)
    e390:	|  |  |  |     |      move.l 1cca4 <SysBase>,d0
    e396:	|  |  |  |     |      movea.l d0,a6
    e398:	|  |  |  |     |      movea.l 80(sp),a1
    e39c:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e3a0:	|  |  |  '-----|----> movea.l 152(sp),a0
    e3a4:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e3aa:	|  '--|--------|----> tst.l 152(sp)
    e3ae:	|     '--------|----- bne.w e1d6 <stackToFile+0x110>
    e3b2:	|              |  ,-- bra.s e3b6 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e3b4:	|              '--|-> nop
    }
    Close(fp);
    e3b6:	|                 '-> move.l 136(sp),20(sp)
    e3bc:	|                     move.l 1ccac <DOSBase>,d0
    e3c2:	|                     movea.l d0,a6
    e3c4:	|                     move.l 20(sp),d1
    e3c8:	|                     jsr -36(a6)
    e3cc:	|                     move.l d0,16(sp)
    return TRUE;
    e3d0:	|                     moveq #1,d0
}
    e3d2:	'-------------------> movem.l (sp)+,d2-d3/a6
    e3d6:	                      lea 144(sp),sp
    e3da:	                      rts

0000e3dc <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e3dc:	       lea -20(sp),sp
    e3e0:	       move.l a6,-(sp)
    e3e2:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e3e4:	       move.l 32(sp),-(sp)
    e3e8:	       jsr 13e62 <strlen>
    e3ee:	       addq.l #4,sp
    e3f0:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e3f4:	       move.l 36(sp),-(sp)
    e3f8:	       move.l 24(sp),-(sp)
    e3fc:	       jsr 8d0 <put2bytes>
    e402:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e404:	       clr.l 24(sp)
    e408:	   ,-- bra.s e45e <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e40a:	,--|-> move.l 36(sp),16(sp)
    e410:	|  |   move.l 24(sp),d0
    e414:	|  |   movea.l 32(sp),a0
    e418:	|  |   adda.l d0,a0
    e41a:	|  |   move.b (a0),d1
    e41c:	|  |   move.b 1cd56 <encode1>,d0
    e422:	|  |   eor.b d1,d0
    e424:	|  |   ext.w d0
    e426:	|  |   movea.w d0,a0
    e428:	|  |   move.l a0,12(sp)
    e42c:	|  |   move.l 1ccac <DOSBase>,d0
    e432:	|  |   movea.l d0,a6
    e434:	|  |   move.l 16(sp),d1
    e438:	|  |   move.l 12(sp),d2
    e43c:	|  |   jsr -312(a6)
    e440:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e444:	|  |   move.b 1cd56 <encode1>,d0
    e44a:	|  |   move.b d0,d1
    e44c:	|  |   move.b 1cd57 <encode2>,d0
    e452:	|  |   add.b d1,d0
    e454:	|  |   move.b d0,1cd56 <encode1>
	for (a = 0; a < len; a ++) {
    e45a:	|  |   addq.l #1,24(sp)
    e45e:	|  '-> move.l 24(sp),d0
    e462:	|      cmp.l 20(sp),d0
    e466:	'----- blt.s e40a <writeStringEncoded+0x2e>
	}
}
    e468:	       nop
    e46a:	       nop
    e46c:	       move.l (sp)+,d2
    e46e:	       movea.l (sp)+,a6
    e470:	       lea 20(sp),sp
    e474:	       rts

0000e476 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e476:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e478:	                   tst.l 8(sp)
    e47c:	               ,-- bne.s e482 <failSecurityCheck+0xc>
    e47e:	               |   moveq #1,d0
    e480:	,--------------|-- bra.s e500 <failSecurityCheck+0x8a>

	int a = 0;
    e482:	|              '-> clr.l (sp)

	while (fn[a]) {
    e484:	|     ,----------- bra.s e4f2 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e486:	|  ,--|----------> move.l (sp),d0
    e488:	|  |  |            movea.l 8(sp),a0
    e48c:	|  |  |            adda.l d0,a0
    e48e:	|  |  |            move.b (a0),d0
    e490:	|  |  |            ext.w d0
    e492:	|  |  |            movea.w d0,a0
    e494:	|  |  |            moveq #124,d0
    e496:	|  |  |            cmp.l a0,d0
    e498:	|  |  |     ,----- beq.s e4da <failSecurityCheck+0x64>
    e49a:	|  |  |     |      moveq #124,d1
    e49c:	|  |  |     |      cmp.l a0,d1
    e49e:	|  |  |  ,--|----- blt.s e4f0 <failSecurityCheck+0x7a>
    e4a0:	|  |  |  |  |      moveq #92,d0
    e4a2:	|  |  |  |  |      cmp.l a0,d0
    e4a4:	|  |  |  |  +----- beq.s e4da <failSecurityCheck+0x64>
    e4a6:	|  |  |  |  |      moveq #92,d1
    e4a8:	|  |  |  |  |      cmp.l a0,d1
    e4aa:	|  |  |  +--|----- blt.s e4f0 <failSecurityCheck+0x7a>
    e4ac:	|  |  |  |  |      moveq #60,d0
    e4ae:	|  |  |  |  |      cmp.l a0,d0
    e4b0:	|  |  |  |  |  ,-- blt.s e4d0 <failSecurityCheck+0x5a>
    e4b2:	|  |  |  |  |  |   moveq #34,d1
    e4b4:	|  |  |  |  |  |   cmp.l a0,d1
    e4b6:	|  |  |  +--|--|-- bgt.s e4f0 <failSecurityCheck+0x7a>
    e4b8:	|  |  |  |  |  |   moveq #-34,d1
    e4ba:	|  |  |  |  |  |   add.l a0,d1
    e4bc:	|  |  |  |  |  |   move.l #83894529,d0
    e4c2:	|  |  |  |  |  |   lsr.l d1,d0
    e4c4:	|  |  |  |  |  |   moveq #1,d1
    e4c6:	|  |  |  |  |  |   and.l d1,d0
    e4c8:	|  |  |  |  |  |   sne d0
    e4ca:	|  |  |  |  |  |   neg.b d0
    e4cc:	|  |  |  |  +--|-- bne.s e4da <failSecurityCheck+0x64>
    e4ce:	|  |  |  +--|--|-- bra.s e4f0 <failSecurityCheck+0x7a>
    e4d0:	|  |  |  |  |  '-> lea -62(a0),a0
    e4d4:	|  |  |  |  |      moveq #1,d0
    e4d6:	|  |  |  |  |      cmp.l a0,d0
    e4d8:	|  |  |  +--|----- bcs.s e4f0 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e4da:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e4de:	|  |  |  |         pea 19ace <PutChar+0x1bd6>
    e4e4:	|  |  |  |         jsr 17456 <KPrintF>
    e4ea:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e4ec:	|  |  |  |         moveq #1,d0
    e4ee:	+--|--|--|-------- bra.s e500 <failSecurityCheck+0x8a>
		}
		a++;
    e4f0:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e4f2:	|  |  '----------> move.l (sp),d0
    e4f4:	|  |               movea.l 8(sp),a0
    e4f8:	|  |               adda.l d0,a0
    e4fa:	|  |               move.b (a0),d0
    e4fc:	|  '-------------- bne.s e486 <failSecurityCheck+0x10>
	}
	return FALSE;
    e4fe:	|                  clr.w d0
}
    e500:	'----------------> addq.l #4,sp
    e502:	                   rts

0000e504 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e504:	             lea -24(sp),sp
    e508:	             move.l a6,-(sp)
    e50a:	             move.l 40(sp),d0
    e50e:	             move.w d0,d0
    e510:	             move.w d0,6(sp)
	int fileNum = -1;
    e514:	             moveq #-1,d0
    e516:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e51a:	             jsr 6b9a <killSpeechTimers>

	switch (numParams) {
    e520:	             moveq #2,d0
    e522:	             cmp.l 32(sp),d0
    e526:	      ,----- beq.s e56a <sayCore+0x66>
    e528:	      |      moveq #3,d0
    e52a:	      |      cmp.l 32(sp),d0
    e52e:	,-----|----- bne.w e64c <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e532:	|     |      movea.l 36(sp),a0
    e536:	|     |      move.l 24(a0),d0
    e53a:	|     |      move.l d0,-(sp)
    e53c:	|     |      pea 5 <_start+0x5>
    e540:	|     |      lea 20(sp),a0
    e544:	|     |      move.l a0,-(sp)
    e546:	|     |      jsr 14976 <getValueType>
    e54c:	|     |      lea 12(sp),sp
    e550:	|     |      tst.w d0
    e552:	|     |  ,-- bne.s e55a <sayCore+0x56>
    e554:	|     |  |   moveq #1,d0
    e556:	|  ,--|--|-- bra.w e65c <sayCore+0x158>
			trimStack (&fun -> stack);
    e55a:	|  |  |  '-> moveq #24,d0
    e55c:	|  |  |      add.l 36(sp),d0
    e560:	|  |  |      move.l d0,-(sp)
    e562:	|  |  |      jsr 152fa <trimStack>
    e568:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e56a:	|  |  '----> movea.l 36(sp),a0
    e56e:	|  |         move.l 24(a0),d0
    e572:	|  |         move.l d0,-(sp)
    e574:	|  |         jsr 14f4c <getTextFromAnyVar>
    e57a:	|  |         addq.l #4,sp
    e57c:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e580:	|  |     ,-- bne.s e588 <sayCore+0x84>
    e582:	|  |     |   moveq #1,d0
    e584:	|  +-----|-- bra.w e65c <sayCore+0x158>
			trimStack (&fun -> stack);
    e588:	|  |     '-> moveq #24,d0
    e58a:	|  |         add.l 36(sp),d0
    e58e:	|  |         move.l d0,-(sp)
    e590:	|  |         jsr 152fa <trimStack>
    e596:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e598:	|  |         movea.l 36(sp),a0
    e59c:	|  |         move.l 24(a0),d0
    e5a0:	|  |         move.l d0,-(sp)
    e5a2:	|  |         pea 7 <_start+0x7>
    e5a6:	|  |         lea 16(sp),a0
    e5aa:	|  |         move.l a0,-(sp)
    e5ac:	|  |         jsr 14976 <getValueType>
    e5b2:	|  |         lea 12(sp),sp
    e5b6:	|  |         tst.w d0
    e5b8:	|  |     ,-- bne.s e5c0 <sayCore+0xbc>
    e5ba:	|  |     |   moveq #1,d0
    e5bc:	|  +-----|-- bra.w e65c <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e5c0:	|  |     '-> movea.l 36(sp),a0
    e5c4:	|  |         move.l 24(a0),d0
    e5c8:	|  |         move.l d0,-(sp)
    e5ca:	|  |         pea 7 <_start+0x7>
    e5ce:	|  |         lea 16(sp),a0
    e5d2:	|  |         move.l a0,-(sp)
    e5d4:	|  |         jsr 14976 <getValueType>
    e5da:	|  |         lea 12(sp),sp
    e5de:	|  |         tst.w d0
    e5e0:	|  |     ,-- bne.s e5e6 <sayCore+0xe2>
    e5e2:	|  |     |   moveq #1,d0
    e5e4:	|  +-----|-- bra.s e65c <sayCore+0x158>
			trimStack (&fun -> stack);
    e5e6:	|  |     '-> moveq #24,d0
    e5e8:	|  |         add.l 36(sp),d0
    e5ec:	|  |         move.l d0,-(sp)
    e5ee:	|  |         jsr 152fa <trimStack>
    e5f4:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e5f6:	|  |         movea.w 6(sp),a0
    e5fa:	|  |         move.l 12(sp),d1
    e5fe:	|  |         move.l 8(sp),d0
    e602:	|  |         move.l a0,-(sp)
    e604:	|  |         move.l d1,-(sp)
    e606:	|  |         move.l d0,-(sp)
    e608:	|  |         move.l 36(sp),-(sp)
    e60c:	|  |         jsr 4302 <wrapSpeech>
    e612:	|  |         lea 16(sp),sp
    e616:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e61a:	|  |         movea.l 36(sp),a0
    e61e:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e624:	|  |         movea.l 36(sp),a0
    e628:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e62e:	|  |         move.l 24(sp),16(sp)
    e634:	|  |         move.l 1cca4 <SysBase>,d0
    e63a:	|  |         movea.l d0,a6
    e63c:	|  |         movea.l 16(sp),a1
    e640:	|  |         jsr -690(a6)
			newText = NULL;
    e644:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e648:	|  |         moveq #0,d0
    e64a:	|  +-------- bra.s e65c <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e64c:	'--|-------> pea 19b54 <PutChar+0x1c5c>
    e652:	   |         jsr 17456 <KPrintF>
    e658:	   |         addq.l #4,sp
	return BR_ERROR;
    e65a:	   |         moveq #1,d0
}
    e65c:	   '-------> movea.l (sp)+,a6
    e65e:	             lea 24(sp),sp
    e662:	             rts

0000e664 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e664:	pea 1 <_start+0x1>
    e668:	move.l 12(sp),-(sp)
    e66c:	move.l 12(sp),-(sp)
    e670:	jsr e504 <sayCore>
    e676:	lea 12(sp),sp
}
    e67a:	rts

0000e67c <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e67c:	clr.l -(sp)
    e67e:	move.l 12(sp),-(sp)
    e682:	move.l 12(sp),-(sp)
    e686:	jsr e504 <sayCore>
    e68c:	lea 12(sp),sp
}
    e690:	rts

0000e692 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e692:	jsr 15342 <freeze>
	freezeSubs (); 
    e698:	jsr 618a <freezeSubs>
	fun -> freezerLevel = 0;
    e69e:	movea.l 8(sp),a0
    e6a2:	clr.b 56(a0)
	return BR_CONTINUE;
    e6a6:	moveq #2,d0
}
    e6a8:	rts

0000e6aa <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e6aa:	jsr 15546 <unfreeze>
	unfreezeSubs (); 
    e6b0:	jsr 7750 <unfreezeSubs>
	return BR_CONTINUE;
    e6b6:	moveq #2,d0
}
    e6b8:	rts

0000e6ba <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e6ba:	jsr 15522 <howFrozen>
    e6c0:	move.l d0,d1
    e6c2:	moveq #28,d0
    e6c4:	add.l 8(sp),d0
    e6c8:	move.l d1,-(sp)
    e6ca:	pea 1 <_start+0x1>
    e6ce:	move.l d0,-(sp)
    e6d0:	jsr 15268 <setVariable>
    e6d6:	lea 12(sp),sp
	return BR_CONTINUE; 
    e6da:	moveq #2,d0
}
    e6dc:	rts

0000e6de <builtIn_setCursor>:

builtIn(setCursor)
{
    e6de:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e6e0:	movea.l 12(sp),a0
    e6e4:	move.l 24(a0),d0
    e6e8:	move.l d0,-(sp)
    e6ea:	jsr 14e4e <getAnimationFromVar>
    e6f0:	addq.l #4,sp
    e6f2:	move.l d0,(sp)
	pickAnimCursor (aa);
    e6f4:	move.l (sp),-(sp)
    e6f6:	jsr d6c <pickAnimCursor>
    e6fc:	addq.l #4,sp
	trimStack (&fun -> stack);
    e6fe:	moveq #24,d0
    e700:	add.l 12(sp),d0
    e704:	move.l d0,-(sp)
    e706:	jsr 152fa <trimStack>
    e70c:	addq.l #4,sp
	return BR_CONTINUE;
    e70e:	moveq #2,d0
}
    e710:	addq.l #4,sp
    e712:	rts

0000e714 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e714:	move.l 1cc60 <input+0xa>,d1
    e71a:	move.l 1cd5a <cameraX>,d0
    e720:	add.l d0,d1
    e722:	moveq #28,d0
    e724:	add.l 8(sp),d0
    e728:	move.l d1,-(sp)
    e72a:	pea 1 <_start+0x1>
    e72e:	move.l d0,-(sp)
    e730:	jsr 15268 <setVariable>
    e736:	lea 12(sp),sp
	return BR_CONTINUE;
    e73a:	moveq #2,d0
}
    e73c:	rts

0000e73e <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e73e:	move.l 1cc64 <input+0xe>,d1
    e744:	move.l 1cd5e <cameraY>,d0
    e74a:	add.l d0,d1
    e74c:	moveq #28,d0
    e74e:	add.l 8(sp),d0
    e752:	move.l d1,-(sp)
    e754:	pea 1 <_start+0x1>
    e758:	move.l d0,-(sp)
    e75a:	jsr 15268 <setVariable>
    e760:	lea 12(sp),sp
	return BR_CONTINUE;
    e764:	moveq #2,d0
}
    e766:	rts

0000e768 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e768:	move.l 1cc60 <input+0xa>,d0
    e76e:	move.l d0,-(sp)
    e770:	jsr 17888 <__floatsisf>
    e776:	addq.l #4,sp
    e778:	move.l d0,d1
    e77a:	move.l 1c636 <cameraZoom>,d0
    e780:	move.l d0,-(sp)
    e782:	move.l d1,-(sp)
    e784:	jsr 1793a <__mulsf3>
    e78a:	addq.l #8,sp
    e78c:	move.l d0,-(sp)
    e78e:	jsr 17820 <__fixsfsi>
    e794:	addq.l #4,sp
    e796:	move.l d0,d1
    e798:	moveq #28,d0
    e79a:	add.l 8(sp),d0
    e79e:	move.l d1,-(sp)
    e7a0:	pea 1 <_start+0x1>
    e7a4:	move.l d0,-(sp)
    e7a6:	jsr 15268 <setVariable>
    e7ac:	lea 12(sp),sp
	return BR_CONTINUE;
    e7b0:	moveq #2,d0
}
    e7b2:	rts

0000e7b4 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e7b4:	move.l 1cc64 <input+0xe>,d0
    e7ba:	move.l d0,-(sp)
    e7bc:	jsr 17888 <__floatsisf>
    e7c2:	addq.l #4,sp
    e7c4:	move.l d0,d1
    e7c6:	move.l 1c636 <cameraZoom>,d0
    e7cc:	move.l d0,-(sp)
    e7ce:	move.l d1,-(sp)
    e7d0:	jsr 1793a <__mulsf3>
    e7d6:	addq.l #8,sp
    e7d8:	move.l d0,-(sp)
    e7da:	jsr 17820 <__fixsfsi>
    e7e0:	addq.l #4,sp
    e7e2:	move.l d0,d1
    e7e4:	moveq #28,d0
    e7e6:	add.l 8(sp),d0
    e7ea:	move.l d1,-(sp)
    e7ec:	pea 1 <_start+0x1>
    e7f0:	move.l d0,-(sp)
    e7f2:	jsr 15268 <setVariable>
    e7f8:	lea 12(sp),sp
	return BR_CONTINUE;
    e7fc:	moveq #2,d0
}
    e7fe:	rts

0000e800 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e800:	jsr 8782 <statusBarText>
    e806:	move.l d0,d1
    e808:	moveq #28,d0
    e80a:	add.l 8(sp),d0
    e80e:	move.l d1,-(sp)
    e810:	move.l d0,-(sp)
    e812:	jsr 14b98 <makeTextVar>
    e818:	addq.l #8,sp
	return BR_CONTINUE;
    e81a:	moveq #2,d0
}
    e81c:	rts

0000e81e <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e81e:	       lea -20(sp),sp
    e822:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e824:	       movea.l 32(sp),a0
    e828:	       move.l 24(a0),d0
    e82c:	       move.l d0,-(sp)
    e82e:	       jsr 14f4c <getTextFromAnyVar>
    e834:	       addq.l #4,sp
    e836:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e83a:	   ,-- bne.s e842 <builtIn_getMatchingFiles+0x24>
    e83c:	   |   moveq #1,d0
    e83e:	,--|-- bra.w e904 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e842:	|  '-> moveq #24,d0
    e844:	|      add.l 32(sp),d0
    e848:	|      move.l d0,-(sp)
    e84a:	|      jsr 152fa <trimStack>
    e850:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e852:	|      moveq #28,d0
    e854:	|      add.l 32(sp),d0
    e858:	|      move.l d0,-(sp)
    e85a:	|      jsr 14bc4 <unlinkVar>
    e860:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e862:	|      movea.l 32(sp),a0
    e866:	|      moveq #6,d0
    e868:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e86c:	|      moveq #12,d0
    e86e:	|      move.l d0,16(sp)
    e872:	|      clr.l 12(sp)
    e876:	|      move.l 1cca4 <SysBase>,d0
    e87c:	|      movea.l d0,a6
    e87e:	|      move.l 16(sp),d0
    e882:	|      move.l 12(sp),d1
    e886:	|      jsr -684(a6)
    e88a:	|      move.l d0,8(sp)
    e88e:	|      move.l 8(sp),d0
    e892:	|      movea.l 32(sp),a0
    e896:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e89a:	|      moveq #32,d0
    e89c:	|      add.l 32(sp),d0
    e8a0:	|  ,-- bne.s e8a6 <builtIn_getMatchingFiles+0x88>
    e8a2:	|  |   moveq #1,d0
    e8a4:	+--|-- bra.s e904 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e8a6:	|  '-> movea.l 32(sp),a0
    e8aa:	|      movea.l 32(a0),a0
    e8ae:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e8b0:	|      movea.l 32(sp),a0
    e8b4:	|      movea.l 32(a0),a0
    e8b8:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e8bc:	|      movea.l 32(sp),a0
    e8c0:	|      movea.l 32(a0),a0
    e8c4:	|      moveq #1,d0
    e8c6:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e8ca:	|      movea.l 32(sp),a0
    e8ce:	|      move.l 32(a0),d0
    e8d2:	|      move.l 20(sp),-(sp)
    e8d6:	|      move.l d0,-(sp)
    e8d8:	|      jsr 14732 <getSavedGamesStack>
    e8de:	|      addq.l #8,sp
    e8e0:	|      tst.w d0
    e8e2:	|  ,-- bne.s e8e8 <builtIn_getMatchingFiles+0xca>
    e8e4:	|  |   moveq #1,d0
    e8e6:	+--|-- bra.s e904 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e8e8:	|  '-> move.l 20(sp),4(sp)
    e8ee:	|      move.l 1cca4 <SysBase>,d0
    e8f4:	|      movea.l d0,a6
    e8f6:	|      movea.l 4(sp),a1
    e8fa:	|      jsr -690(a6)
	newText = NULL;
    e8fe:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e902:	|      moveq #2,d0
}
    e904:	'----> movea.l (sp)+,a6
    e906:	       lea 20(sp),sp
    e90a:	       rts

0000e90c <builtIn_saveGame>:

builtIn(saveGame)
{
    e90c:	       lea -12(sp),sp
    e910:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e912:	       movea.l 24(sp),a0
    e916:	       move.l 24(a0),d0
    e91a:	       move.l d0,-(sp)
    e91c:	       jsr 14f4c <getTextFromAnyVar>
    e922:	       addq.l #4,sp
    e924:	       move.l d0,1cc70 <loadNow>
    trimStack(&fun->stack);
    e92a:	       moveq #24,d0
    e92c:	       add.l 24(sp),d0
    e930:	       move.l d0,-(sp)
    e932:	       jsr 152fa <trimStack>
    e938:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e93a:	       move.l 1cc70 <loadNow>,d0
    e940:	       move.l d0,-(sp)
    e942:	       jsr 2fe <encodeFilename>
    e948:	       addq.l #4,sp
    e94a:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e94e:	       move.l 1cc70 <loadNow>,8(sp)
    e956:	       move.l 1cca4 <SysBase>,d0
    e95c:	       movea.l d0,a6
    e95e:	       movea.l 8(sp),a1
    e962:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e966:	       move.l 12(sp),-(sp)
    e96a:	       jsr e476 <failSecurityCheck>
    e970:	       addq.l #4,sp
    e972:	       tst.w d0
    e974:	   ,-- beq.s e97a <builtIn_saveGame+0x6e>
    e976:	   |   moveq #1,d0
    e978:	,--|-- bra.s e9ca <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e97a:	|  '-> move.l 12(sp),-(sp)
    e97e:	|      pea 19b82 <PutChar+0x1c8a>
    e984:	|      jsr 13ea2 <joinStrings>
    e98a:	|      addq.l #8,sp
    e98c:	|      move.l d0,1cc70 <loadNow>
    FreeVec(aaaaa);
    e992:	|      move.l 12(sp),4(sp)
    e998:	|      move.l 1cca4 <SysBase>,d0
    e99e:	|      movea.l d0,a6
    e9a0:	|      movea.l 4(sp),a1
    e9a4:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e9a8:	|      moveq #28,d0
    e9aa:	|      add.l 24(sp),d0
    e9ae:	|      clr.l -(sp)
    e9b0:	|      pea 1 <_start+0x1>
    e9b4:	|      move.l d0,-(sp)
    e9b6:	|      jsr 15268 <setVariable>
    e9bc:	|      lea 12(sp),sp
    saverFunc = fun;
    e9c0:	|      move.l 24(sp),1cd6a <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e9c8:	|      moveq #0,d0
}
    e9ca:	'----> movea.l (sp)+,a6
    e9cc:	       lea 12(sp),sp
    e9d0:	       rts

0000e9d2 <builtIn_fileExists>:

builtIn(fileExists)
{
    e9d2:	       lea -36(sp),sp
    e9d6:	       move.l a6,-(sp)
    e9d8:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e9da:	       movea.l 52(sp),a0
    e9de:	       move.l 24(a0),d0
    e9e2:	       move.l d0,-(sp)
    e9e4:	       jsr 14f4c <getTextFromAnyVar>
    e9ea:	       addq.l #4,sp
    e9ec:	       move.l d0,1cc70 <loadNow>
    trimStack(&fun->stack);
    e9f2:	       moveq #24,d0
    e9f4:	       add.l 52(sp),d0
    e9f8:	       move.l d0,-(sp)
    e9fa:	       jsr 152fa <trimStack>
    ea00:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    ea02:	       move.l 1cc70 <loadNow>,d0
    ea08:	       move.l d0,-(sp)
    ea0a:	       jsr 2fe <encodeFilename>
    ea10:	       addq.l #4,sp
    ea12:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ea16:	       move.l 1cc70 <loadNow>,36(sp)
    ea1e:	       move.l 1cca4 <SysBase>,d0
    ea24:	       movea.l d0,a6
    ea26:	       movea.l 36(sp),a1
    ea2a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ea2e:	       move.l 40(sp),-(sp)
    ea32:	       jsr e476 <failSecurityCheck>
    ea38:	       addq.l #4,sp
    ea3a:	       tst.w d0
    ea3c:	   ,-- beq.s ea44 <builtIn_fileExists+0x72>
    ea3e:	   |   moveq #1,d0
    ea40:	,--|-- bra.w eae4 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ea44:	|  '-> move.l 40(sp),32(sp)
    ea4a:	|      move.l #1005,28(sp)
    ea52:	|      move.l 1ccac <DOSBase>,d0
    ea58:	|      movea.l d0,a6
    ea5a:	|      move.l 32(sp),d1
    ea5e:	|      move.l 28(sp),d2
    ea62:	|      jsr -30(a6)
    ea66:	|      move.l d0,24(sp)
    ea6a:	|      move.l 24(sp),d0
    ea6e:	|      move.l d0,20(sp)
    if (!fp) {        
    ea72:	|  ,-- bne.s ea82 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ea74:	|  |   pea 19b84 <PutChar+0x1c8c>
    ea7a:	|  |   jsr 17456 <KPrintF>
    ea80:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ea82:	|  '-> tst.l 20(sp)
    ea86:	|      sne d0
    ea88:	|      neg.b d0
    ea8a:	|      moveq #0,d1
    ea8c:	|      move.b d0,d1
    ea8e:	|      moveq #28,d0
    ea90:	|      add.l 52(sp),d0
    ea94:	|      move.l d1,-(sp)
    ea96:	|      pea 1 <_start+0x1>
    ea9a:	|      move.l d0,-(sp)
    ea9c:	|      jsr 15268 <setVariable>
    eaa2:	|      lea 12(sp),sp
    if (fp) Close(fp);
    eaa6:	|      tst.l 20(sp)
    eaaa:	|  ,-- beq.s eac6 <builtIn_fileExists+0xf4>
    eaac:	|  |   move.l 20(sp),16(sp)
    eab2:	|  |   move.l 1ccac <DOSBase>,d0
    eab8:	|  |   movea.l d0,a6
    eaba:	|  |   move.l 16(sp),d1
    eabe:	|  |   jsr -36(a6)
    eac2:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    eac6:	|  '-> move.l 40(sp),8(sp)
    eacc:	|      move.l 1cca4 <SysBase>,d0
    ead2:	|      movea.l d0,a6
    ead4:	|      movea.l 8(sp),a1
    ead8:	|      jsr -690(a6)
    loadNow = NULL;
    eadc:	|      clr.l 1cc70 <loadNow>
    return BR_CONTINUE;
    eae2:	|      moveq #2,d0
}
    eae4:	'----> move.l (sp)+,d2
    eae6:	       movea.l (sp)+,a6
    eae8:	       lea 36(sp),sp
    eaec:	       rts

0000eaee <builtIn_loadGame>:

builtIn(loadGame)
{
    eaee:	       lea -36(sp),sp
    eaf2:	       move.l a6,-(sp)
    eaf4:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    eaf6:	       movea.l 52(sp),a0
    eafa:	       move.l 24(a0),d0
    eafe:	       move.l d0,-(sp)
    eb00:	       jsr 14f4c <getTextFromAnyVar>
    eb06:	       addq.l #4,sp
    eb08:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    eb0c:	       moveq #24,d0
    eb0e:	       add.l 52(sp),d0
    eb12:	       move.l d0,-(sp)
    eb14:	       jsr 152fa <trimStack>
    eb1a:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    eb1c:	       move.l 40(sp),-(sp)
    eb20:	       jsr 2fe <encodeFilename>
    eb26:	       addq.l #4,sp
    eb28:	       move.l d0,1cc70 <loadNow>
    FreeVec(aaaaa);
    eb2e:	       move.l 40(sp),36(sp)
    eb34:	       move.l 1cca4 <SysBase>,d0
    eb3a:	       movea.l d0,a6
    eb3c:	       movea.l 36(sp),a1
    eb40:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    eb44:	       move.l 1cc70 <loadNow>,d0
    eb4a:	       move.l d0,-(sp)
    eb4c:	       jsr e476 <failSecurityCheck>
    eb52:	       addq.l #4,sp
    eb54:	       tst.w d0
    eb56:	   ,-- beq.s eb5c <builtIn_loadGame+0x6e>
    eb58:	   |   moveq #1,d0
    eb5a:	,--|-- bra.s ebcc <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    eb5c:	|  '-> move.l 1cc70 <loadNow>,32(sp)
    eb64:	|      move.l #1005,28(sp)
    eb6c:	|      move.l 1ccac <DOSBase>,d0
    eb72:	|      movea.l d0,a6
    eb74:	|      move.l 32(sp),d1
    eb78:	|      move.l 28(sp),d2
    eb7c:	|      jsr -30(a6)
    eb80:	|      move.l d0,24(sp)
    eb84:	|      move.l 24(sp),d0
    eb88:	|      move.l d0,20(sp)
    if (fp) {
    eb8c:	|  ,-- beq.s ebac <builtIn_loadGame+0xbe>
        Close(fp);
    eb8e:	|  |   move.l 20(sp),12(sp)
    eb94:	|  |   move.l 1ccac <DOSBase>,d0
    eb9a:	|  |   movea.l d0,a6
    eb9c:	|  |   move.l 12(sp),d1
    eba0:	|  |   jsr -36(a6)
    eba4:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    eba8:	|  |   moveq #0,d0
    ebaa:	+--|-- bra.s ebcc <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ebac:	|  '-> move.l 1cc70 <loadNow>,16(sp)
    ebb4:	|      move.l 1cca4 <SysBase>,d0
    ebba:	|      movea.l d0,a6
    ebbc:	|      movea.l 16(sp),a1
    ebc0:	|      jsr -690(a6)
    loadNow = NULL;
    ebc4:	|      clr.l 1cc70 <loadNow>
    return BR_CONTINUE;
    ebca:	|      moveq #2,d0
}
    ebcc:	'----> move.l (sp)+,d2
    ebce:	       movea.l (sp)+,a6
    ebd0:	       lea 36(sp),sp
    ebd4:	       rts

0000ebd6 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ebd6:	move.l 1cd40 <sceneHeight>,d0
    ebdc:	move.l d0,d1
    ebde:	move.l 1cd3c <sceneWidth>,d0
    ebe4:	move.l d1,-(sp)
    ebe6:	move.l d0,-(sp)
    ebe8:	clr.l -(sp)
    ebea:	clr.l -(sp)
    ebec:	jsr d360 <blankScreen>
    ebf2:	lea 16(sp),sp
	return BR_CONTINUE;
    ebf6:	moveq #2,d0
}
    ebf8:	rts

0000ebfa <builtIn_blankArea>:

builtIn(blankArea)
{
    ebfa:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebfe:	       movea.l 24(sp),a0
    ec02:	       move.l 24(a0),d0
    ec06:	       move.l d0,-(sp)
    ec08:	       pea 1 <_start+0x1>
    ec0c:	       lea 8(sp),a0
    ec10:	       move.l a0,-(sp)
    ec12:	       jsr 14976 <getValueType>
    ec18:	       lea 12(sp),sp
    ec1c:	       tst.w d0
    ec1e:	   ,-- bne.s ec26 <builtIn_blankArea+0x2c>
    ec20:	   |   moveq #1,d0
    ec22:	,--|-- bra.w ecfc <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec26:	|  '-> moveq #24,d0
    ec28:	|      add.l 24(sp),d0
    ec2c:	|      move.l d0,-(sp)
    ec2e:	|      jsr 152fa <trimStack>
    ec34:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ec36:	|      movea.l 24(sp),a0
    ec3a:	|      move.l 24(a0),d0
    ec3e:	|      move.l d0,-(sp)
    ec40:	|      pea 1 <_start+0x1>
    ec44:	|      lea 12(sp),a0
    ec48:	|      move.l a0,-(sp)
    ec4a:	|      jsr 14976 <getValueType>
    ec50:	|      lea 12(sp),sp
    ec54:	|      tst.w d0
    ec56:	|  ,-- bne.s ec5e <builtIn_blankArea+0x64>
    ec58:	|  |   moveq #1,d0
    ec5a:	+--|-- bra.w ecfc <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec5e:	|  '-> moveq #24,d0
    ec60:	|      add.l 24(sp),d0
    ec64:	|      move.l d0,-(sp)
    ec66:	|      jsr 152fa <trimStack>
    ec6c:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ec6e:	|      movea.l 24(sp),a0
    ec72:	|      move.l 24(a0),d0
    ec76:	|      move.l d0,-(sp)
    ec78:	|      pea 1 <_start+0x1>
    ec7c:	|      moveq #16,d0
    ec7e:	|      add.l sp,d0
    ec80:	|      move.l d0,-(sp)
    ec82:	|      jsr 14976 <getValueType>
    ec88:	|      lea 12(sp),sp
    ec8c:	|      tst.w d0
    ec8e:	|  ,-- bne.s ec94 <builtIn_blankArea+0x9a>
    ec90:	|  |   moveq #1,d0
    ec92:	+--|-- bra.s ecfc <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec94:	|  '-> moveq #24,d0
    ec96:	|      add.l 24(sp),d0
    ec9a:	|      move.l d0,-(sp)
    ec9c:	|      jsr 152fa <trimStack>
    eca2:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eca4:	|      movea.l 24(sp),a0
    eca8:	|      move.l 24(a0),d0
    ecac:	|      move.l d0,-(sp)
    ecae:	|      pea 1 <_start+0x1>
    ecb2:	|      moveq #20,d0
    ecb4:	|      add.l sp,d0
    ecb6:	|      move.l d0,-(sp)
    ecb8:	|      jsr 14976 <getValueType>
    ecbe:	|      lea 12(sp),sp
    ecc2:	|      tst.w d0
    ecc4:	|  ,-- bne.s ecca <builtIn_blankArea+0xd0>
    ecc6:	|  |   moveq #1,d0
    ecc8:	+--|-- bra.s ecfc <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ecca:	|  '-> moveq #24,d0
    eccc:	|      add.l 24(sp),d0
    ecd0:	|      move.l d0,-(sp)
    ecd2:	|      jsr 152fa <trimStack>
    ecd8:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ecda:	|      movea.l (sp),a1
    ecdc:	|      movea.l 4(sp),a0
    ece0:	|      move.l 8(sp),d1
    ece4:	|      move.l 12(sp),d0
    ece8:	|      move.l a1,-(sp)
    ecea:	|      move.l a0,-(sp)
    ecec:	|      move.l d1,-(sp)
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr d360 <blankScreen>
    ecf6:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ecfa:	|      moveq #2,d0
}
    ecfc:	'----> lea 16(sp),sp
    ed00:	       rts

0000ed02 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ed02:	jsr d37e <darkScreen>
	return BR_CONTINUE;
    ed08:	moveq #2,d0
}
    ed0a:	rts

0000ed0c <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ed0c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed10:	       movea.l 20(sp),a0
    ed14:	       move.l 24(a0),d0
    ed18:	       move.l d0,-(sp)
    ed1a:	       pea 1 <_start+0x1>
    ed1e:	       lea 8(sp),a0
    ed22:	       move.l a0,-(sp)
    ed24:	       jsr 14976 <getValueType>
    ed2a:	       lea 12(sp),sp
    ed2e:	       tst.w d0
    ed30:	   ,-- bne.s ed38 <builtIn_addOverlay+0x2c>
    ed32:	   |   moveq #1,d0
    ed34:	,--|-- bra.w edd0 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ed38:	|  '-> moveq #24,d0
    ed3a:	|      add.l 20(sp),d0
    ed3e:	|      move.l d0,-(sp)
    ed40:	|      jsr 152fa <trimStack>
    ed46:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed48:	|      movea.l 20(sp),a0
    ed4c:	|      move.l 24(a0),d0
    ed50:	|      move.l d0,-(sp)
    ed52:	|      pea 1 <_start+0x1>
    ed56:	|      moveq #12,d0
    ed58:	|      add.l sp,d0
    ed5a:	|      move.l d0,-(sp)
    ed5c:	|      jsr 14976 <getValueType>
    ed62:	|      lea 12(sp),sp
    ed66:	|      tst.w d0
    ed68:	|  ,-- bne.s ed6e <builtIn_addOverlay+0x62>
    ed6a:	|  |   moveq #1,d0
    ed6c:	+--|-- bra.s edd0 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ed6e:	|  '-> moveq #24,d0
    ed70:	|      add.l 20(sp),d0
    ed74:	|      move.l d0,-(sp)
    ed76:	|      jsr 152fa <trimStack>
    ed7c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed7e:	|      movea.l 20(sp),a0
    ed82:	|      move.l 24(a0),d0
    ed86:	|      move.l d0,-(sp)
    ed88:	|      pea 5 <_start+0x5>
    ed8c:	|      moveq #16,d0
    ed8e:	|      add.l sp,d0
    ed90:	|      move.l d0,-(sp)
    ed92:	|      jsr 14976 <getValueType>
    ed98:	|      lea 12(sp),sp
    ed9c:	|      tst.w d0
    ed9e:	|  ,-- bne.s eda4 <builtIn_addOverlay+0x98>
    eda0:	|  |   moveq #1,d0
    eda2:	+--|-- bra.s edd0 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eda4:	|  '-> moveq #24,d0
    eda6:	|      add.l 20(sp),d0
    edaa:	|      move.l d0,-(sp)
    edac:	|      jsr 152fa <trimStack>
    edb2:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    edb4:	|      movea.l (sp),a0
    edb6:	|      move.l 4(sp),d1
    edba:	|      move.l 8(sp),d0
    edbe:	|      move.l a0,-(sp)
    edc0:	|      move.l d1,-(sp)
    edc2:	|      move.l d0,-(sp)
    edc4:	|      jsr d49c <loadBackDrop>
    edca:	|      lea 12(sp),sp
	return BR_CONTINUE;
    edce:	|      moveq #2,d0
}
    edd0:	'----> lea 12(sp),sp
    edd4:	       rts

0000edd6 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    edd6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edda:	       movea.l 20(sp),a0
    edde:	       move.l 24(a0),d0
    ede2:	       move.l d0,-(sp)
    ede4:	       pea 1 <_start+0x1>
    ede8:	       lea 8(sp),a0
    edec:	       move.l a0,-(sp)
    edee:	       jsr 14976 <getValueType>
    edf4:	       lea 12(sp),sp
    edf8:	       tst.w d0
    edfa:	   ,-- bne.s ee02 <builtIn_mixOverlay+0x2c>
    edfc:	   |   moveq #1,d0
    edfe:	,--|-- bra.w ee9a <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ee02:	|  '-> moveq #24,d0
    ee04:	|      add.l 20(sp),d0
    ee08:	|      move.l d0,-(sp)
    ee0a:	|      jsr 152fa <trimStack>
    ee10:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee12:	|      movea.l 20(sp),a0
    ee16:	|      move.l 24(a0),d0
    ee1a:	|      move.l d0,-(sp)
    ee1c:	|      pea 1 <_start+0x1>
    ee20:	|      moveq #12,d0
    ee22:	|      add.l sp,d0
    ee24:	|      move.l d0,-(sp)
    ee26:	|      jsr 14976 <getValueType>
    ee2c:	|      lea 12(sp),sp
    ee30:	|      tst.w d0
    ee32:	|  ,-- bne.s ee38 <builtIn_mixOverlay+0x62>
    ee34:	|  |   moveq #1,d0
    ee36:	+--|-- bra.s ee9a <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ee38:	|  '-> moveq #24,d0
    ee3a:	|      add.l 20(sp),d0
    ee3e:	|      move.l d0,-(sp)
    ee40:	|      jsr 152fa <trimStack>
    ee46:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee48:	|      movea.l 20(sp),a0
    ee4c:	|      move.l 24(a0),d0
    ee50:	|      move.l d0,-(sp)
    ee52:	|      pea 5 <_start+0x5>
    ee56:	|      moveq #16,d0
    ee58:	|      add.l sp,d0
    ee5a:	|      move.l d0,-(sp)
    ee5c:	|      jsr 14976 <getValueType>
    ee62:	|      lea 12(sp),sp
    ee66:	|      tst.w d0
    ee68:	|  ,-- bne.s ee6e <builtIn_mixOverlay+0x98>
    ee6a:	|  |   moveq #1,d0
    ee6c:	+--|-- bra.s ee9a <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ee6e:	|  '-> moveq #24,d0
    ee70:	|      add.l 20(sp),d0
    ee74:	|      move.l d0,-(sp)
    ee76:	|      jsr 152fa <trimStack>
    ee7c:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ee7e:	|      movea.l (sp),a0
    ee80:	|      move.l 4(sp),d1
    ee84:	|      move.l 8(sp),d0
    ee88:	|      move.l a0,-(sp)
    ee8a:	|      move.l d1,-(sp)
    ee8c:	|      move.l d0,-(sp)
    ee8e:	|      jsr d512 <mixBackDrop>
    ee94:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee98:	|      moveq #2,d0
}
    ee9a:	'----> lea 12(sp),sp
    ee9e:	       rts

0000eea0 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    eea0:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eea4:	       movea.l 20(sp),a0
    eea8:	       move.l 24(a0),d0
    eeac:	       move.l d0,-(sp)
    eeae:	       pea 1 <_start+0x1>
    eeb2:	       lea 8(sp),a0
    eeb6:	       move.l a0,-(sp)
    eeb8:	       jsr 14976 <getValueType>
    eebe:	       lea 12(sp),sp
    eec2:	       tst.w d0
    eec4:	   ,-- bne.s eecc <builtIn_pasteImage+0x2c>
    eec6:	   |   moveq #1,d0
    eec8:	,--|-- bra.w ef5c <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    eecc:	|  '-> moveq #24,d0
    eece:	|      add.l 20(sp),d0
    eed2:	|      move.l d0,-(sp)
    eed4:	|      jsr 152fa <trimStack>
    eeda:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eedc:	|      movea.l 20(sp),a0
    eee0:	|      move.l 24(a0),d0
    eee4:	|      move.l d0,-(sp)
    eee6:	|      pea 1 <_start+0x1>
    eeea:	|      moveq #12,d0
    eeec:	|      add.l sp,d0
    eeee:	|      move.l d0,-(sp)
    eef0:	|      jsr 14976 <getValueType>
    eef6:	|      lea 12(sp),sp
    eefa:	|      tst.w d0
    eefc:	|  ,-- bne.s ef02 <builtIn_pasteImage+0x62>
    eefe:	|  |   moveq #1,d0
    ef00:	+--|-- bra.s ef5c <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ef02:	|  '-> moveq #24,d0
    ef04:	|      add.l 20(sp),d0
    ef08:	|      move.l d0,-(sp)
    ef0a:	|      jsr 152fa <trimStack>
    ef10:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ef12:	|      movea.l 20(sp),a0
    ef16:	|      move.l 24(a0),d0
    ef1a:	|      move.l d0,-(sp)
    ef1c:	|      jsr 14e4e <getAnimationFromVar>
    ef22:	|      addq.l #4,sp
    ef24:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ef28:	|      moveq #24,d0
    ef2a:	|      add.l 20(sp),d0
    ef2e:	|      move.l d0,-(sp)
    ef30:	|      jsr 152fa <trimStack>
    ef36:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ef38:	|      tst.l 8(sp)
    ef3c:	|  ,-- bne.s ef42 <builtIn_pasteImage+0xa2>
    ef3e:	|  |   moveq #2,d0
    ef40:	+--|-- bra.s ef5c <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ef42:	|  '-> move.l (sp),d1
    ef44:	|      move.l 4(sp),d0
    ef48:	|      move.l 8(sp),-(sp)
    ef4c:	|      move.l d1,-(sp)
    ef4e:	|      move.l d0,-(sp)
    ef50:	|      jsr d94 <pasteCursor>
    ef56:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    ef5a:	|      moveq #2,d0
}
    ef5c:	'----> lea 12(sp),sp
    ef60:	       rts

0000ef62 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ef62:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef64:	       movea.l 16(sp),a0
    ef68:	       move.l 24(a0),d0
    ef6c:	       move.l d0,-(sp)
    ef6e:	       pea 1 <_start+0x1>
    ef72:	       move.l sp,d0
    ef74:	       addq.l #8,d0
    ef76:	       move.l d0,-(sp)
    ef78:	       jsr 14976 <getValueType>
    ef7e:	       lea 12(sp),sp
    ef82:	       tst.w d0
    ef84:	   ,-- bne.s ef8c <builtIn_setSceneDimensions+0x2a>
    ef86:	   |   moveq #1,d0
    ef88:	,--|-- bra.w f014 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ef8c:	|  '-> moveq #24,d0
    ef8e:	|      add.l 16(sp),d0
    ef92:	|      move.l d0,-(sp)
    ef94:	|      jsr 152fa <trimStack>
    ef9a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef9c:	|      movea.l 16(sp),a0
    efa0:	|      move.l 24(a0),d0
    efa4:	|      move.l d0,-(sp)
    efa6:	|      pea 1 <_start+0x1>
    efaa:	|      moveq #12,d0
    efac:	|      add.l sp,d0
    efae:	|      move.l d0,-(sp)
    efb0:	|      jsr 14976 <getValueType>
    efb6:	|      lea 12(sp),sp
    efba:	|      tst.w d0
    efbc:	|  ,-- bne.s efc2 <builtIn_setSceneDimensions+0x60>
    efbe:	|  |   moveq #1,d0
    efc0:	+--|-- bra.s f014 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    efc2:	|  '-> moveq #24,d0
    efc4:	|      add.l 16(sp),d0
    efc8:	|      move.l d0,-(sp)
    efca:	|      jsr 152fa <trimStack>
    efd0:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    efd2:	|      move.l (sp),d1
    efd4:	|      move.l 4(sp),d0
    efd8:	|      move.l d1,-(sp)
    efda:	|      move.l d0,-(sp)
    efdc:	|      jsr d568 <resizeBackdrop>
    efe2:	|      addq.l #8,sp
    efe4:	|      tst.w d0
    efe6:	|  ,-- beq.s f004 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    efe8:	|  |   move.l (sp),d1
    efea:	|  |   move.l 4(sp),d0
    efee:	|  |   move.l d1,-(sp)
    eff0:	|  |   move.l d0,-(sp)
    eff2:	|  |   clr.l -(sp)
    eff4:	|  |   clr.l -(sp)
    eff6:	|  |   jsr d360 <blankScreen>
    effc:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f000:	|  |   moveq #2,d0
    f002:	+--|-- bra.s f014 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f004:	|  '-> pea 19ba2 <PutChar+0x1caa>
    f00a:	|      jsr 17456 <KPrintF>
    f010:	|      addq.l #4,sp
	return BR_ERROR;
    f012:	|      moveq #1,d0
}
    f014:	'----> addq.l #8,sp
    f016:	       rts

0000f018 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f018:	          move.l d3,-(sp)
    f01a:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f01c:	          movea.l 16(sp),a0
    f020:	          move.l 24(a0),d0
    f024:	          move.l d0,-(sp)
    f026:	          pea 1 <_start+0x1>
    f02a:	          pea 1cd5e <cameraY>
    f030:	          jsr 14976 <getValueType>
    f036:	          lea 12(sp),sp
    f03a:	          tst.w d0
    f03c:	      ,-- bne.s f044 <builtIn_aimCamera+0x2c>
    f03e:	      |   moveq #1,d0
    f040:	,-----|-- bra.w f2c6 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f044:	|     '-> moveq #24,d0
    f046:	|         add.l 16(sp),d0
    f04a:	|         move.l d0,-(sp)
    f04c:	|         jsr 152fa <trimStack>
    f052:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f054:	|         movea.l 16(sp),a0
    f058:	|         move.l 24(a0),d0
    f05c:	|         move.l d0,-(sp)
    f05e:	|         pea 1 <_start+0x1>
    f062:	|         pea 1cd5a <cameraX>
    f068:	|         jsr 14976 <getValueType>
    f06e:	|         lea 12(sp),sp
    f072:	|         tst.w d0
    f074:	|     ,-- bne.s f07c <builtIn_aimCamera+0x64>
    f076:	|     |   moveq #1,d0
    f078:	+-----|-- bra.w f2c6 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f07c:	|     '-> moveq #24,d0
    f07e:	|         add.l 16(sp),d0
    f082:	|         move.l d0,-(sp)
    f084:	|         jsr 152fa <trimStack>
    f08a:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f08c:	|         move.l 1cd5a <cameraX>,d0
    f092:	|         move.l d0,-(sp)
    f094:	|         jsr 17888 <__floatsisf>
    f09a:	|         addq.l #4,sp
    f09c:	|         move.l d0,d2
    f09e:	|         move.l 1cbf8 <winWidth>,d0
    f0a4:	|         lsr.l #1,d0
    f0a6:	|         move.l d0,-(sp)
    f0a8:	|         jsr 178b0 <__floatunsisf>
    f0ae:	|         addq.l #4,sp
    f0b0:	|         move.l d0,d1
    f0b2:	|         move.l 1c636 <cameraZoom>,d0
    f0b8:	|         move.l d0,-(sp)
    f0ba:	|         move.l d1,-(sp)
    f0bc:	|         jsr 1773e <__divsf3>
    f0c2:	|         addq.l #8,sp
    f0c4:	|         move.l d0,-(sp)
    f0c6:	|         move.l d2,-(sp)
    f0c8:	|         jsr 17b7c <__subsf3>
    f0ce:	|         addq.l #8,sp
    f0d0:	|         move.l d0,-(sp)
    f0d2:	|         jsr 17820 <__fixsfsi>
    f0d8:	|         addq.l #4,sp
    f0da:	|         move.l d0,1cd5a <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f0e0:	|         move.l 1cd5e <cameraY>,d0
    f0e6:	|         move.l d0,-(sp)
    f0e8:	|         jsr 17888 <__floatsisf>
    f0ee:	|         addq.l #4,sp
    f0f0:	|         move.l d0,d2
    f0f2:	|         move.l 1cbfc <winHeight>,d0
    f0f8:	|         lsr.l #1,d0
    f0fa:	|         move.l d0,-(sp)
    f0fc:	|         jsr 178b0 <__floatunsisf>
    f102:	|         addq.l #4,sp
    f104:	|         move.l d0,d1
    f106:	|         move.l 1c636 <cameraZoom>,d0
    f10c:	|         move.l d0,-(sp)
    f10e:	|         move.l d1,-(sp)
    f110:	|         jsr 1773e <__divsf3>
    f116:	|         addq.l #8,sp
    f118:	|         move.l d0,-(sp)
    f11a:	|         move.l d2,-(sp)
    f11c:	|         jsr 17b7c <__subsf3>
    f122:	|         addq.l #8,sp
    f124:	|         move.l d0,-(sp)
    f126:	|         jsr 17820 <__fixsfsi>
    f12c:	|         addq.l #4,sp
    f12e:	|         move.l d0,1cd5e <cameraY>

	if (cameraX < 0) cameraX = 0;
    f134:	|         move.l 1cd5a <cameraX>,d0
    f13a:	|     ,-- bpl.s f146 <builtIn_aimCamera+0x12e>
    f13c:	|     |   clr.l 1cd5a <cameraX>
    f142:	|  ,--|-- bra.w f1fc <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f146:	|  |  '-> move.l 1cd5a <cameraX>,d0
    f14c:	|  |      move.l d0,-(sp)
    f14e:	|  |      jsr 17888 <__floatsisf>
    f154:	|  |      addq.l #4,sp
    f156:	|  |      move.l d0,d2
    f158:	|  |      move.l 1cd3c <sceneWidth>,d0
    f15e:	|  |      move.l d0,-(sp)
    f160:	|  |      jsr 178b0 <__floatunsisf>
    f166:	|  |      addq.l #4,sp
    f168:	|  |      move.l d0,d3
    f16a:	|  |      move.l 1cbf8 <winWidth>,d0
    f170:	|  |      move.l d0,-(sp)
    f172:	|  |      jsr 178b0 <__floatunsisf>
    f178:	|  |      addq.l #4,sp
    f17a:	|  |      move.l d0,d1
    f17c:	|  |      move.l 1c636 <cameraZoom>,d0
    f182:	|  |      move.l d0,-(sp)
    f184:	|  |      move.l d1,-(sp)
    f186:	|  |      jsr 1773e <__divsf3>
    f18c:	|  |      addq.l #8,sp
    f18e:	|  |      move.l d0,-(sp)
    f190:	|  |      move.l d3,-(sp)
    f192:	|  |      jsr 17b7c <__subsf3>
    f198:	|  |      addq.l #8,sp
    f19a:	|  |      move.l d0,-(sp)
    f19c:	|  |      move.l d2,-(sp)
    f19e:	|  |      jsr 179f4 <__gtsf2>
    f1a4:	|  |      addq.l #8,sp
    f1a6:	|  |      tst.l d0
    f1a8:	|  +----- ble.s f1fc <builtIn_aimCamera+0x1e4>
    f1aa:	|  |      move.l 1cd3c <sceneWidth>,d0
    f1b0:	|  |      move.l d0,-(sp)
    f1b2:	|  |      jsr 178b0 <__floatunsisf>
    f1b8:	|  |      addq.l #4,sp
    f1ba:	|  |      move.l d0,d2
    f1bc:	|  |      move.l 1cbf8 <winWidth>,d0
    f1c2:	|  |      move.l d0,-(sp)
    f1c4:	|  |      jsr 178b0 <__floatunsisf>
    f1ca:	|  |      addq.l #4,sp
    f1cc:	|  |      move.l d0,d1
    f1ce:	|  |      move.l 1c636 <cameraZoom>,d0
    f1d4:	|  |      move.l d0,-(sp)
    f1d6:	|  |      move.l d1,-(sp)
    f1d8:	|  |      jsr 1773e <__divsf3>
    f1de:	|  |      addq.l #8,sp
    f1e0:	|  |      move.l d0,-(sp)
    f1e2:	|  |      move.l d2,-(sp)
    f1e4:	|  |      jsr 17b7c <__subsf3>
    f1ea:	|  |      addq.l #8,sp
    f1ec:	|  |      move.l d0,-(sp)
    f1ee:	|  |      jsr 17820 <__fixsfsi>
    f1f4:	|  |      addq.l #4,sp
    f1f6:	|  |      move.l d0,1cd5a <cameraX>
	if (cameraY < 0) cameraY = 0;
    f1fc:	|  '----> move.l 1cd5e <cameraY>,d0
    f202:	|     ,-- bpl.s f20e <builtIn_aimCamera+0x1f6>
    f204:	|     |   clr.l 1cd5e <cameraY>
    f20a:	|  ,--|-- bra.w f2c4 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f20e:	|  |  '-> move.l 1cd5e <cameraY>,d0
    f214:	|  |      move.l d0,-(sp)
    f216:	|  |      jsr 17888 <__floatsisf>
    f21c:	|  |      addq.l #4,sp
    f21e:	|  |      move.l d0,d2
    f220:	|  |      move.l 1cd40 <sceneHeight>,d0
    f226:	|  |      move.l d0,-(sp)
    f228:	|  |      jsr 178b0 <__floatunsisf>
    f22e:	|  |      addq.l #4,sp
    f230:	|  |      move.l d0,d3
    f232:	|  |      move.l 1cbfc <winHeight>,d0
    f238:	|  |      move.l d0,-(sp)
    f23a:	|  |      jsr 178b0 <__floatunsisf>
    f240:	|  |      addq.l #4,sp
    f242:	|  |      move.l d0,d1
    f244:	|  |      move.l 1c636 <cameraZoom>,d0
    f24a:	|  |      move.l d0,-(sp)
    f24c:	|  |      move.l d1,-(sp)
    f24e:	|  |      jsr 1773e <__divsf3>
    f254:	|  |      addq.l #8,sp
    f256:	|  |      move.l d0,-(sp)
    f258:	|  |      move.l d3,-(sp)
    f25a:	|  |      jsr 17b7c <__subsf3>
    f260:	|  |      addq.l #8,sp
    f262:	|  |      move.l d0,-(sp)
    f264:	|  |      move.l d2,-(sp)
    f266:	|  |      jsr 179f4 <__gtsf2>
    f26c:	|  |      addq.l #8,sp
    f26e:	|  |      tst.l d0
    f270:	|  +----- ble.s f2c4 <builtIn_aimCamera+0x2ac>
    f272:	|  |      move.l 1cd40 <sceneHeight>,d0
    f278:	|  |      move.l d0,-(sp)
    f27a:	|  |      jsr 178b0 <__floatunsisf>
    f280:	|  |      addq.l #4,sp
    f282:	|  |      move.l d0,d2
    f284:	|  |      move.l 1cbfc <winHeight>,d0
    f28a:	|  |      move.l d0,-(sp)
    f28c:	|  |      jsr 178b0 <__floatunsisf>
    f292:	|  |      addq.l #4,sp
    f294:	|  |      move.l d0,d1
    f296:	|  |      move.l 1c636 <cameraZoom>,d0
    f29c:	|  |      move.l d0,-(sp)
    f29e:	|  |      move.l d1,-(sp)
    f2a0:	|  |      jsr 1773e <__divsf3>
    f2a6:	|  |      addq.l #8,sp
    f2a8:	|  |      move.l d0,-(sp)
    f2aa:	|  |      move.l d2,-(sp)
    f2ac:	|  |      jsr 17b7c <__subsf3>
    f2b2:	|  |      addq.l #8,sp
    f2b4:	|  |      move.l d0,-(sp)
    f2b6:	|  |      jsr 17820 <__fixsfsi>
    f2bc:	|  |      addq.l #4,sp
    f2be:	|  |      move.l d0,1cd5e <cameraY>
	return BR_CONTINUE;
    f2c4:	|  '----> moveq #2,d0
}
    f2c6:	'-------> move.l (sp)+,d2
    f2c8:	          move.l (sp)+,d3
    f2ca:	          rts

0000f2cc <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f2cc:	       subq.l #4,sp
    f2ce:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2d0:	       movea.l 16(sp),a0
    f2d4:	       move.l 24(a0),d0
    f2d8:	       move.l d0,-(sp)
    f2da:	       pea 1 <_start+0x1>
    f2de:	       moveq #12,d0
    f2e0:	       add.l sp,d0
    f2e2:	       move.l d0,-(sp)
    f2e4:	       jsr 14976 <getValueType>
    f2ea:	       lea 12(sp),sp
    f2ee:	       tst.w d0
    f2f0:	   ,-- bne.s f2f8 <builtIn_zoomCamera+0x2c>
    f2f2:	   |   moveq #1,d0
    f2f4:	,--|-- bra.w f4f2 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f2f8:	|  '-> moveq #24,d0
    f2fa:	|      add.l 16(sp),d0
    f2fe:	|      move.l d0,-(sp)
    f300:	|      jsr 152fa <trimStack>
    f306:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f308:	|      move.l 1cc60 <input+0xa>,d0
    f30e:	|      move.l d0,-(sp)
    f310:	|      jsr 17888 <__floatsisf>
    f316:	|      addq.l #4,sp
    f318:	|      move.l d0,d1
    f31a:	|      move.l 1c636 <cameraZoom>,d0
    f320:	|      move.l d0,-(sp)
    f322:	|      move.l d1,-(sp)
    f324:	|      jsr 1793a <__mulsf3>
    f32a:	|      addq.l #8,sp
    f32c:	|      move.l d0,-(sp)
    f32e:	|      jsr 17820 <__fixsfsi>
    f334:	|      addq.l #4,sp
    f336:	|      move.l d0,1cc60 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f33c:	|      move.l 1cc64 <input+0xe>,d0
    f342:	|      move.l d0,-(sp)
    f344:	|      jsr 17888 <__floatsisf>
    f34a:	|      addq.l #4,sp
    f34c:	|      move.l d0,d1
    f34e:	|      move.l 1c636 <cameraZoom>,d0
    f354:	|      move.l d0,-(sp)
    f356:	|      move.l d1,-(sp)
    f358:	|      jsr 1793a <__mulsf3>
    f35e:	|      addq.l #8,sp
    f360:	|      move.l d0,-(sp)
    f362:	|      jsr 17820 <__fixsfsi>
    f368:	|      addq.l #4,sp
    f36a:	|      move.l d0,1cc64 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f370:	|      move.l 4(sp),d0
    f374:	|      move.l d0,-(sp)
    f376:	|      jsr 17888 <__floatsisf>
    f37c:	|      addq.l #4,sp
    f37e:	|      move.l #1008981770,-(sp)
    f384:	|      move.l d0,-(sp)
    f386:	|      jsr 1793a <__mulsf3>
    f38c:	|      addq.l #8,sp
    f38e:	|      move.l d0,1c636 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f394:	|      move.l 1cbf8 <winWidth>,d0
    f39a:	|      move.l d0,-(sp)
    f39c:	|      jsr 178b0 <__floatunsisf>
    f3a2:	|      addq.l #4,sp
    f3a4:	|      move.l d0,d1
    f3a6:	|      move.l 1c636 <cameraZoom>,d0
    f3ac:	|      move.l d0,-(sp)
    f3ae:	|      move.l d1,-(sp)
    f3b0:	|      jsr 1773e <__divsf3>
    f3b6:	|      addq.l #8,sp
    f3b8:	|      move.l d0,d2
    f3ba:	|      move.l 1cd3c <sceneWidth>,d0
    f3c0:	|      move.l d0,-(sp)
    f3c2:	|      jsr 178b0 <__floatunsisf>
    f3c8:	|      addq.l #4,sp
    f3ca:	|      move.l d0,-(sp)
    f3cc:	|      move.l d2,-(sp)
    f3ce:	|      jsr 179f4 <__gtsf2>
    f3d4:	|      addq.l #8,sp
    f3d6:	|      tst.l d0
    f3d8:	|  ,-- ble.s f40e <builtIn_zoomCamera+0x142>
    f3da:	|  |   move.l 1cbf8 <winWidth>,d0
    f3e0:	|  |   move.l d0,-(sp)
    f3e2:	|  |   jsr 178b0 <__floatunsisf>
    f3e8:	|  |   addq.l #4,sp
    f3ea:	|  |   move.l d0,d2
    f3ec:	|  |   move.l 1cd3c <sceneWidth>,d0
    f3f2:	|  |   move.l d0,-(sp)
    f3f4:	|  |   jsr 178b0 <__floatunsisf>
    f3fa:	|  |   addq.l #4,sp
    f3fc:	|  |   move.l d0,-(sp)
    f3fe:	|  |   move.l d2,-(sp)
    f400:	|  |   jsr 1773e <__divsf3>
    f406:	|  |   addq.l #8,sp
    f408:	|  |   move.l d0,1c636 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f40e:	|  '-> move.l 1cbfc <winHeight>,d0
    f414:	|      move.l d0,-(sp)
    f416:	|      jsr 178b0 <__floatunsisf>
    f41c:	|      addq.l #4,sp
    f41e:	|      move.l d0,d1
    f420:	|      move.l 1c636 <cameraZoom>,d0
    f426:	|      move.l d0,-(sp)
    f428:	|      move.l d1,-(sp)
    f42a:	|      jsr 1773e <__divsf3>
    f430:	|      addq.l #8,sp
    f432:	|      move.l d0,d2
    f434:	|      move.l 1cd40 <sceneHeight>,d0
    f43a:	|      move.l d0,-(sp)
    f43c:	|      jsr 178b0 <__floatunsisf>
    f442:	|      addq.l #4,sp
    f444:	|      move.l d0,-(sp)
    f446:	|      move.l d2,-(sp)
    f448:	|      jsr 179f4 <__gtsf2>
    f44e:	|      addq.l #8,sp
    f450:	|      tst.l d0
    f452:	|  ,-- ble.s f488 <builtIn_zoomCamera+0x1bc>
    f454:	|  |   move.l 1cbfc <winHeight>,d0
    f45a:	|  |   move.l d0,-(sp)
    f45c:	|  |   jsr 178b0 <__floatunsisf>
    f462:	|  |   addq.l #4,sp
    f464:	|  |   move.l d0,d2
    f466:	|  |   move.l 1cd40 <sceneHeight>,d0
    f46c:	|  |   move.l d0,-(sp)
    f46e:	|  |   jsr 178b0 <__floatunsisf>
    f474:	|  |   addq.l #4,sp
    f476:	|  |   move.l d0,-(sp)
    f478:	|  |   move.l d2,-(sp)
    f47a:	|  |   jsr 1773e <__divsf3>
    f480:	|  |   addq.l #8,sp
    f482:	|  |   move.l d0,1c636 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f488:	|  '-> move.l 1cc60 <input+0xa>,d0
    f48e:	|      move.l d0,-(sp)
    f490:	|      jsr 17888 <__floatsisf>
    f496:	|      addq.l #4,sp
    f498:	|      move.l d0,d1
    f49a:	|      move.l 1c636 <cameraZoom>,d0
    f4a0:	|      move.l d0,-(sp)
    f4a2:	|      move.l d1,-(sp)
    f4a4:	|      jsr 1773e <__divsf3>
    f4aa:	|      addq.l #8,sp
    f4ac:	|      move.l d0,-(sp)
    f4ae:	|      jsr 17820 <__fixsfsi>
    f4b4:	|      addq.l #4,sp
    f4b6:	|      move.l d0,1cc60 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f4bc:	|      move.l 1cc64 <input+0xe>,d0
    f4c2:	|      move.l d0,-(sp)
    f4c4:	|      jsr 17888 <__floatsisf>
    f4ca:	|      addq.l #4,sp
    f4cc:	|      move.l d0,d1
    f4ce:	|      move.l 1c636 <cameraZoom>,d0
    f4d4:	|      move.l d0,-(sp)
    f4d6:	|      move.l d1,-(sp)
    f4d8:	|      jsr 1773e <__divsf3>
    f4de:	|      addq.l #8,sp
    f4e0:	|      move.l d0,-(sp)
    f4e2:	|      jsr 17820 <__fixsfsi>
    f4e8:	|      addq.l #4,sp
    f4ea:	|      move.l d0,1cc64 <input+0xe>

	return BR_CONTINUE;
    f4f0:	|      moveq #2,d0
}
    f4f2:	'----> move.l (sp)+,d2
    f4f4:	       addq.l #4,sp
    f4f6:	       rts

0000f4f8 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f4f8:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f4fa:	             tst.l 8(sp)
    f4fe:	         ,-- bne.s f512 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f500:	         |   pea 19bc7 <PutChar+0x1ccf>
    f506:	         |   jsr 17456 <KPrintF>
    f50c:	         |   addq.l #4,sp
		return BR_ERROR;
    f50e:	         |   moveq #1,d0
    f510:	,--------|-- bra.s f572 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f512:	|        '-> jsr 16016 <rand>
    f518:	|            move.l d0,d1
    f51a:	|            move.l 8(sp),d0
    f51e:	|            move.l d0,-(sp)
    f520:	|            move.l d1,-(sp)
    f522:	|            jsr 17ebc <__umodsi3>
    f528:	|            addq.l #8,sp
    f52a:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f52c:	|     ,----- bra.s f560 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f52e:	|  ,--|----> move.l (sp),d0
    f530:	|  |  |      cmp.l 8(sp),d0
    f534:	|  |  |  ,-- bne.s f550 <builtIn_pickOne+0x58>
    f536:	|  |  |  |   moveq #28,d0
    f538:	|  |  |  |   add.l 12(sp),d0
    f53c:	|  |  |  |   movea.l 12(sp),a0
    f540:	|  |  |  |   move.l 24(a0),d1
    f544:	|  |  |  |   move.l d0,-(sp)
    f546:	|  |  |  |   move.l d1,-(sp)
    f548:	|  |  |  |   jsr 14e30 <copyVariable>
    f54e:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f550:	|  |  |  '-> moveq #24,d0
    f552:	|  |  |      add.l 12(sp),d0
    f556:	|  |  |      move.l d0,-(sp)
    f558:	|  |  |      jsr 152fa <trimStack>
    f55e:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f560:	|  |  '----> move.l 8(sp),d0
    f564:	|  |         move.l d0,d1
    f566:	|  |         subq.l #1,d1
    f568:	|  |         move.l d1,8(sp)
    f56c:	|  |         tst.l d0
    f56e:	|  '-------- bne.s f52e <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f570:	|            moveq #2,d0
}
    f572:	'----------> addq.l #4,sp
    f574:	             rts

0000f576 <builtIn_substring>:

builtIn(substring)
{
    f576:	       lea -40(sp),sp
    f57a:	       move.l a6,-(sp)
    f57c:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f57e:	       movea.l 56(sp),a0
    f582:	       move.l 24(a0),d0
    f586:	       move.l d0,-(sp)
    f588:	       pea 1 <_start+0x1>
    f58c:	       lea 16(sp),a0
    f590:	       move.l a0,-(sp)
    f592:	       jsr 14976 <getValueType>
    f598:	       lea 12(sp),sp
    f59c:	       tst.w d0
    f59e:	   ,-- bne.s f5a6 <builtIn_substring+0x30>
    f5a0:	   |   moveq #1,d0
    f5a2:	,--|-- bra.w f71e <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f5a6:	|  '-> moveq #24,d0
    f5a8:	|      add.l 56(sp),d0
    f5ac:	|      move.l d0,-(sp)
    f5ae:	|      jsr 152fa <trimStack>
    f5b4:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f5b6:	|      movea.l 56(sp),a0
    f5ba:	|      move.l 24(a0),d0
    f5be:	|      move.l d0,-(sp)
    f5c0:	|      pea 1 <_start+0x1>
    f5c4:	|      lea 20(sp),a0
    f5c8:	|      move.l a0,-(sp)
    f5ca:	|      jsr 14976 <getValueType>
    f5d0:	|      lea 12(sp),sp
    f5d4:	|      tst.w d0
    f5d6:	|  ,-- bne.s f5de <builtIn_substring+0x68>
    f5d8:	|  |   moveq #1,d0
    f5da:	+--|-- bra.w f71e <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f5de:	|  '-> moveq #24,d0
    f5e0:	|      add.l 56(sp),d0
    f5e4:	|      move.l d0,-(sp)
    f5e6:	|      jsr 152fa <trimStack>
    f5ec:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f5ee:	|      movea.l 56(sp),a0
    f5f2:	|      move.l 24(a0),d0
    f5f6:	|      move.l d0,-(sp)
    f5f8:	|      jsr 14f4c <getTextFromAnyVar>
    f5fe:	|      addq.l #4,sp
    f600:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f604:	|      moveq #24,d0
    f606:	|      add.l 56(sp),d0
    f60a:	|      move.l d0,-(sp)
    f60c:	|      jsr 152fa <trimStack>
    f612:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f614:	|      move.l 44(sp),-(sp)
    f618:	|      jsr 13e62 <strlen>
    f61e:	|      addq.l #4,sp
    f620:	|      move.l d0,d1
    f622:	|      move.l 12(sp),d0
    f626:	|      movea.l d0,a0
    f628:	|      move.l 8(sp),d0
    f62c:	|      add.l a0,d0
    f62e:	|      cmp.l d1,d0
    f630:	|  ,-- bls.s f666 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f632:	|  |   move.l 44(sp),-(sp)
    f636:	|  |   jsr 13e62 <strlen>
    f63c:	|  |   addq.l #4,sp
    f63e:	|  |   move.l d0,d1
    f640:	|  |   move.l 12(sp),d0
    f644:	|  |   sub.l d0,d1
    f646:	|  |   move.l d1,d0
    f648:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f64c:	|  |   move.l 44(sp),-(sp)
    f650:	|  |   jsr 13e62 <strlen>
    f656:	|  |   addq.l #4,sp
    f658:	|  |   move.l d0,d1
    f65a:	|  |   move.l 12(sp),d0
    f65e:	|  |   cmp.l d1,d0
    f660:	|  +-- bls.s f666 <builtIn_substring+0xf0>
            start = 0;
    f662:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f666:	|  '-> move.l 8(sp),d0
    f66a:	|  ,-- bpl.s f670 <builtIn_substring+0xfa>
        length = 0;
    f66c:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f670:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f676:	|      move.l 12(sp),d1
    f67a:	|      move.l 8(sp),d0
    f67e:	|      move.l d1,d2
    f680:	|      add.l d0,d2
    f682:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f686:	|      move.l 36(sp),d0
    f68a:	|      sub.l 40(sp),d0
    f68e:	|      addq.l #1,d0
    f690:	|      move.l d0,32(sp)
    f694:	|      clr.l 28(sp)
    f698:	|      move.l 1cca4 <SysBase>,d0
    f69e:	|      movea.l d0,a6
    f6a0:	|      move.l 32(sp),d0
    f6a4:	|      move.l 28(sp),d1
    f6a8:	|      jsr -684(a6)
    f6ac:	|      move.l d0,24(sp)
    f6b0:	|      move.l 24(sp),d0
    f6b4:	|      move.l d0,20(sp)
    if (!newString) {
    f6b8:	|  ,-- bne.s f6be <builtIn_substring+0x148>
        return BR_ERROR;
    f6ba:	|  |   moveq #1,d0
    f6bc:	+--|-- bra.s f71e <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f6be:	|  '-> move.l 36(sp),d0
    f6c2:	|      sub.l 40(sp),d0
    f6c6:	|      move.l d0,d1
    f6c8:	|      move.l 40(sp),d0
    f6cc:	|      add.l 44(sp),d0
    f6d0:	|      move.l d1,-(sp)
    f6d2:	|      move.l d0,-(sp)
    f6d4:	|      move.l 28(sp),-(sp)
    f6d8:	|      jsr 1740a <memcpy>
    f6de:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f6e2:	|      move.l 36(sp),d0
    f6e6:	|      sub.l 40(sp),d0
    f6ea:	|      movea.l 20(sp),a0
    f6ee:	|      adda.l d0,a0
    f6f0:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f6f2:	|      moveq #28,d0
    f6f4:	|      add.l 56(sp),d0
    f6f8:	|      move.l 20(sp),-(sp)
    f6fc:	|      move.l d0,-(sp)
    f6fe:	|      jsr 14b98 <makeTextVar>
    f704:	|      addq.l #8,sp
    FreeVec(newString);
    f706:	|      move.l 20(sp),16(sp)
    f70c:	|      move.l 1cca4 <SysBase>,d0
    f712:	|      movea.l d0,a6
    f714:	|      movea.l 16(sp),a1
    f718:	|      jsr -690(a6)
    return BR_CONTINUE;
    f71c:	|      moveq #2,d0
}
    f71e:	'----> move.l (sp)+,d2
    f720:	       movea.l (sp)+,a6
    f722:	       lea 40(sp),sp
    f726:	       rts

0000f728 <builtIn_stringLength>:

builtIn(stringLength)
{
    f728:	subq.l #8,sp
    f72a:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f72c:	movea.l 20(sp),a0
    f730:	move.l 24(a0),d0
    f734:	move.l d0,-(sp)
    f736:	jsr 14f4c <getTextFromAnyVar>
    f73c:	addq.l #4,sp
    f73e:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f742:	moveq #24,d0
    f744:	add.l 20(sp),d0
    f748:	move.l d0,-(sp)
    f74a:	jsr 152fa <trimStack>
    f750:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f752:	move.l 8(sp),-(sp)
    f756:	jsr 13e62 <strlen>
    f75c:	addq.l #4,sp
    f75e:	move.l d0,d1
    f760:	moveq #28,d0
    f762:	add.l 20(sp),d0
    f766:	move.l d1,-(sp)
    f768:	pea 1 <_start+0x1>
    f76c:	move.l d0,-(sp)
    f76e:	jsr 15268 <setVariable>
    f774:	lea 12(sp),sp
	FreeVec(newText);
    f778:	move.l 8(sp),4(sp)
    f77e:	move.l 1cca4 <SysBase>,d0
    f784:	movea.l d0,a6
    f786:	movea.l 4(sp),a1
    f78a:	jsr -690(a6)
	return BR_CONTINUE;
    f78e:	moveq #2,d0
}
    f790:	movea.l (sp)+,a6
    f792:	addq.l #8,sp
    f794:	rts

0000f796 <builtIn_newStack>:

builtIn(newStack)
{
    f796:	             lea -12(sp),sp
    f79a:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f79c:	             moveq #28,d0
    f79e:	             add.l 24(sp),d0
    f7a2:	             move.l d0,-(sp)
    f7a4:	             jsr 14bc4 <unlinkVar>
    f7aa:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f7ac:	             movea.l 24(sp),a0
    f7b0:	             moveq #6,d0
    f7b2:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f7b6:	             moveq #12,d1
    f7b8:	             move.l d1,12(sp)
    f7bc:	             clr.l 8(sp)
    f7c0:	             move.l 1cca4 <SysBase>,d0
    f7c6:	             movea.l d0,a6
    f7c8:	             move.l 12(sp),d0
    f7cc:	             move.l 8(sp),d1
    f7d0:	             jsr -684(a6)
    f7d4:	             move.l d0,4(sp)
    f7d8:	             move.l 4(sp),d0
    f7dc:	             movea.l 24(sp),a0
    f7e0:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f7e4:	             movea.l 24(sp),a0
    f7e8:	             move.l 32(a0),d0
    f7ec:	         ,-- bne.s f7f4 <builtIn_newStack+0x5e>
    f7ee:	         |   moveq #1,d0
    f7f0:	,--------|-- bra.w f886 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f7f4:	|        '-> movea.l 24(sp),a0
    f7f8:	|            movea.l 32(a0),a0
    f7fc:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f7fe:	|            movea.l 24(sp),a0
    f802:	|            movea.l 32(a0),a0
    f806:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f80a:	|            movea.l 24(sp),a0
    f80e:	|            movea.l 32(a0),a0
    f812:	|            moveq #1,d0
    f814:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f818:	|     ,----- bra.s f874 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f81a:	|  ,--|----> movea.l 24(sp),a0
    f81e:	|  |  |      move.l 32(a0),d0
    f822:	|  |  |      move.l d0,d1
    f824:	|  |  |      movea.l 24(sp),a0
    f828:	|  |  |      move.l 24(a0),d0
    f82c:	|  |  |      move.l d1,-(sp)
    f82e:	|  |  |      move.l d0,-(sp)
    f830:	|  |  |      jsr 141b2 <addVarToStack>
    f836:	|  |  |      addq.l #8,sp
    f838:	|  |  |      tst.w d0
    f83a:	|  |  |  ,-- bne.s f840 <builtIn_newStack+0xaa>
    f83c:	|  |  |  |   moveq #1,d0
    f83e:	+--|--|--|-- bra.s f886 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f840:	|  |  |  '-> movea.l 24(sp),a0
    f844:	|  |  |      movea.l 32(a0),a0
    f848:	|  |  |      move.l 4(a0),d0
    f84c:	|  |  |  ,-- bne.s f864 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f84e:	|  |  |  |   movea.l 24(sp),a0
    f852:	|  |  |  |   movea.l 32(a0),a1
    f856:	|  |  |  |   movea.l 24(sp),a0
    f85a:	|  |  |  |   movea.l 32(a0),a0
    f85e:	|  |  |  |   move.l (a1),d0
    f860:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f864:	|  |  |  '-> moveq #24,d0
    f866:	|  |  |      add.l 24(sp),d0
    f86a:	|  |  |      move.l d0,-(sp)
    f86c:	|  |  |      jsr 152fa <trimStack>
    f872:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f874:	|  |  '----> move.l 20(sp),d0
    f878:	|  |         move.l d0,d1
    f87a:	|  |         subq.l #1,d1
    f87c:	|  |         move.l d1,20(sp)
    f880:	|  |         tst.l d0
    f882:	|  '-------- bne.s f81a <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f884:	|            moveq #2,d0
}
    f886:	'----------> movea.l (sp)+,a6
    f888:	             lea 12(sp),sp
    f88c:	             rts

0000f88e <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f88e:	          movea.l 8(sp),a0
    f892:	          movea.l 24(a0),a0
    f896:	          move.l (a0),d0
    f898:	          moveq #6,d1
    f89a:	          cmp.l d0,d1
    f89c:	      ,-- beq.s f8b8 <builtIn_stackSize+0x2a>
    f89e:	      |   moveq #10,d1
    f8a0:	      |   cmp.l d0,d1
    f8a2:	   ,--|-- beq.s f8fc <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f8a4:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f8a6:	   |  |   pea 19bfa <PutChar+0x1d02>
    f8ac:	   |  |   jsr 17456 <KPrintF>
    f8b2:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f8b4:	   |  |   moveq #1,d0
    f8b6:	,--|--|-- bra.s f936 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f8b8:	|  |  '-> movea.l 8(sp),a0
    f8bc:	|  |      movea.l 24(a0),a0
    f8c0:	|  |      move.l 4(a0),d0
    f8c4:	|  |      move.l d0,-(sp)
    f8c6:	|  |      jsr 152d6 <stackSize>
    f8cc:	|  |      addq.l #4,sp
    f8ce:	|  |      move.l d0,d1
    f8d0:	|  |      moveq #28,d0
    f8d2:	|  |      add.l 8(sp),d0
    f8d6:	|  |      move.l d1,-(sp)
    f8d8:	|  |      pea 1 <_start+0x1>
    f8dc:	|  |      move.l d0,-(sp)
    f8de:	|  |      jsr 15268 <setVariable>
    f8e4:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f8e8:	|  |      moveq #24,d0
    f8ea:	|  |      add.l 8(sp),d0
    f8ee:	|  |      move.l d0,-(sp)
    f8f0:	|  |      jsr 152fa <trimStack>
    f8f6:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f8f8:	|  |      moveq #2,d0
    f8fa:	+--|----- bra.s f936 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f8fc:	|  '----> movea.l 8(sp),a0
    f900:	|         movea.l 24(a0),a0
    f904:	|         movea.l 4(a0),a0
    f908:	|         move.l 4(a0),d1
    f90c:	|         moveq #28,d0
    f90e:	|         add.l 8(sp),d0
    f912:	|         move.l d1,-(sp)
    f914:	|         pea 1 <_start+0x1>
    f918:	|         move.l d0,-(sp)
    f91a:	|         jsr 15268 <setVariable>
    f920:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f924:	|         moveq #24,d0
    f926:	|         add.l 8(sp),d0
    f92a:	|         move.l d0,-(sp)
    f92c:	|         jsr 152fa <trimStack>
    f932:	|         addq.l #4,sp
			return BR_CONTINUE;
    f934:	|         moveq #2,d0
}
    f936:	'-------> rts

0000f938 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f938:	       movea.l 8(sp),a0
    f93c:	       movea.l 24(a0),a0
    f940:	       move.l (a0),d0
    f942:	       moveq #6,d1
    f944:	       cmp.l d0,d1
    f946:	   ,-- beq.s f95a <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f948:	   |   pea 19c23 <PutChar+0x1d2b>
    f94e:	   |   jsr 17456 <KPrintF>
    f954:	   |   addq.l #4,sp
		return BR_ERROR;
    f956:	   |   moveq #1,d0
    f958:	,--|-- bra.s f98e <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f95a:	|  '-> moveq #28,d0
    f95c:	|      add.l 8(sp),d0
    f960:	|      movea.l 8(sp),a0
    f964:	|      move.l 24(a0),d1
    f968:	|      move.l d0,-(sp)
    f96a:	|      move.l d1,-(sp)
    f96c:	|      jsr 1447c <copyStack>
    f972:	|      addq.l #8,sp
    f974:	|      tst.w d0
    f976:	|  ,-- bne.s f97c <builtIn_copyStack+0x44>
    f978:	|  |   moveq #1,d0
    f97a:	+--|-- bra.s f98e <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f97c:	|  '-> moveq #24,d0
    f97e:	|      add.l 8(sp),d0
    f982:	|      move.l d0,-(sp)
    f984:	|      jsr 152fa <trimStack>
    f98a:	|      addq.l #4,sp
	return BR_CONTINUE;
    f98c:	|      moveq #2,d0
}
    f98e:	'----> rts

0000f990 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f990:	       movea.l 8(sp),a0
    f994:	       movea.l 24(a0),a0
    f998:	       movea.l 8(a0),a0
    f99c:	       move.l (a0),d0
    f99e:	       moveq #6,d1
    f9a0:	       cmp.l d0,d1
    f9a2:	   ,-- beq.s f9b8 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f9a4:	   |   pea 19c3c <PutChar+0x1d44>
    f9aa:	   |   jsr 17456 <KPrintF>
    f9b0:	   |   addq.l #4,sp
		return BR_ERROR;
    f9b2:	   |   moveq #1,d0
    f9b4:	,--|-- bra.w fa46 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f9b8:	|  '-> movea.l 8(sp),a0
    f9bc:	|      movea.l 24(a0),a0
    f9c0:	|      movea.l 8(a0),a0
    f9c4:	|      move.l 4(a0),d0
    f9c8:	|      move.l d0,d1
    f9ca:	|      movea.l 8(sp),a0
    f9ce:	|      move.l 24(a0),d0
    f9d2:	|      move.l d1,-(sp)
    f9d4:	|      move.l d0,-(sp)
    f9d6:	|      jsr 141b2 <addVarToStack>
    f9dc:	|      addq.l #8,sp
    f9de:	|      tst.w d0
    f9e0:	|  ,-- bne.s f9e6 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f9e2:	|  |   moveq #1,d0
    f9e4:	+--|-- bra.s fa46 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f9e6:	|  '-> movea.l 8(sp),a0
    f9ea:	|      movea.l 24(a0),a0
    f9ee:	|      movea.l 8(a0),a0
    f9f2:	|      movea.l 4(a0),a0
    f9f6:	|      movea.l (a0),a0
    f9f8:	|      move.l 8(a0),d0
    f9fc:	|  ,-- bne.s fa24 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f9fe:	|  |   movea.l 8(sp),a0
    fa02:	|  |   movea.l 24(a0),a0
    fa06:	|  |   movea.l 8(a0),a0
    fa0a:	|  |   movea.l 4(a0),a1
    fa0e:	|  |   movea.l 8(sp),a0
    fa12:	|  |   movea.l 24(a0),a0
    fa16:	|  |   movea.l 8(a0),a0
    fa1a:	|  |   movea.l 4(a0),a0
    fa1e:	|  |   move.l (a1),d0
    fa20:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fa24:	|  '-> moveq #24,d0
    fa26:	|      add.l 8(sp),d0
    fa2a:	|      move.l d0,-(sp)
    fa2c:	|      jsr 152fa <trimStack>
    fa32:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa34:	|      moveq #24,d0
    fa36:	|      add.l 8(sp),d0
    fa3a:	|      move.l d0,-(sp)
    fa3c:	|      jsr 152fa <trimStack>
    fa42:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa44:	|      moveq #2,d0
}
    fa46:	'----> rts

0000fa48 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa48:	             movea.l 8(sp),a0
    fa4c:	             movea.l 24(a0),a0
    fa50:	             movea.l 8(a0),a0
    fa54:	             move.l (a0),d0
    fa56:	             moveq #6,d1
    fa58:	             cmp.l d0,d1
    fa5a:	         ,-- beq.s fa70 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fa5c:	         |   pea 19c3c <PutChar+0x1d44>
    fa62:	         |   jsr 17456 <KPrintF>
    fa68:	         |   addq.l #4,sp
		return BR_ERROR;
    fa6a:	         |   moveq #1,d0
    fa6c:	,--------|-- bra.w fb5e <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fa70:	|        '-> movea.l 8(sp),a0
    fa74:	|            movea.l 24(a0),a0
    fa78:	|            movea.l 8(a0),a0
    fa7c:	|            movea.l 4(a0),a0
    fa80:	|            move.l (a0),d0
    fa82:	|     ,----- bne.s fadc <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fa84:	|     |      movea.l 8(sp),a0
    fa88:	|     |      movea.l 24(a0),a0
    fa8c:	|     |      movea.l 8(a0),a0
    fa90:	|     |      move.l 4(a0),d0
    fa94:	|     |      move.l d0,d1
    fa96:	|     |      movea.l 8(sp),a0
    fa9a:	|     |      move.l 24(a0),d0
    fa9e:	|     |      move.l d1,-(sp)
    faa0:	|     |      move.l d0,-(sp)
    faa2:	|     |      jsr 141b2 <addVarToStack>
    faa8:	|     |      addq.l #8,sp
    faaa:	|     |      tst.w d0
    faac:	|     |  ,-- bne.s fab4 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    faae:	|     |  |   moveq #1,d0
    fab0:	+-----|--|-- bra.w fb5e <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fab4:	|     |  '-> movea.l 8(sp),a0
    fab8:	|     |      movea.l 24(a0),a0
    fabc:	|     |      movea.l 8(a0),a0
    fac0:	|     |      movea.l 4(a0),a1
    fac4:	|     |      movea.l 8(sp),a0
    fac8:	|     |      movea.l 24(a0),a0
    facc:	|     |      movea.l 8(a0),a0
    fad0:	|     |      movea.l 4(a0),a0
    fad4:	|     |      move.l (a1),d0
    fad6:	|     |      move.l d0,4(a0)
    fada:	|  ,--|----- bra.s fb3c <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fadc:	|  |  '----> movea.l 8(sp),a0
    fae0:	|  |         movea.l 24(a0),a0
    fae4:	|  |         movea.l 8(a0),a0
    fae8:	|  |         movea.l 4(a0),a0
    faec:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    faf0:	|  |         move.l d0,d1
    faf2:	|  |         addq.l #8,d1
    faf4:	|  |         movea.l 8(sp),a0
    faf8:	|  |         move.l 24(a0),d0
    fafc:	|  |         move.l d1,-(sp)
    fafe:	|  |         move.l d0,-(sp)
    fb00:	|  |         jsr 141b2 <addVarToStack>
    fb06:	|  |         addq.l #8,sp
    fb08:	|  |         tst.w d0
    fb0a:	|  |     ,-- bne.s fb10 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fb0c:	|  |     |   moveq #1,d0
    fb0e:	+--|-----|-- bra.s fb5e <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fb10:	|  |     '-> movea.l 8(sp),a0
    fb14:	|  |         movea.l 24(a0),a0
    fb18:	|  |         movea.l 8(a0),a0
    fb1c:	|  |         movea.l 4(a0),a0
    fb20:	|  |         movea.l 4(a0),a1
    fb24:	|  |         movea.l 8(sp),a0
    fb28:	|  |         movea.l 24(a0),a0
    fb2c:	|  |         movea.l 8(a0),a0
    fb30:	|  |         movea.l 4(a0),a0
    fb34:	|  |         move.l 8(a1),d0
    fb38:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fb3c:	|  '-------> moveq #24,d0
    fb3e:	|            add.l 8(sp),d0
    fb42:	|            move.l d0,-(sp)
    fb44:	|            jsr 152fa <trimStack>
    fb4a:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fb4c:	|            moveq #24,d0
    fb4e:	|            add.l 8(sp),d0
    fb52:	|            move.l d0,-(sp)
    fb54:	|            jsr 152fa <trimStack>
    fb5a:	|            addq.l #4,sp
	return BR_CONTINUE;
    fb5c:	|            moveq #2,d0
}
    fb5e:	'----------> rts

0000fb60 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fb60:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb62:	       movea.l 12(sp),a0
    fb66:	       movea.l 24(a0),a0
    fb6a:	       movea.l 8(a0),a0
    fb6e:	       move.l (a0),d0
    fb70:	       moveq #6,d1
    fb72:	       cmp.l d0,d1
    fb74:	   ,-- beq.s fb8a <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fb76:	   |   pea 19c23 <PutChar+0x1d2b>
    fb7c:	   |   jsr 17456 <KPrintF>
    fb82:	   |   addq.l #4,sp
		return BR_ERROR;
    fb84:	   |   moveq #1,d0
    fb86:	,--|-- bra.w fc20 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fb8a:	|  '-> movea.l 12(sp),a0
    fb8e:	|      movea.l 24(a0),a0
    fb92:	|      movea.l 8(a0),a0
    fb96:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb9a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb9c:	|      movea.l 12(sp),a0
    fba0:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fba4:	|      clr.l -(sp)
    fba6:	|      move.l d1,-(sp)
    fba8:	|      move.l d0,-(sp)
    fbaa:	|      jsr 14552 <deleteVarFromStack>
    fbb0:	|      lea 12(sp),sp
    fbb4:	|      move.l d0,d1
    fbb6:	|      moveq #28,d0
    fbb8:	|      add.l 12(sp),d0
    fbbc:	|      move.l d1,-(sp)
    fbbe:	|      pea 1 <_start+0x1>
    fbc2:	|      move.l d0,-(sp)
    fbc4:	|      jsr 15268 <setVariable>
    fbca:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fbce:	|      movea.l 12(sp),a0
    fbd2:	|      movea.l 24(a0),a0
    fbd6:	|      movea.l 8(a0),a0
    fbda:	|      movea.l 4(a0),a0
    fbde:	|      move.l (a0),d0
    fbe0:	|      movea.l 12(sp),a0
    fbe4:	|      movea.l 24(a0),a0
    fbe8:	|      movea.l 8(a0),a0
    fbec:	|      movea.l 4(a0),a2
    fbf0:	|      move.l d0,-(sp)
    fbf2:	|      jsr 152b2 <stackFindLast>
    fbf8:	|      addq.l #4,sp
    fbfa:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fbfe:	|      moveq #24,d0
    fc00:	|      add.l 12(sp),d0
    fc04:	|      move.l d0,-(sp)
    fc06:	|      jsr 152fa <trimStack>
    fc0c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc0e:	|      moveq #24,d0
    fc10:	|      add.l 12(sp),d0
    fc14:	|      move.l d0,-(sp)
    fc16:	|      jsr 152fa <trimStack>
    fc1c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc1e:	|      moveq #2,d0
}
    fc20:	'----> movea.l (sp)+,a2
    fc22:	       rts

0000fc24 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fc24:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fc26:	       movea.l 12(sp),a0
    fc2a:	       movea.l 24(a0),a0
    fc2e:	       movea.l 8(a0),a0
    fc32:	       move.l (a0),d0
    fc34:	       moveq #6,d1
    fc36:	       cmp.l d0,d1
    fc38:	   ,-- beq.s fc4e <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fc3a:	   |   pea 19c23 <PutChar+0x1d2b>
    fc40:	   |   jsr 17456 <KPrintF>
    fc46:	   |   addq.l #4,sp
		return BR_ERROR;
    fc48:	   |   moveq #1,d0
    fc4a:	,--|-- bra.w fce6 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fc4e:	|  '-> movea.l 12(sp),a0
    fc52:	|      movea.l 24(a0),a0
    fc56:	|      movea.l 8(a0),a0
    fc5a:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc5e:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fc60:	|      movea.l 12(sp),a0
    fc64:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc68:	|      pea 1 <_start+0x1>
    fc6c:	|      move.l d1,-(sp)
    fc6e:	|      move.l d0,-(sp)
    fc70:	|      jsr 14552 <deleteVarFromStack>
    fc76:	|      lea 12(sp),sp
    fc7a:	|      move.l d0,d1
    fc7c:	|      moveq #28,d0
    fc7e:	|      add.l 12(sp),d0
    fc82:	|      move.l d1,-(sp)
    fc84:	|      pea 1 <_start+0x1>
    fc88:	|      move.l d0,-(sp)
    fc8a:	|      jsr 15268 <setVariable>
    fc90:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fc94:	|      movea.l 12(sp),a0
    fc98:	|      movea.l 24(a0),a0
    fc9c:	|      movea.l 8(a0),a0
    fca0:	|      movea.l 4(a0),a0
    fca4:	|      move.l (a0),d0
    fca6:	|      movea.l 12(sp),a0
    fcaa:	|      movea.l 24(a0),a0
    fcae:	|      movea.l 8(a0),a0
    fcb2:	|      movea.l 4(a0),a2
    fcb6:	|      move.l d0,-(sp)
    fcb8:	|      jsr 152b2 <stackFindLast>
    fcbe:	|      addq.l #4,sp
    fcc0:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fcc4:	|      moveq #24,d0
    fcc6:	|      add.l 12(sp),d0
    fcca:	|      move.l d0,-(sp)
    fccc:	|      jsr 152fa <trimStack>
    fcd2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fcd4:	|      moveq #24,d0
    fcd6:	|      add.l 12(sp),d0
    fcda:	|      move.l d0,-(sp)
    fcdc:	|      jsr 152fa <trimStack>
    fce2:	|      addq.l #4,sp
	return BR_CONTINUE;
    fce4:	|      moveq #2,d0
} 
    fce6:	'----> movea.l (sp)+,a2
    fce8:	       rts

0000fcea <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fcea:	       movea.l 8(sp),a0
    fcee:	       movea.l 24(a0),a0
    fcf2:	       move.l (a0),d0
    fcf4:	       moveq #6,d1
    fcf6:	       cmp.l d0,d1
    fcf8:	   ,-- beq.s fd0c <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcfa:	   |   pea 19c23 <PutChar+0x1d2b>
    fd00:	   |   jsr 17456 <KPrintF>
    fd06:	   |   addq.l #4,sp
		return BR_ERROR;
    fd08:	   |   moveq #1,d0
    fd0a:	,--|-- bra.s fd76 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fd0c:	|  '-> movea.l 8(sp),a0
    fd10:	|      movea.l 24(a0),a0
    fd14:	|      movea.l 4(a0),a0
    fd18:	|      move.l (a0),d0
    fd1a:	|  ,-- bne.s fd2e <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fd1c:	|  |   pea 19c54 <PutChar+0x1d5c>
    fd22:	|  |   jsr 17456 <KPrintF>
    fd28:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd2a:	|  |   moveq #1,d0
    fd2c:	+--|-- bra.s fd76 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fd2e:	|  '-> moveq #28,d0
    fd30:	|      add.l 8(sp),d0
    fd34:	|      movea.l 8(sp),a0
    fd38:	|      movea.l 24(a0),a0
    fd3c:	|      movea.l 4(a0),a0
    fd40:	|      move.l (a0),d1
    fd42:	|      move.l d0,-(sp)
    fd44:	|      move.l d1,-(sp)
    fd46:	|      jsr 14e30 <copyVariable>
    fd4c:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fd4e:	|      movea.l 8(sp),a0
    fd52:	|      movea.l 24(a0),a0
    fd56:	|      move.l 4(a0),d0
    fd5a:	|      move.l d0,-(sp)
    fd5c:	|      jsr 152fa <trimStack>
    fd62:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fd64:	|      moveq #24,d0
    fd66:	|      add.l 8(sp),d0
    fd6a:	|      move.l d0,-(sp)
    fd6c:	|      jsr 152fa <trimStack>
    fd72:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd74:	|      moveq #2,d0
}
    fd76:	'----> rts

0000fd78 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fd78:	       movea.l 8(sp),a0
    fd7c:	       movea.l 24(a0),a0
    fd80:	       move.l (a0),d0
    fd82:	       moveq #6,d1
    fd84:	       cmp.l d0,d1
    fd86:	   ,-- beq.s fd9a <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fd88:	   |   pea 19c23 <PutChar+0x1d2b>
    fd8e:	   |   jsr 17456 <KPrintF>
    fd94:	   |   addq.l #4,sp
		return BR_ERROR;
    fd96:	   |   moveq #1,d0
    fd98:	,--|-- bra.s fdee <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fd9a:	|  '-> movea.l 8(sp),a0
    fd9e:	|      movea.l 24(a0),a0
    fda2:	|      movea.l 4(a0),a0
    fda6:	|      move.l (a0),d0
    fda8:	|  ,-- bne.s fdbc <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fdaa:	|  |   pea 19c54 <PutChar+0x1d5c>
    fdb0:	|  |   jsr 17456 <KPrintF>
    fdb6:	|  |   addq.l #4,sp
		return BR_ERROR;
    fdb8:	|  |   moveq #1,d0
    fdba:	+--|-- bra.s fdee <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fdbc:	|  '-> moveq #28,d0
    fdbe:	|      add.l 8(sp),d0
    fdc2:	|      movea.l 8(sp),a0
    fdc6:	|      movea.l 24(a0),a0
    fdca:	|      movea.l 4(a0),a0
    fdce:	|      move.l (a0),d1
    fdd0:	|      move.l d0,-(sp)
    fdd2:	|      move.l d1,-(sp)
    fdd4:	|      jsr 14e30 <copyVariable>
    fdda:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fddc:	|      moveq #24,d0
    fdde:	|      add.l 8(sp),d0
    fde2:	|      move.l d0,-(sp)
    fde4:	|      jsr 152fa <trimStack>
    fdea:	|      addq.l #4,sp
	return BR_CONTINUE;
    fdec:	|      moveq #2,d0
}
    fdee:	'----> rts

0000fdf0 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fdf0:	       movea.l 8(sp),a0
    fdf4:	       movea.l 24(a0),a0
    fdf8:	       move.l (a0),d0
    fdfa:	       moveq #6,d1
    fdfc:	       cmp.l d0,d1
    fdfe:	   ,-- beq.s fe12 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fe00:	   |   pea 19c23 <PutChar+0x1d2b>
    fe06:	   |   jsr 17456 <KPrintF>
    fe0c:	   |   addq.l #4,sp
		return BR_ERROR;
    fe0e:	   |   moveq #1,d0
    fe10:	,--|-- bra.s fe68 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fe12:	|  '-> movea.l 8(sp),a0
    fe16:	|      movea.l 24(a0),a0
    fe1a:	|      movea.l 4(a0),a0
    fe1e:	|      move.l (a0),d0
    fe20:	|  ,-- bne.s fe34 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fe22:	|  |   pea 19c54 <PutChar+0x1d5c>
    fe28:	|  |   jsr 17456 <KPrintF>
    fe2e:	|  |   addq.l #4,sp
		return BR_ERROR;
    fe30:	|  |   moveq #1,d0
    fe32:	+--|-- bra.s fe68 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fe34:	|  '-> moveq #28,d0
    fe36:	|      add.l 8(sp),d0
    fe3a:	|      movea.l 8(sp),a0
    fe3e:	|      movea.l 24(a0),a0
    fe42:	|      movea.l 4(a0),a0
    fe46:	|      move.l 4(a0),d1
    fe4a:	|      move.l d0,-(sp)
    fe4c:	|      move.l d1,-(sp)
    fe4e:	|      jsr 14e30 <copyVariable>
    fe54:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fe56:	|      moveq #24,d0
    fe58:	|      add.l 8(sp),d0
    fe5c:	|      move.l d0,-(sp)
    fe5e:	|      jsr 152fa <trimStack>
    fe64:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe66:	|      moveq #2,d0
}
    fe68:	'----> rts

0000fe6a <builtIn_random>:

builtIn(random)
{
    fe6a:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fe6c:	       movea.l 12(sp),a0
    fe70:	       move.l 24(a0),d0
    fe74:	       move.l d0,-(sp)
    fe76:	       pea 1 <_start+0x1>
    fe7a:	       move.l sp,d0
    fe7c:	       addq.l #8,d0
    fe7e:	       move.l d0,-(sp)
    fe80:	       jsr 14976 <getValueType>
    fe86:	       lea 12(sp),sp
    fe8a:	       tst.w d0
    fe8c:	   ,-- bne.s fe92 <builtIn_random+0x28>
		return BR_ERROR;
    fe8e:	   |   moveq #1,d0
    fe90:	,--|-- bra.s fedc <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fe92:	|  '-> moveq #24,d0
    fe94:	|      add.l 12(sp),d0
    fe98:	|      move.l d0,-(sp)
    fe9a:	|      jsr 152fa <trimStack>
    fea0:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fea2:	|      move.l (sp),d0
    fea4:	|  ,-- bgt.s feaa <builtIn_random+0x40>
    fea6:	|  |   moveq #1,d0
    fea8:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    feaa:	|  '-> jsr 16016 <rand>
    feb0:	|      move.l d0,d1
    feb2:	|      move.l (sp),d0
    feb4:	|      move.l d0,-(sp)
    feb6:	|      move.l d1,-(sp)
    feb8:	|      jsr 17ebc <__umodsi3>
    febe:	|      addq.l #8,sp
    fec0:	|      move.l d0,d1
    fec2:	|      moveq #28,d0
    fec4:	|      add.l 12(sp),d0
    fec8:	|      move.l d1,-(sp)
    feca:	|      pea 1 <_start+0x1>
    fece:	|      move.l d0,-(sp)
    fed0:	|      jsr 15268 <setVariable>
    fed6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    feda:	|      moveq #2,d0
}
    fedc:	'----> addq.l #4,sp
    fede:	       rts

0000fee0 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fee0:	nop
    fee2:	rts

0000fee4 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fee4:	moveq #2,d0
}
    fee6:	rts

0000fee8 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fee8:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    feea:	       movea.l 12(sp),a0
    feee:	       move.l 24(a0),d0
    fef2:	       move.l d0,-(sp)
    fef4:	       pea 1 <_start+0x1>
    fef8:	       move.l sp,d0
    fefa:	       addq.l #8,d0
    fefc:	       move.l d0,-(sp)
    fefe:	       jsr 14976 <getValueType>
    ff04:	       lea 12(sp),sp
    ff08:	       tst.w d0
    ff0a:	   ,-- bne.s ff1e <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    ff0c:	   |   pea 19c67 <PutChar+0x1d6f>
    ff12:	   |   jsr 17456 <KPrintF>
    ff18:	   |   addq.l #4,sp
		return BR_ERROR;
    ff1a:	   |   moveq #1,d0
    ff1c:	,--|-- bra.s ff5e <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    ff1e:	|  '-> moveq #24,d0
    ff20:	|      add.l 12(sp),d0
    ff24:	|      move.l d0,-(sp)
    ff26:	|      jsr 152fa <trimStack>
    ff2c:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    ff2e:	|      move.l (sp),d0
    ff30:	|      move.l d0,d0
    ff32:	|      move.w d0,1cbb2 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    ff38:	|      move.w 1cbb2 <textPaletteIndex>,d0
    ff3e:	|      cmpi.w #31,d0
    ff42:	|  ,-- bls.s ff5c <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    ff44:	|  |   pea 19c8e <PutChar+0x1d96>
    ff4a:	|  |   jsr 17456 <KPrintF>
    ff50:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    ff52:	|  |   clr.w 1cbb2 <textPaletteIndex>
		return BR_ERROR;
    ff58:	|  |   moveq #1,d0
    ff5a:	+--|-- bra.s ff5e <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    ff5c:	|  '-> moveq #2,d0
}
    ff5e:	'----> addq.l #4,sp
    ff60:	       rts

0000ff62 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ff62:	moveq #2,d0
}
    ff64:	rts

0000ff66 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ff66:	moveq #2,d0
}
    ff68:	rts

0000ff6a <builtIn_setFont>:


builtIn(setFont)
{
    ff6a:	       lea -16(sp),sp
    ff6e:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff70:	       movea.l 28(sp),a0
    ff74:	       move.l 24(a0),d0
    ff78:	       move.l d0,-(sp)
    ff7a:	       pea 1 <_start+0x1>
    ff7e:	       lea 12(sp),a0
    ff82:	       move.l a0,-(sp)
    ff84:	       jsr 14976 <getValueType>
    ff8a:	       lea 12(sp),sp
    ff8e:	       tst.w d0
    ff90:	   ,-- bne.s ff98 <builtIn_setFont+0x2e>
    ff92:	   |   moveq #1,d0
    ff94:	,--|-- bra.w 10046 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ff98:	|  '-> moveq #24,d0
    ff9a:	|      add.l 28(sp),d0
    ff9e:	|      move.l d0,-(sp)
    ffa0:	|      jsr 152fa <trimStack>
    ffa6:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ffa8:	|      movea.l 28(sp),a0
    ffac:	|      move.l 24(a0),d0
    ffb0:	|      move.l d0,-(sp)
    ffb2:	|      jsr 14f4c <getTextFromAnyVar>
    ffb8:	|      addq.l #4,sp
    ffba:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ffbe:	|  ,-- bne.s ffc6 <builtIn_setFont+0x5c>
    ffc0:	|  |   moveq #1,d0
    ffc2:	+--|-- bra.w 10046 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ffc6:	|  '-> moveq #24,d0
    ffc8:	|      add.l 28(sp),d0
    ffcc:	|      move.l d0,-(sp)
    ffce:	|      jsr 152fa <trimStack>
    ffd4:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ffd6:	|      movea.l 28(sp),a0
    ffda:	|      move.l 24(a0),d0
    ffde:	|      move.l d0,-(sp)
    ffe0:	|      pea 5 <_start+0x5>
    ffe4:	|      lea 16(sp),a0
    ffe8:	|      move.l a0,-(sp)
    ffea:	|      jsr 14976 <getValueType>
    fff0:	|      lea 12(sp),sp
    fff4:	|      tst.w d0
    fff6:	|  ,-- bne.s fffc <builtIn_setFont+0x92>
    fff8:	|  |   moveq #1,d0
    fffa:	+--|-- bra.s 10046 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fffc:	|  '-> moveq #24,d0
    fffe:	|      add.l 28(sp),d0
   10002:	|      move.l d0,-(sp)
   10004:	|      jsr 152fa <trimStack>
   1000a:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   1000c:	|      move.l 4(sp),d1
   10010:	|      move.l 8(sp),d0
   10014:	|      move.l d1,-(sp)
   10016:	|      move.l 20(sp),-(sp)
   1001a:	|      move.l d0,-(sp)
   1001c:	|      jsr 157ae <loadFont>
   10022:	|      lea 12(sp),sp
   10026:	|      tst.w d0
   10028:	|  ,-- bne.s 1002e <builtIn_setFont+0xc4>
   1002a:	|  |   moveq #1,d0
   1002c:	+--|-- bra.s 10046 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   1002e:	|  '-> move.l 16(sp),12(sp)
   10034:	|      move.l 1cca4 <SysBase>,d0
   1003a:	|      movea.l d0,a6
   1003c:	|      movea.l 12(sp),a1
   10040:	|      jsr -690(a6)

    return BR_CONTINUE;
   10044:	|      moveq #2,d0
}
   10046:	'----> movea.l (sp)+,a6
   10048:	       lea 16(sp),sp
   1004c:	       rts

0001004e <builtIn_inFont>:

builtIn(inFont)
{
   1004e:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10050:	       movea.l 12(sp),a0
   10054:	       move.l 24(a0),d0
   10058:	       move.l d0,-(sp)
   1005a:	       jsr 14f4c <getTextFromAnyVar>
   10060:	       addq.l #4,sp
   10062:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10064:	   ,-- bne.s 1006a <builtIn_inFont+0x1c>
   10066:	   |   moveq #1,d0
   10068:	,--|-- bra.s 100a0 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   1006a:	|  '-> moveq #24,d0
   1006c:	|      add.l 12(sp),d0
   10070:	|      move.l d0,-(sp)
   10072:	|      jsr 152fa <trimStack>
   10078:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   1007a:	|      move.l (sp),-(sp)
   1007c:	|      jsr 1579c <isInFont>
   10082:	|      addq.l #4,sp
   10084:	|      movea.w d0,a0
   10086:	|      moveq #28,d0
   10088:	|      add.l 12(sp),d0
   1008c:	|      move.l a0,-(sp)
   1008e:	|      pea 1 <_start+0x1>
   10092:	|      move.l d0,-(sp)
   10094:	|      jsr 15268 <setVariable>
   1009a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1009e:	|      moveq #2,d0
}
   100a0:	'----> addq.l #4,sp
   100a2:	       rts

000100a4 <builtIn_pasteString>:

builtIn(pasteString)
{
   100a4:	       lea -16(sp),sp
   100a8:	       move.l a6,-(sp)
   100aa:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   100ac:	       movea.l 32(sp),a0
   100b0:	       move.l 24(a0),d0
   100b4:	       move.l d0,-(sp)
   100b6:	       jsr 14f4c <getTextFromAnyVar>
   100bc:	       addq.l #4,sp
   100be:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   100c2:	       moveq #24,d0
   100c4:	       add.l 32(sp),d0
   100c8:	       move.l d0,-(sp)
   100ca:	       jsr 152fa <trimStack>
   100d0:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   100d2:	       movea.l 32(sp),a0
   100d6:	       move.l 24(a0),d0
   100da:	       move.l d0,-(sp)
   100dc:	       pea 1 <_start+0x1>
   100e0:	       lea 20(sp),a0
   100e4:	       move.l a0,-(sp)
   100e6:	       jsr 14976 <getValueType>
   100ec:	       lea 12(sp),sp
   100f0:	       tst.w d0
   100f2:	   ,-- bne.s 100fa <builtIn_pasteString+0x56>
   100f4:	   |   moveq #1,d0
   100f6:	,--|-- bra.w 1019c <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   100fa:	|  '-> moveq #24,d0
   100fc:	|      add.l 32(sp),d0
   10100:	|      move.l d0,-(sp)
   10102:	|      jsr 152fa <trimStack>
   10108:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1010a:	|      movea.l 32(sp),a0
   1010e:	|      move.l 24(a0),d0
   10112:	|      move.l d0,-(sp)
   10114:	|      pea 1 <_start+0x1>
   10118:	|      lea 16(sp),a0
   1011c:	|      move.l a0,-(sp)
   1011e:	|      jsr 14976 <getValueType>
   10124:	|      lea 12(sp),sp
   10128:	|      tst.w d0
   1012a:	|  ,-- bne.s 10130 <builtIn_pasteString+0x8c>
   1012c:	|  |   moveq #1,d0
   1012e:	+--|-- bra.s 1019c <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10130:	|  '-> moveq #24,d0
   10132:	|      add.l 32(sp),d0
   10136:	|      move.l d0,-(sp)
   10138:	|      jsr 152fa <trimStack>
   1013e:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10140:	|      move.l 8(sp),d0
   10144:	|      cmpi.l #65535,d0
   1014a:	|  ,-- bne.s 1016a <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   1014c:	|  |   move.l 1cbf8 <winWidth>,d2
   10152:	|  |   move.l 20(sp),-(sp)
   10156:	|  |   jsr 15a60 <stringWidth>
   1015c:	|  |   addq.l #4,sp
   1015e:	|  |   move.l d2,d1
   10160:	|  |   sub.l d0,d1
   10162:	|  |   move.l d1,d0
   10164:	|  |   lsr.l #1,d0
   10166:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1016a:	|  '-> move.l 12(sp),d1
   1016e:	|      move.l 8(sp),d0
   10172:	|      move.l d1,-(sp)
   10174:	|      move.l d0,-(sp)
   10176:	|      move.l 28(sp),-(sp)
   1017a:	|      jsr 15982 <pasteStringToBackdrop>
   10180:	|      lea 12(sp),sp
    FreeVec(newText); 
   10184:	|      move.l 20(sp),16(sp)
   1018a:	|      move.l 1cca4 <SysBase>,d0
   10190:	|      movea.l d0,a6
   10192:	|      movea.l 16(sp),a1
   10196:	|      jsr -690(a6)
    return BR_CONTINUE;
   1019a:	|      moveq #2,d0
}
   1019c:	'----> move.l (sp)+,d2
   1019e:	       movea.l (sp)+,a6
   101a0:	       lea 16(sp),sp
   101a4:	       rts

000101a6 <builtIn_anim>:

builtIn(anim)
{
   101a6:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   101aa:	       moveq #1,d0
   101ac:	       cmp.l 16(sp),d0
   101b0:	   ,-- blt.s 101c6 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   101b2:	   |   pea 19cb8 <PutChar+0x1dc0>
   101b8:	   |   jsr 17456 <KPrintF>
   101be:	   |   addq.l #4,sp
		return BR_ERROR;
   101c0:	   |   moveq #1,d0
   101c2:	,--|-- bra.w 10254 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   101c6:	|  '-> moveq #24,d1
   101c8:	|      add.l 20(sp),d1
   101cc:	|      move.l 16(sp),d0
   101d0:	|      subq.l #1,d0
   101d2:	|      move.l d1,-(sp)
   101d4:	|      move.l d0,-(sp)
   101d6:	|      jsr 97d8 <createPersonaAnim>
   101dc:	|      addq.l #8,sp
   101de:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   101e2:	|      movea.l 20(sp),a0
   101e6:	|      move.l 24(a0),d0
   101ea:	|      move.l d0,-(sp)
   101ec:	|      pea 5 <_start+0x5>
   101f0:	|      lea 8(sp),a0
   101f4:	|      move.l a0,-(sp)
   101f6:	|      jsr 14976 <getValueType>
   101fc:	|      lea 12(sp),sp
   10200:	|      tst.w d0
   10202:	|  ,-- bne.s 10208 <builtIn_anim+0x62>
   10204:	|  |   moveq #1,d0
   10206:	+--|-- bra.s 10254 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   10208:	|  '-> moveq #24,d0
   1020a:	|      add.l 20(sp),d0
   1020e:	|      move.l d0,-(sp)
   10210:	|      jsr 152fa <trimStack>
   10216:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10218:	|      move.l (sp),d0
   1021a:	|      move.l d0,-(sp)
   1021c:	|      jsr 16178 <loadBankForAnim>
   10222:	|      addq.l #4,sp
   10224:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10228:	|  ,-- bne.s 1022e <builtIn_anim+0x88>
   1022a:	|  |   moveq #1,d0
   1022c:	+--|-- bra.s 10254 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   1022e:	|  '-> move.l 4(sp),-(sp)
   10232:	|      move.l 12(sp),-(sp)
   10236:	|      jsr b6e4 <setBankFile>
   1023c:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   1023e:	|      moveq #28,d0
   10240:	|      add.l 20(sp),d0
   10244:	|      move.l 8(sp),-(sp)
   10248:	|      move.l d0,-(sp)
   1024a:	|      jsr 15224 <newAnimationVariable>
   10250:	|      addq.l #8,sp
	return BR_CONTINUE;
   10252:	|      moveq #2,d0
}
   10254:	'----> lea 12(sp),sp
   10258:	       rts

0001025a <builtIn_costume>:

builtIn(costume)
{
   1025a:	          lea -32(sp),sp
   1025e:	          move.l a6,-(sp)
   10260:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10262:	          moveq #8,d0
   10264:	          move.l d0,32(sp)
   10268:	          clr.l 28(sp)
   1026c:	          move.l 1cca4 <SysBase>,d0
   10272:	          movea.l d0,a6
   10274:	          move.l 32(sp),d0
   10278:	          move.l 28(sp),d1
   1027c:	          jsr -684(a6)
   10280:	          move.l d0,24(sp)
   10284:	          move.l 24(sp),d0
   10288:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   1028c:	      ,-- bne.s 10294 <builtIn_costume+0x3a>
   1028e:	      |   moveq #1,d0
   10290:	,-----|-- bra.w 1037c <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10294:	|     '-> move.l 44(sp),d0
   10298:	|         pea 3 <_start+0x3>
   1029c:	|         move.l d0,-(sp)
   1029e:	|         jsr 17e60 <__divsi3>
   102a4:	|         addq.l #8,sp
   102a6:	|         movea.l 20(sp),a0
   102aa:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   102ae:	|         tst.l 44(sp)
   102b2:	|     ,-- beq.s 102c8 <builtIn_costume+0x6e>
   102b4:	|     |   movea.l 20(sp),a0
   102b8:	|     |   move.l 4(a0),d1
   102bc:	|     |   move.l d1,d0
   102be:	|     |   add.l d0,d0
   102c0:	|     |   add.l d1,d0
   102c2:	|     |   cmp.l 44(sp),d0
   102c6:	|  ,--|-- beq.s 102dc <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   102c8:	|  |  '-> pea 19cf2 <PutChar+0x1dfa>
   102ce:	|  |      jsr 17456 <KPrintF>
   102d4:	|  |      addq.l #4,sp
        return BR_ERROR;
   102d6:	|  |      moveq #1,d0
   102d8:	+--|----- bra.w 1037c <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   102dc:	|  '----> move.l 44(sp),d0
   102e0:	|         add.l d0,d0
   102e2:	|         add.l d0,d0
   102e4:	|         move.l d0,16(sp)
   102e8:	|         clr.l 12(sp)
   102ec:	|         move.l 1cca4 <SysBase>,d0
   102f2:	|         movea.l d0,a6
   102f4:	|         move.l 16(sp),d0
   102f8:	|         move.l 12(sp),d1
   102fc:	|         jsr -684(a6)
   10300:	|         move.l d0,8(sp)
   10304:	|         move.l 8(sp),d0
   10308:	|         movea.l 20(sp),a0
   1030c:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   1030e:	|         movea.l 20(sp),a0
   10312:	|         move.l (a0),d0
   10314:	|     ,-- bne.s 1031a <builtIn_costume+0xc0>
   10316:	|     |   moveq #1,d0
   10318:	+-----|-- bra.s 1037c <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   1031a:	|     '-> move.l 44(sp),d0
   1031e:	|         subq.l #1,d0
   10320:	|         move.l d0,36(sp)
   10324:	|     ,-- bra.s 10360 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10326:	|  ,--|-> movea.l 48(sp),a0
   1032a:	|  |  |   move.l 24(a0),d0
   1032e:	|  |  |   movea.l 20(sp),a0
   10332:	|  |  |   movea.l (a0),a0
   10334:	|  |  |   move.l 36(sp),d1
   10338:	|  |  |   add.l d1,d1
   1033a:	|  |  |   add.l d1,d1
   1033c:	|  |  |   lea (0,a0,d1.l),a2
   10340:	|  |  |   move.l d0,-(sp)
   10342:	|  |  |   jsr 14e4e <getAnimationFromVar>
   10348:	|  |  |   addq.l #4,sp
   1034a:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1034c:	|  |  |   moveq #24,d0
   1034e:	|  |  |   add.l 48(sp),d0
   10352:	|  |  |   move.l d0,-(sp)
   10354:	|  |  |   jsr 152fa <trimStack>
   1035a:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   1035c:	|  |  |   subq.l #1,36(sp)
   10360:	|  |  '-> tst.l 36(sp)
   10364:	|  '----- bge.s 10326 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10366:	|         moveq #28,d0
   10368:	|         add.l 48(sp),d0
   1036c:	|         move.l 20(sp),-(sp)
   10370:	|         move.l d0,-(sp)
   10372:	|         jsr 15246 <newCostumeVariable>
   10378:	|         addq.l #8,sp
    return BR_CONTINUE;
   1037a:	|         moveq #2,d0
}
   1037c:	'-------> movea.l (sp)+,a2
   1037e:	          movea.l (sp)+,a6
   10380:	          lea 32(sp),sp
   10384:	          rts

00010386 <builtIn_launch>:

builtIn(launch)
{
   10386:	          lea -20(sp),sp
   1038a:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1038c:	          movea.l 32(sp),a0
   10390:	          move.l 24(a0),d0
   10394:	          move.l d0,-(sp)
   10396:	          jsr 14f4c <getTextFromAnyVar>
   1039c:	          addq.l #4,sp
   1039e:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   103a2:	      ,-- bne.s 103aa <builtIn_launch+0x24>
   103a4:	      |   moveq #1,d0
   103a6:	,-----|-- bra.w 104d8 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   103aa:	|     '-> move.l 20(sp),-(sp)
   103ae:	|         jsr 2fe <encodeFilename>
   103b4:	|         addq.l #4,sp
   103b6:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   103ba:	|         moveq #24,d0
   103bc:	|         add.l 32(sp),d0
   103c0:	|         move.l d0,-(sp)
   103c2:	|         jsr 152fa <trimStack>
   103c8:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   103ca:	|         movea.l 20(sp),a0
   103ce:	|         move.b (a0),d0
   103d0:	|         cmpi.b #104,d0
   103d4:	|  ,----- bne.s 1043e <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   103d6:	|  |      movea.l 20(sp),a0
   103da:	|  |      addq.l #1,a0
   103dc:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   103de:	|  |      cmpi.b #116,d0
   103e2:	|  +----- bne.s 1043e <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   103e4:	|  |      movea.l 20(sp),a0
   103e8:	|  |      addq.l #2,a0
   103ea:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   103ec:	|  |      cmpi.b #116,d0
   103f0:	|  +----- bne.s 1043e <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   103f2:	|  |      movea.l 20(sp),a0
   103f6:	|  |      addq.l #3,a0
   103f8:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   103fa:	|  |      cmpi.b #112,d0
   103fe:	|  +----- bne.s 1043e <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10400:	|  |      movea.l 20(sp),a0
   10404:	|  |      addq.l #4,a0
   10406:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10408:	|  |      cmpi.b #58,d0
   1040c:	|  |  ,-- beq.s 1042a <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   1040e:	|  |  |   movea.l 20(sp),a0
   10412:	|  |  |   addq.l #4,a0
   10414:	|  |  |   move.b (a0),d0
   10416:	|  |  |   cmpi.b #115,d0
   1041a:	|  +--|-- bne.s 1043e <builtIn_launch+0xb8>
   1041c:	|  |  |   movea.l 20(sp),a0
   10420:	|  |  |   addq.l #5,a0
   10422:	|  |  |   move.b (a0),d0
   10424:	|  |  |   cmpi.b #58,d0
   10428:	|  +--|-- bne.s 1043e <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1042a:	|  |  '-> move.l 20(sp),-(sp)
   1042e:	|  |      jsr b8 <copyString>
   10434:	|  |      addq.l #4,sp
   10436:	|  |      move.l d0,1cd62 <launchMe>
   1043c:	|  |  ,-- bra.s 10490 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1043e:	|  '--|-> move.l 1cc0c <gamePath>,d0
   10444:	|     |   pea 19d3d <PutChar+0x1e45>
   1044a:	|     |   move.l d0,-(sp)
   1044c:	|     |   jsr 13ea2 <joinStrings>
   10452:	|     |   addq.l #8,sp
   10454:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10458:	|     |   move.l 16(sp),-(sp)
   1045c:	|     |   move.l 16(sp),-(sp)
   10460:	|     |   jsr 13ea2 <joinStrings>
   10466:	|     |   addq.l #8,sp
   10468:	|     |   move.l d0,1cd62 <launchMe>
        FreeVec(newText);
   1046e:	|     |   move.l 16(sp),8(sp)
   10474:	|     |   move.l 1cca4 <SysBase>,d0
   1047a:	|     |   movea.l d0,a6
   1047c:	|     |   movea.l 8(sp),a1
   10480:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10484:	|     |   move.l 1cd62 <launchMe>,d0
   1048a:	|     +-- bne.s 10490 <builtIn_launch+0x10a>
   1048c:	|     |   moveq #1,d0
   1048e:	+-----|-- bra.s 104d8 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10490:	|     '-> move.l 20(sp),4(sp)
   10496:	|         move.l 1cca4 <SysBase>,d0
   1049c:	|         movea.l d0,a6
   1049e:	|         movea.l 4(sp),a1
   104a2:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   104a6:	|         clr.l -(sp)
   104a8:	|         jsr 4adc <setGraphicsWindow>
   104ae:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   104b0:	|         moveq #28,d0
   104b2:	|         add.l 32(sp),d0
   104b6:	|         pea 1 <_start+0x1>
   104ba:	|         pea 1 <_start+0x1>
   104be:	|         move.l d0,-(sp)
   104c0:	|         jsr 15268 <setVariable>
   104c6:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   104ca:	|         moveq #28,d0
   104cc:	|         add.l 32(sp),d0
   104d0:	|         move.l d0,1cd66 <launchResult>

    return BR_KEEP_AND_PAUSE;
   104d6:	|         moveq #0,d0
}
   104d8:	'-------> movea.l (sp)+,a6
   104da:	          lea 20(sp),sp
   104de:	          rts

000104e0 <builtIn_pause>:

builtIn(pause)
{
   104e0:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104e2:	       movea.l 12(sp),a0
   104e6:	       move.l 24(a0),d0
   104ea:	       move.l d0,-(sp)
   104ec:	       pea 1 <_start+0x1>
   104f0:	       move.l sp,d0
   104f2:	       addq.l #8,d0
   104f4:	       move.l d0,-(sp)
   104f6:	       jsr 14976 <getValueType>
   104fc:	       lea 12(sp),sp
   10500:	       tst.w d0
   10502:	   ,-- bne.s 10508 <builtIn_pause+0x28>
   10504:	   |   moveq #1,d0
   10506:	,--|-- bra.s 10536 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   10508:	|  '-> moveq #24,d0
   1050a:	|      add.l 12(sp),d0
   1050e:	|      move.l d0,-(sp)
   10510:	|      jsr 152fa <trimStack>
   10516:	|      addq.l #4,sp
	if (theTime > 0) {
   10518:	|      move.l (sp),d0
   1051a:	|  ,-- ble.s 10534 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1051c:	|  |   move.l (sp),d0
   1051e:	|  |   subq.l #1,d0
   10520:	|  |   movea.l 12(sp),a0
   10524:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10528:	|  |   movea.l 12(sp),a0
   1052c:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10530:	|  |   moveq #0,d0
   10532:	+--|-- bra.s 10536 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10534:	|  '-> moveq #2,d0
}
   10536:	'----> addq.l #4,sp
   10538:	       rts

0001053a <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1053a:	jsr 5270 <completeTimers>
	return BR_CONTINUE;
   10540:	moveq #2,d0
}
   10542:	rts

00010544 <builtIn_callEvent>:

builtIn(callEvent)
{
   10544:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10548:	       movea.l 20(sp),a0
   1054c:	       move.l 24(a0),d0
   10550:	       move.l d0,-(sp)
   10552:	       pea 7 <_start+0x7>
   10556:	       lea 8(sp),a0
   1055a:	       move.l a0,-(sp)
   1055c:	       jsr 14976 <getValueType>
   10562:	       lea 12(sp),sp
   10566:	       tst.w d0
   10568:	   ,-- bne.s 10570 <builtIn_callEvent+0x2c>
   1056a:	   |   moveq #1,d0
   1056c:	,--|-- bra.w 10606 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10570:	|  '-> moveq #24,d0
   10572:	|      add.l 20(sp),d0
   10576:	|      move.l d0,-(sp)
   10578:	|      jsr 152fa <trimStack>
   1057e:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10580:	|      movea.l 20(sp),a0
   10584:	|      move.l 24(a0),d0
   10588:	|      move.l d0,-(sp)
   1058a:	|      pea 7 <_start+0x7>
   1058e:	|      moveq #12,d0
   10590:	|      add.l sp,d0
   10592:	|      move.l d0,-(sp)
   10594:	|      jsr 14976 <getValueType>
   1059a:	|      lea 12(sp),sp
   1059e:	|      tst.w d0
   105a0:	|  ,-- bne.s 105a6 <builtIn_callEvent+0x62>
   105a2:	|  |   moveq #1,d0
   105a4:	+--|-- bra.s 10606 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   105a6:	|  '-> moveq #24,d0
   105a8:	|      add.l 20(sp),d0
   105ac:	|      move.l d0,-(sp)
   105ae:	|      jsr 152fa <trimStack>
   105b4:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   105b6:	|      move.l (sp),d1
   105b8:	|      move.l 4(sp),d0
   105bc:	|      move.l d1,-(sp)
   105be:	|      move.l d0,-(sp)
   105c0:	|      jsr d6be <getCombinationFunction>
   105c6:	|      addq.l #8,sp
   105c8:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   105cc:	|  ,-- beq.s 105ec <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   105ce:	|  |   moveq #28,d0
   105d0:	|  |   add.l 20(sp),d0
   105d4:	|  |   move.l 8(sp),-(sp)
   105d8:	|  |   pea 2 <_start+0x2>
   105dc:	|  |   move.l d0,-(sp)
   105de:	|  |   jsr 15268 <setVariable>
   105e4:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   105e8:	|  |   moveq #4,d0
   105ea:	+--|-- bra.s 10606 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   105ec:	|  '-> moveq #28,d0
   105ee:	|      add.l 20(sp),d0
   105f2:	|      clr.l -(sp)
   105f4:	|      pea 1 <_start+0x1>
   105f8:	|      move.l d0,-(sp)
   105fa:	|      jsr 15268 <setVariable>
   10600:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10604:	|      moveq #2,d0
}
   10606:	'----> lea 12(sp),sp
   1060a:	       rts

0001060c <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   1060c:	move.w #1,1cd72 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10614:	moveq #2,d0
}
   10616:	rts

00010618 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10618:	moveq #24,d0
   1061a:	add.l 8(sp),d0
   1061e:	move.l d0,-(sp)
   10620:	jsr 152fa <trimStack>
   10626:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10628:	pea 19d3f <PutChar+0x1e47>
   1062e:	jsr 17456 <KPrintF>
   10634:	addq.l #4,sp
	return BR_CONTINUE;
   10636:	moveq #2,d0
}
   10638:	rts

0001063a <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1063a:	pea 19d3f <PutChar+0x1e47>
   10640:	jsr 17456 <KPrintF>
   10646:	addq.l #4,sp
	return BR_CONTINUE;
   10648:	moveq #2,d0
}
   1064a:	rts

0001064c <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   1064c:	pea 19d3f <PutChar+0x1e47>
   10652:	jsr 17456 <KPrintF>
   10658:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1065a:	moveq #2,d0
}
   1065c:	rts

0001065e <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   1065e:	pea 19d3f <PutChar+0x1e47>
   10664:	jsr 17456 <KPrintF>
   1066a:	addq.l #4,sp
	return BR_CONTINUE;
   1066c:	moveq #2,d0
}
   1066e:	rts

00010670 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10670:	pea 19d3f <PutChar+0x1e47>
   10676:	jsr 17456 <KPrintF>
   1067c:	addq.l #4,sp
	return BR_CONTINUE;
   1067e:	moveq #2,d0
}
   10680:	rts

00010682 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10682:	pea 19d3f <PutChar+0x1e47>
   10688:	jsr 17456 <KPrintF>
   1068e:	addq.l #4,sp
	return BR_CONTINUE;
   10690:	moveq #2,d0
}
   10692:	rts

00010694 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10694:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10698:	       movea.l 20(sp),a0
   1069c:	       move.l 24(a0),d0
   106a0:	       move.l d0,-(sp)
   106a2:	       pea 1 <_start+0x1>
   106a6:	       moveq #16,d0
   106a8:	       add.l sp,d0
   106aa:	       move.l d0,-(sp)
   106ac:	       jsr 14976 <getValueType>
   106b2:	       lea 12(sp),sp
   106b6:	       tst.w d0
   106b8:	   ,-- bne.s 106c0 <builtIn_startMusic+0x2c>
   106ba:	   |   moveq #1,d0
   106bc:	,--|-- bra.w 10760 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   106c0:	|  '-> moveq #24,d0
   106c2:	|      add.l 20(sp),d0
   106c6:	|      move.l d0,-(sp)
   106c8:	|      jsr 152fa <trimStack>
   106ce:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106d0:	|      movea.l 20(sp),a0
   106d4:	|      move.l 24(a0),d0
   106d8:	|      move.l d0,-(sp)
   106da:	|      pea 1 <_start+0x1>
   106de:	|      moveq #12,d0
   106e0:	|      add.l sp,d0
   106e2:	|      move.l d0,-(sp)
   106e4:	|      jsr 14976 <getValueType>
   106ea:	|      lea 12(sp),sp
   106ee:	|      tst.w d0
   106f0:	|  ,-- bne.s 106f6 <builtIn_startMusic+0x62>
   106f2:	|  |   moveq #1,d0
   106f4:	+--|-- bra.s 10760 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   106f6:	|  '-> moveq #24,d0
   106f8:	|      add.l 20(sp),d0
   106fc:	|      move.l d0,-(sp)
   106fe:	|      jsr 152fa <trimStack>
   10704:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10706:	|      movea.l 20(sp),a0
   1070a:	|      move.l 24(a0),d0
   1070e:	|      move.l d0,-(sp)
   10710:	|      pea 5 <_start+0x5>
   10714:	|      lea 8(sp),a0
   10718:	|      move.l a0,-(sp)
   1071a:	|      jsr 14976 <getValueType>
   10720:	|      lea 12(sp),sp
   10724:	|      tst.w d0
   10726:	|  ,-- bne.s 1072c <builtIn_startMusic+0x98>
   10728:	|  |   moveq #1,d0
   1072a:	+--|-- bra.s 10760 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1072c:	|  '-> moveq #24,d0
   1072e:	|      add.l 20(sp),d0
   10732:	|      move.l d0,-(sp)
   10734:	|      jsr 152fa <trimStack>
   1073a:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   1073c:	|      movea.l 8(sp),a0
   10740:	|      move.l 4(sp),d1
   10744:	|      move.l (sp),d0
   10746:	|      move.l a0,-(sp)
   10748:	|      move.l d1,-(sp)
   1074a:	|      move.l d0,-(sp)
   1074c:	|      jsr d2c0 <playMOD>
   10752:	|      lea 12(sp),sp
   10756:	|      tst.w d0
   10758:	|  ,-- bne.s 1075e <builtIn_startMusic+0xca>
   1075a:	|  |   moveq #2,d0
   1075c:	+--|-- bra.s 10760 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1075e:	|  '-> moveq #2,d0
}
   10760:	'----> lea 12(sp),sp
   10764:	       rts

00010766 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10766:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10768:	       movea.l 12(sp),a0
   1076c:	       move.l 24(a0),d0
   10770:	       move.l d0,-(sp)
   10772:	       pea 1 <_start+0x1>
   10776:	       move.l sp,d0
   10778:	       addq.l #8,d0
   1077a:	       move.l d0,-(sp)
   1077c:	       jsr 14976 <getValueType>
   10782:	       lea 12(sp),sp
   10786:	       tst.w d0
   10788:	   ,-- bne.s 1078e <builtIn_stopMusic+0x28>
   1078a:	   |   moveq #1,d0
   1078c:	,--|-- bra.s 107ac <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   1078e:	|  '-> moveq #24,d0
   10790:	|      add.l 12(sp),d0
   10794:	|      move.l d0,-(sp)
   10796:	|      jsr 152fa <trimStack>
   1079c:	|      addq.l #4,sp
	stopMOD (v);
   1079e:	|      move.l (sp),d0
   107a0:	|      move.l d0,-(sp)
   107a2:	|      jsr d35c <stopMOD>
   107a8:	|      addq.l #4,sp
	return BR_CONTINUE;
   107aa:	|      moveq #2,d0
}
   107ac:	'----> addq.l #4,sp
   107ae:	       rts

000107b0 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   107b0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107b2:	       movea.l 16(sp),a0
   107b6:	       move.l 24(a0),d0
   107ba:	       move.l d0,-(sp)
   107bc:	       pea 1 <_start+0x1>
   107c0:	       move.l sp,d0
   107c2:	       addq.l #8,d0
   107c4:	       move.l d0,-(sp)
   107c6:	       jsr 14976 <getValueType>
   107cc:	       lea 12(sp),sp
   107d0:	       tst.w d0
   107d2:	   ,-- bne.s 107d8 <builtIn_setMusicVolume+0x28>
   107d4:	   |   moveq #1,d0
   107d6:	,--|-- bra.s 10832 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   107d8:	|  '-> moveq #24,d0
   107da:	|      add.l 16(sp),d0
   107de:	|      move.l d0,-(sp)
   107e0:	|      jsr 152fa <trimStack>
   107e6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107e8:	|      movea.l 16(sp),a0
   107ec:	|      move.l 24(a0),d0
   107f0:	|      move.l d0,-(sp)
   107f2:	|      pea 1 <_start+0x1>
   107f6:	|      moveq #12,d0
   107f8:	|      add.l sp,d0
   107fa:	|      move.l d0,-(sp)
   107fc:	|      jsr 14976 <getValueType>
   10802:	|      lea 12(sp),sp
   10806:	|      tst.w d0
   10808:	|  ,-- bne.s 1080e <builtIn_setMusicVolume+0x5e>
   1080a:	|  |   moveq #1,d0
   1080c:	+--|-- bra.s 10832 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1080e:	|  '-> moveq #24,d0
   10810:	|      add.l 16(sp),d0
   10814:	|      move.l d0,-(sp)
   10816:	|      jsr 152fa <trimStack>
   1081c:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   1081e:	|      move.l (sp),d1
   10820:	|      move.l 4(sp),d0
   10824:	|      move.l d1,-(sp)
   10826:	|      move.l d0,-(sp)
   10828:	|      jsr d342 <setMusicVolume>
   1082e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10830:	|      moveq #2,d0
}
   10832:	'----> addq.l #8,sp
   10834:	       rts

00010836 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10836:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10838:	       movea.l 12(sp),a0
   1083c:	       move.l 24(a0),d0
   10840:	       move.l d0,-(sp)
   10842:	       pea 1 <_start+0x1>
   10846:	       move.l sp,d0
   10848:	       addq.l #8,d0
   1084a:	       move.l d0,-(sp)
   1084c:	       jsr 14976 <getValueType>
   10852:	       lea 12(sp),sp
   10856:	       tst.w d0
   10858:	   ,-- bne.s 1085e <builtIn_setDefaultMusicVolume+0x28>
   1085a:	   |   moveq #1,d0
   1085c:	,--|-- bra.s 1087c <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1085e:	|  '-> moveq #24,d0
   10860:	|      add.l 12(sp),d0
   10864:	|      move.l d0,-(sp)
   10866:	|      jsr 152fa <trimStack>
   1086c:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   1086e:	|      move.l (sp),d0
   10870:	|      move.l d0,-(sp)
   10872:	|      jsr d326 <setDefaultMusicVolume>
   10878:	|      addq.l #4,sp
	return BR_CONTINUE;
   1087a:	|      moveq #2,d0
}
   1087c:	'----> addq.l #4,sp
   1087e:	       rts

00010880 <builtIn_playSound>:

builtIn(playSound)
{
   10880:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10882:	       movea.l 12(sp),a0
   10886:	       move.l 24(a0),d0
   1088a:	       move.l d0,-(sp)
   1088c:	       pea 5 <_start+0x5>
   10890:	       move.l sp,d0
   10892:	       addq.l #8,d0
   10894:	       move.l d0,-(sp)
   10896:	       jsr 14976 <getValueType>
   1089c:	       lea 12(sp),sp
   108a0:	       tst.w d0
   108a2:	   ,-- bne.s 108a8 <builtIn_playSound+0x28>
   108a4:	   |   moveq #1,d0
   108a6:	,--|-- bra.s 108d0 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   108a8:	|  '-> moveq #24,d0
   108aa:	|      add.l 12(sp),d0
   108ae:	|      move.l d0,-(sp)
   108b0:	|      jsr 152fa <trimStack>
   108b6:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   108b8:	|      move.l (sp),d0
   108ba:	|      clr.l -(sp)
   108bc:	|      move.l d0,-(sp)
   108be:	|      jsr d34a <startSound>
   108c4:	|      addq.l #8,sp
   108c6:	|      tst.w d0
   108c8:	|  ,-- bne.s 108ce <builtIn_playSound+0x4e>
   108ca:	|  |   moveq #2,d0
   108cc:	+--|-- bra.s 108d0 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   108ce:	|  '-> moveq #2,d0
}
   108d0:	'----> addq.l #4,sp
   108d2:	       rts

000108d4 <builtIn_loopSound>:

builtIn(loopSound)
{
   108d4:	             lea -28(sp),sp
   108d8:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   108da:	             tst.l 36(sp)
   108de:	         ,-- bgt.s 108f4 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   108e0:	         |   pea 19d62 <PutChar+0x1e6a>
   108e6:	         |   jsr 17456 <KPrintF>
   108ec:	         |   addq.l #4,sp
		return BR_ERROR;
   108ee:	         |   moveq #1,d0
   108f0:	,--------|-- bra.w 10ab0 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   108f4:	|        '-> moveq #1,d0
   108f6:	|            cmp.l 36(sp),d0
   108fa:	|     ,----- blt.s 10956 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   108fc:	|     |      movea.l 40(sp),a0
   10900:	|     |      move.l 24(a0),d0
   10904:	|     |      move.l d0,-(sp)
   10906:	|     |      pea 5 <_start+0x5>
   1090a:	|     |      lea 16(sp),a0
   1090e:	|     |      move.l a0,-(sp)
   10910:	|     |      jsr 14976 <getValueType>
   10916:	|     |      lea 12(sp),sp
   1091a:	|     |      tst.w d0
   1091c:	|     |  ,-- bne.s 10924 <builtIn_loopSound+0x50>
   1091e:	|     |  |   moveq #1,d0
   10920:	+-----|--|-- bra.w 10ab0 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10924:	|     |  '-> moveq #24,d0
   10926:	|     |      add.l 40(sp),d0
   1092a:	|     |      move.l d0,-(sp)
   1092c:	|     |      jsr 152fa <trimStack>
   10932:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10934:	|     |      move.l 8(sp),d0
   10938:	|     |      pea 1 <_start+0x1>
   1093c:	|     |      move.l d0,-(sp)
   1093e:	|     |      jsr d34a <startSound>
   10944:	|     |      addq.l #8,sp
   10946:	|     |      tst.w d0
   10948:	|     |  ,-- bne.s 10950 <builtIn_loopSound+0x7c>
   1094a:	|     |  |   moveq #2,d0
   1094c:	+-----|--|-- bra.w 10ab0 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10950:	|     |  '-> moveq #2,d0
   10952:	+-----|----- bra.w 10ab0 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10956:	|     '----> moveq #2,d1
   10958:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   1095c:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10960:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10964:	|            movea.l 40(sp),a0
   10968:	|            movea.l 24(a0),a0
   1096c:	|            move.l (a0),d0
   1096e:	|            moveq #5,d1
   10970:	|            cmp.l d0,d1
   10972:	|  ,-------- beq.w 10a4a <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10976:	|  |         movea.l 40(sp),a0
   1097a:	|  |         move.l 24(a0),d0
   1097e:	|  |         move.l d0,-(sp)
   10980:	|  |         pea 1 <_start+0x1>
   10984:	|  |         lea 12(sp),a0
   10988:	|  |         move.l a0,-(sp)
   1098a:	|  |         jsr 14976 <getValueType>
   10990:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10994:	|  |         moveq #24,d0
   10996:	|  |         add.l 40(sp),d0
   1099a:	|  |         move.l d0,-(sp)
   1099c:	|  |         jsr 152fa <trimStack>
   109a2:	|  |         addq.l #4,sp
			numParams--;
   109a4:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   109a8:	|  +-------- bra.w 10a4a <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   109ac:	|  |  ,----> movea.l 40(sp),a0
   109b0:	|  |  |      move.l 24(a0),d0
   109b4:	|  |  |      move.l d0,-(sp)
   109b6:	|  |  |      pea 5 <_start+0x5>
   109ba:	|  |  |      lea 16(sp),a0
   109be:	|  |  |      move.l a0,-(sp)
   109c0:	|  |  |      jsr 14976 <getValueType>
   109c6:	|  |  |      lea 12(sp),sp
   109ca:	|  |  |      tst.w d0
   109cc:	|  |  |  ,-- bne.s 109e2 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   109ce:	|  |  |  |   pea 19da0 <PutChar+0x1ea8>
   109d4:	|  |  |  |   jsr 17456 <KPrintF>
   109da:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   109dc:	|  |  |  |   moveq #1,d0
   109de:	+--|--|--|-- bra.w 10ab0 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   109e2:	|  |  |  '-> moveq #20,d0
   109e4:	|  |  |      move.l d0,20(sp)
   109e8:	|  |  |      clr.l 16(sp)
   109ec:	|  |  |      move.l 1cca4 <SysBase>,d0
   109f2:	|  |  |      movea.l d0,a6
   109f4:	|  |  |      move.l 20(sp),d0
   109f8:	|  |  |      move.l 16(sp),d1
   109fc:	|  |  |      jsr -684(a6)
   10a00:	|  |  |      move.l d0,12(sp)
   10a04:	|  |  |      move.l 12(sp),d0
   10a08:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10a0c:	|  |  |  ,-- bne.s 10a14 <builtIn_loopSound+0x140>
   10a0e:	|  |  |  |   moveq #1,d0
   10a10:	+--|--|--|-- bra.w 10ab0 <builtIn_loopSound+0x1dc>

			s->next = old;
   10a14:	|  |  |  '-> movea.l 28(sp),a0
   10a18:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10a1e:	|  |  |      movea.l 28(sp),a0
   10a22:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10a26:	|  |  |      move.l 8(sp),d0
   10a2a:	|  |  |      movea.l 28(sp),a0
   10a2e:	|  |  |      move.l d0,(a0)
			old = s;
   10a30:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10a36:	|  |  |      moveq #24,d0
   10a38:	|  |  |      add.l 40(sp),d0
   10a3c:	|  |  |      move.l d0,-(sp)
   10a3e:	|  |  |      jsr 152fa <trimStack>
   10a44:	|  |  |      addq.l #4,sp
			numParams--;
   10a46:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10a4a:	|  '--|----> tst.l 36(sp)
   10a4e:	|     '----- bne.w 109ac <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10a52:	|        ,-- bra.s 10a5e <builtIn_loopSound+0x18a>
   10a54:	|     ,--|-> movea.l 28(sp),a0
   10a58:	|     |  |   move.l 4(a0),28(sp)
   10a5e:	|     |  '-> movea.l 28(sp),a0
   10a62:	|     |      move.l 4(a0),d0
   10a66:	|     '----- bne.s 10a54 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10a68:	|            move.l 4(sp),d0
   10a6c:	|            moveq #1,d1
   10a6e:	|            cmp.l d0,d1
   10a70:	|     ,----- bge.s 10a88 <builtIn_loopSound+0x1b4>
			s->next = old;
   10a72:	|     |      movea.l 28(sp),a0
   10a76:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10a7c:	|     |      movea.l 24(sp),a0
   10a80:	|     |      move.l 28(sp),8(a0)
   10a86:	|     |  ,-- bra.s 10a98 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10a88:	|     '--|-> move.l 4(sp),d0
   10a8c:	|        +-- beq.s 10a98 <builtIn_loopSound+0x1c4>
			s->next = s;
   10a8e:	|        |   movea.l 28(sp),a0
   10a92:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10a98:	|        '-> movea.l 24(sp),a0
   10a9c:	|            moveq #-1,d0
   10a9e:	|            move.l d0,16(a0)
		playSoundList(old);
   10aa2:	|            move.l 24(sp),-(sp)
   10aa6:	|            jsr d2c4 <playSoundList>
   10aac:	|            addq.l #4,sp
		return BR_CONTINUE;
   10aae:	|            moveq #2,d0
	}
}
   10ab0:	'----------> movea.l (sp)+,a6
   10ab2:	             lea 28(sp),sp
   10ab6:	             rts

00010ab8 <builtIn_stopSound>:

builtIn(stopSound)
{
   10ab8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10aba:	       movea.l 12(sp),a0
   10abe:	       move.l 24(a0),d0
   10ac2:	       move.l d0,-(sp)
   10ac4:	       pea 5 <_start+0x5>
   10ac8:	       move.l sp,d0
   10aca:	       addq.l #8,d0
   10acc:	       move.l d0,-(sp)
   10ace:	       jsr 14976 <getValueType>
   10ad4:	       lea 12(sp),sp
   10ad8:	       tst.w d0
   10ada:	   ,-- bne.s 10ae0 <builtIn_stopSound+0x28>
   10adc:	   |   moveq #1,d0
   10ade:	,--|-- bra.s 10afe <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10ae0:	|  '-> moveq #24,d0
   10ae2:	|      add.l 12(sp),d0
   10ae6:	|      move.l d0,-(sp)
   10ae8:	|      jsr 152fa <trimStack>
   10aee:	|      addq.l #4,sp
	huntKillSound (v);
   10af0:	|      move.l (sp),d0
   10af2:	|      move.l d0,-(sp)
   10af4:	|      jsr d2bc <huntKillSound>
   10afa:	|      addq.l #4,sp
	return BR_CONTINUE;
   10afc:	|      moveq #2,d0
}
   10afe:	'----> addq.l #4,sp
   10b00:	       rts

00010b02 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10b02:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b04:	       movea.l 12(sp),a0
   10b08:	       move.l 24(a0),d0
   10b0c:	       move.l d0,-(sp)
   10b0e:	       pea 1 <_start+0x1>
   10b12:	       move.l sp,d0
   10b14:	       addq.l #8,d0
   10b16:	       move.l d0,-(sp)
   10b18:	       jsr 14976 <getValueType>
   10b1e:	       lea 12(sp),sp
   10b22:	       tst.w d0
   10b24:	   ,-- bne.s 10b2a <builtIn_setDefaultSoundVolume+0x28>
   10b26:	   |   moveq #1,d0
   10b28:	,--|-- bra.s 10b48 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10b2a:	|  '-> moveq #24,d0
   10b2c:	|      add.l 12(sp),d0
   10b30:	|      move.l d0,-(sp)
   10b32:	|      jsr 152fa <trimStack>
   10b38:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10b3a:	|      move.l (sp),d0
   10b3c:	|      move.l d0,-(sp)
   10b3e:	|      jsr d332 <setDefaultSoundVolume>
   10b44:	|      addq.l #4,sp
	return BR_CONTINUE;
   10b46:	|      moveq #2,d0
}
   10b48:	'----> addq.l #4,sp
   10b4a:	       rts

00010b4c <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10b4c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b4e:	       movea.l 16(sp),a0
   10b52:	       move.l 24(a0),d0
   10b56:	       move.l d0,-(sp)
   10b58:	       pea 1 <_start+0x1>
   10b5c:	       move.l sp,d0
   10b5e:	       addq.l #8,d0
   10b60:	       move.l d0,-(sp)
   10b62:	       jsr 14976 <getValueType>
   10b68:	       lea 12(sp),sp
   10b6c:	       tst.w d0
   10b6e:	   ,-- bne.s 10b74 <builtIn_setSoundVolume+0x28>
   10b70:	   |   moveq #1,d0
   10b72:	,--|-- bra.s 10bce <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10b74:	|  '-> moveq #24,d0
   10b76:	|      add.l 16(sp),d0
   10b7a:	|      move.l d0,-(sp)
   10b7c:	|      jsr 152fa <trimStack>
   10b82:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b84:	|      movea.l 16(sp),a0
   10b88:	|      move.l 24(a0),d0
   10b8c:	|      move.l d0,-(sp)
   10b8e:	|      pea 5 <_start+0x5>
   10b92:	|      moveq #12,d0
   10b94:	|      add.l sp,d0
   10b96:	|      move.l d0,-(sp)
   10b98:	|      jsr 14976 <getValueType>
   10b9e:	|      lea 12(sp),sp
   10ba2:	|      tst.w d0
   10ba4:	|  ,-- bne.s 10baa <builtIn_setSoundVolume+0x5e>
   10ba6:	|  |   moveq #1,d0
   10ba8:	+--|-- bra.s 10bce <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10baa:	|  '-> moveq #24,d0
   10bac:	|      add.l 16(sp),d0
   10bb0:	|      move.l d0,-(sp)
   10bb2:	|      jsr 152fa <trimStack>
   10bb8:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10bba:	|      move.l (sp),d1
   10bbc:	|      move.l 4(sp),d0
   10bc0:	|      move.l d1,-(sp)
   10bc2:	|      move.l d0,-(sp)
   10bc4:	|      jsr d346 <setSoundVolume>
   10bca:	|      addq.l #8,sp
	return BR_CONTINUE;
   10bcc:	|      moveq #2,d0
}
   10bce:	'----> addq.l #8,sp
   10bd0:	       rts

00010bd2 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10bd2:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd6:	       movea.l 20(sp),a0
   10bda:	       move.l 24(a0),d0
   10bde:	       move.l d0,-(sp)
   10be0:	       pea 1 <_start+0x1>
   10be4:	       moveq #12,d0
   10be6:	       add.l sp,d0
   10be8:	       move.l d0,-(sp)
   10bea:	       jsr 14976 <getValueType>
   10bf0:	       lea 12(sp),sp
   10bf4:	       tst.w d0
   10bf6:	   ,-- bne.s 10bfe <builtIn_setSoundLoopPoints+0x2c>
   10bf8:	   |   moveq #1,d0
   10bfa:	,--|-- bra.w 10c96 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10bfe:	|  '-> moveq #24,d0
   10c00:	|      add.l 20(sp),d0
   10c04:	|      move.l d0,-(sp)
   10c06:	|      jsr 152fa <trimStack>
   10c0c:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c0e:	|      movea.l 20(sp),a0
   10c12:	|      move.l 24(a0),d0
   10c16:	|      move.l d0,-(sp)
   10c18:	|      pea 1 <_start+0x1>
   10c1c:	|      lea 8(sp),a0
   10c20:	|      move.l a0,-(sp)
   10c22:	|      jsr 14976 <getValueType>
   10c28:	|      lea 12(sp),sp
   10c2c:	|      tst.w d0
   10c2e:	|  ,-- bne.s 10c34 <builtIn_setSoundLoopPoints+0x62>
   10c30:	|  |   moveq #1,d0
   10c32:	+--|-- bra.s 10c96 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10c34:	|  '-> moveq #24,d0
   10c36:	|      add.l 20(sp),d0
   10c3a:	|      move.l d0,-(sp)
   10c3c:	|      jsr 152fa <trimStack>
   10c42:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c44:	|      movea.l 20(sp),a0
   10c48:	|      move.l 24(a0),d0
   10c4c:	|      move.l d0,-(sp)
   10c4e:	|      pea 5 <_start+0x5>
   10c52:	|      moveq #16,d0
   10c54:	|      add.l sp,d0
   10c56:	|      move.l d0,-(sp)
   10c58:	|      jsr 14976 <getValueType>
   10c5e:	|      lea 12(sp),sp
   10c62:	|      tst.w d0
   10c64:	|  ,-- bne.s 10c6a <builtIn_setSoundLoopPoints+0x98>
   10c66:	|  |   moveq #1,d0
   10c68:	+--|-- bra.s 10c96 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10c6a:	|  '-> moveq #24,d0
   10c6c:	|      add.l 20(sp),d0
   10c70:	|      move.l d0,-(sp)
   10c72:	|      jsr 152fa <trimStack>
   10c78:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10c7a:	|      movea.l 4(sp),a0
   10c7e:	|      move.l (sp),d1
   10c80:	|      move.l 8(sp),d0
   10c84:	|      move.l a0,-(sp)
   10c86:	|      move.l d1,-(sp)
   10c88:	|      move.l d0,-(sp)
   10c8a:	|      jsr d33e <setSoundLoop>
   10c90:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10c94:	|      moveq #2,d0
}
   10c96:	'----> lea 12(sp),sp
   10c9a:	       rts

00010c9c <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10c9c:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10c9e:	          movea.l 12(sp),a0
   10ca2:	          movea.l 24(a0),a0
   10ca6:	          move.l (a0),d0
   10ca8:	          moveq #5,d1
   10caa:	          cmp.l d0,d1
   10cac:	,-------- bne.s 10cf0 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10cae:	|         movea.l 12(sp),a0
   10cb2:	|         move.l 24(a0),d0
   10cb6:	|         move.l d0,-(sp)
   10cb8:	|         pea 5 <_start+0x5>
   10cbc:	|         move.l sp,d0
   10cbe:	|         addq.l #8,d0
   10cc0:	|         move.l d0,-(sp)
   10cc2:	|         jsr 14976 <getValueType>
   10cc8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10ccc:	|         moveq #24,d0
   10cce:	|         add.l 12(sp),d0
   10cd2:	|         move.l d0,-(sp)
   10cd4:	|         jsr 152fa <trimStack>
   10cda:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10cdc:	|         move.l (sp),d0
   10cde:	|         move.l d0,-(sp)
   10ce0:	|         jsr 16c00 <setFloor>
   10ce6:	|         addq.l #4,sp
   10ce8:	|         tst.w d0
   10cea:	|  ,----- bne.s 10d06 <builtIn_setFloor+0x6a>
   10cec:	|  |      moveq #1,d0
   10cee:	|  |  ,-- bra.s 10d08 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10cf0:	'--|--|-> moveq #24,d0
   10cf2:	   |  |   add.l 12(sp),d0
   10cf6:	   |  |   move.l d0,-(sp)
   10cf8:	   |  |   jsr 152fa <trimStack>
   10cfe:	   |  |   addq.l #4,sp
		setFloorNull ();
   10d00:	   |  |   jsr 1737a <setFloorNull>
	}
	return BR_CONTINUE;
   10d06:	   '--|-> moveq #2,d0
}
   10d08:	      '-> addq.l #4,sp
   10d0a:	          rts

00010d0c <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10d0c:	jsr 1647c <drawFloor>
	return BR_CONTINUE;
   10d12:	moveq #2,d0
}
   10d14:	rts

00010d16 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10d16:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10d18:	          movea.l 12(sp),a0
   10d1c:	          movea.l 24(a0),a0
   10d20:	          move.l (a0),d0
   10d22:	          moveq #5,d1
   10d24:	          cmp.l d0,d1
   10d26:	,-------- bne.s 10d6a <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10d28:	|         movea.l 12(sp),a0
   10d2c:	|         move.l 24(a0),d0
   10d30:	|         move.l d0,-(sp)
   10d32:	|         pea 5 <_start+0x5>
   10d36:	|         move.l sp,d0
   10d38:	|         addq.l #8,d0
   10d3a:	|         move.l d0,-(sp)
   10d3c:	|         jsr 14976 <getValueType>
   10d42:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10d46:	|         moveq #24,d0
   10d48:	|         add.l 12(sp),d0
   10d4c:	|         move.l d0,-(sp)
   10d4e:	|         jsr 152fa <trimStack>
   10d54:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10d56:	|         move.l (sp),d0
   10d58:	|         move.l d0,-(sp)
   10d5a:	|         jsr 87ec <setZBuffer>
   10d60:	|         addq.l #4,sp
   10d62:	|         tst.w d0
   10d64:	|  ,----- bne.s 10d80 <builtIn_setZBuffer+0x6a>
   10d66:	|  |      moveq #1,d0
   10d68:	|  |  ,-- bra.s 10d82 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10d6a:	'--|--|-> moveq #24,d0
   10d6c:	   |  |   add.l 12(sp),d0
   10d70:	   |  |   move.l d0,-(sp)
   10d72:	   |  |   jsr 152fa <trimStack>
   10d78:	   |  |   addq.l #4,sp
		killZBuffer ();
   10d7a:	   |  |   jsr 87a0 <killZBuffer>
	}
	return BR_CONTINUE;
   10d80:	   '--|-> moveq #2,d0
}
   10d82:	      '-> addq.l #4,sp
   10d84:	          rts

00010d86 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10d86:	pea 19dd7 <PutChar+0x1edf>
   10d8c:	jsr 17456 <KPrintF>
   10d92:	addq.l #4,sp
	return BR_CONTINUE;
   10d94:	moveq #2,d0
}
   10d96:	rts

00010d98 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d98:	          movea.l 8(sp),a0
   10d9c:	          move.l 24(a0),d0
   10da0:	          move.l d0,-(sp)
   10da2:	          pea 1 <_start+0x1>
   10da6:	          pea 1cd6e <speechMode>
   10dac:	          jsr 14976 <getValueType>
   10db2:	          lea 12(sp),sp
   10db6:	          tst.w d0
   10db8:	      ,-- bne.s 10dbe <builtIn_setSpeechMode+0x26>
   10dba:	      |   moveq #1,d0
   10dbc:	,-----|-- bra.s 10df6 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10dbe:	|     '-> moveq #24,d0
   10dc0:	|         add.l 8(sp),d0
   10dc4:	|         move.l d0,-(sp)
   10dc6:	|         jsr 152fa <trimStack>
   10dcc:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10dce:	|         move.l 1cd6e <speechMode>,d0
   10dd4:	|     ,-- bmi.s 10de2 <builtIn_setSpeechMode+0x4a>
   10dd6:	|     |   move.l 1cd6e <speechMode>,d0
   10ddc:	|     |   moveq #2,d1
   10dde:	|     |   cmp.l d0,d1
   10de0:	|  ,--|-- bge.s 10df4 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10de2:	|  |  '-> pea 19df0 <PutChar+0x1ef8>
   10de8:	|  |      jsr 17456 <KPrintF>
   10dee:	|  |      addq.l #4,sp
		return BR_ERROR;
   10df0:	|  |      moveq #1,d0
   10df2:	+--|----- bra.s 10df6 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10df4:	|  '----> moveq #2,d0
}
   10df6:	'-------> rts

00010df8 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10df8:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10dfa:	       jsr 406e <isThereAnySpeechGoingOn>
   10e00:	       move.l d0,(sp)
	if (i == -1) {
   10e02:	       moveq #-1,d0
   10e04:	       cmp.l (sp),d0
   10e06:	,----- bne.s 10e22 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10e08:	|      moveq #28,d0
   10e0a:	|      add.l 12(sp),d0
   10e0e:	|      clr.l -(sp)
   10e10:	|      pea 1 <_start+0x1>
   10e14:	|      move.l d0,-(sp)
   10e16:	|      jsr 15268 <setVariable>
   10e1c:	|      lea 12(sp),sp
   10e20:	|  ,-- bra.s 10e3a <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10e22:	'--|-> moveq #28,d0
   10e24:	   |   add.l 12(sp),d0
   10e28:	   |   move.l (sp),-(sp)
   10e2a:	   |   pea 7 <_start+0x7>
   10e2e:	   |   move.l d0,-(sp)
   10e30:	   |   jsr 15268 <setVariable>
   10e36:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10e3a:	   '-> moveq #2,d0
}
   10e3c:	       addq.l #4,sp
   10e3e:	       rts

00010e40 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10e40:	jsr 6b9a <killSpeechTimers>
	return BR_CONTINUE;
   10e46:	moveq #2,d0
}
   10e48:	rts

00010e4a <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10e4a:	       move.l 1cdb4 <overRegion>,d0
   10e50:	,----- beq.s 10e7a <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10e52:	|      movea.l 1cdb4 <overRegion>,a0
   10e58:	|      movea.l 28(a0),a0
   10e5c:	|      move.l 4(a0),d1
   10e60:	|      moveq #28,d0
   10e62:	|      add.l 8(sp),d0
   10e66:	|      move.l d1,-(sp)
   10e68:	|      pea 7 <_start+0x7>
   10e6c:	|      move.l d0,-(sp)
   10e6e:	|      jsr 15268 <setVariable>
   10e74:	|      lea 12(sp),sp
   10e78:	|  ,-- bra.s 10e92 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10e7a:	'--|-> moveq #28,d0
   10e7c:	   |   add.l 8(sp),d0
   10e80:	   |   clr.l -(sp)
   10e82:	   |   pea 1 <_start+0x1>
   10e86:	   |   move.l d0,-(sp)
   10e88:	   |   jsr 15268 <setVariable>
   10e8e:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10e92:	   '-> moveq #2,d0
}
   10e94:	       rts

00010e96 <builtIn_rename>:

builtIn(rename)
{
   10e96:	       lea -16(sp),sp
   10e9a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10e9c:	       movea.l 28(sp),a0
   10ea0:	       move.l 24(a0),d0
   10ea4:	       move.l d0,-(sp)
   10ea6:	       jsr 14f4c <getTextFromAnyVar>
   10eac:	       addq.l #4,sp
   10eae:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10eb2:	   ,-- bne.s 10eb8 <builtIn_rename+0x22>
   10eb4:	   |   moveq #1,d0
   10eb6:	,--|-- bra.s 10f32 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10eb8:	|  '-> moveq #24,d0
   10eba:	|      add.l 28(sp),d0
   10ebe:	|      move.l d0,-(sp)
   10ec0:	|      jsr 152fa <trimStack>
   10ec6:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10ec8:	|      movea.l 28(sp),a0
   10ecc:	|      move.l 24(a0),d0
   10ed0:	|      move.l d0,-(sp)
   10ed2:	|      pea 7 <_start+0x7>
   10ed6:	|      lea 12(sp),a0
   10eda:	|      move.l a0,-(sp)
   10edc:	|      jsr 14976 <getValueType>
   10ee2:	|      lea 12(sp),sp
   10ee6:	|      tst.w d0
   10ee8:	|  ,-- bne.s 10eee <builtIn_rename+0x58>
   10eea:	|  |   moveq #1,d0
   10eec:	+--|-- bra.s 10f32 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10eee:	|  '-> moveq #24,d0
   10ef0:	|      add.l 28(sp),d0
   10ef4:	|      move.l d0,-(sp)
   10ef6:	|      jsr 152fa <trimStack>
   10efc:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10efe:	|      move.l 4(sp),d0
   10f02:	|      move.l d0,-(sp)
   10f04:	|      jsr d68a <findObjectType>
   10f0a:	|      addq.l #4,sp
   10f0c:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10f10:	|      movea.l 12(sp),a0
   10f14:	|      move.l (a0),8(sp)
   10f18:	|      move.l 1cca4 <SysBase>,d0
   10f1e:	|      movea.l d0,a6
   10f20:	|      movea.l 8(sp),a1
   10f24:	|      jsr -690(a6)
	o->screenName = newText;
   10f28:	|      movea.l 12(sp),a0
   10f2c:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10f30:	|      moveq #2,d0
}
   10f32:	'----> movea.l (sp)+,a6
   10f34:	       lea 16(sp),sp
   10f38:	       rts

00010f3a <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10f3a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f3e:	          movea.l 20(sp),a0
   10f42:	          move.l 24(a0),d0
   10f46:	          move.l d0,-(sp)
   10f48:	          pea 7 <_start+0x7>
   10f4c:	          lea 8(sp),a0
   10f50:	          move.l a0,-(sp)
   10f52:	          jsr 14976 <getValueType>
   10f58:	          lea 12(sp),sp
   10f5c:	          tst.w d0
   10f5e:	      ,-- bne.s 10f66 <builtIn_getObjectX+0x2c>
   10f60:	      |   moveq #1,d0
   10f62:	,-----|-- bra.w 11002 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10f66:	|     '-> moveq #24,d0
   10f68:	|         add.l 20(sp),d0
   10f6c:	|         move.l d0,-(sp)
   10f6e:	|         jsr 152fa <trimStack>
   10f74:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10f76:	|         move.l (sp),d0
   10f78:	|         move.l d0,-(sp)
   10f7a:	|         jsr a71c <findPerson>
   10f80:	|         addq.l #4,sp
   10f82:	|         move.l d0,8(sp)
	if (pers) {
   10f86:	|     ,-- beq.s 10fb4 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10f88:	|     |   movea.l 8(sp),a0
   10f8c:	|     |   move.l (a0),d0
   10f8e:	|     |   move.l d0,-(sp)
   10f90:	|     |   jsr 17820 <__fixsfsi>
   10f96:	|     |   addq.l #4,sp
   10f98:	|     |   move.l d0,d1
   10f9a:	|     |   moveq #28,d0
   10f9c:	|     |   add.l 20(sp),d0
   10fa0:	|     |   move.l d1,-(sp)
   10fa2:	|     |   pea 1 <_start+0x1>
   10fa6:	|     |   move.l d0,-(sp)
   10fa8:	|     |   jsr 15268 <setVariable>
   10fae:	|     |   lea 12(sp),sp
   10fb2:	|  ,--|-- bra.s 11000 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10fb4:	|  |  '-> move.l (sp),d0
   10fb6:	|  |      move.l d0,-(sp)
   10fb8:	|  |      jsr 15c38 <getRegionForObject>
   10fbe:	|  |      addq.l #4,sp
   10fc0:	|  |      move.l d0,4(sp)
		if (la) {
   10fc4:	|  |  ,-- beq.s 10fe8 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10fc6:	|  |  |   movea.l 4(sp),a0
   10fca:	|  |  |   move.l 16(a0),d1
   10fce:	|  |  |   moveq #28,d0
   10fd0:	|  |  |   add.l 20(sp),d0
   10fd4:	|  |  |   move.l d1,-(sp)
   10fd6:	|  |  |   pea 1 <_start+0x1>
   10fda:	|  |  |   move.l d0,-(sp)
   10fdc:	|  |  |   jsr 15268 <setVariable>
   10fe2:	|  |  |   lea 12(sp),sp
   10fe6:	|  +--|-- bra.s 11000 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10fe8:	|  |  '-> moveq #28,d0
   10fea:	|  |      add.l 20(sp),d0
   10fee:	|  |      clr.l -(sp)
   10ff0:	|  |      pea 1 <_start+0x1>
   10ff4:	|  |      move.l d0,-(sp)
   10ff6:	|  |      jsr 15268 <setVariable>
   10ffc:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11000:	|  '----> moveq #2,d0
}
   11002:	'-------> lea 12(sp),sp
   11006:	          rts

00011008 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   11008:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1100c:	          movea.l 20(sp),a0
   11010:	          move.l 24(a0),d0
   11014:	          move.l d0,-(sp)
   11016:	          pea 7 <_start+0x7>
   1101a:	          lea 8(sp),a0
   1101e:	          move.l a0,-(sp)
   11020:	          jsr 14976 <getValueType>
   11026:	          lea 12(sp),sp
   1102a:	          tst.w d0
   1102c:	      ,-- bne.s 11034 <builtIn_getObjectY+0x2c>
   1102e:	      |   moveq #1,d0
   11030:	,-----|-- bra.w 110d2 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   11034:	|     '-> moveq #24,d0
   11036:	|         add.l 20(sp),d0
   1103a:	|         move.l d0,-(sp)
   1103c:	|         jsr 152fa <trimStack>
   11042:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11044:	|         move.l (sp),d0
   11046:	|         move.l d0,-(sp)
   11048:	|         jsr a71c <findPerson>
   1104e:	|         addq.l #4,sp
   11050:	|         move.l d0,8(sp)
	if (pers) {
   11054:	|     ,-- beq.s 11084 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11056:	|     |   movea.l 8(sp),a0
   1105a:	|     |   move.l 4(a0),d0
   1105e:	|     |   move.l d0,-(sp)
   11060:	|     |   jsr 17820 <__fixsfsi>
   11066:	|     |   addq.l #4,sp
   11068:	|     |   move.l d0,d1
   1106a:	|     |   moveq #28,d0
   1106c:	|     |   add.l 20(sp),d0
   11070:	|     |   move.l d1,-(sp)
   11072:	|     |   pea 1 <_start+0x1>
   11076:	|     |   move.l d0,-(sp)
   11078:	|     |   jsr 15268 <setVariable>
   1107e:	|     |   lea 12(sp),sp
   11082:	|  ,--|-- bra.s 110d0 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11084:	|  |  '-> move.l (sp),d0
   11086:	|  |      move.l d0,-(sp)
   11088:	|  |      jsr 15c38 <getRegionForObject>
   1108e:	|  |      addq.l #4,sp
   11090:	|  |      move.l d0,4(sp)
		if (la) {
   11094:	|  |  ,-- beq.s 110b8 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11096:	|  |  |   movea.l 4(sp),a0
   1109a:	|  |  |   move.l 20(a0),d1
   1109e:	|  |  |   moveq #28,d0
   110a0:	|  |  |   add.l 20(sp),d0
   110a4:	|  |  |   move.l d1,-(sp)
   110a6:	|  |  |   pea 1 <_start+0x1>
   110aa:	|  |  |   move.l d0,-(sp)
   110ac:	|  |  |   jsr 15268 <setVariable>
   110b2:	|  |  |   lea 12(sp),sp
   110b6:	|  +--|-- bra.s 110d0 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   110b8:	|  |  '-> moveq #28,d0
   110ba:	|  |      add.l 20(sp),d0
   110be:	|  |      clr.l -(sp)
   110c0:	|  |      pea 1 <_start+0x1>
   110c4:	|  |      move.l d0,-(sp)
   110c6:	|  |      jsr 15268 <setVariable>
   110cc:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   110d0:	|  '----> moveq #2,d0
}
   110d2:	'-------> lea 12(sp),sp
   110d6:	          rts

000110d8 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   110d8:	       lea -32(sp),sp
   110dc:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110e0:	       movea.l 56(sp),a0
   110e4:	       move.l 24(a0),d0
   110e8:	       move.l d0,-(sp)
   110ea:	       pea 1 <_start+0x1>
   110ee:	       lea 28(sp),a0
   110f2:	       move.l a0,-(sp)
   110f4:	       jsr 14976 <getValueType>
   110fa:	       lea 12(sp),sp
   110fe:	       tst.w d0
   11100:	   ,-- bne.s 11108 <builtIn_addScreenRegion+0x30>
   11102:	   |   moveq #1,d0
   11104:	,--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11108:	|  '-> moveq #24,d0
   1110a:	|      add.l 56(sp),d0
   1110e:	|      move.l d0,-(sp)
   11110:	|      jsr 152fa <trimStack>
   11116:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11118:	|      movea.l 56(sp),a0
   1111c:	|      move.l 24(a0),d0
   11120:	|      move.l d0,-(sp)
   11122:	|      pea 1 <_start+0x1>
   11126:	|      moveq #48,d0
   11128:	|      add.l sp,d0
   1112a:	|      move.l d0,-(sp)
   1112c:	|      jsr 14976 <getValueType>
   11132:	|      lea 12(sp),sp
   11136:	|      tst.w d0
   11138:	|  ,-- bne.s 11140 <builtIn_addScreenRegion+0x68>
   1113a:	|  |   moveq #1,d0
   1113c:	+--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11140:	|  '-> moveq #24,d0
   11142:	|      add.l 56(sp),d0
   11146:	|      move.l d0,-(sp)
   11148:	|      jsr 152fa <trimStack>
   1114e:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11150:	|      movea.l 56(sp),a0
   11154:	|      move.l 24(a0),d0
   11158:	|      move.l d0,-(sp)
   1115a:	|      pea 1 <_start+0x1>
   1115e:	|      moveq #52,d0
   11160:	|      add.l sp,d0
   11162:	|      move.l d0,-(sp)
   11164:	|      jsr 14976 <getValueType>
   1116a:	|      lea 12(sp),sp
   1116e:	|      tst.w d0
   11170:	|  ,-- bne.s 11178 <builtIn_addScreenRegion+0xa0>
   11172:	|  |   moveq #1,d0
   11174:	+--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11178:	|  '-> moveq #24,d0
   1117a:	|      add.l 56(sp),d0
   1117e:	|      move.l d0,-(sp)
   11180:	|      jsr 152fa <trimStack>
   11186:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11188:	|      movea.l 56(sp),a0
   1118c:	|      move.l 24(a0),d0
   11190:	|      move.l d0,-(sp)
   11192:	|      pea 1 <_start+0x1>
   11196:	|      lea 32(sp),a0
   1119a:	|      move.l a0,-(sp)
   1119c:	|      jsr 14976 <getValueType>
   111a2:	|      lea 12(sp),sp
   111a6:	|      tst.w d0
   111a8:	|  ,-- bne.s 111b0 <builtIn_addScreenRegion+0xd8>
   111aa:	|  |   moveq #1,d0
   111ac:	+--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111b0:	|  '-> moveq #24,d0
   111b2:	|      add.l 56(sp),d0
   111b6:	|      move.l d0,-(sp)
   111b8:	|      jsr 152fa <trimStack>
   111be:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111c0:	|      movea.l 56(sp),a0
   111c4:	|      move.l 24(a0),d0
   111c8:	|      move.l d0,-(sp)
   111ca:	|      pea 1 <_start+0x1>
   111ce:	|      lea 36(sp),a0
   111d2:	|      move.l a0,-(sp)
   111d4:	|      jsr 14976 <getValueType>
   111da:	|      lea 12(sp),sp
   111de:	|      tst.w d0
   111e0:	|  ,-- bne.s 111e8 <builtIn_addScreenRegion+0x110>
   111e2:	|  |   moveq #1,d0
   111e4:	+--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111e8:	|  '-> moveq #24,d0
   111ea:	|      add.l 56(sp),d0
   111ee:	|      move.l d0,-(sp)
   111f0:	|      jsr 152fa <trimStack>
   111f6:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111f8:	|      movea.l 56(sp),a0
   111fc:	|      move.l 24(a0),d0
   11200:	|      move.l d0,-(sp)
   11202:	|      pea 1 <_start+0x1>
   11206:	|      lea 40(sp),a0
   1120a:	|      move.l a0,-(sp)
   1120c:	|      jsr 14976 <getValueType>
   11212:	|      lea 12(sp),sp
   11216:	|      tst.w d0
   11218:	|  ,-- bne.s 11220 <builtIn_addScreenRegion+0x148>
   1121a:	|  |   moveq #1,d0
   1121c:	+--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11220:	|  '-> moveq #24,d0
   11222:	|      add.l 56(sp),d0
   11226:	|      move.l d0,-(sp)
   11228:	|      jsr 152fa <trimStack>
   1122e:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11230:	|      movea.l 56(sp),a0
   11234:	|      move.l 24(a0),d0
   11238:	|      move.l d0,-(sp)
   1123a:	|      pea 1 <_start+0x1>
   1123e:	|      lea 44(sp),a0
   11242:	|      move.l a0,-(sp)
   11244:	|      jsr 14976 <getValueType>
   1124a:	|      lea 12(sp),sp
   1124e:	|      tst.w d0
   11250:	|  ,-- bne.s 11258 <builtIn_addScreenRegion+0x180>
   11252:	|  |   moveq #1,d0
   11254:	+--|-- bra.w 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11258:	|  '-> moveq #24,d0
   1125a:	|      add.l 56(sp),d0
   1125e:	|      move.l d0,-(sp)
   11260:	|      jsr 152fa <trimStack>
   11266:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11268:	|      movea.l 56(sp),a0
   1126c:	|      move.l 24(a0),d0
   11270:	|      move.l d0,-(sp)
   11272:	|      pea 7 <_start+0x7>
   11276:	|      lea 24(sp),a0
   1127a:	|      move.l a0,-(sp)
   1127c:	|      jsr 14976 <getValueType>
   11282:	|      lea 12(sp),sp
   11286:	|      tst.w d0
   11288:	|  ,-- bne.s 1128e <builtIn_addScreenRegion+0x1b6>
   1128a:	|  |   moveq #1,d0
   1128c:	+--|-- bra.s 112e2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1128e:	|  '-> moveq #24,d0
   11290:	|      add.l 56(sp),d0
   11294:	|      move.l d0,-(sp)
   11296:	|      jsr 152fa <trimStack>
   1129c:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   1129e:	|      move.l 16(sp),d5
   112a2:	|      move.l 20(sp),d4
   112a6:	|      move.l 40(sp),d3
   112aa:	|      move.l 44(sp),d2
   112ae:	|      movea.l 24(sp),a1
   112b2:	|      movea.l 28(sp),a0
   112b6:	|      move.l 32(sp),d1
   112ba:	|      move.l 36(sp),d0
   112be:	|      move.l d5,-(sp)
   112c0:	|      move.l d4,-(sp)
   112c2:	|      move.l d3,-(sp)
   112c4:	|      move.l d2,-(sp)
   112c6:	|      move.l a1,-(sp)
   112c8:	|      move.l a0,-(sp)
   112ca:	|      move.l d1,-(sp)
   112cc:	|      move.l d0,-(sp)
   112ce:	|      jsr 15af2 <addScreenRegion>
   112d4:	|      lea 32(sp),sp
   112d8:	|      tst.w d0
   112da:	|  ,-- beq.s 112e0 <builtIn_addScreenRegion+0x208>
   112dc:	|  |   moveq #2,d0
   112de:	+--|-- bra.s 112e2 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   112e0:	|  '-> moveq #1,d0

}
   112e2:	'----> movem.l (sp)+,d2-d5
   112e6:	       lea 32(sp),sp
   112ea:	       rts

000112ec <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   112ec:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112ee:	       movea.l 12(sp),a0
   112f2:	       move.l 24(a0),d0
   112f6:	       move.l d0,-(sp)
   112f8:	       pea 7 <_start+0x7>
   112fc:	       move.l sp,d0
   112fe:	       addq.l #8,d0
   11300:	       move.l d0,-(sp)
   11302:	       jsr 14976 <getValueType>
   11308:	       lea 12(sp),sp
   1130c:	       tst.w d0
   1130e:	   ,-- bne.s 11314 <builtIn_removeScreenRegion+0x28>
   11310:	   |   moveq #1,d0
   11312:	,--|-- bra.s 11332 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11314:	|  '-> moveq #24,d0
   11316:	|      add.l 12(sp),d0
   1131a:	|      move.l d0,-(sp)
   1131c:	|      jsr 152fa <trimStack>
   11322:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11324:	|      move.l (sp),d0
   11326:	|      move.l d0,-(sp)
   11328:	|      jsr 15de0 <removeScreenRegion>
   1132e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11330:	|      moveq #2,d0
}
   11332:	'----> addq.l #4,sp
   11334:	       rts

00011336 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11336:	jsr 15f64 <showBoxes>
	return BR_CONTINUE;
   1133c:	moveq #2,d0
}
   1133e:	rts

00011340 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11340:	jsr 15c66 <killAllRegions>
	return BR_CONTINUE;
   11346:	moveq #2,d0
}
   11348:	rts

0001134a <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1134a:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1134e:	       movea.l 24(sp),a0
   11352:	       move.l 24(a0),d0
   11356:	       move.l d0,-(sp)
   11358:	       jsr 14622 <getCostumeFromVar>
   1135e:	       addq.l #4,sp
   11360:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11364:	   ,-- bne.s 1136c <builtIn_addCharacter+0x22>
   11366:	   |   moveq #1,d0
   11368:	,--|-- bra.w 11448 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1136c:	|  '-> moveq #24,d0
   1136e:	|      add.l 24(sp),d0
   11372:	|      move.l d0,-(sp)
   11374:	|      jsr 152fa <trimStack>
   1137a:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1137c:	|      movea.l 24(sp),a0
   11380:	|      move.l 24(a0),d0
   11384:	|      move.l d0,-(sp)
   11386:	|      pea 1 <_start+0x1>
   1138a:	|      lea 12(sp),a0
   1138e:	|      move.l a0,-(sp)
   11390:	|      jsr 14976 <getValueType>
   11396:	|      lea 12(sp),sp
   1139a:	|      tst.w d0
   1139c:	|  ,-- bne.s 113a4 <builtIn_addCharacter+0x5a>
   1139e:	|  |   moveq #1,d0
   113a0:	+--|-- bra.w 11448 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   113a4:	|  '-> moveq #24,d0
   113a6:	|      add.l 24(sp),d0
   113aa:	|      move.l d0,-(sp)
   113ac:	|      jsr 152fa <trimStack>
   113b2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113b4:	|      movea.l 24(sp),a0
   113b8:	|      move.l 24(a0),d0
   113bc:	|      move.l d0,-(sp)
   113be:	|      pea 1 <_start+0x1>
   113c2:	|      moveq #16,d0
   113c4:	|      add.l sp,d0
   113c6:	|      move.l d0,-(sp)
   113c8:	|      jsr 14976 <getValueType>
   113ce:	|      lea 12(sp),sp
   113d2:	|      tst.w d0
   113d4:	|  ,-- bne.s 113da <builtIn_addCharacter+0x90>
   113d6:	|  |   moveq #1,d0
   113d8:	+--|-- bra.s 11448 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   113da:	|  '-> moveq #24,d0
   113dc:	|      add.l 24(sp),d0
   113e0:	|      move.l d0,-(sp)
   113e2:	|      jsr 152fa <trimStack>
   113e8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113ea:	|      movea.l 24(sp),a0
   113ee:	|      move.l 24(a0),d0
   113f2:	|      move.l d0,-(sp)
   113f4:	|      pea 7 <_start+0x7>
   113f8:	|      lea 8(sp),a0
   113fc:	|      move.l a0,-(sp)
   113fe:	|      jsr 14976 <getValueType>
   11404:	|      lea 12(sp),sp
   11408:	|      tst.w d0
   1140a:	|  ,-- bne.s 11410 <builtIn_addCharacter+0xc6>
   1140c:	|  |   moveq #1,d0
   1140e:	+--|-- bra.s 11448 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11410:	|  '-> moveq #24,d0
   11412:	|      add.l 24(sp),d0
   11416:	|      move.l d0,-(sp)
   11418:	|      jsr 152fa <trimStack>
   1141e:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11420:	|      movea.l (sp),a0
   11422:	|      move.l 4(sp),d1
   11426:	|      move.l 8(sp),d0
   1142a:	|      move.l 12(sp),-(sp)
   1142e:	|      move.l a0,-(sp)
   11430:	|      move.l d1,-(sp)
   11432:	|      move.l d0,-(sp)
   11434:	|      jsr 9316 <addPerson>
   1143a:	|      lea 16(sp),sp
   1143e:	|      tst.w d0
   11440:	|  ,-- beq.s 11446 <builtIn_addCharacter+0xfc>
   11442:	|  |   moveq #2,d0
   11444:	+--|-- bra.s 11448 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11446:	|  '-> moveq #1,d0
}
   11448:	'----> lea 16(sp),sp
   1144c:	       rts

0001144e <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1144e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11450:	       movea.l 12(sp),a0
   11454:	       move.l 24(a0),d0
   11458:	       move.l d0,-(sp)
   1145a:	       pea 7 <_start+0x7>
   1145e:	       move.l sp,d0
   11460:	       addq.l #8,d0
   11462:	       move.l d0,-(sp)
   11464:	       jsr 14976 <getValueType>
   1146a:	       lea 12(sp),sp
   1146e:	       tst.w d0
   11470:	   ,-- bne.s 11476 <builtIn_hideCharacter+0x28>
   11472:	   |   moveq #1,d0
   11474:	,--|-- bra.s 11496 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11476:	|  '-> moveq #24,d0
   11478:	|      add.l 12(sp),d0
   1147c:	|      move.l d0,-(sp)
   1147e:	|      jsr 152fa <trimStack>
   11484:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11486:	|      move.l (sp),d0
   11488:	|      move.l d0,-(sp)
   1148a:	|      clr.l -(sp)
   1148c:	|      jsr bdb2 <setShown>
   11492:	|      addq.l #8,sp
	return BR_CONTINUE;
   11494:	|      moveq #2,d0
}
   11496:	'----> addq.l #4,sp
   11498:	       rts

0001149a <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1149a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1149c:	       movea.l 12(sp),a0
   114a0:	       move.l 24(a0),d0
   114a4:	       move.l d0,-(sp)
   114a6:	       pea 7 <_start+0x7>
   114aa:	       move.l sp,d0
   114ac:	       addq.l #8,d0
   114ae:	       move.l d0,-(sp)
   114b0:	       jsr 14976 <getValueType>
   114b6:	       lea 12(sp),sp
   114ba:	       tst.w d0
   114bc:	   ,-- bne.s 114c2 <builtIn_showCharacter+0x28>
   114be:	   |   moveq #1,d0
   114c0:	,--|-- bra.s 114e4 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   114c2:	|  '-> moveq #24,d0
   114c4:	|      add.l 12(sp),d0
   114c8:	|      move.l d0,-(sp)
   114ca:	|      jsr 152fa <trimStack>
   114d0:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   114d2:	|      move.l (sp),d0
   114d4:	|      move.l d0,-(sp)
   114d6:	|      pea 1 <_start+0x1>
   114da:	|      jsr bdb2 <setShown>
   114e0:	|      addq.l #8,sp
	return BR_CONTINUE;
   114e2:	|      moveq #2,d0
}
   114e4:	'----> addq.l #4,sp
   114e6:	       rts

000114e8 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   114e8:	jsr 6b9a <killSpeechTimers>
	killMostPeople ();
   114ee:	jsr abb2 <killMostPeople>
	return BR_CONTINUE;
   114f4:	moveq #2,d0
}
   114f6:	rts

000114f8 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   114f8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114fa:	       movea.l 16(sp),a0
   114fe:	       move.l 24(a0),d0
   11502:	       move.l d0,-(sp)
   11504:	       pea 1 <_start+0x1>
   11508:	       move.l sp,d0
   1150a:	       addq.l #8,d0
   1150c:	       move.l d0,-(sp)
   1150e:	       jsr 14976 <getValueType>
   11514:	       lea 12(sp),sp
   11518:	       tst.w d0
   1151a:	   ,-- bne.s 11520 <builtIn_setCharacterDrawMode+0x28>
   1151c:	   |   moveq #1,d0
   1151e:	,--|-- bra.s 1157a <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11520:	|  '-> moveq #24,d0
   11522:	|      add.l 16(sp),d0
   11526:	|      move.l d0,-(sp)
   11528:	|      jsr 152fa <trimStack>
   1152e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11530:	|      movea.l 16(sp),a0
   11534:	|      move.l 24(a0),d0
   11538:	|      move.l d0,-(sp)
   1153a:	|      pea 7 <_start+0x7>
   1153e:	|      moveq #12,d0
   11540:	|      add.l sp,d0
   11542:	|      move.l d0,-(sp)
   11544:	|      jsr 14976 <getValueType>
   1154a:	|      lea 12(sp),sp
   1154e:	|      tst.w d0
   11550:	|  ,-- bne.s 11556 <builtIn_setCharacterDrawMode+0x5e>
   11552:	|  |   moveq #1,d0
   11554:	+--|-- bra.s 1157a <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11556:	|  '-> moveq #24,d0
   11558:	|      add.l 16(sp),d0
   1155c:	|      move.l d0,-(sp)
   1155e:	|      jsr 152fa <trimStack>
   11564:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11566:	|      move.l 4(sp),d1
   1156a:	|      move.l (sp),d0
   1156c:	|      move.l d1,-(sp)
   1156e:	|      move.l d0,-(sp)
   11570:	|      jsr b6f0 <setDrawMode>
   11576:	|      addq.l #8,sp
	return BR_CONTINUE;
   11578:	|      moveq #2,d0
}
   1157a:	'----> addq.l #8,sp
   1157c:	       rts

0001157e <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1157e:	pea 19e2e <PutChar+0x1f36>
   11584:	jsr 17456 <KPrintF>
   1158a:	addq.l #4,sp
	return BR_CONTINUE;
   1158c:	moveq #2,d0
}
   1158e:	rts

00011590 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11590:	pea 19e61 <talk.c.490538ff+0x1e>
   11596:	jsr 17456 <KPrintF>
   1159c:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1159e:	moveq #2,d0
}
   115a0:	rts

000115a2 <builtIn_setScale>:

builtIn(setScale)
{
   115a2:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115a4:	       movea.l 16(sp),a0
   115a8:	       move.l 24(a0),d0
   115ac:	       move.l d0,-(sp)
   115ae:	       pea 1 <_start+0x1>
   115b2:	       move.l sp,d0
   115b4:	       addq.l #8,d0
   115b6:	       move.l d0,-(sp)
   115b8:	       jsr 14976 <getValueType>
   115be:	       lea 12(sp),sp
   115c2:	       tst.w d0
   115c4:	   ,-- bne.s 115ca <builtIn_setScale+0x28>
   115c6:	   |   moveq #1,d0
   115c8:	,--|-- bra.s 1162c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   115ca:	|  '-> moveq #24,d0
   115cc:	|      add.l 16(sp),d0
   115d0:	|      move.l d0,-(sp)
   115d2:	|      jsr 152fa <trimStack>
   115d8:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115da:	|      movea.l 16(sp),a0
   115de:	|      move.l 24(a0),d0
   115e2:	|      move.l d0,-(sp)
   115e4:	|      pea 1 <_start+0x1>
   115e8:	|      moveq #12,d0
   115ea:	|      add.l sp,d0
   115ec:	|      move.l d0,-(sp)
   115ee:	|      jsr 14976 <getValueType>
   115f4:	|      lea 12(sp),sp
   115f8:	|      tst.w d0
   115fa:	|  ,-- bne.s 11600 <builtIn_setScale+0x5e>
   115fc:	|  |   moveq #1,d0
   115fe:	+--|-- bra.s 1162c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11600:	|  '-> moveq #24,d0
   11602:	|      add.l 16(sp),d0
   11606:	|      move.l d0,-(sp)
   11608:	|      jsr 152fa <trimStack>
   1160e:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11610:	|      move.l (sp),d0
   11612:	|      move.l d0,d0
   11614:	|      movea.w d0,a1
   11616:	|      move.l 4(sp),d0
   1161a:	|      move.l d0,d0
   1161c:	|      movea.w d0,a0
   1161e:	|      move.l a1,-(sp)
   11620:	|      move.l a0,-(sp)
   11622:	|      jsr bd8a <setScale>
   11628:	|      addq.l #8,sp
	return BR_CONTINUE;
   1162a:	|      moveq #2,d0
}
   1162c:	'----> addq.l #8,sp
   1162e:	       rts

00011630 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11630:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11632:	       movea.l 12(sp),a0
   11636:	       move.l 24(a0),d0
   1163a:	       move.l d0,-(sp)
   1163c:	       pea 7 <_start+0x7>
   11640:	       move.l sp,d0
   11642:	       addq.l #8,d0
   11644:	       move.l d0,-(sp)
   11646:	       jsr 14976 <getValueType>
   1164c:	       lea 12(sp),sp
   11650:	       tst.w d0
   11652:	   ,-- bne.s 11658 <builtIn_stopCharacter+0x28>
   11654:	   |   moveq #1,d0
   11656:	,--|-- bra.s 11690 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11658:	|  '-> moveq #24,d0
   1165a:	|      add.l 12(sp),d0
   1165e:	|      move.l d0,-(sp)
   11660:	|      jsr 152fa <trimStack>
   11666:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11668:	|      move.l (sp),d0
   1166a:	|      move.l d0,-(sp)
   1166c:	|      jsr bebe <stopPerson>
   11672:	|      addq.l #4,sp
   11674:	|      movea.w d0,a0
   11676:	|      moveq #28,d0
   11678:	|      add.l 12(sp),d0
   1167c:	|      move.l a0,-(sp)
   1167e:	|      pea 1 <_start+0x1>
   11682:	|      move.l d0,-(sp)
   11684:	|      jsr 15268 <setVariable>
   1168a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1168e:	|      moveq #2,d0
}
   11690:	'----> addq.l #4,sp
   11692:	       rts

00011694 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11694:	pea 19e9b <talk.c.490538ff+0x58>
   1169a:	jsr 17456 <KPrintF>
   116a0:	addq.l #4,sp
	return BR_CONTINUE;
   116a2:	moveq #2,d0
}
   116a4:	rts

000116a6 <builtIn_animate>:

builtIn(animate)
{
   116a6:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   116a8:	       movea.l 16(sp),a0
   116ac:	       move.l 24(a0),d0
   116b0:	       move.l d0,-(sp)
   116b2:	       jsr 14e4e <getAnimationFromVar>
   116b8:	       addq.l #4,sp
   116ba:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   116be:	   ,-- bne.s 116c4 <builtIn_animate+0x1e>
   116c0:	   |   moveq #1,d0
   116c2:	,--|-- bra.s 11742 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   116c4:	|  '-> moveq #24,d0
   116c6:	|      add.l 16(sp),d0
   116ca:	|      move.l d0,-(sp)
   116cc:	|      jsr 152fa <trimStack>
   116d2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116d4:	|      movea.l 16(sp),a0
   116d8:	|      move.l 24(a0),d0
   116dc:	|      move.l d0,-(sp)
   116de:	|      pea 7 <_start+0x7>
   116e2:	|      move.l sp,d0
   116e4:	|      addq.l #8,d0
   116e6:	|      move.l d0,-(sp)
   116e8:	|      jsr 14976 <getValueType>
   116ee:	|      lea 12(sp),sp
   116f2:	|      tst.w d0
   116f4:	|  ,-- bne.s 116fa <builtIn_animate+0x54>
   116f6:	|  |   moveq #1,d0
   116f8:	+--|-- bra.s 11742 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   116fa:	|  '-> moveq #24,d0
   116fc:	|      add.l 16(sp),d0
   11700:	|      move.l d0,-(sp)
   11702:	|      jsr 152fa <trimStack>
   11708:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1170a:	|      move.l (sp),d0
   1170c:	|      move.l 4(sp),-(sp)
   11710:	|      move.l d0,-(sp)
   11712:	|      jsr 958c <animatePerson>
   11718:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1171a:	|      move.l 4(sp),-(sp)
   1171e:	|      jsr bf12 <timeForAnim>
   11724:	|      addq.l #4,sp
   11726:	|      move.l d0,d1
   11728:	|      moveq #28,d0
   1172a:	|      add.l 16(sp),d0
   1172e:	|      move.l d1,-(sp)
   11730:	|      pea 1 <_start+0x1>
   11734:	|      move.l d0,-(sp)
   11736:	|      jsr 15268 <setVariable>
   1173c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11740:	|      moveq #2,d0
}
   11742:	'----> addq.l #8,sp
   11744:	       rts

00011746 <builtIn_setCostume>:

builtIn(setCostume)
{
   11746:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11748:	       movea.l 16(sp),a0
   1174c:	       move.l 24(a0),d0
   11750:	       move.l d0,-(sp)
   11752:	       jsr 14622 <getCostumeFromVar>
   11758:	       addq.l #4,sp
   1175a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1175e:	   ,-- bne.s 11764 <builtIn_setCostume+0x1e>
   11760:	   |   moveq #1,d0
   11762:	,--|-- bra.s 117bc <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11764:	|  '-> moveq #24,d0
   11766:	|      add.l 16(sp),d0
   1176a:	|      move.l d0,-(sp)
   1176c:	|      jsr 152fa <trimStack>
   11772:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11774:	|      movea.l 16(sp),a0
   11778:	|      move.l 24(a0),d0
   1177c:	|      move.l d0,-(sp)
   1177e:	|      pea 7 <_start+0x7>
   11782:	|      move.l sp,d0
   11784:	|      addq.l #8,d0
   11786:	|      move.l d0,-(sp)
   11788:	|      jsr 14976 <getValueType>
   1178e:	|      lea 12(sp),sp
   11792:	|      tst.w d0
   11794:	|  ,-- bne.s 1179a <builtIn_setCostume+0x54>
   11796:	|  |   moveq #1,d0
   11798:	+--|-- bra.s 117bc <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1179a:	|  '-> moveq #24,d0
   1179c:	|      add.l 16(sp),d0
   117a0:	|      move.l d0,-(sp)
   117a2:	|      jsr 152fa <trimStack>
   117a8:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   117aa:	|      move.l (sp),d0
   117ac:	|      move.l 4(sp),-(sp)
   117b0:	|      move.l d0,-(sp)
   117b2:	|      jsr 95d6 <animatePersonUsingPersona>
   117b8:	|      addq.l #8,sp
	return BR_CONTINUE;
   117ba:	|      moveq #2,d0
}
   117bc:	'----> addq.l #8,sp
   117be:	       rts

000117c0 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   117c0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117c2:	       movea.l 16(sp),a0
   117c6:	       move.l 24(a0),d0
   117ca:	       move.l d0,-(sp)
   117cc:	       pea 1 <_start+0x1>
   117d0:	       move.l sp,d0
   117d2:	       addq.l #8,d0
   117d4:	       move.l d0,-(sp)
   117d6:	       jsr 14976 <getValueType>
   117dc:	       lea 12(sp),sp
   117e0:	       tst.w d0
   117e2:	   ,-- bne.s 117e8 <builtIn_floatCharacter+0x28>
   117e4:	   |   moveq #1,d0
   117e6:	,--|-- bra.s 1185c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   117e8:	|  '-> moveq #24,d0
   117ea:	|      add.l 16(sp),d0
   117ee:	|      move.l d0,-(sp)
   117f0:	|      jsr 152fa <trimStack>
   117f6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117f8:	|      movea.l 16(sp),a0
   117fc:	|      move.l 24(a0),d0
   11800:	|      move.l d0,-(sp)
   11802:	|      pea 7 <_start+0x7>
   11806:	|      moveq #12,d0
   11808:	|      add.l sp,d0
   1180a:	|      move.l d0,-(sp)
   1180c:	|      jsr 14976 <getValueType>
   11812:	|      lea 12(sp),sp
   11816:	|      tst.w d0
   11818:	|  ,-- bne.s 1181e <builtIn_floatCharacter+0x5e>
   1181a:	|  |   moveq #1,d0
   1181c:	+--|-- bra.s 1185c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1181e:	|  '-> moveq #24,d0
   11820:	|      add.l 16(sp),d0
   11824:	|      move.l d0,-(sp)
   11826:	|      jsr 152fa <trimStack>
   1182c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1182e:	|      move.l 4(sp),d1
   11832:	|      move.l (sp),d0
   11834:	|      move.l d1,-(sp)
   11836:	|      move.l d0,-(sp)
   11838:	|      jsr a766 <floatCharacter>
   1183e:	|      addq.l #8,sp
   11840:	|      movea.w d0,a0
   11842:	|      moveq #28,d0
   11844:	|      add.l 16(sp),d0
   11848:	|      move.l a0,-(sp)
   1184a:	|      pea 1 <_start+0x1>
   1184e:	|      move.l d0,-(sp)
   11850:	|      jsr 15268 <setVariable>
   11856:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1185a:	|      moveq #2,d0
}
   1185c:	'----> addq.l #8,sp
   1185e:	       rts

00011860 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11860:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11862:	       movea.l 16(sp),a0
   11866:	       move.l 24(a0),d0
   1186a:	       move.l d0,-(sp)
   1186c:	       pea 1 <_start+0x1>
   11870:	       move.l sp,d0
   11872:	       addq.l #8,d0
   11874:	       move.l d0,-(sp)
   11876:	       jsr 14976 <getValueType>
   1187c:	       lea 12(sp),sp
   11880:	       tst.w d0
   11882:	   ,-- bne.s 11888 <builtIn_setCharacterWalkSpeed+0x28>
   11884:	   |   moveq #1,d0
   11886:	,--|-- bra.s 118fc <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11888:	|  '-> moveq #24,d0
   1188a:	|      add.l 16(sp),d0
   1188e:	|      move.l d0,-(sp)
   11890:	|      jsr 152fa <trimStack>
   11896:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11898:	|      movea.l 16(sp),a0
   1189c:	|      move.l 24(a0),d0
   118a0:	|      move.l d0,-(sp)
   118a2:	|      pea 7 <_start+0x7>
   118a6:	|      moveq #12,d0
   118a8:	|      add.l sp,d0
   118aa:	|      move.l d0,-(sp)
   118ac:	|      jsr 14976 <getValueType>
   118b2:	|      lea 12(sp),sp
   118b6:	|      tst.w d0
   118b8:	|  ,-- bne.s 118be <builtIn_setCharacterWalkSpeed+0x5e>
   118ba:	|  |   moveq #1,d0
   118bc:	+--|-- bra.s 118fc <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   118be:	|  '-> moveq #24,d0
   118c0:	|      add.l 16(sp),d0
   118c4:	|      move.l d0,-(sp)
   118c6:	|      jsr 152fa <trimStack>
   118cc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   118ce:	|      move.l 4(sp),d1
   118d2:	|      move.l (sp),d0
   118d4:	|      move.l d1,-(sp)
   118d6:	|      move.l d0,-(sp)
   118d8:	|      jsr bd26 <setCharacterWalkSpeed>
   118de:	|      addq.l #8,sp
   118e0:	|      movea.w d0,a0
   118e2:	|      moveq #28,d0
   118e4:	|      add.l 16(sp),d0
   118e8:	|      move.l a0,-(sp)
   118ea:	|      pea 1 <_start+0x1>
   118ee:	|      move.l d0,-(sp)
   118f0:	|      jsr 15268 <setVariable>
   118f6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118fa:	|      moveq #2,d0
}
   118fc:	'----> addq.l #8,sp
   118fe:	       rts

00011900 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11900:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11902:	       movea.l 16(sp),a0
   11906:	       move.l 24(a0),d0
   1190a:	       move.l d0,-(sp)
   1190c:	       pea 1 <_start+0x1>
   11910:	       move.l sp,d0
   11912:	       addq.l #8,d0
   11914:	       move.l d0,-(sp)
   11916:	       jsr 14976 <getValueType>
   1191c:	       lea 12(sp),sp
   11920:	       tst.w d0
   11922:	   ,-- bne.s 11928 <builtIn_turnCharacter+0x28>
   11924:	   |   moveq #1,d0
   11926:	,--|-- bra.s 1199c <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11928:	|  '-> moveq #24,d0
   1192a:	|      add.l 16(sp),d0
   1192e:	|      move.l d0,-(sp)
   11930:	|      jsr 152fa <trimStack>
   11936:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11938:	|      movea.l 16(sp),a0
   1193c:	|      move.l 24(a0),d0
   11940:	|      move.l d0,-(sp)
   11942:	|      pea 7 <_start+0x7>
   11946:	|      moveq #12,d0
   11948:	|      add.l sp,d0
   1194a:	|      move.l d0,-(sp)
   1194c:	|      jsr 14976 <getValueType>
   11952:	|      lea 12(sp),sp
   11956:	|      tst.w d0
   11958:	|  ,-- bne.s 1195e <builtIn_turnCharacter+0x5e>
   1195a:	|  |   moveq #1,d0
   1195c:	+--|-- bra.s 1199c <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1195e:	|  '-> moveq #24,d0
   11960:	|      add.l 16(sp),d0
   11964:	|      move.l d0,-(sp)
   11966:	|      jsr 152fa <trimStack>
   1196c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1196e:	|      move.l (sp),d1
   11970:	|      move.l 4(sp),d0
   11974:	|      move.l d1,-(sp)
   11976:	|      move.l d0,-(sp)
   11978:	|      jsr bfca <turnPersonToFace>
   1197e:	|      addq.l #8,sp
   11980:	|      movea.w d0,a0
   11982:	|      moveq #28,d0
   11984:	|      add.l 16(sp),d0
   11988:	|      move.l a0,-(sp)
   1198a:	|      pea 1 <_start+0x1>
   1198e:	|      move.l d0,-(sp)
   11990:	|      jsr 15268 <setVariable>
   11996:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1199a:	|      moveq #2,d0
}
   1199c:	'----> addq.l #8,sp
   1199e:	       rts

000119a0 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   119a0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119a2:	       movea.l 16(sp),a0
   119a6:	       move.l 24(a0),d0
   119aa:	       move.l d0,-(sp)
   119ac:	       pea 1 <_start+0x1>
   119b0:	       move.l sp,d0
   119b2:	       addq.l #8,d0
   119b4:	       move.l d0,-(sp)
   119b6:	       jsr 14976 <getValueType>
   119bc:	       lea 12(sp),sp
   119c0:	       tst.w d0
   119c2:	   ,-- bne.s 119c8 <builtIn_setCharacterExtra+0x28>
   119c4:	   |   moveq #1,d0
   119c6:	,--|-- bra.s 11a3c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   119c8:	|  '-> moveq #24,d0
   119ca:	|      add.l 16(sp),d0
   119ce:	|      move.l d0,-(sp)
   119d0:	|      jsr 152fa <trimStack>
   119d6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119d8:	|      movea.l 16(sp),a0
   119dc:	|      move.l 24(a0),d0
   119e0:	|      move.l d0,-(sp)
   119e2:	|      pea 7 <_start+0x7>
   119e6:	|      moveq #12,d0
   119e8:	|      add.l sp,d0
   119ea:	|      move.l d0,-(sp)
   119ec:	|      jsr 14976 <getValueType>
   119f2:	|      lea 12(sp),sp
   119f6:	|      tst.w d0
   119f8:	|  ,-- bne.s 119fe <builtIn_setCharacterExtra+0x5e>
   119fa:	|  |   moveq #1,d0
   119fc:	+--|-- bra.s 11a3c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   119fe:	|  '-> moveq #24,d0
   11a00:	|      add.l 16(sp),d0
   11a04:	|      move.l d0,-(sp)
   11a06:	|      jsr 152fa <trimStack>
   11a0c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11a0e:	|      move.l (sp),d1
   11a10:	|      move.l 4(sp),d0
   11a14:	|      move.l d1,-(sp)
   11a16:	|      move.l d0,-(sp)
   11a18:	|      jsr bd54 <setPersonExtra>
   11a1e:	|      addq.l #8,sp
   11a20:	|      movea.w d0,a0
   11a22:	|      moveq #28,d0
   11a24:	|      add.l 16(sp),d0
   11a28:	|      move.l a0,-(sp)
   11a2a:	|      pea 1 <_start+0x1>
   11a2e:	|      move.l d0,-(sp)
   11a30:	|      jsr 15268 <setVariable>
   11a36:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a3a:	|      moveq #2,d0
}
   11a3c:	'----> addq.l #8,sp
   11a3e:	       rts

00011a40 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11a40:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a42:	       movea.l 12(sp),a0
   11a46:	       move.l 24(a0),d0
   11a4a:	       move.l d0,-(sp)
   11a4c:	       pea 7 <_start+0x7>
   11a50:	       move.l sp,d0
   11a52:	       addq.l #8,d0
   11a54:	       move.l d0,-(sp)
   11a56:	       jsr 14976 <getValueType>
   11a5c:	       lea 12(sp),sp
   11a60:	       tst.w d0
   11a62:	   ,-- bne.s 11a68 <builtIn_removeCharacter+0x28>
   11a64:	   |   moveq #1,d0
   11a66:	,--|-- bra.s 11a86 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11a68:	|  '-> moveq #24,d0
   11a6a:	|      add.l 12(sp),d0
   11a6e:	|      move.l d0,-(sp)
   11a70:	|      jsr 152fa <trimStack>
   11a76:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11a78:	|      move.l (sp),d0
   11a7a:	|      move.l d0,-(sp)
   11a7c:	|      jsr af54 <removeOneCharacter>
   11a82:	|      addq.l #4,sp
	return BR_CONTINUE;
   11a84:	|      moveq #2,d0
}
   11a86:	'----> addq.l #4,sp
   11a88:	       rts

00011a8a <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11a8a:	                lea -28(sp),sp
   11a8e:	                move.l d2,-(sp)
   11a90:	                move.l 44(sp),d1
   11a94:	                move.l 48(sp),d0
   11a98:	                move.w d1,d1
   11a9a:	                move.w d1,6(sp)
   11a9e:	                move.w d0,d0
   11aa0:	                move.w d0,4(sp)
	switch (numParams) {
   11aa4:	                moveq #2,d0
   11aa6:	                cmp.l 36(sp),d0
   11aaa:	      ,-------- beq.w 11bec <moveChr+0x162>
   11aae:	      |         moveq #3,d0
   11ab0:	      |         cmp.l 36(sp),d0
   11ab4:	,-----|-------- bne.w 11d20 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ab8:	|     |         movea.l 40(sp),a0
   11abc:	|     |         move.l 24(a0),d0
   11ac0:	|     |         move.l d0,-(sp)
   11ac2:	|     |         pea 1 <_start+0x1>
   11ac6:	|     |         lea 20(sp),a0
   11aca:	|     |         move.l a0,-(sp)
   11acc:	|     |         jsr 14976 <getValueType>
   11ad2:	|     |         lea 12(sp),sp
   11ad6:	|     |         tst.w d0
   11ad8:	|     |     ,-- bne.s 11ae0 <moveChr+0x56>
   11ada:	|     |     |   moveq #1,d0
   11adc:	|  ,--|-----|-- bra.w 11d30 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ae0:	|  |  |     '-> moveq #24,d0
   11ae2:	|  |  |         add.l 40(sp),d0
   11ae6:	|  |  |         move.l d0,-(sp)
   11ae8:	|  |  |         jsr 152fa <trimStack>
   11aee:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11af0:	|  |  |         movea.l 40(sp),a0
   11af4:	|  |  |         move.l 24(a0),d0
   11af8:	|  |  |         move.l d0,-(sp)
   11afa:	|  |  |         pea 1 <_start+0x1>
   11afe:	|  |  |         lea 24(sp),a0
   11b02:	|  |  |         move.l a0,-(sp)
   11b04:	|  |  |         jsr 14976 <getValueType>
   11b0a:	|  |  |         lea 12(sp),sp
   11b0e:	|  |  |         tst.w d0
   11b10:	|  |  |     ,-- bne.s 11b18 <moveChr+0x8e>
   11b12:	|  |  |     |   moveq #1,d0
   11b14:	|  +--|-----|-- bra.w 11d30 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b18:	|  |  |     '-> moveq #24,d0
   11b1a:	|  |  |         add.l 40(sp),d0
   11b1e:	|  |  |         move.l d0,-(sp)
   11b20:	|  |  |         jsr 152fa <trimStack>
   11b26:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b28:	|  |  |         movea.l 40(sp),a0
   11b2c:	|  |  |         move.l 24(a0),d0
   11b30:	|  |  |         move.l d0,-(sp)
   11b32:	|  |  |         pea 7 <_start+0x7>
   11b36:	|  |  |         lea 16(sp),a0
   11b3a:	|  |  |         move.l a0,-(sp)
   11b3c:	|  |  |         jsr 14976 <getValueType>
   11b42:	|  |  |         lea 12(sp),sp
   11b46:	|  |  |         tst.w d0
   11b48:	|  |  |     ,-- bne.s 11b50 <moveChr+0xc6>
   11b4a:	|  |  |     |   moveq #1,d0
   11b4c:	|  +--|-----|-- bra.w 11d30 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b50:	|  |  |     '-> moveq #24,d0
   11b52:	|  |  |         add.l 40(sp),d0
   11b56:	|  |  |         move.l d0,-(sp)
   11b58:	|  |  |         jsr 152fa <trimStack>
   11b5e:	|  |  |         addq.l #4,sp

			if (force) {
   11b60:	|  |  |         tst.w 6(sp)
   11b64:	|  |  |     ,-- beq.s 11b94 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11b66:	|  |  |     |   movea.l 8(sp),a0
   11b6a:	|  |  |     |   move.l 12(sp),d1
   11b6e:	|  |  |     |   move.l 16(sp),d0
   11b72:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb478a>
   11b76:	|  |  |     |   move.l 44(sp),-(sp)
   11b7a:	|  |  |     |   move.l a0,-(sp)
   11b7c:	|  |  |     |   move.l d1,-(sp)
   11b7e:	|  |  |     |   move.l d0,-(sp)
   11b80:	|  |  |     |   jsr a78a <forceWalkingPerson>
   11b86:	|  |  |     |   lea 20(sp),sp
   11b8a:	|  |  |     |   tst.w d0
   11b8c:	|  |  |  ,--|-- beq.s 11be6 <moveChr+0x15c>
   11b8e:	|  |  |  |  |   moveq #3,d0
   11b90:	|  +--|--|--|-- bra.w 11d30 <moveChr+0x2a6>
			} else if (immediate) {
   11b94:	|  |  |  |  '-> tst.w 4(sp)
   11b98:	|  |  |  |  ,-- beq.s 11bb8 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11b9a:	|  |  |  |  |   movea.l 8(sp),a0
   11b9e:	|  |  |  |  |   move.l 12(sp),d1
   11ba2:	|  |  |  |  |   move.l 16(sp),d0
   11ba6:	|  |  |  |  |   move.l a0,-(sp)
   11ba8:	|  |  |  |  |   move.l d1,-(sp)
   11baa:	|  |  |  |  |   move.l d0,-(sp)
   11bac:	|  |  |  |  |   jsr aaa0 <jumpPerson>
   11bb2:	|  |  |  |  |   lea 12(sp),sp
   11bb6:	|  |  |  +--|-- bra.s 11be6 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11bb8:	|  |  |  |  '-> movea.l 8(sp),a0
   11bbc:	|  |  |  |      move.l 12(sp),d1
   11bc0:	|  |  |  |      move.l 16(sp),d0
   11bc4:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb478a>
   11bc8:	|  |  |  |      move.l 44(sp),-(sp)
   11bcc:	|  |  |  |      move.l a0,-(sp)
   11bce:	|  |  |  |      move.l d1,-(sp)
   11bd0:	|  |  |  |      move.l d0,-(sp)
   11bd2:	|  |  |  |      jsr ac70 <makeWalkingPerson>
   11bd8:	|  |  |  |      lea 20(sp),sp
   11bdc:	|  |  |  |      tst.w d0
   11bde:	|  |  |  +----- beq.s 11be6 <moveChr+0x15c>
   11be0:	|  |  |  |      moveq #3,d0
   11be2:	|  +--|--|----- bra.w 11d30 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11be6:	|  |  |  '----> moveq #2,d0
   11be8:	|  +--|-------- bra.w 11d30 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bec:	|  |  '-------> movea.l 40(sp),a0
   11bf0:	|  |            move.l 24(a0),d0
   11bf4:	|  |            move.l d0,-(sp)
   11bf6:	|  |            pea 7 <_start+0x7>
   11bfa:	|  |            moveq #32,d0
   11bfc:	|  |            add.l sp,d0
   11bfe:	|  |            move.l d0,-(sp)
   11c00:	|  |            jsr 14976 <getValueType>
   11c06:	|  |            lea 12(sp),sp
   11c0a:	|  |            tst.w d0
   11c0c:	|  |        ,-- bne.s 11c14 <moveChr+0x18a>
   11c0e:	|  |        |   moveq #1,d0
   11c10:	|  +--------|-- bra.w 11d30 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11c14:	|  |        '-> moveq #24,d0
   11c16:	|  |            add.l 40(sp),d0
   11c1a:	|  |            move.l d0,-(sp)
   11c1c:	|  |            jsr 152fa <trimStack>
   11c22:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c24:	|  |            movea.l 40(sp),a0
   11c28:	|  |            move.l 24(a0),d0
   11c2c:	|  |            move.l d0,-(sp)
   11c2e:	|  |            pea 7 <_start+0x7>
   11c32:	|  |            lea 28(sp),a0
   11c36:	|  |            move.l a0,-(sp)
   11c38:	|  |            jsr 14976 <getValueType>
   11c3e:	|  |            lea 12(sp),sp
   11c42:	|  |            tst.w d0
   11c44:	|  |        ,-- bne.s 11c4c <moveChr+0x1c2>
   11c46:	|  |        |   moveq #1,d0
   11c48:	|  +--------|-- bra.w 11d30 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11c4c:	|  |        '-> moveq #24,d0
   11c4e:	|  |            add.l 40(sp),d0
   11c52:	|  |            move.l d0,-(sp)
   11c54:	|  |            jsr 152fa <trimStack>
   11c5a:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11c5c:	|  |            move.l 24(sp),d0
   11c60:	|  |            move.l d0,-(sp)
   11c62:	|  |            jsr 15c38 <getRegionForObject>
   11c68:	|  |            addq.l #4,sp
   11c6a:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11c6e:	|  |        ,-- bne.s 11c76 <moveChr+0x1ec>
   11c70:	|  |        |   moveq #2,d0
   11c72:	|  +--------|-- bra.w 11d30 <moveChr+0x2a6>

			if (force)
   11c76:	|  |        '-> tst.w 6(sp)
   11c7a:	|  |        ,-- beq.s 11cb6 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11c7c:	|  |        |   movea.l 28(sp),a0
   11c80:	|  |        |   move.l 24(a0),d2
   11c84:	|  |        |   movea.l 20(sp),a1
   11c88:	|  |        |   movea.l 28(sp),a0
   11c8c:	|  |        |   move.l 20(a0),d1
   11c90:	|  |        |   movea.l 28(sp),a0
   11c94:	|  |        |   move.l 16(a0),d0
   11c98:	|  |        |   move.l d2,-(sp)
   11c9a:	|  |        |   move.l 44(sp),-(sp)
   11c9e:	|  |        |   move.l a1,-(sp)
   11ca0:	|  |        |   move.l d1,-(sp)
   11ca2:	|  |        |   move.l d0,-(sp)
   11ca4:	|  |        |   jsr a78a <forceWalkingPerson>
   11caa:	|  |        |   lea 20(sp),sp
   11cae:	|  |        |   tst.w d0
   11cb0:	|  |     ,--|-- beq.s 11d1c <moveChr+0x292>
   11cb2:	|  |     |  |   moveq #3,d0
   11cb4:	|  +-----|--|-- bra.s 11d30 <moveChr+0x2a6>
			}
			else if (immediate)
   11cb6:	|  |     |  '-> tst.w 4(sp)
   11cba:	|  |     |  ,-- beq.s 11ce2 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11cbc:	|  |     |  |   movea.l 20(sp),a1
   11cc0:	|  |     |  |   movea.l 28(sp),a0
   11cc4:	|  |     |  |   move.l 20(a0),d1
   11cc8:	|  |     |  |   movea.l 28(sp),a0
   11ccc:	|  |     |  |   move.l 16(a0),d0
   11cd0:	|  |     |  |   move.l a1,-(sp)
   11cd2:	|  |     |  |   move.l d1,-(sp)
   11cd4:	|  |     |  |   move.l d0,-(sp)
   11cd6:	|  |     |  |   jsr aaa0 <jumpPerson>
   11cdc:	|  |     |  |   lea 12(sp),sp
   11ce0:	|  |     +--|-- bra.s 11d1c <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11ce2:	|  |     |  '-> movea.l 28(sp),a0
   11ce6:	|  |     |      move.l 24(a0),d2
   11cea:	|  |     |      movea.l 20(sp),a1
   11cee:	|  |     |      movea.l 28(sp),a0
   11cf2:	|  |     |      move.l 20(a0),d1
   11cf6:	|  |     |      movea.l 28(sp),a0
   11cfa:	|  |     |      move.l 16(a0),d0
   11cfe:	|  |     |      move.l d2,-(sp)
   11d00:	|  |     |      move.l 44(sp),-(sp)
   11d04:	|  |     |      move.l a1,-(sp)
   11d06:	|  |     |      move.l d1,-(sp)
   11d08:	|  |     |      move.l d0,-(sp)
   11d0a:	|  |     |      jsr ac70 <makeWalkingPerson>
   11d10:	|  |     |      lea 20(sp),sp
   11d14:	|  |     |      tst.w d0
   11d16:	|  |     +----- beq.s 11d1c <moveChr+0x292>
   11d18:	|  |     |      moveq #3,d0
   11d1a:	|  +-----|----- bra.s 11d30 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11d1c:	|  |     '----> moveq #2,d0
   11d1e:	|  +----------- bra.s 11d30 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11d20:	'--|----------> pea 19eb9 <talk.c.490538ff+0x76>
   11d26:	   |            jsr 17456 <KPrintF>
   11d2c:	   |            addq.l #4,sp
			return BR_ERROR;
   11d2e:	   |            moveq #1,d0
	}
}
   11d30:	   '----------> move.l (sp)+,d2
   11d32:	                lea 28(sp),sp
   11d36:	                rts

00011d38 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11d38:	clr.l -(sp)
   11d3a:	clr.l -(sp)
   11d3c:	move.l 16(sp),-(sp)
   11d40:	move.l 16(sp),-(sp)
   11d44:	jsr 11a8a <moveChr>
   11d4a:	lea 16(sp),sp
}
   11d4e:	rts

00011d50 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11d50:	clr.l -(sp)
   11d52:	pea 1 <_start+0x1>
   11d56:	move.l 16(sp),-(sp)
   11d5a:	move.l 16(sp),-(sp)
   11d5e:	jsr 11a8a <moveChr>
   11d64:	lea 16(sp),sp
}
   11d68:	rts

00011d6a <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11d6a:	pea 1 <_start+0x1>
   11d6e:	clr.l -(sp)
   11d70:	move.l 16(sp),-(sp)
   11d74:	move.l 16(sp),-(sp)
   11d78:	jsr 11a8a <moveChr>
   11d7e:	lea 16(sp),sp
}
   11d82:	rts

00011d84 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11d84:	jsr 840e <clearStatusBar>
	return BR_CONTINUE;
   11d8a:	moveq #2,d0
}
   11d8c:	rts

00011d8e <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11d8e:	jsr 84b6 <killLastStatus>
	return BR_CONTINUE;
   11d94:	moveq #2,d0
}
   11d96:	rts

00011d98 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11d98:	jsr 83a4 <addStatusBar>
	return BR_CONTINUE;
   11d9e:	moveq #2,d0
}
   11da0:	rts

00011da2 <builtIn_statusText>:

builtIn(statusText)
{
   11da2:	       subq.l #8,sp
   11da4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11da6:	       movea.l 20(sp),a0
   11daa:	       move.l 24(a0),d0
   11dae:	       move.l d0,-(sp)
   11db0:	       jsr 14f4c <getTextFromAnyVar>
   11db6:	       addq.l #4,sp
   11db8:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11dbc:	   ,-- bne.s 11dc2 <builtIn_statusText+0x20>
   11dbe:	   |   moveq #1,d0
   11dc0:	,--|-- bra.s 11df6 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11dc2:	|  '-> moveq #24,d0
   11dc4:	|      add.l 20(sp),d0
   11dc8:	|      move.l d0,-(sp)
   11dca:	|      jsr 152fa <trimStack>
   11dd0:	|      addq.l #4,sp
	setStatusBar(newText);
   11dd2:	|      move.l 8(sp),-(sp)
   11dd6:	|      jsr 8736 <setStatusBar>
   11ddc:	|      addq.l #4,sp
	FreeVec(newText);
   11dde:	|      move.l 8(sp),4(sp)
   11de4:	|      move.l 1cca4 <SysBase>,d0
   11dea:	|      movea.l d0,a6
   11dec:	|      movea.l 4(sp),a1
   11df0:	|      jsr -690(a6)
	return BR_CONTINUE;
   11df4:	|      moveq #2,d0
}
   11df6:	'----> movea.l (sp)+,a6
   11df8:	       addq.l #8,sp
   11dfa:	       rts

00011dfc <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11dfc:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dfe:	       movea.l 12(sp),a0
   11e02:	       move.l 24(a0),d0
   11e06:	       move.l d0,-(sp)
   11e08:	       pea 1 <_start+0x1>
   11e0c:	       move.l sp,d0
   11e0e:	       addq.l #8,d0
   11e10:	       move.l d0,-(sp)
   11e12:	       jsr 14976 <getValueType>
   11e18:	       lea 12(sp),sp
   11e1c:	       tst.w d0
   11e1e:	   ,-- bne.s 11e24 <builtIn_lightStatus+0x28>
   11e20:	   |   moveq #1,d0
   11e22:	,--|-- bra.s 11e42 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11e24:	|  '-> moveq #24,d0
   11e26:	|      add.l 12(sp),d0
   11e2a:	|      move.l d0,-(sp)
   11e2c:	|      jsr 152fa <trimStack>
   11e32:	|      addq.l #4,sp
	setLitStatus (val);
   11e34:	|      move.l (sp),d0
   11e36:	|      move.l d0,-(sp)
   11e38:	|      jsr 8726 <setLitStatus>
   11e3e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11e40:	|      moveq #2,d0
}
   11e42:	'----> addq.l #4,sp
   11e44:	       rts

00011e46 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11e46:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e48:	       movea.l 16(sp),a0
   11e4c:	       move.l 24(a0),d0
   11e50:	       move.l d0,-(sp)
   11e52:	       pea 1 <_start+0x1>
   11e56:	       move.l sp,d0
   11e58:	       addq.l #8,d0
   11e5a:	       move.l d0,-(sp)
   11e5c:	       jsr 14976 <getValueType>
   11e62:	       lea 12(sp),sp
   11e66:	       tst.w d0
   11e68:	   ,-- bne.s 11e6e <builtIn_positionStatus+0x28>
   11e6a:	   |   moveq #1,d0
   11e6c:	,--|-- bra.s 11ec8 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11e6e:	|  '-> moveq #24,d0
   11e70:	|      add.l 16(sp),d0
   11e74:	|      move.l d0,-(sp)
   11e76:	|      jsr 152fa <trimStack>
   11e7c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e7e:	|      movea.l 16(sp),a0
   11e82:	|      move.l 24(a0),d0
   11e86:	|      move.l d0,-(sp)
   11e88:	|      pea 1 <_start+0x1>
   11e8c:	|      moveq #12,d0
   11e8e:	|      add.l sp,d0
   11e90:	|      move.l d0,-(sp)
   11e92:	|      jsr 14976 <getValueType>
   11e98:	|      lea 12(sp),sp
   11e9c:	|      tst.w d0
   11e9e:	|  ,-- bne.s 11ea4 <builtIn_positionStatus+0x5e>
   11ea0:	|  |   moveq #1,d0
   11ea2:	+--|-- bra.s 11ec8 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11ea4:	|  '-> moveq #24,d0
   11ea6:	|      add.l 16(sp),d0
   11eaa:	|      move.l d0,-(sp)
   11eac:	|      jsr 152fa <trimStack>
   11eb2:	|      addq.l #4,sp
	positionStatus (x, y);
   11eb4:	|      move.l (sp),d1
   11eb6:	|      move.l 4(sp),d0
   11eba:	|      move.l d1,-(sp)
   11ebc:	|      move.l d0,-(sp)
   11ebe:	|      jsr 8518 <positionStatus>
   11ec4:	|      addq.l #8,sp
	return BR_CONTINUE;
   11ec6:	|      moveq #2,d0
}
   11ec8:	'----> addq.l #8,sp
   11eca:	       rts

00011ecc <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11ecc:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ece:	       movea.l 12(sp),a0
   11ed2:	       move.l 24(a0),d0
   11ed6:	       move.l d0,-(sp)
   11ed8:	       pea 1 <_start+0x1>
   11edc:	       move.l sp,d0
   11ede:	       addq.l #8,d0
   11ee0:	       move.l d0,-(sp)
   11ee2:	       jsr 14976 <getValueType>
   11ee8:	       lea 12(sp),sp
   11eec:	       tst.w d0
   11eee:	   ,-- bne.s 11ef4 <builtIn_alignStatus+0x28>
   11ef0:	   |   moveq #1,d0
   11ef2:	,--|-- bra.s 11f14 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11ef4:	|  '-> moveq #24,d0
   11ef6:	|      add.l 12(sp),d0
   11efa:	|      move.l d0,-(sp)
   11efc:	|      jsr 152fa <trimStack>
   11f02:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11f04:	|      move.l (sp),d0
   11f06:	|      movea.l 1c622 <nowStatus>,a0
   11f0c:	|      move.l d0,d0
   11f0e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11f12:	|      moveq #2,d0
}
   11f14:	'----> addq.l #4,sp
   11f16:	       rts

00011f18 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11f18:	             tst.l 4(sp)
   11f1c:	      ,----- beq.s 11f28 <getFuncNumForCallback+0x10>
   11f1e:	      |      moveq #1,d0
   11f20:	      |      cmp.l 4(sp),d0
   11f24:	      |  ,-- beq.s 11f2e <getFuncNumForCallback+0x16>
   11f26:	   ,--|--|-- bra.s 11f64 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11f28:	   |  '--|-> clr.l 12(sp)
			break;
   11f2c:	,--|-----|-- bra.s 11f76 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11f2e:	|  |     '-> movea.l 8(sp),a0
   11f32:	|  |         move.l 24(a0),d0
   11f36:	|  |         move.l d0,-(sp)
   11f38:	|  |         pea 2 <_start+0x2>
   11f3c:	|  |         move.l 20(sp),-(sp)
   11f40:	|  |         jsr 14976 <getValueType>
   11f46:	|  |         lea 12(sp),sp
   11f4a:	|  |         tst.w d0
   11f4c:	|  |     ,-- bne.s 11f52 <getFuncNumForCallback+0x3a>
   11f4e:	|  |     |   clr.w d0
   11f50:	|  |  ,--|-- bra.s 11f78 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11f52:	|  |  |  '-> moveq #24,d0
   11f54:	|  |  |      add.l 8(sp),d0
   11f58:	|  |  |      move.l d0,-(sp)
   11f5a:	|  |  |      jsr 152fa <trimStack>
   11f60:	|  |  |      addq.l #4,sp
			break;
   11f62:	+--|--|----- bra.s 11f76 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11f64:	|  '--|----> pea 19eef <talk.c.490538ff+0xac>
   11f6a:	|     |      jsr 17456 <KPrintF>
   11f70:	|     |      addq.l #4,sp
			return FALSE;
   11f72:	|     |      clr.w d0
   11f74:	|     +----- bra.s 11f78 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11f76:	'-----|----> moveq #1,d0
}
   11f78:	      '----> rts

00011f7a <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11f7a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f7c:	       move.l sp,d0
   11f7e:	       move.l d0,-(sp)
   11f80:	       move.l 16(sp),-(sp)
   11f84:	       move.l 16(sp),-(sp)
   11f88:	       jsr 11f18 <getFuncNumForCallback>
   11f8e:	       lea 12(sp),sp
   11f92:	       tst.w d0
   11f94:	,----- beq.s 11fa4 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11f96:	|      movea.l 1c614 <currentEvents>,a0
   11f9c:	|      move.l (sp),d0
   11f9e:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11fa0:	|      moveq #2,d0
   11fa2:	|  ,-- bra.s 11fa6 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11fa4:	'--|-> moveq #1,d0
}
   11fa6:	   '-> addq.l #4,sp
   11fa8:	       rts

00011faa <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11faa:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fac:	       move.l sp,d0
   11fae:	       move.l d0,-(sp)
   11fb0:	       move.l 16(sp),-(sp)
   11fb4:	       move.l 16(sp),-(sp)
   11fb8:	       jsr 11f18 <getFuncNumForCallback>
   11fbe:	       lea 12(sp),sp
   11fc2:	       tst.w d0
   11fc4:	,----- beq.s 11fd6 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11fc6:	|      movea.l 1c614 <currentEvents>,a0
   11fcc:	|      move.l (sp),d0
   11fce:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11fd2:	|      moveq #2,d0
   11fd4:	|  ,-- bra.s 11fd8 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11fd6:	'--|-> moveq #1,d0
}
   11fd8:	   '-> addq.l #4,sp
   11fda:	       rts

00011fdc <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11fdc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fde:	       move.l sp,d0
   11fe0:	       move.l d0,-(sp)
   11fe2:	       move.l 16(sp),-(sp)
   11fe6:	       move.l 16(sp),-(sp)
   11fea:	       jsr 11f18 <getFuncNumForCallback>
   11ff0:	       lea 12(sp),sp
   11ff4:	       tst.w d0
   11ff6:	,----- beq.s 12008 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11ff8:	|      movea.l 1c614 <currentEvents>,a0
   11ffe:	|      move.l (sp),d0
   12000:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12004:	|      moveq #2,d0
   12006:	|  ,-- bra.s 1200a <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   12008:	'--|-> moveq #1,d0
}
   1200a:	   '-> addq.l #4,sp
   1200c:	       rts

0001200e <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   1200e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12010:	       move.l sp,d0
   12012:	       move.l d0,-(sp)
   12014:	       move.l 16(sp),-(sp)
   12018:	       move.l 16(sp),-(sp)
   1201c:	       jsr 11f18 <getFuncNumForCallback>
   12022:	       lea 12(sp),sp
   12026:	       tst.w d0
   12028:	,----- beq.s 1203a <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1202a:	|      movea.l 1c614 <currentEvents>,a0
   12030:	|      move.l (sp),d0
   12032:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12036:	|      moveq #2,d0
   12038:	|  ,-- bra.s 1203c <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   1203a:	'--|-> moveq #1,d0
}
   1203c:	   '-> addq.l #4,sp
   1203e:	       rts

00012040 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12040:	          subq.l #8,sp
   12042:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12044:	          move.l sp,d0
   12046:	          addq.l #4,d0
   12048:	          move.l d0,-(sp)
   1204a:	          move.l 24(sp),-(sp)
   1204e:	          move.l 24(sp),-(sp)
   12052:	          jsr 11f18 <getFuncNumForCallback>
   12058:	          lea 12(sp),sp
   1205c:	          tst.w d0
   1205e:	,-------- beq.s 120bc <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12060:	|         movea.l 1c614 <currentEvents>,a0
   12066:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   1206c:	|         move.l 4(sp),d0
   12070:	|  ,----- beq.s 1208c <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   12072:	|  |      move.l 4(sp),d0
   12076:	|  |      movea.l 1c614 <currentEvents>,a2
   1207c:	|  |      move.l d0,-(sp)
   1207e:	|  |      jsr 7222 <preloadNewFunctionNum>
   12084:	|  |      addq.l #4,sp
   12086:	|  |      move.l d0,20(a2)
   1208a:	|  |  ,-- bra.s 12096 <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   1208c:	|  '--|-> movea.l 1c614 <currentEvents>,a0
   12092:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   12096:	|     '-> tst.l 8(sp)
   1209a:	|     ,-- beq.s 120b8 <builtIn_onFocusChange+0x78>
   1209c:	|     |   movea.l 1c614 <currentEvents>,a0
   120a2:	|     |   move.l 20(a0),d0
   120a6:	|     |   cmp.l 8(sp),d0
   120aa:	|     +-- beq.s 120b8 <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   120ac:	|     |   move.l 8(sp),-(sp)
   120b0:	|     |   jsr 7690 <unloadFunction>
   120b6:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   120b8:	|     '-> moveq #2,d0
   120ba:	|     ,-- bra.s 120be <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   120bc:	'-----|-> moveq #1,d0
}
   120be:	      '-> movea.l (sp)+,a2
   120c0:	          addq.l #8,sp
   120c2:	          rts

000120c4 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   120c4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   120c6:	       move.l sp,d0
   120c8:	       move.l d0,-(sp)
   120ca:	       move.l 16(sp),-(sp)
   120ce:	       move.l 16(sp),-(sp)
   120d2:	       jsr 11f18 <getFuncNumForCallback>
   120d8:	       lea 12(sp),sp
   120dc:	       tst.w d0
   120de:	,----- beq.s 120f0 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   120e0:	|      movea.l 1c614 <currentEvents>,a0
   120e6:	|      move.l (sp),d0
   120e8:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   120ec:	|      moveq #2,d0
   120ee:	|  ,-- bra.s 120f2 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   120f0:	'--|-> moveq #1,d0
}
   120f2:	   '-> addq.l #4,sp
   120f4:	       rts

000120f6 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   120f6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   120f8:	       move.l sp,d0
   120fa:	       move.l d0,-(sp)
   120fc:	       move.l 16(sp),-(sp)
   12100:	       move.l 16(sp),-(sp)
   12104:	       jsr 11f18 <getFuncNumForCallback>
   1210a:	       lea 12(sp),sp
   1210e:	       tst.w d0
   12110:	,----- beq.s 12122 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   12112:	|      movea.l 1c614 <currentEvents>,a0
   12118:	|      move.l (sp),d0
   1211a:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   1211e:	|      moveq #2,d0
   12120:	|  ,-- bra.s 12124 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12122:	'--|-> moveq #1,d0
}
   12124:	   '-> addq.l #4,sp
   12126:	       rts

00012128 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   12128:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1212a:	          move.l sp,d0
   1212c:	          move.l d0,-(sp)
   1212e:	          move.l 16(sp),-(sp)
   12132:	          move.l 16(sp),-(sp)
   12136:	          jsr 11f18 <getFuncNumForCallback>
   1213c:	          lea 12(sp),sp
   12140:	          tst.w d0
   12142:	,-------- beq.s 1216e <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12144:	|         move.l 1cc74 <noStack>,d1
   1214a:	|         move.l (sp),d0
   1214c:	|         pea 1 <_start+0x1>
   12150:	|         move.l d1,-(sp)
   12152:	|         clr.l -(sp)
   12154:	|         clr.l -(sp)
   12156:	|         move.l d0,-(sp)
   12158:	|         jsr 75e4 <startNewFunctionNum>
   1215e:	|         lea 20(sp),sp
   12162:	|         tst.l d0
   12164:	|     ,-- bne.s 1216a <builtIn_spawnSub+0x42>
   12166:	|     |   moveq #1,d0
   12168:	|  ,--|-- bra.s 12170 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   1216a:	|  |  '-> moveq #2,d0
   1216c:	|  +----- bra.s 12170 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   1216e:	'--|----> moveq #1,d0
}
   12170:	   '----> addq.l #4,sp
   12172:	          rts

00012174 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12174:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12176:	          move.l sp,d0
   12178:	          addq.l #4,d0
   1217a:	          move.l d0,-(sp)
   1217c:	          move.l 20(sp),-(sp)
   12180:	          move.l 20(sp),-(sp)
   12184:	          jsr 11f18 <getFuncNumForCallback>
   1218a:	          lea 12(sp),sp
   1218e:	          tst.w d0
   12190:	,-------- beq.s 121c6 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12192:	|         move.l 4(sp),d1
   12196:	|         move.l sp,d0
   12198:	|         addq.l #2,d0
   1219a:	|         move.l d0,-(sp)
   1219c:	|         move.l 20(sp),-(sp)
   121a0:	|         move.l d1,-(sp)
   121a2:	|         jsr 5224 <cancelAFunction>
   121a8:	|         lea 12(sp),sp
		if (killedMyself) {
   121ac:	|         move.w 2(sp),d0
   121b0:	|  ,----- beq.s 121c2 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   121b2:	|  |      move.l 16(sp),-(sp)
   121b6:	|  |      jsr 5116 <abortFunction>
   121bc:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   121be:	|  |      moveq #5,d0
   121c0:	|  |  ,-- bra.s 121c8 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   121c2:	|  '--|-> moveq #2,d0
   121c4:	|     +-- bra.s 121c8 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   121c6:	'-----|-> moveq #1,d0
}
   121c8:	      '-> addq.l #8,sp
   121ca:	          rts

000121cc <builtIn_stringWidth>:

builtIn(stringWidth)
{
   121cc:	       subq.l #8,sp
   121ce:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   121d0:	       movea.l 20(sp),a0
   121d4:	       move.l 24(a0),d0
   121d8:	       move.l d0,-(sp)
   121da:	       jsr 14f4c <getTextFromAnyVar>
   121e0:	       addq.l #4,sp
   121e2:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   121e6:	   ,-- bne.s 121ec <builtIn_stringWidth+0x20>
   121e8:	   |   moveq #1,d0
   121ea:	,--|-- bra.s 1223a <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   121ec:	|  '-> moveq #24,d0
   121ee:	|      add.l 20(sp),d0
   121f2:	|      move.l d0,-(sp)
   121f4:	|      jsr 152fa <trimStack>
   121fa:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   121fc:	|      move.l 8(sp),-(sp)
   12200:	|      jsr 15a60 <stringWidth>
   12206:	|      addq.l #4,sp
   12208:	|      move.l d0,d1
   1220a:	|      moveq #28,d0
   1220c:	|      add.l 20(sp),d0
   12210:	|      move.l d1,-(sp)
   12212:	|      pea 1 <_start+0x1>
   12216:	|      move.l d0,-(sp)
   12218:	|      jsr 15268 <setVariable>
   1221e:	|      lea 12(sp),sp
	FreeVec(theText);
   12222:	|      move.l 8(sp),4(sp)
   12228:	|      move.l 1cca4 <SysBase>,d0
   1222e:	|      movea.l d0,a6
   12230:	|      movea.l 4(sp),a1
   12234:	|      jsr -690(a6)
	return BR_CONTINUE;
   12238:	|      moveq #2,d0
}
   1223a:	'----> movea.l (sp)+,a6
   1223c:	       addq.l #8,sp
   1223e:	       rts

00012240 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12240:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12242:	       movea.l 12(sp),a0
   12246:	       move.l 24(a0),d0
   1224a:	       move.l d0,-(sp)
   1224c:	       pea 1 <_start+0x1>
   12250:	       move.l sp,d0
   12252:	       addq.l #8,d0
   12254:	       move.l d0,-(sp)
   12256:	       jsr 14976 <getValueType>
   1225c:	       lea 12(sp),sp
   12260:	       tst.w d0
   12262:	   ,-- bne.s 12268 <builtIn_hardScroll+0x28>
   12264:	   |   moveq #1,d0
   12266:	,--|-- bra.s 12286 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   12268:	|  '-> moveq #24,d0
   1226a:	|      add.l 12(sp),d0
   1226e:	|      move.l d0,-(sp)
   12270:	|      jsr 152fa <trimStack>
   12276:	|      addq.l #4,sp
	hardScroll (v);
   12278:	|      move.l (sp),d0
   1227a:	|      move.l d0,-(sp)
   1227c:	|      jsr d3dc <hardScroll>
   12282:	|      addq.l #4,sp
	return BR_CONTINUE;
   12284:	|      moveq #2,d0
}
   12286:	'----> addq.l #4,sp
   12288:	       rts

0001228a <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   1228a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1228c:	       movea.l 12(sp),a0
   12290:	       move.l 24(a0),d0
   12294:	       move.l d0,-(sp)
   12296:	       pea 7 <_start+0x7>
   1229a:	       move.l sp,d0
   1229c:	       addq.l #8,d0
   1229e:	       move.l d0,-(sp)
   122a0:	       jsr 14976 <getValueType>
   122a6:	       lea 12(sp),sp
   122aa:	       tst.w d0
   122ac:	   ,-- bne.s 122b2 <builtIn_isScreenRegion+0x28>
   122ae:	   |   moveq #1,d0
   122b0:	,--|-- bra.s 122f2 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   122b2:	|  '-> moveq #24,d0
   122b4:	|      add.l 12(sp),d0
   122b8:	|      move.l d0,-(sp)
   122ba:	|      jsr 152fa <trimStack>
   122c0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   122c2:	|      move.l (sp),d0
   122c4:	|      move.l d0,-(sp)
   122c6:	|      jsr 15c38 <getRegionForObject>
   122cc:	|      addq.l #4,sp
   122ce:	|      tst.l d0
   122d0:	|      sne d0
   122d2:	|      neg.b d0
   122d4:	|      moveq #0,d1
   122d6:	|      move.b d0,d1
   122d8:	|      moveq #28,d0
   122da:	|      add.l 12(sp),d0
   122de:	|      move.l d1,-(sp)
   122e0:	|      pea 1 <_start+0x1>
   122e4:	|      move.l d0,-(sp)
   122e6:	|      jsr 15268 <setVariable>
   122ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122f0:	|      moveq #2,d0
}
   122f2:	'----> addq.l #4,sp
   122f4:	       rts

000122f6 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   122f6:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122f8:	       movea.l 12(sp),a0
   122fc:	       move.l 24(a0),d0
   12300:	       move.l d0,-(sp)
   12302:	       pea 1 <_start+0x1>
   12306:	       move.l sp,d0
   12308:	       addq.l #8,d0
   1230a:	       move.l d0,-(sp)
   1230c:	       jsr 14976 <getValueType>
   12312:	       lea 12(sp),sp
   12316:	       tst.w d0
   12318:	   ,-- bne.s 1231e <builtIn_setSpeechSpeed+0x28>
   1231a:	   |   moveq #1,d0
   1231c:	,--|-- bra.s 1236c <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1231e:	|  '-> moveq #24,d0
   12320:	|      add.l 12(sp),d0
   12324:	|      move.l d0,-(sp)
   12326:	|      jsr 152fa <trimStack>
   1232c:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1232e:	|      move.l (sp),d0
   12330:	|      move.l d0,-(sp)
   12332:	|      jsr 17888 <__floatsisf>
   12338:	|      addq.l #4,sp
   1233a:	|      move.l #1008981770,-(sp)
   12340:	|      move.l d0,-(sp)
   12342:	|      jsr 1793a <__mulsf3>
   12348:	|      addq.l #8,sp
   1234a:	|      move.l d0,1c60e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12350:	|      moveq #28,d0
   12352:	|      add.l 12(sp),d0
   12356:	|      pea 1 <_start+0x1>
   1235a:	|      pea 1 <_start+0x1>
   1235e:	|      move.l d0,-(sp)
   12360:	|      jsr 15268 <setVariable>
   12366:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1236a:	|      moveq #2,d0
}
   1236c:	'----> addq.l #4,sp
   1236e:	       rts

00012370 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12370:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12372:	       movea.l 12(sp),a0
   12376:	       move.l 24(a0),d0
   1237a:	       move.l d0,-(sp)
   1237c:	       pea 1 <_start+0x1>
   12380:	       move.l sp,d0
   12382:	       addq.l #8,d0
   12384:	       move.l d0,-(sp)
   12386:	       jsr 14976 <getValueType>
   1238c:	       lea 12(sp),sp
   12390:	       tst.w d0
   12392:	   ,-- bne.s 12398 <builtIn_setFontSpacing+0x28>
   12394:	   |   moveq #1,d0
   12396:	,--|-- bra.s 123ce <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12398:	|  '-> move.l (sp),d0
   1239a:	|      move.l d0,d0
   1239c:	|      move.w d0,1cb9c <fontSpace>
	trimStack (&fun -> stack);
   123a2:	|      moveq #24,d0
   123a4:	|      add.l 12(sp),d0
   123a8:	|      move.l d0,-(sp)
   123aa:	|      jsr 152fa <trimStack>
   123b0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   123b2:	|      moveq #28,d0
   123b4:	|      add.l 12(sp),d0
   123b8:	|      pea 1 <_start+0x1>
   123bc:	|      pea 1 <_start+0x1>
   123c0:	|      move.l d0,-(sp)
   123c2:	|      jsr 15268 <setVariable>
   123c8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   123cc:	|      moveq #2,d0
}
   123ce:	'----> addq.l #4,sp
   123d0:	       rts

000123d2 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   123d2:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123d4:	          movea.l 12(sp),a0
   123d8:	          move.l 24(a0),d0
   123dc:	          move.l d0,-(sp)
   123de:	          pea 1 <_start+0x1>
   123e2:	          move.l sp,d0
   123e4:	          addq.l #8,d0
   123e6:	          move.l d0,-(sp)
   123e8:	          jsr 14976 <getValueType>
   123ee:	          lea 12(sp),sp
   123f2:	          tst.w d0
   123f4:	      ,-- bne.s 123fa <builtIn_transitionLevel+0x28>
   123f6:	      |   moveq #1,d0
   123f8:	,-----|-- bra.s 1244e <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   123fa:	|     '-> moveq #24,d0
   123fc:	|         add.l 12(sp),d0
   12400:	|         move.l d0,-(sp)
   12402:	|         jsr 152fa <trimStack>
   12408:	|         addq.l #4,sp

	if (number < 0)
   1240a:	|         move.l (sp),d0
   1240c:	|     ,-- bpl.s 12416 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1240e:	|     |   clr.b 1c612 <brightnessLevel>
   12414:	|  ,--|-- bra.s 12432 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12416:	|  |  '-> move.l (sp),d0
   12418:	|  |      cmpi.l #255,d0
   1241e:	|  |  ,-- ble.s 12428 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12420:	|  |  |   st 1c612 <brightnessLevel>
   12426:	|  +--|-- bra.s 12432 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12428:	|  |  '-> move.l (sp),d0
   1242a:	|  |      move.l d0,d0
   1242c:	|  |      move.b d0,1c612 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12432:	|  '----> moveq #28,d0
   12434:	|         add.l 12(sp),d0
   12438:	|         pea 1 <_start+0x1>
   1243c:	|         pea 1 <_start+0x1>
   12440:	|         move.l d0,-(sp)
   12442:	|         jsr 15268 <setVariable>
   12448:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1244c:	|         moveq #2,d0
}
   1244e:	'-------> addq.l #4,sp
   12450:	          rts

00012452 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12452:	movea.l 8(sp),a0
   12456:	move.l 24(a0),d0
   1245a:	move.l d0,-(sp)
   1245c:	jsr 14eb6 <getBoolean>
   12462:	addq.l #4,sp
   12464:	move.w d0,1cc44 <captureAllKeys>
	trimStack (&fun -> stack);
   1246a:	moveq #24,d0
   1246c:	add.l 8(sp),d0
   12470:	move.l d0,-(sp)
   12472:	jsr 152fa <trimStack>
   12478:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1247a:	move.w 1cc44 <captureAllKeys>,d0
   12480:	movea.w d0,a0
   12482:	moveq #28,d0
   12484:	add.l 8(sp),d0
   12488:	move.l a0,-(sp)
   1248a:	pea 1 <_start+0x1>
   1248e:	move.l d0,-(sp)
   12490:	jsr 15268 <setVariable>
   12496:	lea 12(sp),sp
	return BR_CONTINUE;
   1249a:	moveq #2,d0
}
   1249c:	rts

0001249e <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   1249e:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   124a2:	       movea.l 20(sp),a0
   124a6:	       move.l 24(a0),d0
   124aa:	       move.l d0,-(sp)
   124ac:	       pea 1 <_start+0x1>
   124b0:	       moveq #12,d0
   124b2:	       add.l sp,d0
   124b4:	       move.l d0,-(sp)
   124b6:	       jsr 14976 <getValueType>
   124bc:	       lea 12(sp),sp
   124c0:	       tst.w d0
   124c2:	   ,-- bne.s 124ca <builtIn_spinCharacter+0x2c>
   124c4:	   |   moveq #1,d0
   124c6:	,--|-- bra.w 1257a <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   124ca:	|  '-> moveq #24,d0
   124cc:	|      add.l 20(sp),d0
   124d0:	|      move.l d0,-(sp)
   124d2:	|      jsr 152fa <trimStack>
   124d8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124da:	|      movea.l 20(sp),a0
   124de:	|      move.l 24(a0),d0
   124e2:	|      move.l d0,-(sp)
   124e4:	|      pea 7 <_start+0x7>
   124e8:	|      lea 8(sp),a0
   124ec:	|      move.l a0,-(sp)
   124ee:	|      jsr 14976 <getValueType>
   124f4:	|      lea 12(sp),sp
   124f8:	|      tst.w d0
   124fa:	|  ,-- bne.s 12500 <builtIn_spinCharacter+0x62>
   124fc:	|  |   moveq #1,d0
   124fe:	+--|-- bra.s 1257a <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12500:	|  '-> moveq #24,d0
   12502:	|      add.l 20(sp),d0
   12506:	|      move.l d0,-(sp)
   12508:	|      jsr 152fa <trimStack>
   1250e:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12510:	|      move.l (sp),d0
   12512:	|      move.l d0,-(sp)
   12514:	|      jsr a71c <findPerson>
   1251a:	|      addq.l #4,sp
   1251c:	|      move.l d0,8(sp)
	if (thisPerson) {
   12520:	|  ,-- beq.s 12560 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12522:	|  |   move.l 4(sp),d0
   12526:	|  |   movea.l 8(sp),a0
   1252a:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1252e:	|  |   movea.l 8(sp),a0
   12532:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12538:	|  |   movea.l 8(sp),a0
   1253c:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12542:	|  |   moveq #28,d0
   12544:	|  |   add.l 20(sp),d0
   12548:	|  |   pea 1 <_start+0x1>
   1254c:	|  |   pea 1 <_start+0x1>
   12550:	|  |   move.l d0,-(sp)
   12552:	|  |   jsr 15268 <setVariable>
   12558:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1255c:	|  |   moveq #3,d0
   1255e:	+--|-- bra.s 1257a <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12560:	|  '-> moveq #28,d0
   12562:	|      add.l 20(sp),d0
   12566:	|      clr.l -(sp)
   12568:	|      pea 1 <_start+0x1>
   1256c:	|      move.l d0,-(sp)
   1256e:	|      jsr 15268 <setVariable>
   12574:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12578:	|      moveq #2,d0
	}
}
   1257a:	'----> lea 12(sp),sp
   1257e:	       rts

00012580 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12580:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12582:	          movea.l 16(sp),a0
   12586:	          move.l 24(a0),d0
   1258a:	          move.l d0,-(sp)
   1258c:	          pea 7 <_start+0x7>
   12590:	          move.l sp,d0
   12592:	          addq.l #8,d0
   12594:	          move.l d0,-(sp)
   12596:	          jsr 14976 <getValueType>
   1259c:	          lea 12(sp),sp
   125a0:	          tst.w d0
   125a2:	      ,-- bne.s 125a8 <builtIn_getCharacterDirection+0x28>
   125a4:	      |   moveq #1,d0
   125a6:	,-----|-- bra.s 12606 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   125a8:	|     '-> moveq #24,d0
   125aa:	|         add.l 16(sp),d0
   125ae:	|         move.l d0,-(sp)
   125b0:	|         jsr 152fa <trimStack>
   125b6:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125b8:	|         move.l (sp),d0
   125ba:	|         move.l d0,-(sp)
   125bc:	|         jsr a71c <findPerson>
   125c2:	|         addq.l #4,sp
   125c4:	|         move.l d0,4(sp)
	if (thisPerson) {
   125c8:	|  ,----- beq.s 125ec <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   125ca:	|  |      movea.l 4(sp),a0
   125ce:	|  |      move.l 106(a0),d1
   125d2:	|  |      moveq #28,d0
   125d4:	|  |      add.l 16(sp),d0
   125d8:	|  |      move.l d1,-(sp)
   125da:	|  |      pea 1 <_start+0x1>
   125de:	|  |      move.l d0,-(sp)
   125e0:	|  |      jsr 15268 <setVariable>
   125e6:	|  |      lea 12(sp),sp
   125ea:	|  |  ,-- bra.s 12604 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   125ec:	|  '--|-> moveq #28,d0
   125ee:	|     |   add.l 16(sp),d0
   125f2:	|     |   clr.l -(sp)
   125f4:	|     |   pea 1 <_start+0x1>
   125f8:	|     |   move.l d0,-(sp)
   125fa:	|     |   jsr 15268 <setVariable>
   12600:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12604:	|     '-> moveq #2,d0
}
   12606:	'-------> addq.l #8,sp
   12608:	          rts

0001260a <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1260a:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1260c:	       movea.l 16(sp),a0
   12610:	       move.l 24(a0),d0
   12614:	       move.l d0,-(sp)
   12616:	       pea 7 <_start+0x7>
   1261a:	       move.l sp,d0
   1261c:	       addq.l #8,d0
   1261e:	       move.l d0,-(sp)
   12620:	       jsr 14976 <getValueType>
   12626:	       lea 12(sp),sp
   1262a:	       tst.w d0
   1262c:	   ,-- bne.s 12632 <builtIn_isCharacter+0x28>
   1262e:	   |   moveq #1,d0
   12630:	,--|-- bra.s 12674 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12632:	|  '-> moveq #24,d0
   12634:	|      add.l 16(sp),d0
   12638:	|      move.l d0,-(sp)
   1263a:	|      jsr 152fa <trimStack>
   12640:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12642:	|      move.l (sp),d0
   12644:	|      move.l d0,-(sp)
   12646:	|      jsr a71c <findPerson>
   1264c:	|      addq.l #4,sp
   1264e:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12652:	|      sne d0
   12654:	|      neg.b d0
   12656:	|      moveq #0,d1
   12658:	|      move.b d0,d1
   1265a:	|      moveq #28,d0
   1265c:	|      add.l 16(sp),d0
   12660:	|      move.l d1,-(sp)
   12662:	|      pea 1 <_start+0x1>
   12666:	|      move.l d0,-(sp)
   12668:	|      jsr 15268 <setVariable>
   1266e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12672:	|      moveq #2,d0
}
   12674:	'----> addq.l #8,sp
   12676:	       rts

00012678 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12678:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1267a:	          movea.l 16(sp),a0
   1267e:	          move.l 24(a0),d0
   12682:	          move.l d0,-(sp)
   12684:	          pea 7 <_start+0x7>
   12688:	          move.l sp,d0
   1268a:	          addq.l #8,d0
   1268c:	          move.l d0,-(sp)
   1268e:	          jsr 14976 <getValueType>
   12694:	          lea 12(sp),sp
   12698:	          tst.w d0
   1269a:	      ,-- bne.s 126a0 <builtIn_normalCharacter+0x28>
   1269c:	      |   moveq #1,d0
   1269e:	,-----|-- bra.s 1271c <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   126a0:	|     '-> moveq #24,d0
   126a2:	|         add.l 16(sp),d0
   126a6:	|         move.l d0,-(sp)
   126a8:	|         jsr 152fa <trimStack>
   126ae:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   126b0:	|         move.l (sp),d0
   126b2:	|         move.l d0,-(sp)
   126b4:	|         jsr a71c <findPerson>
   126ba:	|         addq.l #4,sp
   126bc:	|         move.l d0,4(sp)
	if (thisPerson)
   126c0:	|  ,----- beq.s 12702 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   126c2:	|  |      movea.l 4(sp),a0
   126c6:	|  |      movea.l 80(a0),a0
   126ca:	|  |      move.l (a0),d1
   126cc:	|  |      movea.l 4(sp),a0
   126d0:	|  |      move.l 106(a0),d0
   126d4:	|  |      add.l d0,d0
   126d6:	|  |      add.l d0,d0
   126d8:	|  |      movea.l d1,a0
   126da:	|  |      adda.l d0,a0
   126dc:	|  |      move.l (a0),d0
   126de:	|  |      movea.l 4(sp),a0
   126e2:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   126e6:	|  |      moveq #28,d0
   126e8:	|  |      add.l 16(sp),d0
   126ec:	|  |      pea 1 <_start+0x1>
   126f0:	|  |      pea 1 <_start+0x1>
   126f4:	|  |      move.l d0,-(sp)
   126f6:	|  |      jsr 15268 <setVariable>
   126fc:	|  |      lea 12(sp),sp
   12700:	|  |  ,-- bra.s 1271a <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12702:	|  '--|-> moveq #28,d0
   12704:	|     |   add.l 16(sp),d0
   12708:	|     |   clr.l -(sp)
   1270a:	|     |   pea 1 <_start+0x1>
   1270e:	|     |   move.l d0,-(sp)
   12710:	|     |   jsr 15268 <setVariable>
   12716:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1271a:	|     '-> moveq #2,d0
}
   1271c:	'-------> addq.l #8,sp
   1271e:	          rts

00012720 <builtIn_isMoving>:

builtIn(isMoving)
{
   12720:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12722:	          movea.l 16(sp),a0
   12726:	          move.l 24(a0),d0
   1272a:	          move.l d0,-(sp)
   1272c:	          pea 7 <_start+0x7>
   12730:	          move.l sp,d0
   12732:	          addq.l #8,d0
   12734:	          move.l d0,-(sp)
   12736:	          jsr 14976 <getValueType>
   1273c:	          lea 12(sp),sp
   12740:	          tst.w d0
   12742:	      ,-- bne.s 12748 <builtIn_isMoving+0x28>
   12744:	      |   moveq #1,d0
   12746:	,-----|-- bra.s 127a8 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12748:	|     '-> moveq #24,d0
   1274a:	|         add.l 16(sp),d0
   1274e:	|         move.l d0,-(sp)
   12750:	|         jsr 152fa <trimStack>
   12756:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12758:	|         move.l (sp),d0
   1275a:	|         move.l d0,-(sp)
   1275c:	|         jsr a71c <findPerson>
   12762:	|         addq.l #4,sp
   12764:	|         move.l d0,4(sp)
	if (thisPerson)
   12768:	|  ,----- beq.s 1278e <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   1276a:	|  |      movea.l 4(sp),a0
   1276e:	|  |      move.w 64(a0),d0
   12772:	|  |      movea.w d0,a0
   12774:	|  |      moveq #28,d0
   12776:	|  |      add.l 16(sp),d0
   1277a:	|  |      move.l a0,-(sp)
   1277c:	|  |      pea 1 <_start+0x1>
   12780:	|  |      move.l d0,-(sp)
   12782:	|  |      jsr 15268 <setVariable>
   12788:	|  |      lea 12(sp),sp
   1278c:	|  |  ,-- bra.s 127a6 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1278e:	|  '--|-> moveq #28,d0
   12790:	|     |   add.l 16(sp),d0
   12794:	|     |   clr.l -(sp)
   12796:	|     |   pea 1 <_start+0x1>
   1279a:	|     |   move.l d0,-(sp)
   1279c:	|     |   jsr 15268 <setVariable>
   127a2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127a6:	|     '-> moveq #2,d0
}
   127a8:	'-------> addq.l #8,sp
   127aa:	          rts

000127ac <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   127ac:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127b0:	          movea.l 20(sp),a0
   127b4:	          move.l 24(a0),d0
   127b8:	          move.l d0,-(sp)
   127ba:	          pea 7 <_start+0x7>
   127be:	          lea 8(sp),a0
   127c2:	          move.l a0,-(sp)
   127c4:	          jsr 14976 <getValueType>
   127ca:	          lea 12(sp),sp
   127ce:	          tst.w d0
   127d0:	      ,-- bne.s 127d8 <builtIn_fetchEvent+0x2c>
   127d2:	      |   moveq #1,d0
   127d4:	,-----|-- bra.w 1286c <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   127d8:	|     '-> moveq #24,d0
   127da:	|         add.l 20(sp),d0
   127de:	|         move.l d0,-(sp)
   127e0:	|         jsr 152fa <trimStack>
   127e6:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127e8:	|         movea.l 20(sp),a0
   127ec:	|         move.l 24(a0),d0
   127f0:	|         move.l d0,-(sp)
   127f2:	|         pea 7 <_start+0x7>
   127f6:	|         moveq #12,d0
   127f8:	|         add.l sp,d0
   127fa:	|         move.l d0,-(sp)
   127fc:	|         jsr 14976 <getValueType>
   12802:	|         lea 12(sp),sp
   12806:	|         tst.w d0
   12808:	|     ,-- bne.s 1280e <builtIn_fetchEvent+0x62>
   1280a:	|     |   moveq #1,d0
   1280c:	+-----|-- bra.s 1286c <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1280e:	|     '-> moveq #24,d0
   12810:	|         add.l 20(sp),d0
   12814:	|         move.l d0,-(sp)
   12816:	|         jsr 152fa <trimStack>
   1281c:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1281e:	|         move.l (sp),d1
   12820:	|         move.l 4(sp),d0
   12824:	|         move.l d1,-(sp)
   12826:	|         move.l d0,-(sp)
   12828:	|         jsr d6be <getCombinationFunction>
   1282e:	|         addq.l #8,sp
   12830:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12834:	|  ,----- beq.s 12852 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12836:	|  |      moveq #28,d0
   12838:	|  |      add.l 20(sp),d0
   1283c:	|  |      move.l 8(sp),-(sp)
   12840:	|  |      pea 2 <_start+0x2>
   12844:	|  |      move.l d0,-(sp)
   12846:	|  |      jsr 15268 <setVariable>
   1284c:	|  |      lea 12(sp),sp
   12850:	|  |  ,-- bra.s 1286a <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12852:	|  '--|-> moveq #28,d0
   12854:	|     |   add.l 20(sp),d0
   12858:	|     |   clr.l -(sp)
   1285a:	|     |   pea 1 <_start+0x1>
   1285e:	|     |   move.l d0,-(sp)
   12860:	|     |   jsr 15268 <setVariable>
   12866:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1286a:	|     '-> moveq #2,d0
}
   1286c:	'-------> lea 12(sp),sp
   12870:	          rts

00012872 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12872:	       lea -24(sp),sp
   12876:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12878:	       movea.l 36(sp),a0
   1287c:	       move.l 24(a0),d0
   12880:	       move.l d0,-(sp)
   12882:	       jsr 14f4c <getTextFromAnyVar>
   12888:	       addq.l #4,sp
   1288a:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   1288e:	       moveq #24,d0
   12890:	       add.l 36(sp),d0
   12894:	       move.l d0,-(sp)
   12896:	       jsr 152fa <trimStack>
   1289c:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   1289e:	       move.l 24(sp),-(sp)
   128a2:	       jsr 2fe <encodeFilename>
   128a8:	       addq.l #4,sp
   128aa:	       move.l d0,20(sp)
    FreeVec(namNormal);
   128ae:	       move.l 24(sp),16(sp)
   128b4:	       move.l 1cca4 <SysBase>,d0
   128ba:	       movea.l d0,a6
   128bc:	       movea.l 16(sp),a1
   128c0:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   128c4:	       move.l 20(sp),-(sp)
   128c8:	       jsr e476 <failSecurityCheck>
   128ce:	       addq.l #4,sp
   128d0:	       tst.w d0
   128d2:	   ,-- beq.s 128d8 <builtIn_deleteFile+0x66>
   128d4:	   |   moveq #1,d0
   128d6:	,--|-- bra.s 12926 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   128d8:	|  '-> move.l 20(sp),12(sp)
   128de:	|      move.l 1ccac <DOSBase>,d0
   128e4:	|      movea.l d0,a6
   128e6:	|      move.l 12(sp),d1
   128ea:	|      jsr -72(a6)
   128ee:	|      move.l d0,8(sp)
   128f2:	|      move.l 8(sp),d1
   128f6:	|      moveq #28,d0
   128f8:	|      add.l 36(sp),d0
   128fc:	|      move.l d1,-(sp)
   128fe:	|      pea 1 <_start+0x1>
   12902:	|      move.l d0,-(sp)
   12904:	|      jsr 15268 <setVariable>
   1290a:	|      lea 12(sp),sp
    FreeVec(nam);
   1290e:	|      move.l 20(sp),4(sp)
   12914:	|      move.l 1cca4 <SysBase>,d0
   1291a:	|      movea.l d0,a6
   1291c:	|      movea.l 4(sp),a1
   12920:	|      jsr -690(a6)

    return BR_CONTINUE;
   12924:	|      moveq #2,d0
}
   12926:	'----> movea.l (sp)+,a6
   12928:	       lea 24(sp),sp
   1292c:	       rts

0001292e <builtIn_renameFile>:

builtIn(renameFile)
{
   1292e:	       lea -40(sp),sp
   12932:	       move.l a6,-(sp)
   12934:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12936:	       movea.l 56(sp),a0
   1293a:	       move.l 24(a0),d0
   1293e:	       move.l d0,-(sp)
   12940:	       jsr 14f4c <getTextFromAnyVar>
   12946:	       addq.l #4,sp
   12948:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1294c:	       move.l 44(sp),-(sp)
   12950:	       jsr 2fe <encodeFilename>
   12956:	       addq.l #4,sp
   12958:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1295c:	       moveq #24,d0
   1295e:	       add.l 56(sp),d0
   12962:	       move.l d0,-(sp)
   12964:	       jsr 152fa <trimStack>
   1296a:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1296c:	       move.l 40(sp),-(sp)
   12970:	       jsr e476 <failSecurityCheck>
   12976:	       addq.l #4,sp
   12978:	       tst.w d0
   1297a:	   ,-- beq.s 12982 <builtIn_renameFile+0x54>
   1297c:	   |   moveq #1,d0
   1297e:	,--|-- bra.w 12a68 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12982:	|  '-> move.l 44(sp),36(sp)
   12988:	|      move.l 1cca4 <SysBase>,d0
   1298e:	|      movea.l d0,a6
   12990:	|      movea.l 36(sp),a1
   12994:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12998:	|      movea.l 56(sp),a0
   1299c:	|      move.l 24(a0),d0
   129a0:	|      move.l d0,-(sp)
   129a2:	|      jsr 14f4c <getTextFromAnyVar>
   129a8:	|      addq.l #4,sp
   129aa:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   129ae:	|      move.l 44(sp),-(sp)
   129b2:	|      jsr 2fe <encodeFilename>
   129b8:	|      addq.l #4,sp
   129ba:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   129be:	|      moveq #24,d0
   129c0:	|      add.l 56(sp),d0
   129c4:	|      move.l d0,-(sp)
   129c6:	|      jsr 152fa <trimStack>
   129cc:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   129ce:	|      move.l 32(sp),-(sp)
   129d2:	|      jsr e476 <failSecurityCheck>
   129d8:	|      addq.l #4,sp
   129da:	|      tst.w d0
   129dc:	|  ,-- beq.s 129e4 <builtIn_renameFile+0xb6>
   129de:	|  |   moveq #1,d0
   129e0:	+--|-- bra.w 12a68 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   129e4:	|  '-> move.l 44(sp),28(sp)
   129ea:	|      move.l 1cca4 <SysBase>,d0
   129f0:	|      movea.l d0,a6
   129f2:	|      movea.l 28(sp),a1
   129f6:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   129fa:	|      move.l 32(sp),24(sp)
   12a00:	|      move.l 40(sp),20(sp)
   12a06:	|      move.l 1ccac <DOSBase>,d0
   12a0c:	|      movea.l d0,a6
   12a0e:	|      move.l 24(sp),d1
   12a12:	|      move.l 20(sp),d2
   12a16:	|      jsr -78(a6)
   12a1a:	|      move.l d0,16(sp)
   12a1e:	|      move.l 16(sp),d1
   12a22:	|      moveq #28,d0
   12a24:	|      add.l 56(sp),d0
   12a28:	|      move.l d1,-(sp)
   12a2a:	|      pea 1 <_start+0x1>
   12a2e:	|      move.l d0,-(sp)
   12a30:	|      jsr 15268 <setVariable>
   12a36:	|      lea 12(sp),sp
	FreeVec(nam);
   12a3a:	|      move.l 32(sp),12(sp)
   12a40:	|      move.l 1cca4 <SysBase>,d0
   12a46:	|      movea.l d0,a6
   12a48:	|      movea.l 12(sp),a1
   12a4c:	|      jsr -690(a6)
	FreeVec(newnam);
   12a50:	|      move.l 40(sp),8(sp)
   12a56:	|      move.l 1cca4 <SysBase>,d0
   12a5c:	|      movea.l d0,a6
   12a5e:	|      movea.l 8(sp),a1
   12a62:	|      jsr -690(a6)

	return BR_CONTINUE;
   12a66:	|      moveq #2,d0
}
   12a68:	'----> move.l (sp)+,d2
   12a6a:	       movea.l (sp)+,a6
   12a6c:	       lea 40(sp),sp
   12a70:	       rts

00012a72 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12a72:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a74:	       movea.l 12(sp),a0
   12a78:	       move.l 24(a0),d0
   12a7c:	       move.l d0,-(sp)
   12a7e:	       pea 5 <_start+0x5>
   12a82:	       move.l sp,d0
   12a84:	       addq.l #8,d0
   12a86:	       move.l d0,-(sp)
   12a88:	       jsr 14976 <getValueType>
   12a8e:	       lea 12(sp),sp
   12a92:	       tst.w d0
   12a94:	   ,-- bne.s 12a9a <builtIn_cacheSound+0x28>
   12a96:	   |   moveq #1,d0
   12a98:	,--|-- bra.s 12ac2 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12a9a:	|  '-> moveq #24,d0
   12a9c:	|      add.l 12(sp),d0
   12aa0:	|      move.l d0,-(sp)
   12aa2:	|      jsr 152fa <trimStack>
   12aa8:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12aaa:	|      move.l (sp),d0
   12aac:	|      move.l d0,-(sp)
   12aae:	|      jsr d2b4 <cacheSound>
   12ab4:	|      addq.l #4,sp
   12ab6:	|      moveq #-1,d1
   12ab8:	|      cmp.l d0,d1
   12aba:	|  ,-- bne.s 12ac0 <builtIn_cacheSound+0x4e>
   12abc:	|  |   moveq #1,d0
   12abe:	+--|-- bra.s 12ac2 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12ac0:	|  '-> moveq #2,d0
}
   12ac2:	'----> addq.l #4,sp
   12ac4:	       rts

00012ac6 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12ac6:	pea 19f04 <talk.c.490538ff+0xc1>
   12acc:	jsr 17456 <KPrintF>
   12ad2:	addq.l #4,sp
	return BR_CONTINUE;
   12ad4:	moveq #2,d0
}
   12ad6:	rts

00012ad8 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12ad8:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12adc:	          movea.l 20(sp),a0
   12ae0:	          move.l 24(a0),d0
   12ae4:	          move.l d0,-(sp)
   12ae6:	          pea 1 <_start+0x1>
   12aea:	          moveq #12,d0
   12aec:	          add.l sp,d0
   12aee:	          move.l d0,-(sp)
   12af0:	          jsr 14976 <getValueType>
   12af6:	          lea 12(sp),sp
   12afa:	          tst.w d0
   12afc:	      ,-- bne.s 12b04 <builtIn_setCharacterSpinSpeed+0x2c>
   12afe:	      |   moveq #1,d0
   12b00:	,-----|-- bra.w 12b9e <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12b04:	|     '-> moveq #24,d0
   12b06:	|         add.l 20(sp),d0
   12b0a:	|         move.l d0,-(sp)
   12b0c:	|         jsr 152fa <trimStack>
   12b12:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b14:	|         movea.l 20(sp),a0
   12b18:	|         move.l 24(a0),d0
   12b1c:	|         move.l d0,-(sp)
   12b1e:	|         pea 7 <_start+0x7>
   12b22:	|         lea 8(sp),a0
   12b26:	|         move.l a0,-(sp)
   12b28:	|         jsr 14976 <getValueType>
   12b2e:	|         lea 12(sp),sp
   12b32:	|         tst.w d0
   12b34:	|     ,-- bne.s 12b3a <builtIn_setCharacterSpinSpeed+0x62>
   12b36:	|     |   moveq #1,d0
   12b38:	+-----|-- bra.s 12b9e <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12b3a:	|     '-> moveq #24,d0
   12b3c:	|         add.l 20(sp),d0
   12b40:	|         move.l d0,-(sp)
   12b42:	|         jsr 152fa <trimStack>
   12b48:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12b4a:	|         move.l (sp),d0
   12b4c:	|         move.l d0,-(sp)
   12b4e:	|         jsr a71c <findPerson>
   12b54:	|         addq.l #4,sp
   12b56:	|         move.l d0,8(sp)

	if (thisPerson) {
   12b5a:	|  ,----- beq.s 12b84 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12b5c:	|  |      move.l 4(sp),d0
   12b60:	|  |      movea.l 8(sp),a0
   12b64:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12b68:	|  |      moveq #28,d0
   12b6a:	|  |      add.l 20(sp),d0
   12b6e:	|  |      pea 1 <_start+0x1>
   12b72:	|  |      pea 1 <_start+0x1>
   12b76:	|  |      move.l d0,-(sp)
   12b78:	|  |      jsr 15268 <setVariable>
   12b7e:	|  |      lea 12(sp),sp
   12b82:	|  |  ,-- bra.s 12b9c <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12b84:	|  '--|-> moveq #28,d0
   12b86:	|     |   add.l 20(sp),d0
   12b8a:	|     |   clr.l -(sp)
   12b8c:	|     |   pea 1 <_start+0x1>
   12b90:	|     |   move.l d0,-(sp)
   12b92:	|     |   jsr 15268 <setVariable>
   12b98:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b9c:	|     '-> moveq #2,d0
}
   12b9e:	'-------> lea 12(sp),sp
   12ba2:	          rts

00012ba4 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12ba4:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ba8:	          movea.l 20(sp),a0
   12bac:	          move.l 24(a0),d0
   12bb0:	          move.l d0,-(sp)
   12bb2:	          pea 1 <_start+0x1>
   12bb6:	          moveq #12,d0
   12bb8:	          add.l sp,d0
   12bba:	          move.l d0,-(sp)
   12bbc:	          jsr 14976 <getValueType>
   12bc2:	          lea 12(sp),sp
   12bc6:	          tst.w d0
   12bc8:	      ,-- bne.s 12bd0 <builtIn_setCharacterAngleOffset+0x2c>
   12bca:	      |   moveq #1,d0
   12bcc:	,-----|-- bra.w 12c6a <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12bd0:	|     '-> moveq #24,d0
   12bd2:	|         add.l 20(sp),d0
   12bd6:	|         move.l d0,-(sp)
   12bd8:	|         jsr 152fa <trimStack>
   12bde:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12be0:	|         movea.l 20(sp),a0
   12be4:	|         move.l 24(a0),d0
   12be8:	|         move.l d0,-(sp)
   12bea:	|         pea 7 <_start+0x7>
   12bee:	|         lea 8(sp),a0
   12bf2:	|         move.l a0,-(sp)
   12bf4:	|         jsr 14976 <getValueType>
   12bfa:	|         lea 12(sp),sp
   12bfe:	|         tst.w d0
   12c00:	|     ,-- bne.s 12c06 <builtIn_setCharacterAngleOffset+0x62>
   12c02:	|     |   moveq #1,d0
   12c04:	+-----|-- bra.s 12c6a <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12c06:	|     '-> moveq #24,d0
   12c08:	|         add.l 20(sp),d0
   12c0c:	|         move.l d0,-(sp)
   12c0e:	|         jsr 152fa <trimStack>
   12c14:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12c16:	|         move.l (sp),d0
   12c18:	|         move.l d0,-(sp)
   12c1a:	|         jsr a71c <findPerson>
   12c20:	|         addq.l #4,sp
   12c22:	|         move.l d0,8(sp)

	if (thisPerson) {
   12c26:	|  ,----- beq.s 12c50 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12c28:	|  |      move.l 4(sp),d0
   12c2c:	|  |      movea.l 8(sp),a0
   12c30:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12c34:	|  |      moveq #28,d0
   12c36:	|  |      add.l 20(sp),d0
   12c3a:	|  |      pea 1 <_start+0x1>
   12c3e:	|  |      pea 1 <_start+0x1>
   12c42:	|  |      move.l d0,-(sp)
   12c44:	|  |      jsr 15268 <setVariable>
   12c4a:	|  |      lea 12(sp),sp
   12c4e:	|  |  ,-- bra.s 12c68 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12c50:	|  '--|-> moveq #28,d0
   12c52:	|     |   add.l 20(sp),d0
   12c56:	|     |   clr.l -(sp)
   12c58:	|     |   pea 1 <_start+0x1>
   12c5c:	|     |   move.l d0,-(sp)
   12c5e:	|     |   jsr 15268 <setVariable>
   12c64:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12c68:	|     '-> moveq #2,d0
}
   12c6a:	'-------> lea 12(sp),sp
   12c6e:	          rts

00012c70 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12c70:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c72:	       movea.l 12(sp),a0
   12c76:	       move.l 24(a0),d0
   12c7a:	       move.l d0,-(sp)
   12c7c:	       pea 1 <_start+0x1>
   12c80:	       move.l sp,d0
   12c82:	       addq.l #8,d0
   12c84:	       move.l d0,-(sp)
   12c86:	       jsr 14976 <getValueType>
   12c8c:	       lea 12(sp),sp
   12c90:	       tst.w d0
   12c92:	   ,-- bne.s 12c98 <builtIn_transitionMode+0x28>
   12c94:	   |   moveq #1,d0
   12c96:	,--|-- bra.s 12cce <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12c98:	|  '-> move.l (sp),d0
   12c9a:	|      move.l d0,d0
   12c9c:	|      move.b d0,1cb72 <fadeMode>
	trimStack (&fun -> stack);
   12ca2:	|      moveq #24,d0
   12ca4:	|      add.l 12(sp),d0
   12ca8:	|      move.l d0,-(sp)
   12caa:	|      jsr 152fa <trimStack>
   12cb0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12cb2:	|      moveq #28,d0
   12cb4:	|      add.l 12(sp),d0
   12cb8:	|      pea 1 <_start+0x1>
   12cbc:	|      pea 1 <_start+0x1>
   12cc0:	|      move.l d0,-(sp)
   12cc2:	|      jsr 15268 <setVariable>
   12cc8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12ccc:	|      moveq #2,d0
}
   12cce:	'----> addq.l #4,sp
   12cd0:	       rts

00012cd2 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12cd2:	moveq #24,d0
   12cd4:	add.l 8(sp),d0
   12cd8:	move.l d0,-(sp)
   12cda:	jsr 152fa <trimStack>
   12ce0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12ce2:	moveq #28,d0
   12ce4:	add.l 8(sp),d0
   12ce8:	pea 1 <_start+0x1>
   12cec:	pea 1 <_start+0x1>
   12cf0:	move.l d0,-(sp)
   12cf2:	jsr 15268 <setVariable>
   12cf8:	lea 12(sp),sp
	return BR_CONTINUE;
   12cfc:	moveq #2,d0
}
   12cfe:	rts

00012d00 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12d00:	pea 19f2e <talk.c.490538ff+0xeb>
   12d06:	jsr 17456 <KPrintF>
   12d0c:	addq.l #4,sp
	return BR_CONTINUE;
   12d0e:	moveq #2,d0
}
   12d10:	rts

00012d12 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12d12:	       lea -16(sp),sp
   12d16:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12d18:	       movea.l 28(sp),a0
   12d1c:	       move.l 24(a0),d0
   12d20:	       move.l d0,-(sp)
   12d22:	       jsr 14f4c <getTextFromAnyVar>
   12d28:	       addq.l #4,sp
   12d2a:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12d2e:	   ,-- bne.s 12d36 <builtIn_saveCustomData+0x24>
   12d30:	   |   moveq #1,d0
   12d32:	,--|-- bra.w 12de8 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12d36:	|  '-> move.l 16(sp),-(sp)
   12d3a:	|      jsr 2fe <encodeFilename>
   12d40:	|      addq.l #4,sp
   12d42:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12d46:	|      move.l 16(sp),8(sp)
   12d4c:	|      move.l 1cca4 <SysBase>,d0
   12d52:	|      movea.l d0,a6
   12d54:	|      movea.l 8(sp),a1
   12d58:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12d5c:	|      move.l 12(sp),-(sp)
   12d60:	|      jsr e476 <failSecurityCheck>
   12d66:	|      addq.l #4,sp
   12d68:	|      tst.w d0
   12d6a:	|  ,-- beq.s 12d70 <builtIn_saveCustomData+0x5e>
   12d6c:	|  |   moveq #1,d0
   12d6e:	+--|-- bra.s 12de8 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12d70:	|  '-> moveq #24,d0
   12d72:	|      add.l 28(sp),d0
   12d76:	|      move.l d0,-(sp)
   12d78:	|      jsr 152fa <trimStack>
   12d7e:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12d80:	|      movea.l 28(sp),a0
   12d84:	|      movea.l 24(a0),a0
   12d88:	|      move.l (a0),d0
   12d8a:	|      moveq #6,d1
   12d8c:	|      cmp.l d0,d1
   12d8e:	|  ,-- beq.s 12da2 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12d90:	|  |   pea 19f5b <talk.c.490538ff+0x118>
   12d96:	|  |   jsr 17456 <KPrintF>
   12d9c:	|  |   addq.l #4,sp
		return BR_ERROR;
   12d9e:	|  |   moveq #1,d0
   12da0:	+--|-- bra.s 12de8 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12da2:	|  '-> movea.l 28(sp),a0
   12da6:	|      move.l 24(a0),d0
   12daa:	|      move.l d0,-(sp)
   12dac:	|      move.l 16(sp),-(sp)
   12db0:	|      jsr e0c6 <stackToFile>
   12db6:	|      addq.l #8,sp
   12db8:	|      tst.w d0
   12dba:	|  ,-- bne.s 12dc0 <builtIn_saveCustomData+0xae>
   12dbc:	|  |   moveq #1,d0
   12dbe:	+--|-- bra.s 12de8 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12dc0:	|  '-> moveq #24,d0
   12dc2:	|      add.l 28(sp),d0
   12dc6:	|      move.l d0,-(sp)
   12dc8:	|      jsr 152fa <trimStack>
   12dce:	|      addq.l #4,sp
	FreeVec(fileName);
   12dd0:	|      move.l 12(sp),4(sp)
   12dd6:	|      move.l 1cca4 <SysBase>,d0
   12ddc:	|      movea.l d0,a6
   12dde:	|      movea.l 4(sp),a1
   12de2:	|      jsr -690(a6)
	return BR_CONTINUE;
   12de6:	|      moveq #2,d0
}
   12de8:	'----> movea.l (sp)+,a6
   12dea:	       lea 16(sp),sp
   12dee:	       rts

00012df0 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12df0:	       lea -28(sp),sp
   12df4:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12df6:	       movea.l 40(sp),a0
   12dfa:	       move.l 24(a0),d0
   12dfe:	       move.l d0,-(sp)
   12e00:	       jsr 14f4c <getTextFromAnyVar>
   12e06:	       addq.l #4,sp
   12e08:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12e0c:	   ,-- bne.s 12e14 <builtIn_loadCustomData+0x24>
   12e0e:	   |   moveq #1,d0
   12e10:	,--|-- bra.w 12f10 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12e14:	|  '-> move.l 28(sp),-(sp)
   12e18:	|      jsr 2fe <encodeFilename>
   12e1e:	|      addq.l #4,sp
   12e20:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12e24:	|      move.l 28(sp),20(sp)
   12e2a:	|      move.l 1cca4 <SysBase>,d0
   12e30:	|      movea.l d0,a6
   12e32:	|      movea.l 20(sp),a1
   12e36:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12e3a:	|      move.l 24(sp),-(sp)
   12e3e:	|      jsr e476 <failSecurityCheck>
   12e44:	|      addq.l #4,sp
   12e46:	|      tst.w d0
   12e48:	|  ,-- beq.s 12e50 <builtIn_loadCustomData+0x60>
   12e4a:	|  |   moveq #1,d0
   12e4c:	+--|-- bra.w 12f10 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12e50:	|  '-> moveq #24,d0
   12e52:	|      add.l 40(sp),d0
   12e56:	|      move.l d0,-(sp)
   12e58:	|      jsr 152fa <trimStack>
   12e5e:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12e60:	|      moveq #28,d0
   12e62:	|      add.l 40(sp),d0
   12e66:	|      move.l d0,-(sp)
   12e68:	|      jsr 14bc4 <unlinkVar>
   12e6e:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12e70:	|      movea.l 40(sp),a0
   12e74:	|      moveq #6,d0
   12e76:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12e7a:	|      moveq #12,d0
   12e7c:	|      move.l d0,16(sp)
   12e80:	|      clr.l 12(sp)
   12e84:	|      move.l 1cca4 <SysBase>,d0
   12e8a:	|      movea.l d0,a6
   12e8c:	|      move.l 16(sp),d0
   12e90:	|      move.l 12(sp),d1
   12e94:	|      jsr -684(a6)
   12e98:	|      move.l d0,8(sp)
   12e9c:	|      move.l 8(sp),d0
   12ea0:	|      movea.l 40(sp),a0
   12ea4:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12ea8:	|      movea.l 40(sp),a0
   12eac:	|      move.l 32(a0),d0
   12eb0:	|  ,-- bne.s 12eb6 <builtIn_loadCustomData+0xc6>
   12eb2:	|  |   moveq #1,d0
   12eb4:	+--|-- bra.s 12f10 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12eb6:	|  '-> movea.l 40(sp),a0
   12eba:	|      movea.l 32(a0),a0
   12ebe:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12ec0:	|      movea.l 40(sp),a0
   12ec4:	|      movea.l 32(a0),a0
   12ec8:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12ecc:	|      movea.l 40(sp),a0
   12ed0:	|      movea.l 32(a0),a0
   12ed4:	|      moveq #1,d0
   12ed6:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12eda:	|      movea.l 40(sp),a0
   12ede:	|      move.l 32(a0),d0
   12ee2:	|      move.l d0,-(sp)
   12ee4:	|      move.l 28(sp),-(sp)
   12ee8:	|      jsr db00 <fileToStack>
   12eee:	|      addq.l #8,sp
   12ef0:	|      tst.w d0
   12ef2:	|  ,-- bne.s 12ef8 <builtIn_loadCustomData+0x108>
   12ef4:	|  |   moveq #1,d0
   12ef6:	+--|-- bra.s 12f10 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12ef8:	|  '-> move.l 24(sp),4(sp)
   12efe:	|      move.l 1cca4 <SysBase>,d0
   12f04:	|      movea.l d0,a6
   12f06:	|      movea.l 4(sp),a1
   12f0a:	|      jsr -690(a6)
	return BR_CONTINUE;
   12f0e:	|      moveq #2,d0
}
   12f10:	'----> movea.l (sp)+,a6
   12f12:	       lea 28(sp),sp
   12f16:	       rts

00012f18 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12f18:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f1a:	       movea.l 12(sp),a0
   12f1e:	       move.l 24(a0),d0
   12f22:	       move.l d0,-(sp)
   12f24:	       pea 1 <_start+0x1>
   12f28:	       move.l sp,d0
   12f2a:	       addq.l #8,d0
   12f2c:	       move.l d0,-(sp)
   12f2e:	       jsr 14976 <getValueType>
   12f34:	       lea 12(sp),sp
   12f38:	       tst.w d0
   12f3a:	   ,-- bne.s 12f40 <builtIn_setCustomEncoding+0x28>
   12f3c:	   |   moveq #1,d0
   12f3e:	,--|-- bra.s 12f76 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12f40:	|  '-> move.l (sp),d0
   12f42:	|      move.l d0,d0
   12f44:	|      move.w d0,1cd58 <saveEncoding>
	trimStack (&fun -> stack);
   12f4a:	|      moveq #24,d0
   12f4c:	|      add.l 12(sp),d0
   12f50:	|      move.l d0,-(sp)
   12f52:	|      jsr 152fa <trimStack>
   12f58:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12f5a:	|      moveq #28,d0
   12f5c:	|      add.l 12(sp),d0
   12f60:	|      pea 1 <_start+0x1>
   12f64:	|      pea 1 <_start+0x1>
   12f68:	|      move.l d0,-(sp)
   12f6a:	|      jsr 15268 <setVariable>
   12f70:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12f74:	|      moveq #2,d0
}
   12f76:	'----> addq.l #4,sp
   12f78:	       rts

00012f7a <builtIn_freeSound>:

builtIn(freeSound)
{
   12f7a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f7c:	       movea.l 12(sp),a0
   12f80:	       move.l 24(a0),d0
   12f84:	       move.l d0,-(sp)
   12f86:	       pea 5 <_start+0x5>
   12f8a:	       move.l sp,d0
   12f8c:	       addq.l #8,d0
   12f8e:	       move.l d0,-(sp)
   12f90:	       jsr 14976 <getValueType>
   12f96:	       lea 12(sp),sp
   12f9a:	       tst.w d0
   12f9c:	   ,-- bne.s 12fa2 <builtIn_freeSound+0x28>
   12f9e:	   |   moveq #1,d0
   12fa0:	,--|-- bra.s 12fc0 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12fa2:	|  '-> moveq #24,d0
   12fa4:	|      add.l 12(sp),d0
   12fa8:	|      move.l d0,-(sp)
   12faa:	|      jsr 152fa <trimStack>
   12fb0:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12fb2:	|      move.l (sp),d0
   12fb4:	|      move.l d0,-(sp)
   12fb6:	|      jsr d2b8 <huntKillFreeSound>
   12fbc:	|      addq.l #4,sp
	return BR_CONTINUE;
   12fbe:	|      moveq #2,d0
}
   12fc0:	'----> addq.l #4,sp
   12fc2:	       rts

00012fc4 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12fc4:	       lea -12(sp),sp
   12fc8:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fca:	       movea.l 24(sp),a0
   12fce:	       move.l 24(a0),d0
   12fd2:	       move.l d0,-(sp)
   12fd4:	       pea 1 <_start+0x1>
   12fd8:	       moveq #16,d0
   12fda:	       add.l sp,d0
   12fdc:	       move.l d0,-(sp)
   12fde:	       jsr 14976 <getValueType>
   12fe4:	       lea 12(sp),sp
   12fe8:	       tst.w d0
   12fea:	   ,-- bne.s 12ff2 <builtIn_parallaxAdd+0x2e>
   12fec:	   |   moveq #1,d0
   12fee:	,--|-- bra.w 130c6 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ff2:	|  '-> moveq #24,d0
   12ff4:	|      add.l 24(sp),d0
   12ff8:	|      move.l d0,-(sp)
   12ffa:	|      jsr 152fa <trimStack>
   13000:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13002:	|      movea.l 24(sp),a0
   13006:	|      move.l 24(a0),d0
   1300a:	|      move.l d0,-(sp)
   1300c:	|      pea 1 <_start+0x1>
   13010:	|      moveq #20,d0
   13012:	|      add.l sp,d0
   13014:	|      move.l d0,-(sp)
   13016:	|      jsr 14976 <getValueType>
   1301c:	|      lea 12(sp),sp
   13020:	|      tst.w d0
   13022:	|  ,-- bne.s 1302a <builtIn_parallaxAdd+0x66>
   13024:	|  |   moveq #1,d0
   13026:	+--|-- bra.w 130c6 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1302a:	|  '-> moveq #24,d0
   1302c:	|      add.l 24(sp),d0
   13030:	|      move.l d0,-(sp)
   13032:	|      jsr 152fa <trimStack>
   13038:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1303a:	|      movea.l 24(sp),a0
   1303e:	|      move.l 24(a0),d0
   13042:	|      move.l d0,-(sp)
   13044:	|      pea 5 <_start+0x5>
   13048:	|      lea 12(sp),a0
   1304c:	|      move.l a0,-(sp)
   1304e:	|      jsr 14976 <getValueType>
   13054:	|      lea 12(sp),sp
   13058:	|      tst.w d0
   1305a:	|  ,-- bne.s 13060 <builtIn_parallaxAdd+0x9c>
   1305c:	|  |   moveq #1,d0
   1305e:	+--|-- bra.s 130c6 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13060:	|  '-> moveq #24,d0
   13062:	|      add.l 24(sp),d0
   13066:	|      move.l d0,-(sp)
   13068:	|      jsr 152fa <trimStack>
   1306e:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   13070:	|      move.l 8(sp),d0
   13074:	|      move.l d0,d0
   13076:	|      moveq #0,d2
   13078:	|      move.w d0,d2
   1307a:	|      move.l 12(sp),d0
   1307e:	|      move.l d0,d0
   13080:	|      moveq #0,d1
   13082:	|      move.w d0,d1
   13084:	|      move.l 4(sp),d0
   13088:	|      move.l d0,d0
   1308a:	|      move.w d0,d0
   1308c:	|      andi.l #65535,d0
   13092:	|      move.l d2,-(sp)
   13094:	|      move.l d1,-(sp)
   13096:	|      move.l d0,-(sp)
   13098:	|      jsr d4de <loadParallax>
   1309e:	|      lea 12(sp),sp
   130a2:	|      tst.w d0
   130a4:	|  ,-- bne.s 130aa <builtIn_parallaxAdd+0xe6>
   130a6:	|  |   moveq #1,d0
   130a8:	+--|-- bra.s 130c6 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   130aa:	|  '-> moveq #28,d0
   130ac:	|      add.l 24(sp),d0
   130b0:	|      pea 1 <_start+0x1>
   130b4:	|      pea 1 <_start+0x1>
   130b8:	|      move.l d0,-(sp)
   130ba:	|      jsr 15268 <setVariable>
   130c0:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   130c4:	|      moveq #2,d0
}
   130c6:	'----> move.l (sp)+,d2
   130c8:	       lea 12(sp),sp
   130cc:	       rts

000130ce <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   130ce:	jsr d416 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   130d4:	moveq #28,d0
   130d6:	add.l 8(sp),d0
   130da:	pea 1 <_start+0x1>
   130de:	pea 1 <_start+0x1>
   130e2:	move.l d0,-(sp)
   130e4:	jsr 15268 <setVariable>
   130ea:	lea 12(sp),sp
	return BR_CONTINUE;
   130ee:	moveq #2,d0
}
   130f0:	rts

000130f2 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   130f2:	pea 19f79 <talk.c.490538ff+0x136>
   130f8:	jsr 17456 <KPrintF>
   130fe:	addq.l #4,sp

	return BR_CONTINUE;
   13100:	moveq #2,d0
}
   13102:	rts

00013104 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   13104:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   13106:	             movea.l 16(sp),a0
   1310a:	             movea.l 24(a0),a0
   1310e:	             move.l (a0),d0
   13110:	             moveq #1,d1
   13112:	             cmp.l d0,d1
   13114:	      ,----- beq.s 1315c <builtIn_makeFastArray+0x58>
   13116:	      |      moveq #6,d1
   13118:	      |      cmp.l d0,d1
   1311a:	,-----|----- bne.s 1319a <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1311c:	|     |      movea.l 16(sp),a0
   13120:	|     |      movea.l 24(a0),a0
   13124:	|     |      move.l 4(a0),d1
   13128:	|     |      moveq #28,d0
   1312a:	|     |      add.l 16(sp),d0
   1312e:	|     |      move.l d1,-(sp)
   13130:	|     |      move.l d0,-(sp)
   13132:	|     |      jsr 14a28 <makeFastArrayFromStack>
   13138:	|     |      addq.l #8,sp
   1313a:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   1313e:	|     |      moveq #24,d0
   13140:	|     |      add.l 16(sp),d0
   13144:	|     |      move.l d0,-(sp)
   13146:	|     |      jsr 152fa <trimStack>
   1314c:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   1314e:	|     |      tst.w 6(sp)
   13152:	|     |  ,-- beq.s 13158 <builtIn_makeFastArray+0x54>
   13154:	|     |  |   moveq #2,d0
   13156:	|  ,--|--|-- bra.s 131ac <builtIn_makeFastArray+0xa8>
   13158:	|  |  |  '-> moveq #1,d0
   1315a:	|  +--|----- bra.s 131ac <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1315c:	|  |  '----> movea.l 16(sp),a0
   13160:	|  |         movea.l 24(a0),a0
   13164:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1316a:	|  |         moveq #24,d0
   1316c:	|  |         add.l 16(sp),d0
   13170:	|  |         move.l d0,-(sp)
   13172:	|  |         jsr 152fa <trimStack>
   13178:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1317a:	|  |         moveq #28,d0
   1317c:	|  |         add.l 16(sp),d0
   13180:	|  |         move.l 2(sp),-(sp)
   13184:	|  |         move.l d0,-(sp)
   13186:	|  |         jsr 14a92 <makeFastArraySize>
   1318c:	|  |         addq.l #8,sp
   1318e:	|  |         tst.w d0
   13190:	|  |     ,-- beq.s 13196 <builtIn_makeFastArray+0x92>
   13192:	|  |     |   moveq #2,d0
   13194:	|  +-----|-- bra.s 131ac <builtIn_makeFastArray+0xa8>
   13196:	|  |     '-> moveq #1,d0
   13198:	|  +-------- bra.s 131ac <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1319a:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1319c:	   |         pea 19fa2 <talk.c.490538ff+0x15f>
   131a2:	   |         jsr 17456 <KPrintF>
   131a8:	   |         addq.l #4,sp
	return BR_ERROR;
   131aa:	   |         moveq #1,d0
}
   131ac:	   '-------> addq.l #8,sp
   131ae:	             rts

000131b0 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   131b0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   131b2:	          movea.l 16(sp),a0
   131b6:	          move.l 24(a0),d0
   131ba:	          move.l d0,-(sp)
   131bc:	          pea 7 <_start+0x7>
   131c0:	          move.l sp,d0
   131c2:	          addq.l #8,d0
   131c4:	          move.l d0,-(sp)
   131c6:	          jsr 14976 <getValueType>
   131cc:	          lea 12(sp),sp
   131d0:	          tst.w d0
   131d2:	      ,-- bne.s 131d8 <builtIn_getCharacterScale+0x28>
   131d4:	      |   moveq #1,d0
   131d6:	,-----|-- bra.s 13252 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   131d8:	|     '-> moveq #24,d0
   131da:	|         add.l 16(sp),d0
   131de:	|         move.l d0,-(sp)
   131e0:	|         jsr 152fa <trimStack>
   131e6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   131e8:	|         move.l (sp),d0
   131ea:	|         move.l d0,-(sp)
   131ec:	|         jsr a71c <findPerson>
   131f2:	|         addq.l #4,sp
   131f4:	|         move.l d0,4(sp)
	if (pers) {
   131f8:	|  ,----- beq.s 13238 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   131fa:	|  |      movea.l 4(sp),a0
   131fe:	|  |      move.l 32(a0),d0
   13202:	|  |      move.l #1120403456,-(sp)
   13208:	|  |      move.l d0,-(sp)
   1320a:	|  |      jsr 1793a <__mulsf3>
   13210:	|  |      addq.l #8,sp
   13212:	|  |      move.l d0,-(sp)
   13214:	|  |      jsr 17820 <__fixsfsi>
   1321a:	|  |      addq.l #4,sp
   1321c:	|  |      move.l d0,d1
   1321e:	|  |      moveq #28,d0
   13220:	|  |      add.l 16(sp),d0
   13224:	|  |      move.l d1,-(sp)
   13226:	|  |      pea 1 <_start+0x1>
   1322a:	|  |      move.l d0,-(sp)
   1322c:	|  |      jsr 15268 <setVariable>
   13232:	|  |      lea 12(sp),sp
   13236:	|  |  ,-- bra.s 13250 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13238:	|  '--|-> moveq #28,d0
   1323a:	|     |   add.l 16(sp),d0
   1323e:	|     |   clr.l -(sp)
   13240:	|     |   pea 1 <_start+0x1>
   13244:	|     |   move.l d0,-(sp)
   13246:	|     |   jsr 15268 <setVariable>
   1324c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13250:	|     '-> moveq #2,d0
}
   13252:	'-------> addq.l #8,sp
   13254:	          rts

00013256 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   13256:	move.l 1cd7c <gameSettings>,d0
   1325c:	move.l d0,d1
   1325e:	moveq #28,d0
   13260:	add.l 8(sp),d0
   13264:	move.l d1,-(sp)
   13266:	pea 1 <_start+0x1>
   1326a:	move.l d0,-(sp)
   1326c:	jsr 15268 <setVariable>
   13272:	lea 12(sp),sp
	return BR_CONTINUE;
   13276:	moveq #2,d0
}
   13278:	rts

0001327a <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1327a:	moveq #24,d0
   1327c:	add.l 8(sp),d0
   13280:	move.l d0,-(sp)
   13282:	jsr 152fa <trimStack>
   13288:	addq.l #4,sp
	trimStack (&fun -> stack);
   1328a:	moveq #24,d0
   1328c:	add.l 8(sp),d0
   13290:	move.l d0,-(sp)
   13292:	jsr 152fa <trimStack>
   13298:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1329a:	moveq #28,d0
   1329c:	add.l 8(sp),d0
   132a0:	clr.l -(sp)
   132a2:	pea 1 <_start+0x1>
   132a6:	move.l d0,-(sp)
   132a8:	jsr 15268 <setVariable>
   132ae:	lea 12(sp),sp

	return BR_CONTINUE;
   132b2:	moveq #2,d0

}
   132b4:	rts

000132b6 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   132b6:	move.l 1c61c <lastFramesPerSecond>,d1
   132bc:	moveq #28,d0
   132be:	add.l 8(sp),d0
   132c2:	move.l d1,-(sp)
   132c4:	pea 1 <_start+0x1>
   132c8:	move.l d0,-(sp)
   132ca:	jsr 15268 <setVariable>
   132d0:	lea 12(sp),sp
	return BR_CONTINUE;
   132d4:	moveq #2,d0
}
   132d6:	rts

000132d8 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   132d8:	moveq #2,d0
}
   132da:	rts

000132dc <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   132dc:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   132e0:	          movea.l 60(sp),a0
   132e4:	          move.l 24(a0),d0
   132e8:	          move.l d0,-(sp)
   132ea:	          pea 1 <_start+0x1>
   132ee:	          pea 1cbae <thumbHeight>
   132f4:	          jsr 14976 <getValueType>
   132fa:	          lea 12(sp),sp
   132fe:	          tst.w d0
   13300:	      ,-- bne.s 13308 <builtIn_setThumbnailSize+0x2c>
   13302:	      |   moveq #1,d0
   13304:	,-----|-- bra.w 133c4 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13308:	|     '-> moveq #24,d0
   1330a:	|         add.l 60(sp),d0
   1330e:	|         move.l d0,-(sp)
   13310:	|         jsr 152fa <trimStack>
   13316:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13318:	|         movea.l 60(sp),a0
   1331c:	|         move.l 24(a0),d0
   13320:	|         move.l d0,-(sp)
   13322:	|         pea 1 <_start+0x1>
   13326:	|         pea 1cbaa <thumbWidth>
   1332c:	|         jsr 14976 <getValueType>
   13332:	|         lea 12(sp),sp
   13336:	|         tst.w d0
   13338:	|     ,-- bne.s 13340 <builtIn_setThumbnailSize+0x64>
   1333a:	|     |   moveq #1,d0
   1333c:	+-----|-- bra.w 133c4 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13340:	|     '-> moveq #24,d0
   13342:	|         add.l 60(sp),d0
   13346:	|         move.l d0,-(sp)
   13348:	|         jsr 152fa <trimStack>
   1334e:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13350:	|         move.l 1cbaa <thumbWidth>,d0
   13356:	|     ,-- bmi.s 13384 <builtIn_setThumbnailSize+0xa8>
   13358:	|     |   move.l 1cbae <thumbHeight>,d0
   1335e:	|     +-- bmi.s 13384 <builtIn_setThumbnailSize+0xa8>
   13360:	|     |   move.l 1cbaa <thumbWidth>,d0
   13366:	|     |   move.l d0,d1
   13368:	|     |   move.l 1cbf8 <winWidth>,d0
   1336e:	|     |   cmp.l d1,d0
   13370:	|     +-- bcs.s 13384 <builtIn_setThumbnailSize+0xa8>
   13372:	|     |   move.l 1cbae <thumbHeight>,d0
   13378:	|     |   move.l d0,d1
   1337a:	|     |   move.l 1cbfc <winHeight>,d0
   13380:	|     |   cmp.l d1,d0
   13382:	|  ,--|-- bcc.s 133c2 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13384:	|  |  '-> move.l 1cbae <thumbHeight>,d1
   1338a:	|  |      move.l 1cbaa <thumbWidth>,d0
   13390:	|  |      move.l d1,-(sp)
   13392:	|  |      move.l d0,-(sp)
   13394:	|  |      pea 19fc9 <talk.c.490538ff+0x186>
   1339a:	|  |      lea 14(sp),a0
   1339e:	|  |      move.l a0,-(sp)
   133a0:	|  |      jsr 14180 <sprintf>
   133a6:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   133aa:	|  |      lea 2(sp),a0
   133ae:	|  |      move.l a0,-(sp)
   133b0:	|  |      pea 19fd1 <talk.c.490538ff+0x18e>
   133b6:	|  |      jsr 17456 <KPrintF>
   133bc:	|  |      addq.l #8,sp
		return BR_ERROR;
   133be:	|  |      moveq #1,d0
   133c0:	+--|----- bra.s 133c4 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   133c2:	|  '----> moveq #2,d0
}
   133c4:	'-------> lea 52(sp),sp
   133c8:	          rts

000133ca <builtIn_hasFlag>:

builtIn(hasFlag)
{
   133ca:	       lea -12(sp),sp
   133ce:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   133d0:	       movea.l 24(sp),a0
   133d4:	       move.l 24(a0),d0
   133d8:	       move.l d0,-(sp)
   133da:	       pea 1 <_start+0x1>
   133de:	       lea 12(sp),a0
   133e2:	       move.l a0,-(sp)
   133e4:	       jsr 14976 <getValueType>
   133ea:	       lea 12(sp),sp
   133ee:	       tst.w d0
   133f0:	   ,-- bne.s 133f8 <builtIn_hasFlag+0x2e>
   133f2:	   |   moveq #1,d0
   133f4:	,--|-- bra.w 13488 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   133f8:	|  '-> moveq #24,d0
   133fa:	|      add.l 24(sp),d0
   133fe:	|      move.l d0,-(sp)
   13400:	|      jsr 152fa <trimStack>
   13406:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13408:	|      movea.l 24(sp),a0
   1340c:	|      move.l 24(a0),d0
   13410:	|      move.l d0,-(sp)
   13412:	|      pea 7 <_start+0x7>
   13416:	|      moveq #16,d0
   13418:	|      add.l sp,d0
   1341a:	|      move.l d0,-(sp)
   1341c:	|      jsr 14976 <getValueType>
   13422:	|      lea 12(sp),sp
   13426:	|      tst.w d0
   13428:	|  ,-- bne.s 1342e <builtIn_hasFlag+0x64>
   1342a:	|  |   moveq #1,d0
   1342c:	+--|-- bra.s 13488 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1342e:	|  '-> moveq #24,d0
   13430:	|      add.l 24(sp),d0
   13434:	|      move.l d0,-(sp)
   13436:	|      jsr 152fa <trimStack>
   1343c:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1343e:	|      move.l 8(sp),d0
   13442:	|      move.l d0,-(sp)
   13444:	|      jsr d68a <findObjectType>
   1344a:	|      addq.l #4,sp
   1344c:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13450:	|  ,-- bne.s 13456 <builtIn_hasFlag+0x8c>
   13452:	|  |   moveq #1,d0
   13454:	+--|-- bra.s 13488 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13456:	|  '-> movea.l 12(sp),a0
   1345a:	|      move.w 36(a0),d0
   1345e:	|      moveq #0,d2
   13460:	|      move.w d0,d2
   13462:	|      move.l 4(sp),d1
   13466:	|      moveq #1,d0
   13468:	|      lsl.l d1,d0
   1346a:	|      move.l d2,d1
   1346c:	|      and.l d0,d1
   1346e:	|      moveq #28,d0
   13470:	|      add.l 24(sp),d0
   13474:	|      move.l d1,-(sp)
   13476:	|      pea 1 <_start+0x1>
   1347a:	|      move.l d0,-(sp)
   1347c:	|      jsr 15268 <setVariable>
   13482:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13486:	|      moveq #2,d0
}
   13488:	'----> move.l (sp)+,d2
   1348a:	       lea 12(sp),sp
   1348e:	       rts

00013490 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13490:	       jsr d678 <snapshot>
   13496:	       tst.w d0
   13498:	,----- beq.s 1349e <builtIn_snapshotGrab+0xe>
   1349a:	|      moveq #2,d0
   1349c:	|  ,-- bra.s 134a0 <builtIn_snapshotGrab+0x10>
   1349e:	'--|-> moveq #1,d0
}
   134a0:	   '-> rts

000134a2 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   134a2:	jsr d524 <nosnapshot>
	return BR_CONTINUE;
   134a8:	moveq #2,d0
}
   134aa:	rts

000134ac <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   134ac:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   134ae:	move.w 1c4f4 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   134b6:	movea.l 12(sp),a0
   134ba:	move.l 24(a0),d0
   134be:	move.l d0,-(sp)
   134c0:	jsr 14eb6 <getBoolean>
   134c6:	addq.l #4,sp
   134c8:	move.w d0,1c4f4 <allowAnyFilename>
	trimStack (&fun -> stack);
   134ce:	moveq #24,d0
   134d0:	add.l 12(sp),d0
   134d4:	move.l d0,-(sp)
   134d6:	jsr 152fa <trimStack>
   134dc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   134de:	movea.w 2(sp),a0
   134e2:	moveq #28,d0
   134e4:	add.l 12(sp),d0
   134e8:	move.l a0,-(sp)
   134ea:	pea 1 <_start+0x1>
   134ee:	move.l d0,-(sp)
   134f0:	jsr 15268 <setVariable>
   134f6:	lea 12(sp),sp
	return BR_CONTINUE;
   134fa:	moveq #2,d0
}
   134fc:	addq.l #4,sp
   134fe:	rts

00013500 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13500:	moveq #24,d0
   13502:	add.l 8(sp),d0
   13506:	move.l d0,-(sp)
   13508:	jsr 152fa <trimStack>
   1350e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13510:	moveq #24,d0
   13512:	add.l 8(sp),d0
   13516:	move.l d0,-(sp)
   13518:	jsr 152fa <trimStack>
   1351e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13520:	moveq #28,d0
   13522:	add.l 8(sp),d0
   13526:	clr.l -(sp)
   13528:	pea 1 <_start+0x1>
   1352c:	move.l d0,-(sp)
   1352e:	jsr 15268 <setVariable>
   13534:	lea 12(sp),sp

	return BR_CONTINUE;
   13538:	moveq #2,d0
}
   1353a:	rts

0001353c <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1353c:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   1353e:	movea.l 12(sp),a0
   13542:	move.l 24(a0),d0
   13546:	move.l d0,-(sp)
   13548:	jsr 14f4c <getTextFromAnyVar>
   1354e:	addq.l #4,sp
   13550:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13552:	moveq #24,d0
   13554:	add.l 12(sp),d0
   13558:	move.l d0,-(sp)
   1355a:	jsr 152fa <trimStack>
   13560:	addq.l #4,sp
	KPrintF (mess);
   13562:	move.l (sp),-(sp)
   13564:	jsr 17456 <KPrintF>
   1356a:	addq.l #4,sp
	return BR_ERROR;
   1356c:	moveq #1,d0
}
   1356e:	addq.l #4,sp
   13570:	rts

00013572 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13572:	moveq #24,d0
   13574:	add.l 8(sp),d0
   13578:	move.l d0,-(sp)
   1357a:	jsr 152fa <trimStack>
   13580:	addq.l #4,sp
	trimStack (&fun -> stack);
   13582:	moveq #24,d0
   13584:	add.l 8(sp),d0
   13588:	move.l d0,-(sp)
   1358a:	jsr 152fa <trimStack>
   13590:	addq.l #4,sp
	trimStack (&fun -> stack);
   13592:	moveq #24,d0
   13594:	add.l 8(sp),d0
   13598:	move.l d0,-(sp)
   1359a:	jsr 152fa <trimStack>
   135a0:	addq.l #4,sp
	trimStack (&fun -> stack);
   135a2:	moveq #24,d0
   135a4:	add.l 8(sp),d0
   135a8:	move.l d0,-(sp)
   135aa:	jsr 152fa <trimStack>
   135b0:	addq.l #4,sp

	return BR_CONTINUE;
   135b2:	moveq #2,d0
}
   135b4:	rts

000135b6 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   135b6:	moveq #24,d0
   135b8:	add.l 8(sp),d0
   135bc:	move.l d0,-(sp)
   135be:	jsr 152fa <trimStack>
   135c4:	addq.l #4,sp
	trimStack (&fun -> stack);
   135c6:	moveq #24,d0
   135c8:	add.l 8(sp),d0
   135cc:	move.l d0,-(sp)
   135ce:	jsr 152fa <trimStack>
   135d4:	addq.l #4,sp
	trimStack (&fun -> stack);
   135d6:	moveq #24,d0
   135d8:	add.l 8(sp),d0
   135dc:	move.l d0,-(sp)
   135de:	jsr 152fa <trimStack>
   135e4:	addq.l #4,sp

	return BR_CONTINUE;
   135e6:	moveq #2,d0

}
   135e8:	rts

000135ea <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   135ea:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   135ec:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   135f2:	sne d0
   135f4:	neg.b d0
   135f6:	moveq #0,d1
   135f8:	move.b d0,d1
   135fa:	moveq #28,d0
   135fc:	add.l 12(sp),d0
   13600:	move.l d1,-(sp)
   13602:	pea 1 <_start+0x1>
   13606:	move.l d0,-(sp)
   13608:	jsr 15268 <setVariable>
   1360e:	lea 12(sp),sp
	return BR_CONTINUE;
   13612:	moveq #2,d0
}
   13614:	addq.l #4,sp
   13616:	rts

00013618 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13618:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1361a:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13620:	pea 19fe8 <talk.c.490538ff+0x1a5>
   13626:	jsr 17456 <KPrintF>
   1362c:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1362e:	tst.w 2(sp)
   13632:	sne d0
   13634:	neg.b d0
   13636:	moveq #0,d1
   13638:	move.b d0,d1
   1363a:	moveq #28,d0
   1363c:	add.l 12(sp),d0
   13640:	move.l d1,-(sp)
   13642:	pea 1 <_start+0x1>
   13646:	move.l d0,-(sp)
   13648:	jsr 15268 <setVariable>
   1364e:	lea 12(sp),sp
	return BR_CONTINUE;
   13652:	moveq #2,d0
}
   13654:	addq.l #4,sp
   13656:	rts

00013658 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   13658:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1365c:	             move.l 104(sp),d0
   13660:	             cmpi.l #166,d0
   13666:	,----------- bhi.w 13748 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   1366a:	|            move.l 104(sp),d0
   1366e:	|            add.l d0,d0
   13670:	|            movea.l d0,a1
   13672:	|            adda.l d0,a1
   13674:	|            lea 1c63a <paramNum>,a0
   1367a:	|            move.l (0,a1,a0.l),d0
   1367e:	|            moveq #-1,d1
   13680:	|            cmp.l d0,d1
   13682:	|  ,-------- beq.w 13710 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13686:	|  |         move.l 104(sp),d0
   1368a:	|  |         add.l d0,d0
   1368c:	|  |         movea.l d0,a1
   1368e:	|  |         adda.l d0,a1
   13690:	|  |         lea 1c63a <paramNum>,a0
   13696:	|  |         move.l (0,a1,a0.l),d0
   1369a:	|  |         cmp.l 108(sp),d0
   1369e:	|  +-------- beq.s 13710 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   136a0:	|  |         move.l 104(sp),d0
   136a4:	|  |         add.l d0,d0
   136a6:	|  |         movea.l d0,a1
   136a8:	|  |         adda.l d0,a1
   136aa:	|  |         lea 1c63a <paramNum>,a0
   136b0:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   136b4:	|  |         moveq #1,d1
   136b6:	|  |         cmp.l d0,d1
   136b8:	|  |  ,----- bne.s 136c2 <callBuiltIn+0x6a>
   136ba:	|  |  |      move.l #101484,d0
   136c0:	|  |  |  ,-- bra.s 136c8 <callBuiltIn+0x70>
   136c2:	|  |  '--|-> move.l #106526,d0
   136c8:	|  |     '-> move.l 104(sp),d1
   136cc:	|  |         add.l d1,d1
   136ce:	|  |         movea.l d1,a1
   136d0:	|  |         adda.l d1,a1
   136d2:	|  |         lea 1c63a <paramNum>,a0
   136d8:	|  |         move.l (0,a1,a0.l),d1
   136dc:	|  |         move.l d0,-(sp)
   136de:	|  |         move.l d1,-(sp)
   136e0:	|  |         pea 1a020 <talk.c.490538ff+0x1dd>
   136e6:	|  |         lea 12(sp),a0
   136ea:	|  |         move.l a0,-(sp)
   136ec:	|  |         jsr 14180 <sprintf>
   136f2:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   136f6:	|  |         movea.l sp,a0
   136f8:	|  |         move.l a0,-(sp)
   136fa:	|  |         jsr b8 <copyString>
   13700:	|  |         addq.l #4,sp
   13702:	|  |         move.l d0,-(sp)
   13704:	|  |         jsr 17456 <KPrintF>
   1370a:	|  |         addq.l #4,sp
				return BR_ERROR;
   1370c:	|  |         moveq #1,d0
   1370e:	|  |     ,-- bra.s 13758 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13710:	|  '-----|-> move.l 104(sp),d0
   13714:	|        |   add.l d0,d0
   13716:	|        |   movea.l d0,a1
   13718:	|        |   adda.l d0,a1
   1371a:	|        |   lea 1c8d6 <builtInFunctionArray>,a0
   13720:	|        |   move.l (0,a1,a0.l),d0
   13724:	+--------|-- beq.s 13748 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13726:	|        |   move.l 104(sp),d0
   1372a:	|        |   add.l d0,d0
   1372c:	|        |   movea.l d0,a1
   1372e:	|        |   adda.l d0,a1
   13730:	|        |   lea 1c8d6 <builtInFunctionArray>,a0
   13736:	|        |   movea.l (0,a1,a0.l),a0
   1373a:	|        |   move.l 112(sp),-(sp)
   1373e:	|        |   move.l 112(sp),-(sp)
   13742:	|        |   jsr (a0)
   13744:	|        |   addq.l #8,sp
   13746:	|        +-- bra.s 13758 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13748:	'--------|-> pea 1a04b <talk.c.490538ff+0x208>
   1374e:	         |   jsr 17456 <KPrintF>
   13754:	         |   addq.l #4,sp
	return BR_ERROR;
   13756:	         |   moveq #1,d0
}
   13758:	         '-> lea 100(sp),sp
   1375c:	             rts

0001375e <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   1375e:	          subq.l #8,sp
	int indexNum = -1;
   13760:	          moveq #-1,d0
   13762:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13766:	          clr.l (sp)
   13768:	   ,----- bra.s 1378e <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   1376a:	,--|----> move.l 1cd74 <languageTable>,d1
   13770:	|  |      move.l (sp),d0
   13772:	|  |      add.l d0,d0
   13774:	|  |      add.l d0,d0
   13776:	|  |      movea.l d1,a0
   13778:	|  |      adda.l d0,a0
   1377a:	|  |      move.l (a0),d0
   1377c:	|  |      move.l d0,d1
   1377e:	|  |      move.l 1cd7c <gameSettings>,d0
   13784:	|  |      cmp.l d1,d0
   13786:	|  |  ,-- bne.s 1378c <getLanguageForFileB+0x2e>
   13788:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1378c:	|  |  '-> addq.l #1,(sp)
   1378e:	|  '----> move.l 1cd80 <gameSettings+0x4>,d0
   13794:	|         cmp.l (sp),d0
   13796:	'-------- bcc.s 1376a <getLanguageForFileB+0xc>
	}

	return indexNum;
   13798:	          move.l 4(sp),d0
}
   1379c:	          addq.l #8,sp
   1379e:	          rts

000137a0 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   137a0:	          lea -20(sp),sp
   137a4:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   137a6:	          move.l 28(sp),-(sp)
   137aa:	          jsr 13e62 <strlen>
   137b0:	          addq.l #4,sp
   137b2:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   137b6:	          moveq #4,d0
   137b8:	          cmp.l 12(sp),d0
   137bc:	      ,-- bge.s 137e0 <getPrefsFilename+0x40>
   137be:	      |   move.l 12(sp),d0
   137c2:	      |   subq.l #4,d0
   137c4:	      |   movea.l 28(sp),a0
   137c8:	      |   adda.l d0,a0
   137ca:	      |   move.b (a0),d0
   137cc:	      |   cmpi.b #46,d0
   137d0:	      +-- bne.s 137e0 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   137d2:	      |   move.l 12(sp),d0
   137d6:	      |   subq.l #4,d0
   137d8:	      |   movea.l 28(sp),a0
   137dc:	      |   adda.l d0,a0
   137de:	      |   clr.b (a0)
	}

	char * f = filename;
   137e0:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   137e6:	          clr.l 20(sp)
   137ea:	   ,----- bra.s 13812 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   137ec:	,--|----> move.l 20(sp),d0
   137f0:	|  |      movea.l 28(sp),a0
   137f4:	|  |      adda.l d0,a0
   137f6:	|  |      move.b (a0),d0
   137f8:	|  |      cmpi.b #47,d0
   137fc:	|  |  ,-- bne.s 1380e <getPrefsFilename+0x6e>
   137fe:	|  |  |   move.l 20(sp),d0
   13802:	|  |  |   addq.l #1,d0
   13804:	|  |  |   move.l 28(sp),d1
   13808:	|  |  |   add.l d0,d1
   1380a:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1380e:	|  |  '-> addq.l #1,20(sp)
   13812:	|  '----> move.l 20(sp),d0
   13816:	|         cmp.l 12(sp),d0
   1381a:	'-------- blt.s 137ec <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1381c:	          pea 1a076 <talk.c.490538ff+0x233>
   13822:	          move.l 20(sp),-(sp)
   13826:	          jsr 13ea2 <joinStrings>
   1382c:	          addq.l #8,sp
   1382e:	          move.l d0,8(sp)

	FreeVec(filename);
   13832:	          move.l 28(sp),4(sp)
   13838:	          move.l 1cca4 <SysBase>,d0
   1383e:	          movea.l d0,a6
   13840:	          movea.l 4(sp),a1
   13844:	          jsr -690(a6)
	filename = NULL;
   13848:	          clr.l 28(sp)
	return joined;
   1384c:	          move.l 8(sp),d0
}
   13850:	          movea.l (sp)+,a6
   13852:	          lea 20(sp),sp
   13856:	          rts

00013858 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13858:	             lea -28(sp),sp
   1385c:	             move.l a6,-(sp)
   1385e:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13860:	             move.l 1cd80 <gameSettings+0x4>,d0
   13866:	             move.l d0,d1
   13868:	             addq.l #1,d1
   1386a:	             move.l d1,28(sp)
   1386e:	             clr.l 24(sp)
   13872:	             move.l 1cca4 <SysBase>,d0
   13878:	             movea.l d0,a6
   1387a:	             move.l 28(sp),d0
   1387e:	             move.l 24(sp),d1
   13882:	             jsr -684(a6)
   13886:	             move.l d0,20(sp)
   1388a:	             move.l 20(sp),d0
   1388e:	             move.l d0,1cd74 <languageTable>
    if( languageTable == 0) {
   13894:	             move.l 1cd74 <languageTable>,d0
   1389a:	         ,-- bne.s 138aa <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1389c:	         |   pea 1a07b <talk.c.490538ff+0x238>
   138a2:	         |   jsr 17456 <KPrintF>
   138a8:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   138aa:	         '-> move.l 1cd80 <gameSettings+0x4>,d0
   138b0:	             move.l d0,d1
   138b2:	             addq.l #1,d1
   138b4:	             move.l d1,16(sp)
   138b8:	             clr.l 12(sp)
   138bc:	             move.l 1cca4 <SysBase>,d0
   138c2:	             movea.l d0,a6
   138c4:	             move.l 16(sp),d0
   138c8:	             move.l 12(sp),d1
   138cc:	             jsr -684(a6)
   138d0:	             move.l d0,8(sp)
   138d4:	             move.l 8(sp),d0
   138d8:	             move.l d0,1cd78 <languageName>
	if( languageName == 0) {
   138de:	             move.l 1cd78 <languageName>,d0
   138e4:	         ,-- bne.s 138f4 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   138e6:	         |   pea 1a0b1 <talk.c.490538ff+0x26e>
   138ec:	         |   jsr 17456 <KPrintF>
   138f2:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   138f4:	         '-> clr.l 32(sp)
   138f8:	   ,-------- bra.s 13970 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   138fa:	,--|-------> tst.l 32(sp)
   138fe:	|  |  ,----- beq.s 1390e <makeLanguageTable+0xb6>
   13900:	|  |  |      move.l 40(sp),-(sp)
   13904:	|  |  |      jsr 6bc <get2bytes>
   1390a:	|  |  |      addq.l #4,sp
   1390c:	|  |  |  ,-- bra.s 13910 <makeLanguageTable+0xb8>
   1390e:	|  |  '--|-> moveq #0,d0
   13910:	|  |     '-> movea.l 1cd74 <languageTable>,a0
   13916:	|  |         move.l 32(sp),d1
   1391a:	|  |         add.l d1,d1
   1391c:	|  |         add.l d1,d1
   1391e:	|  |         adda.l d1,a0
   13920:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13922:	|  |         move.l 1cd78 <languageName>,d1
   13928:	|  |         move.l 32(sp),d0
   1392c:	|  |         add.l d0,d0
   1392e:	|  |         add.l d0,d0
   13930:	|  |         movea.l d1,a0
   13932:	|  |         adda.l d0,a0
   13934:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13936:	|  |         move.l 1cc4e <gameVersion>,d0
   1393c:	|  |         cmpi.l #511,d0
   13942:	|  |     ,-- ble.s 1396c <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13944:	|  |     |   move.l 1cd80 <gameSettings+0x4>,d0
   1394a:	|  |     +-- beq.s 1396c <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1394c:	|  |     |   move.l 1cd78 <languageName>,d1
   13952:	|  |     |   move.l 32(sp),d0
   13956:	|  |     |   add.l d0,d0
   13958:	|  |     |   add.l d0,d0
   1395a:	|  |     |   movea.l d1,a2
   1395c:	|  |     |   adda.l d0,a2
   1395e:	|  |     |   move.l 40(sp),-(sp)
   13962:	|  |     |   jsr b02 <readString>
   13968:	|  |     |   addq.l #4,sp
   1396a:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1396c:	|  |     '-> addq.l #1,32(sp)
   13970:	|  '-------> move.l 1cd80 <gameSettings+0x4>,d0
   13976:	|            cmp.l 32(sp),d0
   1397a:	'----------- bcc.w 138fa <makeLanguageTable+0xa2>
		}
	}
}
   1397e:	             nop
   13980:	             nop
   13982:	             movea.l (sp)+,a2
   13984:	             movea.l (sp)+,a6
   13986:	             lea 28(sp),sp
   1398a:	             rts

0001398c <readIniFile>:

void readIniFile (char * filename) {
   1398c:	                      lea -564(sp),sp
   13990:	                      move.l a6,-(sp)
   13992:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13994:	                      move.l 576(sp),-(sp)
   13998:	                      jsr b8 <copyString>
   1399e:	                      addq.l #4,sp
   139a0:	                      move.l d0,-(sp)
   139a2:	                      jsr 137a0 <getPrefsFilename>
   139a8:	                      addq.l #4,sp
   139aa:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   139ae:	                      move.l 562(sp),558(sp)
   139b4:	                      move.l #1005,554(sp)
   139bc:	                      move.l 1ccac <DOSBase>,d0
   139c2:	                      movea.l d0,a6
   139c4:	                      move.l 558(sp),d1
   139c8:	                      move.l 554(sp),d2
   139cc:	                      jsr -30(a6)
   139d0:	                      move.l d0,550(sp)
   139d4:	                      move.l 550(sp),d0
   139d8:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   139dc:	                      clr.l 1cd7c <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   139e2:	                      move.w #1,1cd84 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   139ea:	                      clr.l 1cd86 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   139f0:	                      moveq #1,d0
   139f2:	                      move.l d0,1cd8a <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   139f8:	                      clr.w 1cd8e <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   139fe:	                      clr.w 1cd90 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13a04:	                      clr.w 1cd92 <gameSettings+0x16>

	FreeVec(langName);
   13a0a:	                      move.l 562(sp),542(sp)
   13a10:	                      move.l 1cca4 <SysBase>,d0
   13a16:	                      movea.l d0,a6
   13a18:	                      movea.l 542(sp),a1
   13a1c:	                      jsr -690(a6)
	langName = NULL;
   13a20:	                      clr.l 562(sp)

	if (fp) {
   13a24:	                      tst.l 546(sp)
   13a28:	,-------------------- beq.w 13d06 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13a2c:	|                     move.l sp,d0
   13a2e:	|                     addi.l #265,d0
   13a34:	|                     move.l #257,d1
   13a3a:	|                     move.l d1,-(sp)
   13a3c:	|                     clr.l -(sp)
   13a3e:	|                     move.l d0,-(sp)
   13a40:	|                     jsr 173da <memset>
   13a46:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13a4a:	|                     move.l sp,d0
   13a4c:	|                     addq.l #8,d0
   13a4e:	|                     move.l #257,d1
   13a54:	|                     move.l d1,-(sp)
   13a56:	|                     clr.l -(sp)
   13a58:	|                     move.l d0,-(sp)
   13a5a:	|                     jsr 173da <memset>
   13a60:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13a64:	|                     clr.b 571(sp)
		char readChar = ' ';
   13a68:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13a6e:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13a74:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13a78:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13a7c:	|  ,----------------> move.l 546(sp),534(sp)
   13a82:	|  |                  move.l 1ccac <DOSBase>,d0
   13a88:	|  |                  movea.l d0,a6
   13a8a:	|  |                  move.l 534(sp),d1
   13a8e:	|  |                  jsr -306(a6)
   13a92:	|  |                  move.l d0,530(sp)
   13a96:	|  |                  move.l 530(sp),d0
   13a9a:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13a9e:	|  |                  moveq #-1,d1
   13aa0:	|  |                  cmp.l 538(sp),d1
   13aa4:	|  |           ,----- bne.s 13ab2 <readIniFile+0x126>
				readChar = '\n';
   13aa6:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13aac:	|  |           |      clr.w 568(sp)
   13ab0:	|  |           |  ,-- bra.s 13ab8 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13ab2:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13ab8:	|  |              '-> move.b 570(sp),d0
   13abc:	|  |                  ext.w d0
   13abe:	|  |                  movea.w d0,a0
   13ac0:	|  |                  moveq #61,d0
   13ac2:	|  |                  cmp.l a0,d0
   13ac4:	|  |     ,----------- beq.w 13c6e <readIniFile+0x2e2>
   13ac8:	|  |     |            moveq #61,d1
   13aca:	|  |     |            cmp.l a0,d1
   13acc:	|  |  ,--|----------- blt.w 13c7a <readIniFile+0x2ee>
   13ad0:	|  |  |  |            moveq #10,d0
   13ad2:	|  |  |  |            cmp.l a0,d0
   13ad4:	|  |  |  |        ,-- beq.s 13ade <readIniFile+0x152>
   13ad6:	|  |  |  |        |   moveq #13,d1
   13ad8:	|  |  |  |        |   cmp.l a0,d1
   13ada:	|  |  +--|--------|-- bne.w 13c7a <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13ade:	|  |  |  |        '-> tst.w 566(sp)
   13ae2:	|  |  |  |     ,----- beq.w 13c5c <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13ae6:	|  |  |  |     |      pea 1a0e5 <talk.c.490538ff+0x2a2>
   13aec:	|  |  |  |     |      move.l sp,d0
   13aee:	|  |  |  |     |      addi.l #269,d0
   13af4:	|  |  |  |     |      move.l d0,-(sp)
   13af6:	|  |  |  |     |      jsr 13e22 <strcmp>
   13afc:	|  |  |  |     |      addq.l #8,sp
   13afe:	|  |  |  |     |      tst.l d0
   13b00:	|  |  |  |     |  ,-- bne.s 13b1a <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13b02:	|  |  |  |     |  |   move.l sp,d0
   13b04:	|  |  |  |     |  |   addq.l #8,d0
   13b06:	|  |  |  |     |  |   move.l d0,-(sp)
   13b08:	|  |  |  |     |  |   jsr 13d12 <stringToInt>
   13b0e:	|  |  |  |     |  |   addq.l #4,sp
   13b10:	|  |  |  |     |  |   move.l d0,1cd7c <gameSettings>
   13b16:	|  |  |  |     +--|-- bra.w 13c5c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13b1a:	|  |  |  |     |  '-> pea 1a0ee <talk.c.490538ff+0x2ab>
   13b20:	|  |  |  |     |      move.l sp,d0
   13b22:	|  |  |  |     |      addi.l #269,d0
   13b28:	|  |  |  |     |      move.l d0,-(sp)
   13b2a:	|  |  |  |     |      jsr 13e22 <strcmp>
   13b30:	|  |  |  |     |      addq.l #8,sp
   13b32:	|  |  |  |     |      tst.l d0
   13b34:	|  |  |  |     |  ,-- bne.s 13b5a <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13b36:	|  |  |  |     |  |   move.l sp,d0
   13b38:	|  |  |  |     |  |   addq.l #8,d0
   13b3a:	|  |  |  |     |  |   move.l d0,-(sp)
   13b3c:	|  |  |  |     |  |   jsr 13d12 <stringToInt>
   13b42:	|  |  |  |     |  |   addq.l #4,sp
   13b44:	|  |  |  |     |  |   tst.l d0
   13b46:	|  |  |  |     |  |   seq d0
   13b48:	|  |  |  |     |  |   neg.b d0
   13b4a:	|  |  |  |     |  |   move.b d0,d0
   13b4c:	|  |  |  |     |  |   andi.w #255,d0
   13b50:	|  |  |  |     |  |   move.w d0,1cd84 <gameSettings+0x8>
   13b56:	|  |  |  |     +--|-- bra.w 13c5c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13b5a:	|  |  |  |     |  '-> pea 1a0f5 <talk.c.490538ff+0x2b2>
   13b60:	|  |  |  |     |      move.l sp,d0
   13b62:	|  |  |  |     |      addi.l #269,d0
   13b68:	|  |  |  |     |      move.l d0,-(sp)
   13b6a:	|  |  |  |     |      jsr 13e22 <strcmp>
   13b70:	|  |  |  |     |      addq.l #8,sp
   13b72:	|  |  |  |     |      tst.l d0
   13b74:	|  |  |  |     |  ,-- bne.s 13b8e <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13b76:	|  |  |  |     |  |   move.l sp,d0
   13b78:	|  |  |  |     |  |   addq.l #8,d0
   13b7a:	|  |  |  |     |  |   move.l d0,-(sp)
   13b7c:	|  |  |  |     |  |   jsr 13d12 <stringToInt>
   13b82:	|  |  |  |     |  |   addq.l #4,sp
   13b84:	|  |  |  |     |  |   move.l d0,1cd86 <gameSettings+0xa>
   13b8a:	|  |  |  |     +--|-- bra.w 13c5c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13b8e:	|  |  |  |     |  '-> pea 1a0fd <talk.c.490538ff+0x2ba>
   13b94:	|  |  |  |     |      move.l sp,d0
   13b96:	|  |  |  |     |      addi.l #269,d0
   13b9c:	|  |  |  |     |      move.l d0,-(sp)
   13b9e:	|  |  |  |     |      jsr 13e22 <strcmp>
   13ba4:	|  |  |  |     |      addq.l #8,sp
   13ba6:	|  |  |  |     |      tst.l d0
   13ba8:	|  |  |  |     |  ,-- bne.s 13bc2 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13baa:	|  |  |  |     |  |   move.l sp,d0
   13bac:	|  |  |  |     |  |   addq.l #8,d0
   13bae:	|  |  |  |     |  |   move.l d0,-(sp)
   13bb0:	|  |  |  |     |  |   jsr 13d12 <stringToInt>
   13bb6:	|  |  |  |     |  |   addq.l #4,sp
   13bb8:	|  |  |  |     |  |   move.l d0,1cd8a <gameSettings+0xe>
   13bbe:	|  |  |  |     +--|-- bra.w 13c5c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13bc2:	|  |  |  |     |  '-> pea 1a107 <talk.c.490538ff+0x2c4>
   13bc8:	|  |  |  |     |      move.l sp,d0
   13bca:	|  |  |  |     |      addi.l #269,d0
   13bd0:	|  |  |  |     |      move.l d0,-(sp)
   13bd2:	|  |  |  |     |      jsr 13e22 <strcmp>
   13bd8:	|  |  |  |     |      addq.l #8,sp
   13bda:	|  |  |  |     |      tst.l d0
   13bdc:	|  |  |  |     |  ,-- bne.s 13bf6 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13bde:	|  |  |  |     |  |   move.l sp,d0
   13be0:	|  |  |  |     |  |   addq.l #8,d0
   13be2:	|  |  |  |     |  |   move.l d0,-(sp)
   13be4:	|  |  |  |     |  |   jsr 13d12 <stringToInt>
   13bea:	|  |  |  |     |  |   addq.l #4,sp
   13bec:	|  |  |  |     |  |   move.l d0,d0
   13bee:	|  |  |  |     |  |   move.w d0,1cd8e <gameSettings+0x12>
   13bf4:	|  |  |  |     +--|-- bra.s 13c5c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13bf6:	|  |  |  |     |  '-> pea 1a113 <talk.c.490538ff+0x2d0>
   13bfc:	|  |  |  |     |      move.l sp,d0
   13bfe:	|  |  |  |     |      addi.l #269,d0
   13c04:	|  |  |  |     |      move.l d0,-(sp)
   13c06:	|  |  |  |     |      jsr 13e22 <strcmp>
   13c0c:	|  |  |  |     |      addq.l #8,sp
   13c0e:	|  |  |  |     |      tst.l d0
   13c10:	|  |  |  |     |  ,-- bne.s 13c2a <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13c12:	|  |  |  |     |  |   move.l sp,d0
   13c14:	|  |  |  |     |  |   addq.l #8,d0
   13c16:	|  |  |  |     |  |   move.l d0,-(sp)
   13c18:	|  |  |  |     |  |   jsr 13d12 <stringToInt>
   13c1e:	|  |  |  |     |  |   addq.l #4,sp
   13c20:	|  |  |  |     |  |   move.l d0,d0
   13c22:	|  |  |  |     |  |   move.w d0,1cd90 <gameSettings+0x14>
   13c28:	|  |  |  |     +--|-- bra.s 13c5c <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13c2a:	|  |  |  |     |  '-> pea 1a121 <talk.c.490538ff+0x2de>
   13c30:	|  |  |  |     |      move.l sp,d0
   13c32:	|  |  |  |     |      addi.l #269,d0
   13c38:	|  |  |  |     |      move.l d0,-(sp)
   13c3a:	|  |  |  |     |      jsr 13e22 <strcmp>
   13c40:	|  |  |  |     |      addq.l #8,sp
   13c42:	|  |  |  |     |      tst.l d0
   13c44:	|  |  |  |     +----- bne.s 13c5c <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13c46:	|  |  |  |     |      move.l sp,d0
   13c48:	|  |  |  |     |      addq.l #8,d0
   13c4a:	|  |  |  |     |      move.l d0,-(sp)
   13c4c:	|  |  |  |     |      jsr 13d12 <stringToInt>
   13c52:	|  |  |  |     |      addq.l #4,sp
   13c54:	|  |  |  |     |      move.l d0,d0
   13c56:	|  |  |  |     |      move.w d0,1cd92 <gameSettings+0x16>
					}
				}
				here = 0;
   13c5c:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13c60:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13c64:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13c68:	|  |  |  |            clr.b 8(sp)
				break;
   13c6c:	|  |  |  |  ,-------- bra.s 13ce4 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13c6e:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13c74:	|  |  |     |         clr.b 571(sp)
				break;
   13c78:	|  |  |     +-------- bra.s 13ce4 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13c7a:	|  |  '-----|-------> tst.w 566(sp)
   13c7e:	|  |        |  ,----- beq.s 13cb2 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13c80:	|  |        |  |      move.b 571(sp),d0
   13c84:	|  |        |  |      move.b d0,d1
   13c86:	|  |        |  |      addq.b #1,d1
   13c88:	|  |        |  |      move.b d1,571(sp)
   13c8c:	|  |        |  |      move.b d0,d0
   13c8e:	|  |        |  |      andi.l #255,d0
   13c94:	|  |        |  |      lea 572(sp),a0
   13c98:	|  |        |  |      adda.l d0,a0
   13c9a:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13ca0:	|  |        |  |      moveq #0,d0
   13ca2:	|  |        |  |      move.b 571(sp),d0
   13ca6:	|  |        |  |      lea 572(sp),a0
   13caa:	|  |        |  |      adda.l d0,a0
   13cac:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13cb0:	|  |        |  |  ,-- bra.s 13ce2 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13cb2:	|  |        |  '--|-> move.b 571(sp),d0
   13cb6:	|  |        |     |   move.b d0,d1
   13cb8:	|  |        |     |   addq.b #1,d1
   13cba:	|  |        |     |   move.b d1,571(sp)
   13cbe:	|  |        |     |   move.b d0,d0
   13cc0:	|  |        |     |   andi.l #255,d0
   13cc6:	|  |        |     |   lea 572(sp),a0
   13cca:	|  |        |     |   adda.l d0,a0
   13ccc:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13cd2:	|  |        |     |   moveq #0,d0
   13cd4:	|  |        |     |   move.b 571(sp),d0
   13cd8:	|  |        |     |   lea 572(sp),a0
   13cdc:	|  |        |     |   adda.l d0,a0
   13cde:	|  |        |     |   clr.b -307(a0)
				break;
   13ce2:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13ce4:	|  |        '-------> tst.w 568(sp)
   13ce8:	|  '----------------- bne.w 13a7c <readIniFile+0xf0>

		Close(fp);
   13cec:	|                     move.l 546(sp),526(sp)
   13cf2:	|                     move.l 1ccac <DOSBase>,d0
   13cf8:	|                     movea.l d0,a6
   13cfa:	|                     move.l 526(sp),d1
   13cfe:	|                     jsr -36(a6)
   13d02:	|                     move.l d0,522(sp)
	}
}
   13d06:	'-------------------> nop
   13d08:	                      move.l (sp)+,d2
   13d0a:	                      movea.l (sp)+,a6
   13d0c:	                      lea 564(sp),sp
   13d10:	                      rts

00013d12 <stringToInt>:

unsigned int stringToInt (char * s) {
   13d12:	             subq.l #8,sp
	int i = 0;
   13d14:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13d18:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13d1c:	,----------> movea.l 12(sp),a0
   13d20:	|            move.b (a0),d0
   13d22:	|            cmpi.b #47,d0
   13d26:	|        ,-- ble.s 13d5e <stringToInt+0x4c>
   13d28:	|        |   movea.l 12(sp),a0
   13d2c:	|        |   move.b (a0),d0
   13d2e:	|        |   cmpi.b #57,d0
   13d32:	|        +-- bgt.s 13d5e <stringToInt+0x4c>
			i *= 10;
   13d34:	|        |   move.l 4(sp),d1
   13d38:	|        |   move.l d1,d0
   13d3a:	|        |   add.l d0,d0
   13d3c:	|        |   add.l d0,d0
   13d3e:	|        |   add.l d1,d0
   13d40:	|        |   add.l d0,d0
   13d42:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13d46:	|        |   movea.l 12(sp),a0
   13d4a:	|        |   move.b (a0),d0
   13d4c:	|        |   ext.w d0
   13d4e:	|        |   movea.w d0,a0
   13d50:	|        |   moveq #-48,d0
   13d52:	|        |   add.l a0,d0
   13d54:	|        |   add.l d0,4(sp)
			s ++;
   13d58:	|        |   addq.l #1,12(sp)
   13d5c:	|  ,-----|-- bra.s 13d96 <stringToInt+0x84>
		} else if (*s == '-') {
   13d5e:	|  |     '-> movea.l 12(sp),a0
   13d62:	|  |         move.b (a0),d0
   13d64:	|  |         cmpi.b #45,d0
   13d68:	|  |     ,-- bne.s 13d82 <stringToInt+0x70>
			negative = ! negative;
   13d6a:	|  |     |   tst.w 2(sp)
   13d6e:	|  |     |   seq d0
   13d70:	|  |     |   neg.b d0
   13d72:	|  |     |   move.b d0,d0
   13d74:	|  |     |   andi.w #255,d0
   13d78:	|  |     |   move.w d0,2(sp)
			s++;
   13d7c:	|  |     |   addq.l #1,12(sp)
   13d80:	+--|-----|-- bra.s 13d1c <stringToInt+0xa>
		} else {
			if (negative)
   13d82:	|  |     '-> tst.w 2(sp)
   13d86:	|  |     ,-- beq.s 13d90 <stringToInt+0x7e>
				return -i;
   13d88:	|  |     |   move.l 4(sp),d0
   13d8c:	|  |     |   neg.l d0
   13d8e:	|  |  ,--|-- bra.s 13d98 <stringToInt+0x86>
			return i;
   13d90:	|  |  |  '-> move.l 4(sp),d0
   13d94:	|  |  +----- bra.s 13d98 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13d96:	'--'--|----X bra.s 13d1c <stringToInt+0xa>
		}
	}
   13d98:	      '----> addq.l #8,sp
   13d9a:	             rts

00013d9c <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13d9c:	    lea -28(sp),sp
   13da0:	    move.l a6,-(sp)
   13da2:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13da4:	    pea 1a12b <talk.c.490538ff+0x2e8>
   13daa:	    jsr 17456 <KPrintF>
   13db0:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13db2:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13db6:	    move.l 40(sp),30(sp)
   13dbc:	    move.l #1005,26(sp)
   13dc4:	    move.l 1ccac <DOSBase>,d0
   13dca:	    movea.l d0,a6
   13dcc:	    move.l 30(sp),d1
   13dd0:	    move.l 26(sp),d2
   13dd4:	    jsr -30(a6)
   13dd8:	    move.l d0,22(sp)
   13ddc:	    move.l 22(sp),d0
   13de0:	    move.l d0,18(sp)
	if (tester) {
   13de4:	,-- beq.s 13e14 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13de6:	|   pea 1a145 <talk.c.490538ff+0x302>
   13dec:	|   jsr 17456 <KPrintF>
   13df2:	|   addq.l #4,sp
		retval = 1;
   13df4:	|   move.b #1,35(sp)
		Close(tester);
   13dfa:	|   move.l 18(sp),14(sp)
   13e00:	|   move.l 1ccac <DOSBase>,d0
   13e06:	|   movea.l d0,a6
   13e08:	|   move.l 14(sp),d1
   13e0c:	|   jsr -36(a6)
   13e10:	|   move.l d0,10(sp)
	}
	return retval;
   13e14:	'-> move.b 35(sp),d0
   13e18:	    move.l (sp)+,d2
   13e1a:	    movea.l (sp)+,a6
   13e1c:	    lea 28(sp),sp
   13e20:	    rts

00013e22 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13e22:	   ,-- bra.s 13e2c <strcmp+0xa>
    {
        s1++;
   13e24:	,--|-> addq.l #1,4(sp)
        s2++;
   13e28:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13e2c:	|  '-> movea.l 4(sp),a0
   13e30:	|      move.b (a0),d0
   13e32:	|  ,-- beq.s 13e44 <strcmp+0x22>
   13e34:	|  |   movea.l 4(sp),a0
   13e38:	|  |   move.b (a0),d1
   13e3a:	|  |   movea.l 8(sp),a0
   13e3e:	|  |   move.b (a0),d0
   13e40:	|  |   cmp.b d1,d0
   13e42:	'--|-- beq.s 13e24 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13e44:	   '-> movea.l 4(sp),a0
   13e48:	       move.b (a0),d0
   13e4a:	       moveq #0,d1
   13e4c:	       move.b d0,d1
   13e4e:	       movea.l 8(sp),a0
   13e52:	       move.b (a0),d0
   13e54:	       move.b d0,d0
   13e56:	       andi.l #255,d0
   13e5c:	       sub.l d0,d1
   13e5e:	       move.l d1,d0
}
   13e60:	       rts

00013e62 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13e62:	       subq.l #4,sp
	long unsigned int i = 0;
   13e64:	       clr.l (sp)
	while(s[i]) i++; 
   13e66:	   ,-- bra.s 13e6a <strlen+0x8>
   13e68:	,--|-> addq.l #1,(sp)
   13e6a:	|  '-> movea.l 8(sp),a0
   13e6e:	|      adda.l (sp),a0
   13e70:	|      move.b (a0),d0
   13e72:	'----- bne.s 13e68 <strlen+0x6>
	return(i);
   13e74:	       move.l (sp),d0
}
   13e76:	       addq.l #4,sp
   13e78:	       rts

00013e7a <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13e7a:	    nop
   13e7c:	,-> move.l 8(sp),d0
   13e80:	|   move.l d0,d1
   13e82:	|   addq.l #1,d1
   13e84:	|   move.l d1,8(sp)
   13e88:	|   movea.l 4(sp),a0
   13e8c:	|   lea 1(a0),a1
   13e90:	|   move.l a1,4(sp)
   13e94:	|   movea.l d0,a1
   13e96:	|   move.b (a1),d0
   13e98:	|   move.b d0,(a0)
   13e9a:	|   move.b (a0),d0
   13e9c:	'-- bne.s 13e7c <strcpy+0x2>
}
   13e9e:	    nop
   13ea0:	    rts

00013ea2 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13ea2:	    lea -20(sp),sp
   13ea6:	    move.l a6,-(sp)
   13ea8:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13eaa:	    move.l 32(sp),-(sp)
   13eae:	    jsr 13e62 <strlen>
   13eb4:	    addq.l #4,sp
   13eb6:	    move.l d0,d2
   13eb8:	    move.l 36(sp),-(sp)
   13ebc:	    jsr 13e62 <strlen>
   13ec2:	    addq.l #4,sp
   13ec4:	    add.l d2,d0
   13ec6:	    move.l d0,d1
   13ec8:	    addq.l #1,d1
   13eca:	    move.l d1,20(sp)
   13ece:	    clr.l 16(sp)
   13ed2:	    move.l 1cca4 <SysBase>,d0
   13ed8:	    movea.l d0,a6
   13eda:	    move.l 20(sp),d0
   13ede:	    move.l 16(sp),d1
   13ee2:	    jsr -684(a6)
   13ee6:	    move.l d0,12(sp)
   13eea:	    move.l 12(sp),d0
   13eee:	    move.l d0,8(sp)
	char * t = newString;
   13ef2:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13ef8:	    nop
   13efa:	,-> move.l 32(sp),d0
   13efe:	|   move.l d0,d1
   13f00:	|   addq.l #1,d1
   13f02:	|   move.l d1,32(sp)
   13f06:	|   movea.l 24(sp),a0
   13f0a:	|   lea 1(a0),a1
   13f0e:	|   move.l a1,24(sp)
   13f12:	|   movea.l d0,a1
   13f14:	|   move.b (a1),d0
   13f16:	|   move.b d0,(a0)
   13f18:	|   move.b (a0),d0
   13f1a:	'-- bne.s 13efa <joinStrings+0x58>
	t--;
   13f1c:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13f20:	    nop
   13f22:	,-> move.l 36(sp),d0
   13f26:	|   move.l d0,d1
   13f28:	|   addq.l #1,d1
   13f2a:	|   move.l d1,36(sp)
   13f2e:	|   movea.l 24(sp),a0
   13f32:	|   lea 1(a0),a1
   13f36:	|   move.l a1,24(sp)
   13f3a:	|   movea.l d0,a1
   13f3c:	|   move.b (a1),d0
   13f3e:	|   move.b d0,(a0)
   13f40:	|   move.b (a0),d0
   13f42:	'-- bne.s 13f22 <joinStrings+0x80>

	return newString;
   13f44:	    move.l 8(sp),d0
}
   13f48:	    move.l (sp)+,d2
   13f4a:	    movea.l (sp)+,a6
   13f4c:	    lea 20(sp),sp
   13f50:	    rts

00013f52 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13f52:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13f56:	       moveq #10,d0
   13f58:	       cmp.l 28(sp),d0
   13f5c:	   ,-- bne.s 13f7a <itoa+0x28>
   13f5e:	   |   tst.l 20(sp)
   13f62:	   +-- bge.s 13f7a <itoa+0x28>
        *str++ = '-';
   13f64:	   |   move.l 24(sp),d0
   13f68:	   |   move.l d0,d1
   13f6a:	   |   addq.l #1,d1
   13f6c:	   |   move.l d1,24(sp)
   13f70:	   |   movea.l d0,a0
   13f72:	   |   move.b #45,(a0)
        value *= -1;
   13f76:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13f7a:	   '-> move.l 24(sp),12(sp)
   13f80:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13f86:	   ,-> move.l 20(sp),d0
   13f8a:	   |   move.l 28(sp),-(sp)
   13f8e:	   |   move.l d0,-(sp)
   13f90:	   |   jsr 17e8e <__modsi3>
   13f96:	   |   addq.l #8,sp
   13f98:	   |   movea.l d0,a1
   13f9a:	   |   move.l 12(sp),d0
   13f9e:	   |   move.l d0,d1
   13fa0:	   |   addq.l #1,d1
   13fa2:	   |   move.l d1,12(sp)
   13fa6:	   |   lea 1a15d <talk.c.490538ff+0x31a>,a0
   13fac:	   |   move.b (0,a1,a0.l),d1
   13fb0:	   |   movea.l d0,a0
   13fb2:	   |   move.b d1,(a0)
        value /= base;
   13fb4:	   |   move.l 28(sp),-(sp)
   13fb8:	   |   move.l 24(sp),-(sp)
   13fbc:	   |   jsr 17e60 <__divsi3>
   13fc2:	   |   addq.l #8,sp
   13fc4:	   |   move.l d0,20(sp)
    } while (value);
   13fc8:	   '-- bne.s 13f86 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13fca:	       move.l 12(sp),d0
   13fce:	       move.l d0,d1
   13fd0:	       subq.l #1,d1
   13fd2:	       move.l d1,12(sp)
   13fd6:	       movea.l d0,a0
   13fd8:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13fda:	       move.l 4(sp),8(sp)
   13fe0:	   ,-- bra.s 14006 <itoa+0xb4>
        char temp = *low;
   13fe2:	,--|-> movea.l 8(sp),a0
   13fe6:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13fea:	|  |   movea.l 12(sp),a0
   13fee:	|  |   move.b (a0),d0
   13ff0:	|  |   movea.l 8(sp),a0
   13ff4:	|  |   move.b d0,(a0)
        *ptr = temp;
   13ff6:	|  |   movea.l 12(sp),a0
   13ffa:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13ffe:	|  |   addq.l #1,8(sp)
   14002:	|  |   subq.l #1,12(sp)
   14006:	|  '-> move.l 8(sp),d0
   1400a:	|      cmp.l 12(sp),d0
   1400e:	'----- bcs.s 13fe2 <itoa+0x90>
    }
    return rc;
   14010:	       move.l 4(sp),d0
}
   14014:	       lea 16(sp),sp
   14018:	       rts

0001401a <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   1401a:	                            lea -40(sp),sp
   1401e:	                            move.l d2,-(sp)
    char* s = str;
   14020:	                            move.l 48(sp),40(sp)
    const char* p = format;
   14026:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   1402c:	   ,----------------------- bra.w 14160 <vsprintf2+0x146>
        if (*p == '%') {
   14030:	,--|----------------------> movea.l 36(sp),a0
   14034:	|  |                        move.b (a0),d0
   14036:	|  |                        cmpi.b #37,d0
   1403a:	|  |  ,-------------------- bne.w 14146 <vsprintf2+0x12c>
            switch (*++p) {
   1403e:	|  |  |                     addq.l #1,36(sp)
   14042:	|  |  |                     movea.l 36(sp),a0
   14046:	|  |  |                     move.b (a0),d0
   14048:	|  |  |                     ext.w d0
   1404a:	|  |  |                     movea.w d0,a0
   1404c:	|  |  |                     moveq #115,d0
   1404e:	|  |  |                     cmp.l a0,d0
   14050:	|  |  |           ,-------- beq.s 140c8 <vsprintf2+0xae>
   14052:	|  |  |           |         moveq #115,d1
   14054:	|  |  |           |         cmp.l a0,d1
   14056:	|  |  |  ,--------|-------- blt.w 1412e <vsprintf2+0x114>
   1405a:	|  |  |  |        |         moveq #99,d2
   1405c:	|  |  |  |        |         cmp.l a0,d2
   1405e:	|  |  |  |  ,-----|-------- beq.w 14106 <vsprintf2+0xec>
   14062:	|  |  |  |  |     |         moveq #100,d0
   14064:	|  |  |  |  |     |         cmp.l a0,d0
   14066:	|  |  |  +--|-----|-------- bne.w 1412e <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   1406a:	|  |  |  |  |     |         addq.l #4,56(sp)
   1406e:	|  |  |  |  |     |         movea.l 56(sp),a0
   14072:	|  |  |  |  |     |         move.l (a0),d0
   14074:	|  |  |  |  |     |         move.l d0,d1
   14076:	|  |  |  |  |     |         subq.l #1,d1
   14078:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1407c:	|  |  |  |  |     |         pea a <_start+0xa>
   14080:	|  |  |  |  |     |         lea 8(sp),a0
   14084:	|  |  |  |  |     |         move.l a0,-(sp)
   14086:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   1408a:	|  |  |  |  |     |         jsr 13f52 <itoa>
   14090:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   14094:	|  |  |  |  |     |         lea 44(sp),a0
   14098:	|  |  |  |  |     |         lea -40(a0),a0
   1409c:	|  |  |  |  |     |         move.l a0,28(sp)
   140a0:	|  |  |  |  |     |     ,-- bra.s 140bc <vsprintf2+0xa2>
                        *s++ = *b;
   140a2:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   140a6:	|  |  |  |  |     |  |  |   move.l d0,d1
   140a8:	|  |  |  |  |     |  |  |   addq.l #1,d1
   140aa:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   140ae:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   140b2:	|  |  |  |  |     |  |  |   move.b (a0),d1
   140b4:	|  |  |  |  |     |  |  |   movea.l d0,a0
   140b6:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   140b8:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   140bc:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   140c0:	|  |  |  |  |     |  |      move.b (a0),d0
   140c2:	|  |  |  |  |     |  '----- bne.s 140a2 <vsprintf2+0x88>
                    }
                    break;
   140c4:	|  |  |  |  |  ,--|-------- bra.w 1415c <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   140c8:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   140cc:	|  |  |  |  |  |            movea.l 56(sp),a0
   140d0:	|  |  |  |  |  |            move.l (a0),d0
   140d2:	|  |  |  |  |  |            move.l d0,d1
   140d4:	|  |  |  |  |  |            subq.l #1,d1
   140d6:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   140da:	|  |  |  |  |  |        ,-- bra.s 140fc <vsprintf2+0xe2>
                        *s++ = *sval++;
   140dc:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   140e0:	|  |  |  |  |  |     |  |   move.l d1,d2
   140e2:	|  |  |  |  |  |     |  |   addq.l #1,d2
   140e4:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   140e8:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   140ec:	|  |  |  |  |  |     |  |   move.l d0,d2
   140ee:	|  |  |  |  |  |     |  |   addq.l #1,d2
   140f0:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   140f4:	|  |  |  |  |  |     |  |   movea.l d1,a0
   140f6:	|  |  |  |  |  |     |  |   move.b (a0),d1
   140f8:	|  |  |  |  |  |     |  |   movea.l d0,a0
   140fa:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   140fc:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   14100:	|  |  |  |  |  |     |      move.b (a0),d0
   14102:	|  |  |  |  |  |     '----- bne.s 140dc <vsprintf2+0xc2>
                    }
                    break;
   14104:	|  |  |  |  |  +----------- bra.s 1415c <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   14106:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   1410a:	|  |  |  |     |            movea.l 56(sp),a0
   1410e:	|  |  |  |     |            move.l (a0),d0
   14110:	|  |  |  |     |            move.l d0,d1
   14112:	|  |  |  |     |            subq.l #1,d1
   14114:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   14118:	|  |  |  |     |            move.l 40(sp),d0
   1411c:	|  |  |  |     |            move.l d0,d2
   1411e:	|  |  |  |     |            addq.l #1,d2
   14120:	|  |  |  |     |            move.l d2,40(sp)
   14124:	|  |  |  |     |            move.l 24(sp),d1
   14128:	|  |  |  |     |            movea.l d0,a0
   1412a:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1412c:	|  |  |  |     +----------- bra.s 1415c <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1412e:	|  |  |  '-----|----------> move.l 40(sp),d0
   14132:	|  |  |        |            move.l d0,d1
   14134:	|  |  |        |            addq.l #1,d1
   14136:	|  |  |        |            move.l d1,40(sp)
   1413a:	|  |  |        |            movea.l 36(sp),a0
   1413e:	|  |  |        |            move.b (a0),d1
   14140:	|  |  |        |            movea.l d0,a0
   14142:	|  |  |        |            move.b d1,(a0)
                    break;
   14144:	|  |  |        +----------- bra.s 1415c <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   14146:	|  |  '--------|----------> move.l 40(sp),d0
   1414a:	|  |           |            move.l d0,d1
   1414c:	|  |           |            addq.l #1,d1
   1414e:	|  |           |            move.l d1,40(sp)
   14152:	|  |           |            movea.l 36(sp),a0
   14156:	|  |           |            move.b (a0),d1
   14158:	|  |           |            movea.l d0,a0
   1415a:	|  |           |            move.b d1,(a0)
        }
        p++;
   1415c:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   14160:	|  '----------------------> movea.l 36(sp),a0
   14164:	|                           move.b (a0),d0
   14166:	'-------------------------- bne.w 14030 <vsprintf2+0x16>
    }
    *s = '\0';
   1416a:	                            movea.l 40(sp),a0
   1416e:	                            clr.b (a0)
    return s - str;
   14170:	                            move.l 40(sp),d0
   14174:	                            sub.l 48(sp),d0
}
   14178:	                            move.l (sp)+,d2
   1417a:	                            lea 40(sp),sp
   1417e:	                            rts

00014180 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   14180:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14182:	moveq #16,d0
   14184:	add.l sp,d0
   14186:	move.l d0,d1
   14188:	addq.l #4,d1
   1418a:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1418e:	move.l 16(sp),d0
   14192:	move.l 4(sp),-(sp)
   14196:	move.l d0,-(sp)
   14198:	move.l 20(sp),-(sp)
   1419c:	jsr 1401a <vsprintf2>
   141a2:	lea 12(sp),sp
   141a6:	move.l d0,(sp)
    va_end(args);
   141a8:	clr.l 4(sp)

    return done;
   141ac:	move.l (sp),d0
}
   141ae:	addq.l #8,sp
   141b0:	rts

000141b2 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   141b2:	       lea -20(sp),sp
   141b6:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   141b8:	       moveq #12,d0
   141ba:	       move.l d0,20(sp)
   141be:	       clr.l 16(sp)
   141c2:	       move.l 1cca4 <SysBase>,d0
   141c8:	       movea.l d0,a6
   141ca:	       move.l 20(sp),d0
   141ce:	       move.l 16(sp),d1
   141d2:	       jsr -684(a6)
   141d6:	       move.l d0,12(sp)
   141da:	       move.l 12(sp),d0
   141de:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   141e2:	   ,-- bne.s 141e8 <addVarToStack+0x36>
   141e4:	   |   clr.w d0
   141e6:	,--|-- bra.s 14230 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   141e8:	|  '-> move.l 8(sp),d0
   141ec:	|      move.l d0,-(sp)
   141ee:	|      move.l 32(sp),-(sp)
   141f2:	|      jsr 14d14 <copyMain>
   141f8:	|      addq.l #8,sp
   141fa:	|      tst.w d0
   141fc:	|  ,-- bne.s 14218 <addVarToStack+0x66>
        FreeVec(newStack);
   141fe:	|  |   move.l 8(sp),4(sp)
   14204:	|  |   move.l 1cca4 <SysBase>,d0
   1420a:	|  |   movea.l d0,a6
   1420c:	|  |   movea.l 4(sp),a1
   14210:	|  |   jsr -690(a6)
        return FALSE;
   14214:	|  |   clr.w d0
   14216:	+--|-- bra.s 14230 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14218:	|  '-> movea.l 32(sp),a0
   1421c:	|      move.l (a0),d0
   1421e:	|      movea.l 8(sp),a0
   14222:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14226:	|      movea.l 32(sp),a0
   1422a:	|      move.l 8(sp),(a0)
    return TRUE;
   1422e:	|      moveq #1,d0
}
   14230:	'----> movea.l (sp)+,a6
   14232:	       lea 20(sp),sp
   14236:	       rts

00014238 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14238:	       lea -16(sp),sp
   1423c:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1423e:	       moveq #12,d0
   14240:	       move.l d0,16(sp)
   14244:	       clr.l 12(sp)
   14248:	       move.l 1cca4 <SysBase>,d0
   1424e:	       movea.l d0,a6
   14250:	       move.l 16(sp),d0
   14254:	       move.l 12(sp),d1
   14258:	       jsr -684(a6)
   1425c:	       move.l d0,8(sp)
   14260:	       move.l 8(sp),d0
   14264:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   14268:	   ,-- bne.s 1426e <addVarToStackQuick+0x36>
   1426a:	   |   clr.w d0
   1426c:	,--|-- bra.s 142a4 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1426e:	|  '-> move.l 4(sp),d0
   14272:	|      pea 8 <_start+0x8>
   14276:	|      move.l 28(sp),-(sp)
   1427a:	|      move.l d0,-(sp)
   1427c:	|      jsr 1740a <memcpy>
   14282:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14286:	|      movea.l 24(sp),a0
   1428a:	|      clr.l (a0)

    newStack->next = *thisStack;
   1428c:	|      movea.l 28(sp),a0
   14290:	|      move.l (a0),d0
   14292:	|      movea.l 4(sp),a0
   14296:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1429a:	|      movea.l 28(sp),a0
   1429e:	|      move.l 4(sp),(a0)
    return TRUE;
   142a2:	|      moveq #1,d0
}
   142a4:	'----> movea.l (sp)+,a6
   142a6:	       lea 16(sp),sp
   142aa:	       rts

000142ac <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   142ac:	       lea -16(sp),sp
   142b0:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   142b2:	       movea.l 24(sp),a0
   142b6:	       move.l (a0),d0
   142b8:	       moveq #1,d1
   142ba:	       cmp.l d0,d1
   142bc:	   ,-- bne.s 142e6 <addVariablesInSecond+0x3a>
   142be:	   |   movea.l 28(sp),a0
   142c2:	   |   move.l (a0),d0
   142c4:	   |   moveq #1,d1
   142c6:	   |   cmp.l d0,d1
   142c8:	   +-- bne.s 142e6 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   142ca:	   |   movea.l 28(sp),a0
   142ce:	   |   move.l 4(a0),d1
   142d2:	   |   movea.l 24(sp),a0
   142d6:	   |   move.l 4(a0),d0
   142da:	   |   add.l d1,d0
   142dc:	   |   movea.l 28(sp),a0
   142e0:	   |   move.l d0,4(a0)
   142e4:	,--|-- bra.s 14360 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   142e6:	|  '-> move.l 24(sp),-(sp)
   142ea:	|      jsr 14f4c <getTextFromAnyVar>
   142f0:	|      addq.l #4,sp
   142f2:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   142f6:	|      move.l 28(sp),-(sp)
   142fa:	|      jsr 14f4c <getTextFromAnyVar>
   14300:	|      addq.l #4,sp
   14302:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14306:	|      move.l 28(sp),-(sp)
   1430a:	|      jsr 14bc4 <unlinkVar>
   14310:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14312:	|      move.l 12(sp),-(sp)
   14316:	|      move.l 20(sp),-(sp)
   1431a:	|      jsr 13ea2 <joinStrings>
   14320:	|      addq.l #8,sp
   14322:	|      movea.l 28(sp),a0
   14326:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1432a:	|      movea.l 28(sp),a0
   1432e:	|      moveq #3,d0
   14330:	|      move.l d0,(a0)
		FreeVec(string1);
   14332:	|      move.l 16(sp),8(sp)
   14338:	|      move.l 1cca4 <SysBase>,d0
   1433e:	|      movea.l d0,a6
   14340:	|      movea.l 8(sp),a1
   14344:	|      jsr -690(a6)
		FreeVec(string2);
   14348:	|      move.l 12(sp),4(sp)
   1434e:	|      move.l 1cca4 <SysBase>,d0
   14354:	|      movea.l d0,a6
   14356:	|      movea.l 4(sp),a1
   1435a:	|      jsr -690(a6)
	}
}
   1435e:	|      nop
   14360:	'----> nop
   14362:	       movea.l (sp)+,a6
   14364:	       lea 16(sp),sp
   14368:	       rts

0001436a <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1436a:	movea.l 8(sp),a0
   1436e:	move.l 4(a0),-(sp)
   14372:	move.l (a0),-(sp)
   14374:	movea.l 12(sp),a0
   14378:	move.l 4(a0),-(sp)
   1437c:	move.l (a0),-(sp)
   1437e:	jsr 143a0 <compareVars>
   14384:	lea 16(sp),sp
   14388:	move.l d0,-(sp)
   1438a:	pea 1 <_start+0x1>
   1438e:	move.l 16(sp),-(sp)
   14392:	jsr 15268 <setVariable>
   14398:	lea 12(sp),sp
}
   1439c:	nop
   1439e:	rts

000143a0 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   143a0:	       subq.l #4,sp
	int re = 0;
   143a2:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   143a4:	       move.l 8(sp),d1
   143a8:	       move.l 16(sp),d0
   143ac:	       cmp.l d1,d0
   143ae:	,----- bne.w 14476 <compareVars+0xd6>
		switch (var1.varType) {
   143b2:	|      move.l 8(sp),d0
   143b6:	|      moveq #9,d1
   143b8:	|      cmp.l d0,d1
   143ba:	|  ,-- bcs.w 1445e <compareVars+0xbe>
   143be:	|  |   add.l d0,d0
   143c0:	|  |   movea.l d0,a0
   143c2:	|  |   adda.l #82894,a0
   143c8:	|  |   move.w (a0),d0
   143ca:	|  |   jmp (143ce <compareVars+0x2e>,pc,d0.w)
   143ce:	|  |   ori.b #-112,(a4)
   143d2:	|  |   ori.l #5243024,(a0)
   143d8:	|  |   ori.l #7733392,(a0)
   143de:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   143e4:	|  |   move.l d0,(sp)
			break;
   143e6:	+--|-- bra.w 14476 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   143ea:	|  |   move.l 12(sp),d1
   143ee:	|  |   move.l 20(sp),d0
   143f2:	|  |   cmp.l d1,d0
   143f4:	|  |   seq d0
   143f6:	|  |   neg.b d0
   143f8:	|  |   move.b d0,d0
   143fa:	|  |   andi.l #255,d0
   14400:	|  |   move.l d0,(sp)
			break;
   14402:	+--|-- bra.s 14476 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14404:	|  |   move.l 12(sp),d1
   14408:	|  |   move.l 20(sp),d0
   1440c:	|  |   cmp.l d1,d0
   1440e:	|  |   seq d0
   14410:	|  |   neg.b d0
   14412:	|  |   move.b d0,d0
   14414:	|  |   andi.l #255,d0
   1441a:	|  |   move.l d0,(sp)
			break;
   1441c:	+--|-- bra.s 14476 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1441e:	|  |   move.l 20(sp),d1
   14422:	|  |   move.l 12(sp),d0
   14426:	|  |   move.l d1,-(sp)
   14428:	|  |   move.l d0,-(sp)
   1442a:	|  |   jsr 13e22 <strcmp>
   14430:	|  |   addq.l #8,sp
   14432:	|  |   tst.l d0
   14434:	|  |   seq d0
   14436:	|  |   neg.b d0
   14438:	|  |   move.b d0,d0
   1443a:	|  |   andi.l #255,d0
   14440:	|  |   move.l d0,(sp)
			break;
   14442:	+--|-- bra.s 14476 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14444:	|  |   move.l 12(sp),d1
   14448:	|  |   move.l 20(sp),d0
   1444c:	|  |   cmp.l d1,d0
   1444e:	|  |   seq d0
   14450:	|  |   neg.b d0
   14452:	|  |   move.b d0,d0
   14454:	|  |   andi.l #255,d0
   1445a:	|  |   move.l d0,(sp)
			break;
   1445c:	+--|-- bra.s 14476 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1445e:	|  '-> move.l 12(sp),d1
   14462:	|      move.l 20(sp),d0
   14466:	|      cmp.l d1,d0
   14468:	|      seq d0
   1446a:	|      neg.b d0
   1446c:	|      move.b d0,d0
   1446e:	|      andi.l #255,d0
   14474:	|      move.l d0,(sp)
		}
	}
	return re;
   14476:	'----> move.l (sp),d0
}
   14478:	       addq.l #4,sp
   1447a:	       rts

0001447c <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1447c:	             lea -16(sp),sp
   14480:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14482:	             movea.l 28(sp),a0
   14486:	             moveq #6,d0
   14488:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1448a:	             moveq #12,d0
   1448c:	             move.l d0,12(sp)
   14490:	             clr.l 8(sp)
   14494:	             move.l 1cca4 <SysBase>,d0
   1449a:	             movea.l d0,a6
   1449c:	             move.l 12(sp),d0
   144a0:	             move.l 8(sp),d1
   144a4:	             jsr -684(a6)
   144a8:	             move.l d0,4(sp)
   144ac:	             move.l 4(sp),d0
   144b0:	             movea.l 28(sp),a0
   144b4:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   144b8:	             movea.l 28(sp),a0
   144bc:	             move.l 4(a0),d0
   144c0:	         ,-- bne.s 144c8 <copyStack+0x4c>
   144c2:	         |   clr.w d0
   144c4:	,--------|-- bra.w 1454a <copyStack+0xce>
	to->varData.theStack->first = NULL;
   144c8:	|        '-> movea.l 28(sp),a0
   144cc:	|            movea.l 4(a0),a0
   144d0:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   144d2:	|            movea.l 28(sp),a0
   144d6:	|            movea.l 4(a0),a0
   144da:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   144de:	|            movea.l 28(sp),a0
   144e2:	|            movea.l 4(a0),a0
   144e6:	|            moveq #1,d0
   144e8:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   144ec:	|            movea.l 24(sp),a0
   144f0:	|            movea.l 4(a0),a0
   144f4:	|            move.l (a0),16(sp)

	while (a) {
   144f8:	|     ,----- bra.s 14542 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   144fa:	|  ,--|----> movea.l 28(sp),a0
   144fe:	|  |  |      move.l 4(a0),d0
   14502:	|  |  |      move.l d0,d1
   14504:	|  |  |      move.l 16(sp),d0
   14508:	|  |  |      move.l d1,-(sp)
   1450a:	|  |  |      move.l d0,-(sp)
   1450c:	|  |  |      jsr 141b2 <addVarToStack>
   14512:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14514:	|  |  |      movea.l 28(sp),a0
   14518:	|  |  |      movea.l 4(a0),a0
   1451c:	|  |  |      move.l 4(a0),d0
   14520:	|  |  |  ,-- bne.s 14538 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14522:	|  |  |  |   movea.l 28(sp),a0
   14526:	|  |  |  |   movea.l 4(a0),a1
   1452a:	|  |  |  |   movea.l 28(sp),a0
   1452e:	|  |  |  |   movea.l 4(a0),a0
   14532:	|  |  |  |   move.l (a1),d0
   14534:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14538:	|  |  |  '-> movea.l 16(sp),a0
   1453c:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14542:	|  |  '----> tst.l 16(sp)
   14546:	|  '-------- bne.s 144fa <copyStack+0x7e>
	}

	return TRUE;
   14548:	|            moveq #1,d0
}
   1454a:	'----------> movea.l (sp)+,a6
   1454c:	             lea 16(sp),sp
   14550:	             rts

00014552 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14552:	                lea -20(sp),sp
   14556:	                move.l a6,-(sp)
   14558:	                move.l 36(sp),d0
   1455c:	                move.w d0,d0
   1455e:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14562:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14568:	                clr.l 16(sp)

    while (*huntVar) {
   1456c:	   ,----------- bra.s 145ea <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   1456e:	,--|----------> movea.l 20(sp),a0
   14572:	|  |            movea.l (a0),a0
   14574:	|  |            movea.l 28(sp),a1
   14578:	|  |            move.l 4(a1),-(sp)
   1457c:	|  |            move.l (a1),-(sp)
   1457e:	|  |            move.l 4(a0),-(sp)
   14582:	|  |            move.l (a0),-(sp)
   14584:	|  |            jsr 143a0 <compareVars>
   1458a:	|  |            lea 16(sp),sp
   1458e:	|  |            tst.l d0
   14590:	|  |  ,-------- beq.s 145dc <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14592:	|  |  |         movea.l 20(sp),a0
   14596:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   1459a:	|  |  |         movea.l 12(sp),a0
   1459e:	|  |  |         move.l 8(a0),d0
   145a2:	|  |  |         movea.l 20(sp),a0
   145a6:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   145a8:	|  |  |         move.l 12(sp),d0
   145ac:	|  |  |         move.l d0,-(sp)
   145ae:	|  |  |         jsr 14bc4 <unlinkVar>
   145b4:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   145b6:	|  |  |         move.l 12(sp),8(sp)
   145bc:	|  |  |         move.l 1cca4 <SysBase>,d0
   145c2:	|  |  |         movea.l d0,a6
   145c4:	|  |  |         movea.l 8(sp),a1
   145c8:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   145cc:	|  |  |         tst.w 6(sp)
   145d0:	|  |  |     ,-- bne.s 145d6 <deleteVarFromStack+0x84>
   145d2:	|  |  |     |   moveq #1,d0
   145d4:	|  |  |  ,--|-- bra.s 145f8 <deleteVarFromStack+0xa6>
            reply++;
   145d6:	|  |  |  |  '-> addq.l #1,16(sp)
   145da:	|  +--|--|----- bra.s 145ea <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   145dc:	|  |  '--|----> movea.l 20(sp),a0
   145e0:	|  |     |      move.l (a0),d0
   145e2:	|  |     |      move.l d0,d1
   145e4:	|  |     |      addq.l #8,d1
   145e6:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   145ea:	|  '-----|----> movea.l 20(sp),a0
   145ee:	|        |      move.l (a0),d0
   145f0:	'--------|----- bne.w 1456e <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   145f4:	         |      move.l 16(sp),d0
}
   145f8:	         '----> movea.l (sp)+,a6
   145fa:	                lea 20(sp),sp
   145fe:	                rts

00014600 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14600:	       movea.l 4(sp),a0
   14604:	       move.l 4(a0),d0
   14608:	       cmp.l 8(sp),d0
   1460c:	   ,-- bhi.s 14612 <fastArrayGetByIndex+0x12>
   1460e:	   |   moveq #0,d0
   14610:	,--|-- bra.s 14620 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14612:	|  '-> movea.l 4(sp),a0
   14616:	|      move.l (a0),d1
   14618:	|      move.l 8(sp),d0
   1461c:	|      lsl.l #3,d0
   1461e:	|      add.l d1,d0
}
   14620:	'----> rts

00014622 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14622:	                lea -32(sp),sp
   14626:	                move.l a6,-(sp)
   14628:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1462a:	                clr.l 36(sp)

    switch (thisVar->varType) {
   1462e:	                movea.l 44(sp),a0
   14632:	                move.l (a0),d0
   14634:	                moveq #8,d1
   14636:	                cmp.l d0,d1
   14638:	            ,-- beq.s 14646 <getCostumeFromVar+0x24>
   1463a:	            |   moveq #9,d1
   1463c:	            |   cmp.l d0,d1
   1463e:	   ,--------|-- beq.w 146f4 <getCostumeFromVar+0xd2>
   14642:	,--|--------|-- bra.w 146fe <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14646:	|  |        '-> moveq #8,d0
   14648:	|  |            move.l d0,28(sp)
   1464c:	|  |            clr.l 24(sp)
   14650:	|  |            move.l 1cca4 <SysBase>,d0
   14656:	|  |            movea.l d0,a6
   14658:	|  |            move.l 28(sp),d0
   1465c:	|  |            move.l 24(sp),d1
   14660:	|  |            jsr -684(a6)
   14664:	|  |            move.l d0,20(sp)
   14668:	|  |            move.l 20(sp),d0
   1466c:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14670:	|  |        ,-- bne.s 14678 <getCostumeFromVar+0x56>
   14672:	|  |        |   moveq #0,d0
   14674:	|  |  ,-----|-- bra.w 14728 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14678:	|  |  |     '-> movea.l 36(sp),a0
   1467c:	|  |  |         moveq #1,d1
   1467e:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14682:	|  |  |         moveq #12,d0
   14684:	|  |  |         move.l d0,16(sp)
   14688:	|  |  |         clr.l 12(sp)
   1468c:	|  |  |         move.l 1cca4 <SysBase>,d0
   14692:	|  |  |         movea.l d0,a6
   14694:	|  |  |         move.l 16(sp),d0
   14698:	|  |  |         move.l 12(sp),d1
   1469c:	|  |  |         jsr -684(a6)
   146a0:	|  |  |         move.l d0,8(sp)
   146a4:	|  |  |         move.l 8(sp),d0
   146a8:	|  |  |         movea.l 36(sp),a0
   146ac:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   146ae:	|  |  |         movea.l 36(sp),a0
   146b2:	|  |  |         move.l (a0),d0
   146b4:	|  |  |     ,-- bne.s 146ba <getCostumeFromVar+0x98>
   146b6:	|  |  |     |   moveq #0,d0
   146b8:	|  |  +-----|-- bra.s 14728 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   146ba:	|  |  |     '-> clr.l 32(sp)
   146be:	|  |  |     ,-- bra.s 146ea <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   146c0:	|  |  |  ,--|-> movea.l 44(sp),a0
   146c4:	|  |  |  |  |   move.l 4(a0),d0
   146c8:	|  |  |  |  |   movea.l 36(sp),a0
   146cc:	|  |  |  |  |   movea.l (a0),a0
   146ce:	|  |  |  |  |   move.l 32(sp),d1
   146d2:	|  |  |  |  |   add.l d1,d1
   146d4:	|  |  |  |  |   add.l d1,d1
   146d6:	|  |  |  |  |   lea (0,a0,d1.l),a2
   146da:	|  |  |  |  |   move.l d0,-(sp)
   146dc:	|  |  |  |  |   jsr 962e <copyAnim>
   146e2:	|  |  |  |  |   addq.l #4,sp
   146e4:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   146e6:	|  |  |  |  |   addq.l #1,32(sp)
   146ea:	|  |  |  |  '-> moveq #2,d1
   146ec:	|  |  |  |      cmp.l 32(sp),d1
   146f0:	|  |  |  '----- bge.s 146c0 <getCostumeFromVar+0x9e>
            }
            break;
   146f2:	|  |  |     ,-- bra.s 14724 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   146f4:	|  '--|-----|-> movea.l 44(sp),a0
   146f8:	|     |     |   move.l 4(a0),d0
   146fc:	|     +-----|-- bra.s 14728 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   146fe:	'-----|-----|-> movea.l 44(sp),a0
   14702:	      |     |   move.l (a0),d0
   14704:	      |     |   add.l d0,d0
   14706:	      |     |   movea.l d0,a1
   14708:	      |     |   adda.l d0,a1
   1470a:	      |     |   lea 1cb74 <typeName>,a0
   14710:	      |     |   move.l (0,a1,a0.l),d0
   14714:	      |     |   move.l d0,-(sp)
   14716:	      |     |   pea 1a1cf <talk.c.490538ff+0x38c>
   1471c:	      |     |   jsr 17456 <KPrintF>
   14722:	      |     |   addq.l #8,sp
    }

    return p;
   14724:	      |     '-> move.l 36(sp),d0
}
   14728:	      '-------> movea.l (sp)+,a2
   1472a:	                movea.l (sp)+,a6
   1472c:	                lea 32(sp),sp
   14730:	                rts

00014732 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14732:	                lea -96(sp),sp
   14736:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1473a:	                move.l 116(sp),-(sp)
   1473e:	                pea 1a207 <talk.c.490538ff+0x3c4>
   14744:	                jsr 13ea2 <joinStrings>
   1474a:	                addq.l #8,sp
   1474c:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14750:	            ,-- bne.s 14758 <getSavedGamesStack+0x26>
   14752:	            |   clr.w d0
   14754:	,-----------|-- bra.w 1496c <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14758:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1475c:	|               move.l #107017,98(sp)
   14764:	|               moveq #-2,d0
   14766:	|               move.l d0,94(sp)
   1476a:	|               move.l 1ccac <DOSBase>,d0
   14770:	|               movea.l d0,a6
   14772:	|               move.l 98(sp),d1
   14776:	|               move.l 94(sp),d2
   1477a:	|               jsr -84(a6)
   1477e:	|               move.l d0,90(sp)
   14782:	|               move.l 90(sp),d0
   14786:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   1478a:	|           ,-- bne.s 14792 <getSavedGamesStack+0x60>
   1478c:	|           |   clr.w d0
   1478e:	+-----------|-- bra.w 1496c <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14792:	|           '-> move.l #260,82(sp)
   1479a:	|               move.l #65536,78(sp)
   147a2:	|               move.l 1cca4 <SysBase>,d0
   147a8:	|               movea.l d0,a6
   147aa:	|               move.l 82(sp),d0
   147ae:	|               move.l 78(sp),d1
   147b2:	|               jsr -684(a6)
   147b6:	|               move.l d0,74(sp)
   147ba:	|               move.l 74(sp),d0
   147be:	|               move.l d0,70(sp)
	if (!fib) {
   147c2:	|           ,-- bne.s 147e0 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   147c4:	|           |   move.l 86(sp),22(sp)
   147ca:	|           |   move.l 1ccac <DOSBase>,d0
   147d0:	|           |   movea.l d0,a6
   147d2:	|           |   move.l 22(sp),d1
   147d6:	|           |   jsr -90(a6)
		return FALSE;
   147da:	|           |   clr.w d0
   147dc:	+-----------|-- bra.w 1496c <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   147e0:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   147e4:	|               move.l 86(sp),66(sp)
   147ea:	|               move.l 70(sp),62(sp)
   147f0:	|               move.l 1ccac <DOSBase>,d0
   147f6:	|               movea.l d0,a6
   147f8:	|               move.l 66(sp),d1
   147fc:	|               move.l 62(sp),d2
   14800:	|               jsr -102(a6)
   14804:	|               move.l d0,58(sp)
   14808:	|               move.l 58(sp),d0
   1480c:	|  ,----------- beq.w 14920 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14810:	|  |        ,-- bra.w 148ec <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14814:	|  |  ,-----|-> move.l 70(sp),d2
   14818:	|  |  |     |   addq.l #8,d2
   1481a:	|  |  |     |   move.l 70(sp),d0
   1481e:	|  |  |     |   addq.l #8,d0
   14820:	|  |  |     |   move.l d0,-(sp)
   14822:	|  |  |     |   jsr 13e62 <strlen>
   14828:	|  |  |     |   addq.l #4,sp
   1482a:	|  |  |     |   move.l d0,d3
   1482c:	|  |  |     |   move.l 116(sp),-(sp)
   14830:	|  |  |     |   jsr 13e62 <strlen>
   14836:	|  |  |     |   addq.l #4,sp
   14838:	|  |  |     |   move.l d3,d1
   1483a:	|  |  |     |   sub.l d0,d1
   1483c:	|  |  |     |   move.l d2,d0
   1483e:	|  |  |     |   add.l d1,d0
   14840:	|  |  |     |   move.l 116(sp),-(sp)
   14844:	|  |  |     |   move.l d0,-(sp)
   14846:	|  |  |     |   jsr 13e22 <strcmp>
   1484c:	|  |  |     |   addq.l #8,sp
   1484e:	|  |  |     |   tst.l d0
   14850:	|  |  |     +-- bne.w 148ec <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14854:	|  |  |     |   move.l 70(sp),d0
   14858:	|  |  |     |   addq.l #8,d0
   1485a:	|  |  |     |   move.l d0,-(sp)
   1485c:	|  |  |     |   jsr 13e62 <strlen>
   14862:	|  |  |     |   addq.l #4,sp
   14864:	|  |  |     |   move.l d0,d2
   14866:	|  |  |     |   move.l 116(sp),-(sp)
   1486a:	|  |  |     |   jsr 13e62 <strlen>
   14870:	|  |  |     |   addq.l #4,sp
   14872:	|  |  |     |   move.l d0,d1
   14874:	|  |  |     |   move.l d2,d0
   14876:	|  |  |     |   sub.l d1,d0
   14878:	|  |  |     |   movea.l 70(sp),a0
   1487c:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14880:	|  |  |     |   move.l 70(sp),d0
   14884:	|  |  |     |   addq.l #8,d0
   14886:	|  |  |     |   move.l d0,-(sp)
   14888:	|  |  |     |   jsr 118 <decodeFilename>
   1488e:	|  |  |     |   addq.l #4,sp
   14890:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14894:	|  |  |     |   move.l 42(sp),-(sp)
   14898:	|  |  |     |   lea 18(sp),a0
   1489c:	|  |  |     |   move.l a0,-(sp)
   1489e:	|  |  |     |   jsr 14b98 <makeTextVar>
   148a4:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   148a6:	|  |  |     |   move.l 42(sp),38(sp)
   148ac:	|  |  |     |   move.l 1cca4 <SysBase>,d0
   148b2:	|  |  |     |   movea.l d0,a6
   148b4:	|  |  |     |   movea.l 38(sp),a1
   148b8:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   148bc:	|  |  |     |   move.l 112(sp),d0
   148c0:	|  |  |     |   move.l d0,-(sp)
   148c2:	|  |  |     |   lea 18(sp),a0
   148c6:	|  |  |     |   move.l a0,-(sp)
   148c8:	|  |  |     |   jsr 141b2 <addVarToStack>
   148ce:	|  |  |     |   addq.l #8,sp
   148d0:	|  |  |     |   tst.w d0
   148d2:	|  |  |  ,--|-- beq.s 14924 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   148d4:	|  |  |  |  |   movea.l 112(sp),a0
   148d8:	|  |  |  |  |   move.l 4(a0),d0
   148dc:	|  |  |  |  +-- bne.s 148ec <getSavedGamesStack+0x1ba>
   148de:	|  |  |  |  |   movea.l 112(sp),a0
   148e2:	|  |  |  |  |   move.l (a0),d0
   148e4:	|  |  |  |  |   movea.l 112(sp),a0
   148e8:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   148ec:	|  |  |  |  '-> move.l 86(sp),54(sp)
   148f2:	|  |  |  |      move.l 70(sp),50(sp)
   148f8:	|  |  |  |      move.l 1ccac <DOSBase>,d0
   148fe:	|  |  |  |      movea.l d0,a6
   14900:	|  |  |  |      move.l 54(sp),d1
   14904:	|  |  |  |      move.l 50(sp),d2
   14908:	|  |  |  |      jsr -108(a6)
   1490c:	|  |  |  |      move.l d0,46(sp)
   14910:	|  |  |  |      move.l 46(sp),d0
   14914:	|  |  '--|----- bne.w 14814 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14918:	|  |     |      move.w #1,106(sp)
   1491e:	|  |     |  ,-- bra.s 14926 <getSavedGamesStack+0x1f4>
	}

cleanup:
   14920:	|  '-----|--|-> nop
   14922:	|        |  +-- bra.s 14926 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14924:	|        '--|-> nop
	FreeVec(fib);
   14926:	|           '-> move.l 70(sp),34(sp)
   1492c:	|               move.l 1cca4 <SysBase>,d0
   14932:	|               movea.l d0,a6
   14934:	|               movea.l 34(sp),a1
   14938:	|               jsr -690(a6)
	UnLock(dirLock);
   1493c:	|               move.l 86(sp),30(sp)
   14942:	|               move.l 1ccac <DOSBase>,d0
   14948:	|               movea.l d0,a6
   1494a:	|               move.l 30(sp),d1
   1494e:	|               jsr -90(a6)
	FreeVec(pattern);
   14952:	|               move.l 102(sp),26(sp)
   14958:	|               move.l 1cca4 <SysBase>,d0
   1495e:	|               movea.l d0,a6
   14960:	|               movea.l 26(sp),a1
   14964:	|               jsr -690(a6)
	return result;
   14968:	|               move.w 106(sp),d0
}
   1496c:	'-------------> movem.l (sp)+,d2-d3/a6
   14970:	                lea 96(sp),sp
   14974:	                rts

00014976 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14976:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14978:	       movea.l 20(sp),a0
   1497c:	       move.l (a0),d0
   1497e:	       cmp.l 16(sp),d0
   14982:	,----- beq.s 149e6 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14984:	|      move.l 16(sp),d0
   14988:	|      add.l d0,d0
   1498a:	|      movea.l d0,a1
   1498c:	|      adda.l d0,a1
   1498e:	|      lea 1cb74 <typeName>,a0
   14994:	|      move.l (0,a1,a0.l),d0
   14998:	|      move.l d0,-(sp)
   1499a:	|      pea 1a20b <talk.c.490538ff+0x3c8>
   149a0:	|      jsr 13ea2 <joinStrings>
   149a6:	|      addq.l #8,sp
   149a8:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   149ac:	|      movea.l 20(sp),a0
   149b0:	|      move.l (a0),d0
   149b2:	|      add.l d0,d0
   149b4:	|      movea.l d0,a1
   149b6:	|      adda.l d0,a1
   149b8:	|      lea 1cb74 <typeName>,a0
   149be:	|      move.l (0,a1,a0.l),d0
   149c2:	|      move.l d0,-(sp)
   149c4:	|      pea 1a24d <talk.c.490538ff+0x40a>
   149ca:	|      jsr 13ea2 <joinStrings>
   149d0:	|      addq.l #8,sp
   149d2:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   149d4:	|      move.l (sp),-(sp)
   149d6:	|      move.l 8(sp),-(sp)
   149da:	|      jsr 17456 <KPrintF>
   149e0:	|      addq.l #8,sp

		return FALSE;
   149e2:	|      clr.w d0
   149e4:	|  ,-- bra.s 149f6 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   149e6:	'--|-> movea.l 20(sp),a0
   149ea:	   |   move.l 4(a0),d0
   149ee:	   |   movea.l 12(sp),a0
   149f2:	   |   move.l d0,(a0)
	return TRUE;
   149f4:	   |   moveq #1,d0
}
   149f6:	   '-> addq.l #8,sp
   149f8:	       rts

000149fa <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   149fa:	move.l 8(sp),-(sp)
   149fe:	jsr 778c <getNumberedString>
   14a04:	addq.l #4,sp
   14a06:	move.l d0,-(sp)
   14a08:	move.l 8(sp),-(sp)
   14a0c:	jsr 14b98 <makeTextVar>
   14a12:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14a14:	movea.l 4(sp),a0
   14a18:	move.l 4(a0),d0
   14a1c:	sne d0
   14a1e:	neg.b d0
   14a20:	move.b d0,d0
   14a22:	andi.w #255,d0
}
   14a26:	rts

00014a28 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14a28:	          subq.l #8,sp
    int size = stackSize(stacky);
   14a2a:	          move.l 16(sp),-(sp)
   14a2e:	          jsr 152d6 <stackSize>
   14a34:	          addq.l #4,sp
   14a36:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14a3a:	          move.l 4(sp),-(sp)
   14a3e:	          move.l 16(sp),-(sp)
   14a42:	          jsr 14a92 <makeFastArraySize>
   14a48:	          addq.l #8,sp
   14a4a:	          tst.w d0
   14a4c:	      ,-- bne.s 14a52 <makeFastArrayFromStack+0x2a>
   14a4e:	      |   clr.w d0
   14a50:	,-----|-- bra.s 14a8e <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14a52:	|     '-> movea.l 16(sp),a0
   14a56:	|         move.l (a0),(sp)
    size = 0;
   14a58:	|         clr.l 4(sp)
    while (allV) {
   14a5c:	|     ,-- bra.s 14a88 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14a5e:	|  ,--|-> movea.l 12(sp),a0
   14a62:	|  |  |   movea.l 4(a0),a0
   14a66:	|  |  |   move.l (a0),d1
   14a68:	|  |  |   move.l 4(sp),d0
   14a6c:	|  |  |   lsl.l #3,d0
   14a6e:	|  |  |   add.l d0,d1
   14a70:	|  |  |   move.l (sp),d0
   14a72:	|  |  |   move.l d1,-(sp)
   14a74:	|  |  |   move.l d0,-(sp)
   14a76:	|  |  |   jsr 14d14 <copyMain>
   14a7c:	|  |  |   addq.l #8,sp
        size++;
   14a7e:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14a82:	|  |  |   movea.l (sp),a0
   14a84:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14a88:	|  |  '-> tst.l (sp)
   14a8a:	|  '----- bne.s 14a5e <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14a8c:	|         moveq #1,d0
}
   14a8e:	'-------> addq.l #8,sp
   14a90:	          rts

00014a92 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14a92:	          lea -28(sp),sp
   14a96:	          move.l a6,-(sp)
    if (size < 0) {
   14a98:	          tst.l 40(sp)
   14a9c:	      ,-- bge.s 14ab2 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14a9e:	      |   pea 1a292 <talk.c.490538ff+0x44f>
   14aa4:	      |   jsr 17456 <KPrintF>
   14aaa:	      |   addq.l #4,sp
		return FALSE;
   14aac:	      |   clr.w d0
   14aae:	,-----|-- bra.w 14b90 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14ab2:	|     '-> move.l 36(sp),-(sp)
   14ab6:	|         jsr 14bc4 <unlinkVar>
   14abc:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14abe:	|         movea.l 36(sp),a0
   14ac2:	|         moveq #10,d0
   14ac4:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14ac6:	|         moveq #12,d0
   14ac8:	|         move.l d0,24(sp)
   14acc:	|         clr.l 20(sp)
   14ad0:	|         move.l 1cca4 <SysBase>,d0
   14ad6:	|         movea.l d0,a6
   14ad8:	|         move.l 24(sp),d0
   14adc:	|         move.l 20(sp),d1
   14ae0:	|         jsr -684(a6)
   14ae4:	|         move.l d0,16(sp)
   14ae8:	|         move.l 16(sp),d0
   14aec:	|         movea.l 36(sp),a0
   14af0:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14af4:	|         movea.l 36(sp),a0
   14af8:	|         move.l 4(a0),d0
   14afc:	|     ,-- bne.s 14b04 <makeFastArraySize+0x72>
   14afe:	|     |   clr.w d0
   14b00:	+-----|-- bra.w 14b90 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14b04:	|     '-> move.l 40(sp),d0
   14b08:	|         lsl.l #3,d0
   14b0a:	|         move.l d0,12(sp)
   14b0e:	|         clr.l 8(sp)
   14b12:	|         move.l 1cca4 <SysBase>,d0
   14b18:	|         movea.l d0,a6
   14b1a:	|         move.l 12(sp),d0
   14b1e:	|         move.l 8(sp),d1
   14b22:	|         jsr -684(a6)
   14b26:	|         move.l d0,4(sp)
   14b2a:	|         move.l 4(sp),d0
   14b2e:	|         movea.l 36(sp),a0
   14b32:	|         movea.l 4(a0),a0
   14b36:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14b38:	|         movea.l 36(sp),a0
   14b3c:	|         movea.l 4(a0),a0
   14b40:	|         move.l (a0),d0
   14b42:	|     ,-- bne.s 14b48 <makeFastArraySize+0xb6>
   14b44:	|     |   clr.w d0
   14b46:	+-----|-- bra.s 14b90 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14b48:	|     '-> clr.l 28(sp)
   14b4c:	|     ,-- bra.s 14b68 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14b4e:	|  ,--|-> movea.l 36(sp),a0
   14b52:	|  |  |   movea.l 4(a0),a0
   14b56:	|  |  |   move.l (a0),d1
   14b58:	|  |  |   move.l 28(sp),d0
   14b5c:	|  |  |   lsl.l #3,d0
   14b5e:	|  |  |   movea.l d1,a0
   14b60:	|  |  |   adda.l d0,a0
   14b62:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14b64:	|  |  |   addq.l #1,28(sp)
   14b68:	|  |  '-> move.l 28(sp),d0
   14b6c:	|  |      cmp.l 40(sp),d0
   14b70:	|  '----- blt.s 14b4e <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14b72:	|         movea.l 36(sp),a0
   14b76:	|         movea.l 4(a0),a0
   14b7a:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14b80:	|         movea.l 36(sp),a0
   14b84:	|         movea.l 4(a0),a0
   14b88:	|         moveq #1,d0
   14b8a:	|         move.l d0,8(a0)
    return TRUE;
   14b8e:	|         moveq #1,d0
}
   14b90:	'-------> movea.l (sp)+,a6
   14b92:	          lea 28(sp),sp
   14b96:	          rts

00014b98 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14b98:	move.l 4(sp),-(sp)
   14b9c:	jsr 14bc4 <unlinkVar>
   14ba2:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14ba4:	movea.l 4(sp),a0
   14ba8:	moveq #3,d0
   14baa:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14bac:	move.l 8(sp),-(sp)
   14bb0:	jsr b8 <copyString>
   14bb6:	addq.l #4,sp
   14bb8:	movea.l 4(sp),a0
   14bbc:	move.l d0,4(a0)
}
   14bc0:	nop
   14bc2:	rts

00014bc4 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14bc4:	                      lea -16(sp),sp
   14bc8:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14bca:	                      movea.l 24(sp),a0
   14bce:	                      move.l (a0),d0
   14bd0:	                      moveq #10,d1
   14bd2:	                      cmp.l d0,d1
   14bd4:	            ,-------- beq.w 14c8c <unlinkVar+0xc8>
   14bd8:	            |         moveq #10,d1
   14bda:	            |         cmp.l d0,d1
   14bdc:	,-----------|-------- bcs.w 14d00 <unlinkVar+0x13c>
   14be0:	|           |         moveq #8,d1
   14be2:	|           |         cmp.l d0,d1
   14be4:	|  ,--------|-------- beq.w 14cec <unlinkVar+0x128>
   14be8:	|  |        |         moveq #8,d1
   14bea:	|  |        |         cmp.l d0,d1
   14bec:	+--|--------|-------- bcs.w 14d00 <unlinkVar+0x13c>
   14bf0:	|  |        |         moveq #3,d1
   14bf2:	|  |        |         cmp.l d0,d1
   14bf4:	|  |        |     ,-- beq.s 14c00 <unlinkVar+0x3c>
   14bf6:	|  |        |     |   moveq #6,d1
   14bf8:	|  |        |     |   cmp.l d0,d1
   14bfa:	|  |        |  ,--|-- beq.s 14c26 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14bfc:	+--|--------|--|--|-- bra.w 14d00 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14c00:	|  |        |  |  '-> movea.l 24(sp),a0
   14c04:	|  |        |  |      move.l 4(a0),4(sp)
   14c0a:	|  |        |  |      move.l 1cca4 <SysBase>,d0
   14c10:	|  |        |  |      movea.l d0,a6
   14c12:	|  |        |  |      movea.l 4(sp),a1
   14c16:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14c1a:	|  |        |  |      movea.l 24(sp),a0
   14c1e:	|  |        |  |      clr.l 4(a0)
		break;
   14c22:	|  |  ,-----|--|----- bra.w 14d0a <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14c26:	|  |  |     |  '----> movea.l 24(sp),a0
   14c2a:	|  |  |     |         movea.l 4(a0),a0
   14c2e:	|  |  |     |         move.l 8(a0),d0
   14c32:	|  |  |     |         subq.l #1,d0
   14c34:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14c38:	|  |  |     |         movea.l 24(sp),a0
   14c3c:	|  |  |     |         movea.l 4(a0),a0
   14c40:	|  |  |     |         move.l 8(a0),d0
   14c44:	|  |  |  ,--|-------- bgt.w 14d04 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14c48:	|  |  |  |  |     ,-- bra.s 14c5c <unlinkVar+0x98>
   14c4a:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14c4e:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14c52:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14c54:	|  |  |  |  |  |  |   jsr 152fa <trimStack>
   14c5a:	|  |  |  |  |  |  |   addq.l #4,sp
   14c5c:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14c60:	|  |  |  |  |  |      movea.l 4(a0),a0
   14c64:	|  |  |  |  |  |      move.l (a0),d0
   14c66:	|  |  |  |  |  '----- bne.s 14c4a <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14c68:	|  |  |  |  |         movea.l 24(sp),a0
   14c6c:	|  |  |  |  |         move.l 4(a0),8(sp)
   14c72:	|  |  |  |  |         move.l 1cca4 <SysBase>,d0
   14c78:	|  |  |  |  |         movea.l d0,a6
   14c7a:	|  |  |  |  |         movea.l 8(sp),a1
   14c7e:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14c82:	|  |  |  |  |         movea.l 24(sp),a0
   14c86:	|  |  |  |  |         clr.l 4(a0)
		break;
   14c8a:	|  |  |  +--|-------- bra.s 14d04 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14c8c:	|  |  |  |  '-------> movea.l 24(sp),a0
   14c90:	|  |  |  |            movea.l 4(a0),a0
   14c94:	|  |  |  |            move.l 8(a0),d0
   14c98:	|  |  |  |            subq.l #1,d0
   14c9a:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14c9e:	|  |  |  |            movea.l 24(sp),a0
   14ca2:	|  |  |  |            movea.l 4(a0),a0
   14ca6:	|  |  |  |            move.l 8(a0),d0
   14caa:	|  |  |  |        ,-- bgt.s 14d08 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14cac:	|  |  |  |        |   movea.l 24(sp),a0
   14cb0:	|  |  |  |        |   movea.l 4(a0),a0
   14cb4:	|  |  |  |        |   move.l (a0),16(sp)
   14cb8:	|  |  |  |        |   move.l 1cca4 <SysBase>,d0
   14cbe:	|  |  |  |        |   movea.l d0,a6
   14cc0:	|  |  |  |        |   movea.l 16(sp),a1
   14cc4:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14cc8:	|  |  |  |        |   movea.l 24(sp),a0
   14ccc:	|  |  |  |        |   move.l 4(a0),12(sp)
   14cd2:	|  |  |  |        |   move.l 1cca4 <SysBase>,d0
   14cd8:	|  |  |  |        |   movea.l d0,a6
   14cda:	|  |  |  |        |   movea.l 12(sp),a1
   14cde:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14ce2:	|  |  |  |        |   movea.l 24(sp),a0
   14ce6:	|  |  |  |        |   clr.l 4(a0)
		break;
   14cea:	|  |  |  |        +-- bra.s 14d08 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14cec:	|  '--|--|--------|-> movea.l 24(sp),a0
   14cf0:	|     |  |        |   move.l 4(a0),d0
   14cf4:	|     |  |        |   move.l d0,-(sp)
   14cf6:	|     |  |        |   jsr 99fa <deleteAnim>
   14cfc:	|     |  |        |   addq.l #4,sp
		break;
   14cfe:	|     +--|--------|-- bra.s 14d0a <unlinkVar+0x146>
		break;
   14d00:	'-----|--|--------|-> nop
   14d02:	      +--|--------|-- bra.s 14d0a <unlinkVar+0x146>
		break;
   14d04:	      |  '--------|-> nop
   14d06:	      +-----------|-- bra.s 14d0a <unlinkVar+0x146>
		break;
   14d08:	      |           '-> nop
	}
}
   14d0a:	      '-------------> nop
   14d0c:	                      movea.l (sp)+,a6
   14d0e:	                      lea 16(sp),sp
   14d12:	                      rts

00014d14 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14d14:	       movea.l 4(sp),a0
   14d18:	       move.l (a0),d0
   14d1a:	       movea.l 8(sp),a0
   14d1e:	       move.l d0,(a0)
	switch (to->varType) {
   14d20:	       movea.l 8(sp),a0
   14d24:	       move.l (a0),d0
   14d26:	       moveq #10,d1
   14d28:	       cmp.l d0,d1
   14d2a:	,----- bcs.w 14e1c <copyMain+0x108>
   14d2e:	|      add.l d0,d0
   14d30:	|      movea.l d0,a0
   14d32:	|      adda.l #85310,a0
   14d38:	|      move.w (a0),d0
   14d3a:	|      jmp (14d3e <copyMain+0x2a>,pc,d0.w)
   14d3e:	|      .short 0x00da
   14d40:	|      ori.b #22,(a6)
   14d44:	|      ori.w #22,(a4)
   14d48:	|      ori.b #-126,(a6)
   14d4c:	|      ori.b #-68,(a6)
   14d50:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14d58:	|      move.l 4(a0),d0
   14d5c:	|      movea.l 8(sp),a0
   14d60:	|      move.l d0,4(a0)
		return TRUE;
   14d64:	|      moveq #1,d0
   14d66:	|  ,-- bra.w 14e2e <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14d6a:	|  |   movea.l 4(sp),a0
   14d6e:	|  |   move.l 4(a0),d0
   14d72:	|  |   movea.l 8(sp),a0
   14d76:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14d7a:	|  |   movea.l 8(sp),a0
   14d7e:	|  |   movea.l 4(a0),a0
   14d82:	|  |   move.l 8(a0),d0
   14d86:	|  |   addq.l #1,d0
   14d88:	|  |   move.l d0,8(a0)
		return TRUE;
   14d8c:	|  |   moveq #1,d0
   14d8e:	|  +-- bra.w 14e2e <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14d92:	|  |   movea.l 4(sp),a0
   14d96:	|  |   move.l 4(a0),d0
   14d9a:	|  |   move.l d0,-(sp)
   14d9c:	|  |   jsr b8 <copyString>
   14da2:	|  |   addq.l #4,sp
   14da4:	|  |   movea.l 8(sp),a0
   14da8:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14dac:	|  |   movea.l 8(sp),a0
   14db0:	|  |   move.l 4(a0),d0
   14db4:	|  |   sne d0
   14db6:	|  |   neg.b d0
   14db8:	|  |   move.b d0,d0
   14dba:	|  |   andi.w #255,d0
   14dbe:	|  +-- bra.s 14e2e <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14dc0:	|  |   movea.l 4(sp),a0
   14dc4:	|  |   move.l 4(a0),d0
   14dc8:	|  |   movea.l 8(sp),a0
   14dcc:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14dd0:	|  |   movea.l 8(sp),a0
   14dd4:	|  |   movea.l 4(a0),a0
   14dd8:	|  |   move.l 8(a0),d0
   14ddc:	|  |   addq.l #1,d0
   14dde:	|  |   move.l d0,8(a0)
		return TRUE;
   14de2:	|  |   moveq #1,d0
   14de4:	|  +-- bra.s 14e2e <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14de6:	|  |   movea.l 4(sp),a0
   14dea:	|  |   move.l 4(a0),d0
   14dee:	|  |   movea.l 8(sp),a0
   14df2:	|  |   move.l d0,4(a0)
		return TRUE;
   14df6:	|  |   moveq #1,d0
   14df8:	|  +-- bra.s 14e2e <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14dfa:	|  |   movea.l 4(sp),a0
   14dfe:	|  |   move.l 4(a0),d0
   14e02:	|  |   move.l d0,-(sp)
   14e04:	|  |   jsr 962e <copyAnim>
   14e0a:	|  |   addq.l #4,sp
   14e0c:	|  |   movea.l 8(sp),a0
   14e10:	|  |   move.l d0,4(a0)
		return TRUE;
   14e14:	|  |   moveq #1,d0
   14e16:	|  +-- bra.s 14e2e <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14e18:	|  |   moveq #1,d0
   14e1a:	|  +-- bra.s 14e2e <copyMain+0x11a>

		default:
		break;
   14e1c:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14e1e:	   |   pea 1a2e3 <talk.c.490538ff+0x4a0>
   14e24:	   |   jsr 17456 <KPrintF>
   14e2a:	   |   addq.l #4,sp
	return FALSE;
   14e2c:	   |   clr.w d0
}
   14e2e:	   '-> rts

00014e30 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14e30:	move.l 8(sp),-(sp)
   14e34:	jsr 14bc4 <unlinkVar>
   14e3a:	addq.l #4,sp
	return copyMain(from, to);
   14e3c:	move.l 8(sp),-(sp)
   14e40:	move.l 8(sp),-(sp)
   14e44:	jsr 14d14 <copyMain>
   14e4a:	addq.l #8,sp
}
   14e4c:	rts

00014e4e <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14e4e:	       movea.l 4(sp),a0
   14e52:	       move.l (a0),d0
   14e54:	       moveq #8,d1
   14e56:	       cmp.l d0,d1
   14e58:	   ,-- bne.s 14e6e <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14e5a:	   |   movea.l 4(sp),a0
   14e5e:	   |   move.l 4(a0),d0
   14e62:	   |   move.l d0,-(sp)
   14e64:	   |   jsr 962e <copyAnim>
   14e6a:	   |   addq.l #4,sp
   14e6c:	,--|-- bra.s 14eb4 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14e6e:	|  '-> movea.l 4(sp),a0
   14e72:	|      move.l (a0),d0
   14e74:	|      moveq #1,d1
   14e76:	|      cmp.l d0,d1
   14e78:	|  ,-- bne.s 14e8c <getAnimationFromVar+0x3e>
   14e7a:	|  |   movea.l 4(sp),a0
   14e7e:	|  |   move.l 4(a0),d0
   14e82:	|  +-- bne.s 14e8c <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14e84:	|  |   jsr ae60 <makeNullAnim>
   14e8a:	+--|-- bra.s 14eb4 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14e8c:	|  '-> movea.l 4(sp),a0
   14e90:	|      move.l (a0),d0
   14e92:	|      add.l d0,d0
   14e94:	|      movea.l d0,a1
   14e96:	|      adda.l d0,a1
   14e98:	|      lea 1cb74 <typeName>,a0
   14e9e:	|      move.l (0,a1,a0.l),d0
   14ea2:	|      move.l d0,-(sp)
   14ea4:	|      pea 1a1cf <talk.c.490538ff+0x38c>
   14eaa:	|      jsr 17456 <KPrintF>
   14eb0:	|      addq.l #8,sp
	return NULL;
   14eb2:	|      moveq #0,d0
}
   14eb4:	'----> rts

00014eb6 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14eb6:	       movea.l 4(sp),a0
   14eba:	       move.l (a0),d0
   14ebc:	       moveq #10,d1
   14ebe:	       cmp.l d0,d1
   14ec0:	,----- bcs.w 14f46 <getBoolean+0x90>
   14ec4:	|      add.l d0,d0
   14ec6:	|      movea.l d0,a0
   14ec8:	|      adda.l #85716,a0
   14ece:	|      move.w (a0),d0
   14ed0:	|      jmp (14ed4 <getBoolean+0x1e>,pc,d0.w)
   14ed4:	|      ori.b #26,(a6)
   14ed8:	|      ori.w #68,(114,a2,d0.w)
   14ede:	|      ori.w #46,(114,a2,d0.w)
   14ee4:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14eea:	|      clr.w d0
   14eec:	|  ,-- bra.s 14f4a <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14eee:	|  |   movea.l 4(sp),a0
   14ef2:	|  |   move.l 4(a0),d0
   14ef6:	|  |   sne d0
   14ef8:	|  |   neg.b d0
   14efa:	|  |   move.b d0,d0
   14efc:	|  |   andi.w #255,d0
   14f00:	|  +-- bra.s 14f4a <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14f02:	|  |   movea.l 4(sp),a0
   14f06:	|  |   movea.l 4(a0),a0
   14f0a:	|  |   move.l (a0),d0
   14f0c:	|  |   sne d0
   14f0e:	|  |   neg.b d0
   14f10:	|  |   move.b d0,d0
   14f12:	|  |   andi.w #255,d0
   14f16:	|  +-- bra.s 14f4a <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14f18:	|  |   movea.l 4(sp),a0
   14f1c:	|  |   movea.l 4(a0),a0
   14f20:	|  |   move.b (a0),d0
   14f22:	|  |   sne d0
   14f24:	|  |   neg.b d0
   14f26:	|  |   move.b d0,d0
   14f28:	|  |   andi.w #255,d0
   14f2c:	|  +-- bra.s 14f4a <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14f2e:	|  |   movea.l 4(sp),a0
   14f32:	|  |   movea.l 4(a0),a0
   14f36:	|  |   move.l 4(a0),d0
   14f3a:	|  |   sne d0
   14f3c:	|  |   neg.b d0
   14f3e:	|  |   move.b d0,d0
   14f40:	|  |   andi.w #255,d0
   14f44:	|  +-- bra.s 14f4a <getBoolean+0x94>

		default:
		break;
   14f46:	'--|-> nop
	}
	return TRUE;
   14f48:	   |   moveq #1,d0
}
   14f4a:	   '-> rts

00014f4c <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14f4c:	      ,----------> lea -76(sp),sp
   14f50:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14f52:	      |            movea.l 84(sp),a0
   14f56:	      |            move.l (a0),d0
   14f58:	      |            moveq #10,d1
   14f5a:	      |            cmp.l d0,d1
   14f5c:	,-----|----------- bcs.w 151fa <getTextFromAnyVar+0x2ae>
   14f60:	|     |            add.l d0,d0
   14f62:	|     |            movea.l d0,a0
   14f64:	|     |            adda.l #85872,a0
   14f6a:	|     |            move.w (a0),d0
   14f6c:	|     |            jmp (14f70 <getTextFromAnyVar+0x24>,pc,d0.w)
   14f70:	|     |            .short 0x028a
   14f72:	|     |            bset d0,(a0)+
   14f74:	|     |            .short 0x028a
   14f76:	|     |            ori.b #-118,(a6)
   14f7a:	|     |            andi.b #8,ccr
   14f7e:	|     |            andi.w #650,-(a0)
   14f82:	|     |            .short 0x028a
   14f84:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14f8a:	|     |            move.l 4(a0),d0
   14f8e:	|     |            move.l d0,-(sp)
   14f90:	|     |            jsr b8 <copyString>
   14f96:	|     |            addq.l #4,sp
   14f98:	|  ,--|----------- bra.w 1521c <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14f9c:	|  |  |            pea 1a2f6 <talk.c.490538ff+0x4b3>
   14fa2:	|  |  |            jsr b8 <copyString>
   14fa8:	|  |  |            addq.l #4,sp
   14faa:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14fae:	|  |  |            clr.l 72(sp)
   14fb2:	|  |  |     ,----- bra.w 1505c <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14fb6:	|  |  |  ,--|----> pea 1a2fc <talk.c.490538ff+0x4b9>
   14fbc:	|  |  |  |  |      move.l 80(sp),-(sp)
   14fc0:	|  |  |  |  |      jsr 13ea2 <joinStrings>
   14fc6:	|  |  |  |  |      addq.l #8,sp
   14fc8:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14fcc:	|  |  |  |  |  ,-- bne.s 14fd4 <getTextFromAnyVar+0x88>
   14fce:	|  |  |  |  |  |   moveq #0,d0
   14fd0:	|  +--|--|--|--|-- bra.w 1521c <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14fd4:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14fda:	|  |  |  |  |      move.l 1cca4 <SysBase>,d0
   14fe0:	|  |  |  |  |      movea.l d0,a6
   14fe2:	|  |  |  |  |      movea.l 56(sp),a1
   14fe6:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14fea:	|  |  |  |  |      movea.l 84(sp),a0
   14fee:	|  |  |  |  |      movea.l 4(a0),a0
   14ff2:	|  |  |  |  |      move.l (a0),d1
   14ff4:	|  |  |  |  |      move.l 72(sp),d0
   14ff8:	|  |  |  |  |      lsl.l #3,d0
   14ffa:	|  |  |  |  |      add.l d1,d0
   14ffc:	|  |  |  |  |      move.l d0,-(sp)
   14ffe:	|  |  +--|--|----- jsr 14f4c <getTextFromAnyVar>(pc)
   15002:	|  |  |  |  |      addq.l #4,sp
   15004:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   15008:	|  |  |  |  |      move.l 52(sp),-(sp)
   1500c:	|  |  |  |  |      move.l 64(sp),-(sp)
   15010:	|  |  |  |  |      jsr 13ea2 <joinStrings>
   15016:	|  |  |  |  |      addq.l #8,sp
   15018:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   1501c:	|  |  |  |  |  ,-- bne.s 15024 <getTextFromAnyVar+0xd8>
   1501e:	|  |  |  |  |  |   moveq #0,d0
   15020:	|  +--|--|--|--|-- bra.w 1521c <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15024:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   1502a:	|  |  |  |  |      move.l 1cca4 <SysBase>,d0
   15030:	|  |  |  |  |      movea.l d0,a6
   15032:	|  |  |  |  |      movea.l 48(sp),a1
   15036:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1503a:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   1503e:	|  |  |  |  |      move.l 60(sp),44(sp)
   15044:	|  |  |  |  |      move.l 1cca4 <SysBase>,d0
   1504a:	|  |  |  |  |      movea.l d0,a6
   1504c:	|  |  |  |  |      movea.l 44(sp),a1
   15050:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   15054:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15058:	|  |  |  |  |      addq.l #1,72(sp)
   1505c:	|  |  |  |  '----> movea.l 84(sp),a0
   15060:	|  |  |  |         movea.l 4(a0),a0
   15064:	|  |  |  |         move.l 4(a0),d0
   15068:	|  |  |  |         cmp.l 72(sp),d0
   1506c:	|  |  |  '-------- bgt.w 14fb6 <getTextFromAnyVar+0x6a>
			}
			return builder;
   15070:	|  |  |            move.l 76(sp),d0
   15074:	|  +--|----------- bra.w 1521c <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   15078:	|  |  |            pea 1a2fe <talk.c.490538ff+0x4bb>
   1507e:	|  |  |            jsr b8 <copyString>
   15084:	|  |  |            addq.l #4,sp
   15086:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   1508a:	|  |  |            movea.l 84(sp),a0
   1508e:	|  |  |            movea.l 4(a0),a0
   15092:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   15096:	|  |  |     ,----- bra.w 15138 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   1509a:	|  |  |  ,--|----> pea 1a2fc <talk.c.490538ff+0x4b9>
   150a0:	|  |  |  |  |      move.l 72(sp),-(sp)
   150a4:	|  |  |  |  |      jsr 13ea2 <joinStrings>
   150aa:	|  |  |  |  |      addq.l #8,sp
   150ac:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   150b0:	|  |  |  |  |  ,-- bne.s 150b8 <getTextFromAnyVar+0x16c>
   150b2:	|  |  |  |  |  |   moveq #0,d0
   150b4:	|  +--|--|--|--|-- bra.w 1521c <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   150b8:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   150be:	|  |  |  |  |      move.l 1cca4 <SysBase>,d0
   150c4:	|  |  |  |  |      movea.l d0,a6
   150c6:	|  |  |  |  |      movea.l 32(sp),a1
   150ca:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   150ce:	|  |  |  |  |      move.l 64(sp),d0
   150d2:	|  |  |  |  |      move.l d0,-(sp)
   150d4:	|  |  '--|--|----- jsr 14f4c <getTextFromAnyVar>(pc)
   150d8:	|  |     |  |      addq.l #4,sp
   150da:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   150de:	|  |     |  |      move.l 28(sp),-(sp)
   150e2:	|  |     |  |      move.l 40(sp),-(sp)
   150e6:	|  |     |  |      jsr 13ea2 <joinStrings>
   150ec:	|  |     |  |      addq.l #8,sp
   150ee:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   150f2:	|  |     |  |  ,-- bne.s 150fa <getTextFromAnyVar+0x1ae>
   150f4:	|  |     |  |  |   moveq #0,d0
   150f6:	|  +-----|--|--|-- bra.w 1521c <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   150fa:	|  |     |  |  '-> move.l 28(sp),24(sp)
   15100:	|  |     |  |      move.l 1cca4 <SysBase>,d0
   15106:	|  |     |  |      movea.l d0,a6
   15108:	|  |     |  |      movea.l 24(sp),a1
   1510c:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   15110:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   15114:	|  |     |  |      move.l 36(sp),20(sp)
   1511a:	|  |     |  |      move.l 1cca4 <SysBase>,d0
   15120:	|  |     |  |      movea.l d0,a6
   15122:	|  |     |  |      movea.l 20(sp),a1
   15126:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1512a:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1512e:	|  |     |  |      movea.l 64(sp),a0
   15132:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   15138:	|  |     |  '----> tst.l 64(sp)
   1513c:	|  |     '-------- bne.w 1509a <getTextFromAnyVar+0x14e>
			}
			return builder;
   15140:	|  |               move.l 68(sp),d0
   15144:	|  +-------------- bra.w 1521c <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   15148:	|  |               moveq #10,d0
   1514a:	|  |               move.l d0,16(sp)
   1514e:	|  |               clr.l 12(sp)
   15152:	|  |               move.l 1cca4 <SysBase>,d0
   15158:	|  |               movea.l d0,a6
   1515a:	|  |               move.l 16(sp),d0
   1515e:	|  |               move.l 12(sp),d1
   15162:	|  |               jsr -684(a6)
   15166:	|  |               move.l d0,8(sp)
   1516a:	|  |               move.l 8(sp),d0
   1516e:	|  |               move.l d0,4(sp)
			if (! buff) {
   15172:	|  |           ,-- bne.s 15188 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   15174:	|  |           |   pea 1a305 <talk.c.490538ff+0x4c2>
   1517a:	|  |           |   jsr 17456 <KPrintF>
   15180:	|  |           |   addq.l #4,sp
				return NULL;
   15182:	|  |           |   moveq #0,d0
   15184:	|  +-----------|-- bra.w 1521c <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   15188:	|  |           '-> movea.l 84(sp),a0
   1518c:	|  |               move.l 4(a0),d0
   15190:	|  |               move.l d0,-(sp)
   15192:	|  |               pea 1a32f <talk.c.490538ff+0x4ec>
   15198:	|  |               move.l 12(sp),-(sp)
   1519c:	|  |               jsr 14180 <sprintf>
   151a2:	|  |               lea 12(sp),sp
			return buff;
   151a6:	|  |               move.l 4(sp),d0
   151aa:	|  +-------------- bra.s 1521c <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   151ac:	|  |               movea.l 84(sp),a0
   151b0:	|  |               move.l 4(a0),d0
   151b4:	|  |               move.l d0,-(sp)
   151b6:	|  |               jsr 4afc <resourceNameFromNum>
   151bc:	|  |               addq.l #4,sp
   151be:	|  |               move.l d0,-(sp)
   151c0:	|  |               pea 18c6c <PutChar+0xd74>
   151c6:	|  |               jsr 13ea2 <joinStrings>
   151cc:	|  |               addq.l #8,sp
   151ce:	|  +-------------- bra.s 1521c <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   151d0:	|  |               movea.l 84(sp),a0
   151d4:	|  |               move.l 4(a0),d0
   151d8:	|  |               move.l d0,-(sp)
   151da:	|  |               jsr d68a <findObjectType>
   151e0:	|  |               addq.l #4,sp
   151e2:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   151e6:	+--|-------------- beq.s 151fa <getTextFromAnyVar+0x2ae>
   151e8:	|  |               movea.l 40(sp),a0
   151ec:	|  |               move.l (a0),d0
   151ee:	|  |               move.l d0,-(sp)
   151f0:	|  |               jsr b8 <copyString>
   151f6:	|  |               addq.l #4,sp
   151f8:	|  +-------------- bra.s 1521c <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   151fa:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   151fc:	   |               movea.l 84(sp),a0
   15200:	   |               move.l (a0),d0
   15202:	   |               add.l d0,d0
   15204:	   |               movea.l d0,a1
   15206:	   |               adda.l d0,a1
   15208:	   |               lea 1cb74 <typeName>,a0
   1520e:	   |               move.l (0,a1,a0.l),d0
   15212:	   |               move.l d0,-(sp)
   15214:	   |               jsr b8 <copyString>
   1521a:	   |               addq.l #4,sp
}
   1521c:	   '-------------> movea.l (sp)+,a6
   1521e:	                   lea 76(sp),sp
   15222:	                   rts

00015224 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15224:	move.l 4(sp),-(sp)
   15228:	jsr 14bc4 <unlinkVar>
   1522e:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15230:	movea.l 4(sp),a0
   15234:	moveq #8,d0
   15236:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15238:	movea.l 4(sp),a0
   1523c:	move.l 8(sp),4(a0)
}
   15242:	nop
   15244:	rts

00015246 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15246:	move.l 4(sp),-(sp)
   1524a:	jsr 14bc4 <unlinkVar>
   15250:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15252:	movea.l 4(sp),a0
   15256:	moveq #9,d0
   15258:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1525a:	movea.l 4(sp),a0
   1525e:	move.l 8(sp),4(a0)
}
   15264:	nop
   15266:	rts

00015268 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   15268:	move.l 4(sp),-(sp)
   1526c:	jsr 14bc4 <unlinkVar>
   15272:	addq.l #4,sp
   15274:	movea.l 4(sp),a0
   15278:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   1527c:	movea.l 4(sp),a0
   15280:	move.l 12(sp),4(a0)
   15286:	nop
   15288:	rts

0001528a <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1528a:	      ,-- bra.s 1529c <stackGetByIndex+0x12>
        vS = vS->next;
   1528c:	,-----|-> movea.l 4(sp),a0
   15290:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15296:	|     +-- bne.s 1529c <stackGetByIndex+0x12>
            return NULL;
   15298:	|     |   moveq #0,d0
   1529a:	|  ,--|-- bra.s 152b0 <stackGetByIndex+0x26>
    while (theIndex--) {
   1529c:	|  |  '-> move.l 8(sp),d0
   152a0:	|  |      move.l d0,d1
   152a2:	|  |      subq.l #1,d1
   152a4:	|  |      move.l d1,8(sp)
   152a8:	|  |      tst.l d0
   152aa:	'--|----- bne.s 1528c <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   152ac:	   |      move.l 4(sp),d0
}
   152b0:	   '----> rts

000152b2 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   152b2:	          tst.l 4(sp)
   152b6:	      ,-- bne.s 152c6 <stackFindLast+0x14>
		return NULL;
   152b8:	      |   moveq #0,d0
   152ba:	,-----|-- bra.s 152d4 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   152bc:	|  ,--|-> movea.l 4(sp),a0
   152c0:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   152c6:	|  |  '-> movea.l 4(sp),a0
   152ca:	|  |      move.l 8(a0),d0
   152ce:	|  '----- bne.s 152bc <stackFindLast+0xa>

	return hunt;
   152d0:	|         move.l 4(sp),d0
}
   152d4:	'-------> rts

000152d6 <stackSize>:

int stackSize (const struct stackHandler * me) {
   152d6:	       subq.l #8,sp
	int r = 0;
   152d8:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   152dc:	       movea.l 12(sp),a0
   152e0:	       move.l (a0),(sp)
	while (a) {
   152e2:	   ,-- bra.s 152ee <stackSize+0x18>
		r ++;
   152e4:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   152e8:	|  |   movea.l (sp),a0
   152ea:	|  |   move.l 8(a0),(sp)
	while (a) {
   152ee:	|  '-> tst.l (sp)
   152f0:	'----- bne.s 152e4 <stackSize+0xe>
	}
	return r;
   152f2:	       move.l 4(sp),d0
}
   152f6:	       addq.l #8,sp
   152f8:	       rts

000152fa <trimStack>:

void trimStack (struct variableStack ** stack) {
   152fa:	subq.l #8,sp
   152fc:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   152fe:	movea.l 16(sp),a0
   15302:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15306:	movea.l 16(sp),a0
   1530a:	movea.l (a0),a0
   1530c:	move.l 8(a0),d0
   15310:	movea.l 16(sp),a0
   15314:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15316:	move.l 8(sp),d0
   1531a:	move.l d0,-(sp)
   1531c:	jsr 14bc4 <unlinkVar>
   15322:	addq.l #4,sp
	FreeVec(killMe);
   15324:	move.l 8(sp),4(sp)
   1532a:	move.l 1cca4 <SysBase>,d0
   15330:	movea.l d0,a6
   15332:	movea.l 4(sp),a1
   15336:	jsr -690(a6)
   1533a:	nop
   1533c:	movea.l (sp)+,a6
   1533e:	addq.l #8,sp
   15340:	rts

00015342 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15342:	       lea -52(sp),sp
   15346:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   15348:	       pea 1a332 <talk.c.490538ff+0x4ef>
   1534e:	       jsr 17456 <KPrintF>
   15354:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15356:	       moveq #68,d0
   15358:	       move.l d0,52(sp)
   1535c:	       clr.l 48(sp)
   15360:	       move.l 1cca4 <SysBase>,d0
   15366:	       movea.l d0,a6
   15368:	       move.l 52(sp),d0
   1536c:	       move.l 48(sp),d1
   15370:	       jsr -684(a6)
   15374:	       move.l d0,44(sp)
   15378:	       move.l 44(sp),d0
   1537c:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15380:	   ,-- bne.s 15388 <freeze+0x46>
   15382:	   |   clr.w d0
   15384:	,--|-- bra.w 1551a <freeze+0x1d8>

	CstFreeze();
   15388:	|  '-> jsr 1cca <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1538e:	|      move.l 1cd3c <sceneWidth>,d0
   15394:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15398:	|      move.l 1cd40 <sceneHeight>,d0
   1539e:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   153a2:	|      move.l 1cd3c <sceneWidth>,d0
   153a8:	|      movea.l 40(sp),a0
   153ac:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   153b0:	|      move.l 1cd40 <sceneHeight>,d0
   153b6:	|      movea.l 40(sp),a0
   153ba:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   153be:	|      move.l 1cd5a <cameraX>,d0
   153c4:	|      movea.l 40(sp),a0
   153c8:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   153cc:	|      move.l 1cd5e <cameraY>,d0
   153d2:	|      movea.l 40(sp),a0
   153d6:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   153da:	|      move.l 1c636 <cameraZoom>,d0
   153e0:	|      movea.l 40(sp),a0
   153e4:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   153e8:	|      move.w #1,1cd48 <backdropExists>

	newFreezer -> allPeople = allPeople;
   153f0:	|      move.l 1cd04 <allPeople>,d0
   153f6:	|      movea.l 40(sp),a0
   153fa:	|      move.l d0,(a0)
	allPeople = NULL;
   153fc:	|      clr.l 1cd04 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15402:	|      moveq #42,d0
   15404:	|      move.l d0,28(sp)
   15408:	|      clr.l 24(sp)
   1540c:	|      move.l 1cca4 <SysBase>,d0
   15412:	|      movea.l d0,a6
   15414:	|      move.l 28(sp),d0
   15418:	|      move.l 24(sp),d1
   1541c:	|      jsr -684(a6)
   15420:	|      move.l d0,20(sp)
   15424:	|      move.l 20(sp),d0
   15428:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1542c:	|  ,-- bne.s 15434 <freeze+0xf2>
   1542e:	|  |   clr.w d0
   15430:	+--|-- bra.w 1551a <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15434:	|  '-> move.l 1cdb0 <allScreenRegions>,d0
   1543a:	|      movea.l 40(sp),a0
   1543e:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15442:	|      clr.l 1cdb0 <allScreenRegions>
	overRegion = NULL;
   15448:	|      clr.l 1cdb4 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1544e:	|      move.l 1cb9e <mouseCursorAnim>,d0
   15454:	|      movea.l 40(sp),a0
   15458:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1545c:	|      move.l 1cba2 <mouseCursorFrameNum>,d0
   15462:	|      movea.l 40(sp),a0
   15466:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1546a:	|      jsr ae60 <makeNullAnim>
   15470:	|      move.l d0,1cb9e <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15476:	|      clr.l 1cba2 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1547c:	|      move.l 1cd00 <zBuffer>,d0
   15482:	|      movea.l 40(sp),a0
   15486:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1548a:	|      clr.l 1cd00 <zBuffer>

	newFreezer -> speech = speech;
   15490:	|      move.l 1cbf4 <speech>,d0
   15496:	|      movea.l 40(sp),a0
   1549a:	|      move.l d0,20(a0)
	initSpeech ();
   1549e:	|      jsr 3ff2 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   154a4:	|      move.l 1c614 <currentEvents>,d0
   154aa:	|      movea.l 40(sp),a0
   154ae:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   154b2:	|      moveq #28,d0
   154b4:	|      move.l d0,12(sp)
   154b8:	|      clr.l 8(sp)
   154bc:	|      move.l 1cca4 <SysBase>,d0
   154c2:	|      movea.l d0,a6
   154c4:	|      move.l 12(sp),d0
   154c8:	|      move.l 8(sp),d1
   154cc:	|      jsr -684(a6)
   154d0:	|      move.l d0,4(sp)
   154d4:	|      move.l 4(sp),d0
   154d8:	|      move.l d0,1c614 <currentEvents>
	if (!currentEvents) return FALSE;
   154de:	|      move.l 1c614 <currentEvents>,d0
   154e4:	|  ,-- bne.s 154ea <freeze+0x1a8>
   154e6:	|  |   clr.w d0
   154e8:	+--|-- bra.s 1551a <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   154ea:	|  '-> move.l 1c614 <currentEvents>,d0
   154f0:	|      pea 1c <_start+0x1c>
   154f4:	|      clr.l -(sp)
   154f6:	|      move.l d0,-(sp)
   154f8:	|      jsr 173da <memset>
   154fe:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15502:	|      move.l 1cd94 <frozenStuff>,d0
   15508:	|      movea.l 40(sp),a0
   1550c:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15510:	|      move.l 40(sp),1cd94 <frozenStuff>

	return TRUE;
   15518:	|      moveq #1,d0
}
   1551a:	'----> movea.l (sp)+,a6
   1551c:	       lea 52(sp),sp
   15520:	       rts

00015522 <howFrozen>:

int howFrozen () {
   15522:	       subq.l #8,sp
	int a = 0;
   15524:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15528:	       move.l 1cd94 <frozenStuff>,(sp)
	while (f) {
   1552e:	   ,-- bra.s 1553a <howFrozen+0x18>
		a ++;
   15530:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15534:	|  |   movea.l (sp),a0
   15536:	|  |   move.l 64(a0),(sp)
	while (f) {
   1553a:	|  '-> tst.l (sp)
   1553c:	'----- bne.s 15530 <howFrozen+0xe>
	}
	return a;
   1553e:	       move.l 4(sp),d0
}
   15542:	       addq.l #8,sp
   15544:	       rts

00015546 <unfreeze>:

void unfreeze () {
   15546:	       lea -16(sp),sp
   1554a:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1554c:	       move.l 1cd94 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   15554:	       move.l 1cd94 <frozenStuff>,d0
   1555a:	,----- beq.w 15792 <unfreeze+0x24c>

	CstUnfreeze();
   1555e:	|      jsr 3c5e <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   15564:	|      movea.l 1cd94 <frozenStuff>,a0
   1556a:	|      move.l 48(a0),d0
   1556e:	|      move.l d0,1cd3c <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   15574:	|      movea.l 1cd94 <frozenStuff>,a0
   1557a:	|      move.l 52(a0),d0
   1557e:	|      move.l d0,1cd40 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   15584:	|      movea.l 1cd94 <frozenStuff>,a0
   1558a:	|      move.l 40(a0),d0
   1558e:	|      move.l d0,1cd5a <cameraX>
	cameraY = frozenStuff -> cameraY;
   15594:	|      movea.l 1cd94 <frozenStuff>,a0
   1559a:	|      move.l 44(a0),d0
   1559e:	|      move.l d0,1cd5e <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   155a4:	|      move.l 1cc60 <input+0xa>,d0
   155aa:	|      move.l d0,-(sp)
   155ac:	|      jsr 17888 <__floatsisf>
   155b2:	|      addq.l #4,sp
   155b4:	|      move.l d0,d1
   155b6:	|      move.l 1c636 <cameraZoom>,d0
   155bc:	|      move.l d0,-(sp)
   155be:	|      move.l d1,-(sp)
   155c0:	|      jsr 1793a <__mulsf3>
   155c6:	|      addq.l #8,sp
   155c8:	|      move.l d0,-(sp)
   155ca:	|      jsr 17820 <__fixsfsi>
   155d0:	|      addq.l #4,sp
   155d2:	|      move.l d0,1cc60 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   155d8:	|      move.l 1cc64 <input+0xe>,d0
   155de:	|      move.l d0,-(sp)
   155e0:	|      jsr 17888 <__floatsisf>
   155e6:	|      addq.l #4,sp
   155e8:	|      move.l d0,d1
   155ea:	|      move.l 1c636 <cameraZoom>,d0
   155f0:	|      move.l d0,-(sp)
   155f2:	|      move.l d1,-(sp)
   155f4:	|      jsr 1793a <__mulsf3>
   155fa:	|      addq.l #8,sp
   155fc:	|      move.l d0,-(sp)
   155fe:	|      jsr 17820 <__fixsfsi>
   15604:	|      addq.l #4,sp
   15606:	|      move.l d0,1cc64 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   1560c:	|      movea.l 1cd94 <frozenStuff>,a0
   15612:	|      move.l 56(a0),d0
   15616:	|      move.l d0,1c636 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   1561c:	|      move.l 1cc60 <input+0xa>,d0
   15622:	|      move.l d0,-(sp)
   15624:	|      jsr 17888 <__floatsisf>
   1562a:	|      addq.l #4,sp
   1562c:	|      move.l d0,d1
   1562e:	|      move.l 1c636 <cameraZoom>,d0
   15634:	|      move.l d0,-(sp)
   15636:	|      move.l d1,-(sp)
   15638:	|      jsr 1773e <__divsf3>
   1563e:	|      addq.l #8,sp
   15640:	|      move.l d0,-(sp)
   15642:	|      jsr 17820 <__fixsfsi>
   15648:	|      addq.l #4,sp
   1564a:	|      move.l d0,1cc60 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15650:	|      move.l 1cc64 <input+0xe>,d0
   15656:	|      move.l d0,-(sp)
   15658:	|      jsr 17888 <__floatsisf>
   1565e:	|      addq.l #4,sp
   15660:	|      move.l d0,d1
   15662:	|      move.l 1c636 <cameraZoom>,d0
   15668:	|      move.l d0,-(sp)
   1566a:	|      move.l d1,-(sp)
   1566c:	|      jsr 1773e <__divsf3>
   15672:	|      addq.l #8,sp
   15674:	|      move.l d0,-(sp)
   15676:	|      jsr 17820 <__fixsfsi>
   1567c:	|      addq.l #4,sp
   1567e:	|      move.l d0,1cc64 <input+0xe>

	killAllPeople ();
   15684:	|      jsr ab30 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   1568a:	|      movea.l 1cd94 <frozenStuff>,a0
   15690:	|      move.l (a0),d0
   15692:	|      move.l d0,1cd04 <allPeople>

	killAllRegions ();
   15698:	|      jsr 15c66 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   1569e:	|      movea.l 1cd94 <frozenStuff>,a0
   156a4:	|      move.l 4(a0),d0
   156a8:	|      move.l d0,1cdb0 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   156ae:	|      move.l 1cb9e <mouseCursorAnim>,d0
   156b4:	|      move.l d0,-(sp)
   156b6:	|      jsr 99fa <deleteAnim>
   156bc:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   156be:	|      movea.l 1cd94 <frozenStuff>,a0
   156c4:	|      move.l 32(a0),d0
   156c8:	|      move.l d0,1cb9e <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   156ce:	|      movea.l 1cd94 <frozenStuff>,a0
   156d4:	|      move.l 36(a0),d0
   156d8:	|      move.l d0,1cba2 <mouseCursorFrameNum>

	killZBuffer ();
   156de:	|      jsr 87a0 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   156e4:	|      movea.l 1cd94 <frozenStuff>,a0
   156ea:	|      move.l 60(a0),d0
   156ee:	|      move.l d0,1cd00 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   156f4:	|      move.l 1c614 <currentEvents>,d0
   156fa:	|  ,-- beq.s 15714 <unfreeze+0x1ce>
   156fc:	|  |   move.l 1c614 <currentEvents>,12(sp)
   15704:	|  |   move.l 1cca4 <SysBase>,d0
   1570a:	|  |   movea.l d0,a6
   1570c:	|  |   movea.l 12(sp),a1
   15710:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15714:	|  '-> movea.l 1cd94 <frozenStuff>,a0
   1571a:	|      move.l 28(a0),d0
   1571e:	|      move.l d0,1c614 <currentEvents>

	killAllSpeech ();
   15724:	|      jsr 408a <killAllSpeech>
	if (speech) FreeVec(speech);
   1572a:	|      move.l 1cbf4 <speech>,d0
   15730:	|  ,-- beq.s 1574a <unfreeze+0x204>
   15732:	|  |   move.l 1cbf4 <speech>,8(sp)
   1573a:	|  |   move.l 1cca4 <SysBase>,d0
   15740:	|  |   movea.l d0,a6
   15742:	|  |   movea.l 8(sp),a1
   15746:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   1574a:	|  '-> movea.l 1cd94 <frozenStuff>,a0
   15750:	|      move.l 20(a0),d0
   15754:	|      move.l d0,1cbf4 <speech>

	frozenStuff = frozenStuff -> next;
   1575a:	|      movea.l 1cd94 <frozenStuff>,a0
   15760:	|      move.l 64(a0),d0
   15764:	|      move.l d0,1cd94 <frozenStuff>

	overRegion = NULL;
   1576a:	|      clr.l 1cdb4 <overRegion>
	if (killMe) FreeVec(killMe);
   15770:	|      tst.l 16(sp)
   15774:	|  ,-- beq.s 1578c <unfreeze+0x246>
   15776:	|  |   move.l 16(sp),4(sp)
   1577c:	|  |   move.l 1cca4 <SysBase>,d0
   15782:	|  |   movea.l d0,a6
   15784:	|  |   movea.l 4(sp),a1
   15788:	|  |   jsr -690(a6)
	killMe = NULL;
   1578c:	|  '-> clr.l 16(sp)
   15790:	|  ,-- bra.s 15794 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15792:	'--|-> nop
}
   15794:	   '-> movea.l (sp)+,a6
   15796:	       lea 16(sp),sp
   1579a:	       rts

0001579c <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1579c:	pea 1a344 <talk.c.490538ff+0x501>
   157a2:	jsr 17456 <KPrintF>
   157a8:	addq.l #4,sp
	return FALSE;
   157aa:	clr.w d0
}
   157ac:	rts

000157ae <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   157ae:	          lea -32(sp),sp
   157b2:	          move.l a6,-(sp)
   157b4:	          move.l d2,-(sp)
	unsigned int a = 0;
   157b6:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   157ba:	          move.l 1cda0 <fontOrderString>,d0
   157c0:	      ,-- beq.s 157da <loadFont+0x2c>
   157c2:	      |   move.l 1cda0 <fontOrderString>,24(sp)
   157ca:	      |   move.l 1cca4 <SysBase>,d0
   157d0:	      |   movea.l d0,a6
   157d2:	      |   movea.l 24(sp),a1
   157d6:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   157da:	      '-> move.l 48(sp),-(sp)
   157de:	          jsr b8 <copyString>
   157e4:	          addq.l #4,sp
   157e6:	          move.l d0,1cda0 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   157ec:	          move.l 1cdac <theFont>,d0
   157f2:	      ,-- beq.s 15804 <loadFont+0x56>
   157f4:	      |   move.l 1cdac <theFont>,d0
   157fa:	      |   move.l d0,-(sp)
   157fc:	      |   jsr 8ade <forgetSpriteBank>
   15802:	      |   addq.l #4,sp
	theFont = NULL;
   15804:	      '-> clr.l 1cdac <theFont>

	loadedFontNum = filenum;
   1580a:	          move.l 44(sp),1cd9c <loadedFontNum>

	fontTableSize = 0;
   15812:	          clr.l 1cda8 <fontTableSize>
	char *tmp = charOrder;
   15818:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   1581e:	   ,----- bra.s 1585a <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15820:	,--|----> movea.l 32(sp),a0
   15824:	|  |      move.b (a0),d0
   15826:	|  |      ext.w d0
   15828:	|  |      movea.w d0,a0
   1582a:	|  |      move.l 1cda8 <fontTableSize>,d0
   15830:	|  |      move.l d0,d0
   15832:	|  |      move.b d0,d0
   15834:	|  |      andi.l #255,d0
   1583a:	|  |      cmp.l a0,d0
   1583c:	|  |  ,-- bge.s 1584e <loadFont+0xa0>
   1583e:	|  |  |   movea.l 32(sp),a0
   15842:	|  |  |   move.b (a0),d0
   15844:	|  |  |   ext.w d0
   15846:	|  |  |   movea.w d0,a0
   15848:	|  |  |   move.l a0,1cda8 <fontTableSize>
		*tmp++;
   1584e:	|  |  '-> move.l 32(sp),d0
   15852:	|  |      move.l d0,d1
   15854:	|  |      addq.l #1,d1
   15856:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   1585a:	|  '----> movea.l 32(sp),a0
   1585e:	|         move.b (a0),d0
   15860:	'-------- bne.s 15820 <loadFont+0x72>
	}
	fontTableSize++;
   15862:	          move.l 1cda8 <fontTableSize>,d0
   15868:	          addq.l #1,d0
   1586a:	          move.l d0,1cda8 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15870:	          move.l 1cda4 <fontTable>,d0
   15876:	      ,-- beq.s 15890 <loadFont+0xe2>
   15878:	      |   move.l 1cda4 <fontTable>,20(sp)
   15880:	      |   move.l 1cca4 <SysBase>,d0
   15886:	      |   movea.l d0,a6
   15888:	      |   movea.l 20(sp),a1
   1588c:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15890:	      '-> move.l 1cda8 <fontTableSize>,d0
   15896:	          add.l d0,d0
   15898:	          add.l d0,d0
   1589a:	          move.l d0,16(sp)
   1589e:	          clr.l 12(sp)
   158a2:	          move.l 1cca4 <SysBase>,d0
   158a8:	          movea.l d0,a6
   158aa:	          move.l 16(sp),d0
   158ae:	          move.l 12(sp),d1
   158b2:	          jsr -684(a6)
   158b6:	          move.l d0,8(sp)
   158ba:	          move.l 8(sp),d0
   158be:	          move.l d0,1cda4 <fontTable>
	if (!fontTable) return FALSE;
   158c4:	          move.l 1cda4 <fontTable>,d0
   158ca:	      ,-- bne.s 158d2 <loadFont+0x124>
   158cc:	      |   clr.w d0
   158ce:	,-----|-- bra.w 15978 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   158d2:	|     '-> clr.l 36(sp)
   158d6:	|     ,-- bra.s 158f0 <loadFont+0x142>
		fontTable[a] = 0;
   158d8:	|  ,--|-> move.l 1cda4 <fontTable>,d1
   158de:	|  |  |   move.l 36(sp),d0
   158e2:	|  |  |   add.l d0,d0
   158e4:	|  |  |   add.l d0,d0
   158e6:	|  |  |   movea.l d1,a0
   158e8:	|  |  |   adda.l d0,a0
   158ea:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   158ec:	|  |  |   addq.l #1,36(sp)
   158f0:	|  |  '-> move.l 1cda8 <fontTableSize>,d0
   158f6:	|  |      cmp.l 36(sp),d0
   158fa:	|  '----- bhi.s 158d8 <loadFont+0x12a>
	}
	a = 0;
   158fc:	|         clr.l 36(sp)
	int i = 0;
   15900:	|         clr.l 28(sp)
	tmp = charOrder;
   15904:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   1590a:	|     ,-- bra.s 1593a <loadFont+0x18c>
		fontTable[*tmp++] = i;
   1590c:	|  ,--|-> move.l 1cda4 <fontTable>,d1
   15912:	|  |  |   move.l 32(sp),d0
   15916:	|  |  |   move.l d0,d2
   15918:	|  |  |   addq.l #1,d2
   1591a:	|  |  |   move.l d2,32(sp)
   1591e:	|  |  |   movea.l d0,a0
   15920:	|  |  |   move.b (a0),d0
   15922:	|  |  |   ext.w d0
   15924:	|  |  |   movea.w d0,a0
   15926:	|  |  |   move.l a0,d0
   15928:	|  |  |   add.l a0,d0
   1592a:	|  |  |   add.l d0,d0
   1592c:	|  |  |   movea.l d1,a0
   1592e:	|  |  |   adda.l d0,a0
   15930:	|  |  |   move.l 28(sp),d0
   15934:	|  |  |   move.l d0,(a0)
		i++;
   15936:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   1593a:	|  |  '-> movea.l 32(sp),a0
   1593e:	|  |      move.b (a0),d0
   15940:	|  '----- bne.s 1590c <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15942:	|         move.l 44(sp),-(sp)
   15946:	|         jsr 16178 <loadBankForAnim>
   1594c:	|         addq.l #4,sp
   1594e:	|         move.l d0,1cdac <theFont>
	if (!theFont) {
   15954:	|         move.l 1cdac <theFont>,d0
   1595a:	|     ,-- bne.s 1596e <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   1595c:	|     |   pea 1a36b <talk.c.490538ff+0x528>
   15962:	|     |   jsr 17456 <KPrintF>
   15968:	|     |   addq.l #4,sp
		return FALSE;
   1596a:	|     |   clr.w d0
   1596c:	+-----|-- bra.s 15978 <loadFont+0x1ca>
	}
	fontHeight = h;
   1596e:	|     '-> move.l 52(sp),1cd98 <fontHeight>
	return TRUE;
   15976:	|         moveq #1,d0
}
   15978:	'-------> move.l (sp)+,d2
   1597a:	          movea.l (sp)+,a6
   1597c:	          lea 32(sp),sp
   15980:	          rts

00015982 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15982:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15986:	                clr.l 4(sp)

    if (!fontTableSize) return;
   1598a:	                move.l 1cda8 <fontTableSize>,d0
   15990:	,-------------- beq.w 15a58 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15994:	|               move.w 1cb9c <fontSpace>,d0
   1599a:	|               asr.w #1,d0
   1599c:	|               ext.l d0
   1599e:	|               add.l d0,20(sp)
	char *tmp = theText;
   159a2:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   159a8:	|     ,-------- bra.w 15a4c <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   159ac:	|  ,--|-------> movea.l 1cdac <theFont>,a0
   159b2:	|  |  |         movea.l 16(a0),a0
   159b6:	|  |  |         movea.l 8(sp),a1
   159ba:	|  |  |         move.b (a1),d0
   159bc:	|  |  |         move.b d0,d0
   159be:	|  |  |         andi.l #255,d0
   159c4:	|  |  |         move.l 1cda8 <fontTableSize>,d1
   159ca:	|  |  |         cmp.l d0,d1
   159cc:	|  |  |  ,----- bls.s 159f8 <pasteStringToBackdrop+0x76>
   159ce:	|  |  |  |      move.l 1cda4 <fontTable>,d1
   159d4:	|  |  |  |      movea.l 8(sp),a1
   159d8:	|  |  |  |      move.b (a1),d0
   159da:	|  |  |  |      move.b d0,d0
   159dc:	|  |  |  |      andi.l #255,d0
   159e2:	|  |  |  |      add.l d0,d0
   159e4:	|  |  |  |      add.l d0,d0
   159e6:	|  |  |  |      movea.l d1,a1
   159e8:	|  |  |  |      adda.l d0,a1
   159ea:	|  |  |  |      move.l (a1),d1
   159ec:	|  |  |  |      move.l d1,d0
   159ee:	|  |  |  |      lsl.l #3,d0
   159f0:	|  |  |  |      sub.l d1,d0
   159f2:	|  |  |  |      add.l d0,d0
   159f4:	|  |  |  |      add.l d0,d0
   159f6:	|  |  |  |  ,-- bra.s 159fa <pasteStringToBackdrop+0x78>
   159f8:	|  |  |  '--|-> moveq #0,d0
   159fa:	|  |  |     '-> adda.l d0,a0
   159fc:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   159fe:	|  |  |         move.l 24(sp),d1
   15a02:	|  |  |         movea.l (sp),a0
   15a04:	|  |  |         move.l 12(a0),d0
   15a08:	|  |  |         move.l d0,d0
   15a0a:	|  |  |         sub.w d0,d1
   15a0c:	|  |  |         move.w d1,d0
   15a0e:	|  |  |         movea.w d0,a1
   15a10:	|  |  |         move.l 20(sp),d1
   15a14:	|  |  |         movea.l (sp),a0
   15a16:	|  |  |         move.l 8(a0),d0
   15a1a:	|  |  |         move.l d0,d0
   15a1c:	|  |  |         sub.w d0,d1
   15a1e:	|  |  |         move.w d1,d0
   15a20:	|  |  |         movea.w d0,a0
   15a22:	|  |  |         move.l a1,-(sp)
   15a24:	|  |  |         move.l a0,-(sp)
   15a26:	|  |  |         move.l 8(sp),-(sp)
   15a2a:	|  |  |         jsr 2426 <CstPasteChar>
   15a30:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15a34:	|  |  |         movea.l (sp),a0
   15a36:	|  |  |         move.l (a0),d1
   15a38:	|  |  |         move.w 1cb9c <fontSpace>,d0
   15a3e:	|  |  |         movea.w d0,a0
   15a40:	|  |  |         move.l d1,d0
   15a42:	|  |  |         add.l a0,d0
   15a44:	|  |  |         add.l d0,20(sp)
		tmp++;
   15a48:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15a4c:	|  |  '-------> movea.l 8(sp),a0
   15a50:	|  |            move.b (a0),d0
   15a52:	|  '----------- bne.w 159ac <pasteStringToBackdrop+0x2a>
   15a56:	|           ,-- bra.s 15a5a <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15a58:	'-----------|-> nop
    }
}
   15a5a:	            '-> lea 12(sp),sp
   15a5e:	                rts

00015a60 <stringWidth>:


int stringWidth (char * theText) {
   15a60:	                lea -16(sp),sp
	int a = 0;
   15a64:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15a68:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15a6c:	                move.l 1cda8 <fontTableSize>,d0
   15a72:	            ,-- bne.s 15a78 <stringWidth+0x18>
   15a74:	            |   moveq #0,d0
   15a76:	,-----------|-- bra.s 15aec <stringWidth+0x8c>

	char *tmp = theText;
   15a78:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15a7e:	|     ,-------- bra.s 15ae0 <stringWidth+0x80>
        c = *tmp++;
   15a80:	|  ,--|-------> move.l 8(sp),d0
   15a84:	|  |  |         move.l d0,d1
   15a86:	|  |  |         addq.l #1,d1
   15a88:	|  |  |         move.l d1,8(sp)
   15a8c:	|  |  |         movea.l d0,a0
   15a8e:	|  |  |         move.b (a0),d0
   15a90:	|  |  |         ext.w d0
   15a92:	|  |  |         movea.w d0,a0
   15a94:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15a96:	|  |  |         movea.l 1cdac <theFont>,a0
   15a9c:	|  |  |         movea.l 16(a0),a1
   15aa0:	|  |  |         move.l 1cda8 <fontTableSize>,d0
   15aa6:	|  |  |         cmp.l (sp),d0
   15aa8:	|  |  |  ,----- bls.s 15ac8 <stringWidth+0x68>
   15aaa:	|  |  |  |      move.l 1cda4 <fontTable>,d1
   15ab0:	|  |  |  |      move.l (sp),d0
   15ab2:	|  |  |  |      add.l d0,d0
   15ab4:	|  |  |  |      add.l d0,d0
   15ab6:	|  |  |  |      movea.l d1,a0
   15ab8:	|  |  |  |      adda.l d0,a0
   15aba:	|  |  |  |      move.l (a0),d1
   15abc:	|  |  |  |      move.l d1,d0
   15abe:	|  |  |  |      lsl.l #3,d0
   15ac0:	|  |  |  |      sub.l d1,d0
   15ac2:	|  |  |  |      add.l d0,d0
   15ac4:	|  |  |  |      add.l d0,d0
   15ac6:	|  |  |  |  ,-- bra.s 15aca <stringWidth+0x6a>
   15ac8:	|  |  |  '--|-> moveq #0,d0
   15aca:	|  |  |     '-> lea (0,a1,d0.l),a0
   15ace:	|  |  |         move.l (a0),d1
   15ad0:	|  |  |         move.w 1cb9c <fontSpace>,d0
   15ad6:	|  |  |         movea.w d0,a0
   15ad8:	|  |  |         move.l d1,d0
   15ada:	|  |  |         add.l a0,d0
   15adc:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15ae0:	|  |  '-------> movea.l 8(sp),a0
   15ae4:	|  |            move.b (a0),d0
   15ae6:	|  '----------- bne.s 15a80 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15ae8:	|               move.l 12(sp),d0
}
   15aec:	'-------------> lea 16(sp),sp
   15af0:	                rts

00015af2 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15af2:	       lea -16(sp),sp
   15af6:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15af8:	       moveq #36,d0
   15afa:	       move.l d0,16(sp)
   15afe:	       clr.l 12(sp)
   15b02:	       move.l 1cca4 <SysBase>,d0
   15b08:	       movea.l d0,a6
   15b0a:	       move.l 16(sp),d0
   15b0e:	       move.l 12(sp),d1
   15b12:	       jsr -684(a6)
   15b16:	       move.l d0,8(sp)
   15b1a:	       move.l 8(sp),d0
   15b1e:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15b22:	   ,-- bne.s 15b2a <addScreenRegion+0x38>
   15b24:	   |   clr.w d0
   15b26:	,--|-- bra.w 15baa <addScreenRegion+0xb8>
    newRegion->di = di;
   15b2a:	|  '-> movea.l 4(sp),a0
   15b2e:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15b34:	|      movea.l 4(sp),a0
   15b38:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15b3c:	|      movea.l 4(sp),a0
   15b40:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15b46:	|      movea.l 4(sp),a0
   15b4a:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15b50:	|      movea.l 4(sp),a0
   15b54:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15b5a:	|      movea.l 4(sp),a0
   15b5e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15b64:	|      movea.l 4(sp),a0
   15b68:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15b6e:	|      move.l 52(sp),-(sp)
   15b72:	|      jsr d77a <loadObjectType>
   15b78:	|      addq.l #4,sp
   15b7a:	|      movea.l 4(sp),a0
   15b7e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15b82:	|      move.l 1cdb0 <allScreenRegions>,d0
   15b88:	|      movea.l 4(sp),a0
   15b8c:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15b90:	|      move.l 4(sp),1cdb0 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15b98:	|      movea.l 4(sp),a0
   15b9c:	|      move.l 28(a0),d0
   15ba0:	|      sne d0
   15ba2:	|      neg.b d0
   15ba4:	|      move.b d0,d0
   15ba6:	|      andi.w #255,d0
}
   15baa:	'----> movea.l (sp)+,a6
   15bac:	       lea 16(sp),sp
   15bb0:	       rts

00015bb2 <getOverRegion>:

void getOverRegion () {
   15bb2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15bb4:	             move.l 1cdb0 <allScreenRegions>,(sp)
	while (thisRegion) {
   15bba:	   ,-------- bra.s 15c28 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15bbc:	,--|-------> move.l 1cc60 <input+0xa>,d0
   15bc2:	|  |         movea.l (sp),a0
   15bc4:	|  |         movea.l (a0),a0
   15bc6:	|  |         move.l 1cd5a <cameraX>,d1
   15bcc:	|  |         suba.l d1,a0
   15bce:	|  |         cmpa.l d0,a0
   15bd0:	|  |  ,----- bgt.s 15c22 <getOverRegion+0x70>
   15bd2:	|  |  |      move.l 1cc64 <input+0xe>,d0
   15bd8:	|  |  |      movea.l (sp),a0
   15bda:	|  |  |      movea.l 4(a0),a0
   15bde:	|  |  |      move.l 1cd5e <cameraY>,d1
   15be4:	|  |  |      suba.l d1,a0
   15be6:	|  |  |      cmpa.l d0,a0
   15be8:	|  |  +----- bgt.s 15c22 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15bea:	|  |  |      move.l 1cc60 <input+0xa>,d0
   15bf0:	|  |  |      movea.l (sp),a0
   15bf2:	|  |  |      movea.l 8(a0),a0
   15bf6:	|  |  |      move.l 1cd5a <cameraX>,d1
   15bfc:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15bfe:	|  |  |      cmpa.l d0,a0
   15c00:	|  |  +----- blt.s 15c22 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15c02:	|  |  |      move.l 1cc64 <input+0xe>,d0
   15c08:	|  |  |      movea.l (sp),a0
   15c0a:	|  |  |      movea.l 12(a0),a0
   15c0e:	|  |  |      move.l 1cd5e <cameraY>,d1
   15c14:	|  |  |      suba.l d1,a0
   15c16:	|  |  |      cmpa.l d0,a0
   15c18:	|  |  +----- blt.s 15c22 <getOverRegion+0x70>
			overRegion = thisRegion;
   15c1a:	|  |  |      move.l (sp),1cdb4 <overRegion>
			return;
   15c20:	|  |  |  ,-- bra.s 15c34 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15c22:	|  |  '--|-> movea.l (sp),a0
   15c24:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15c28:	|  '-----|-> tst.l (sp)
   15c2a:	'--------|-- bne.s 15bbc <getOverRegion+0xa>
	}
	overRegion = NULL;
   15c2c:	         |   clr.l 1cdb4 <overRegion>
	return;
   15c32:	         |   nop
}
   15c34:	         '-> addq.l #4,sp
   15c36:	             rts

00015c38 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15c38:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15c3a:	             move.l 1cdb0 <allScreenRegions>,(sp)

	while (thisRegion) {
   15c40:	   ,-------- bra.s 15c5c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15c42:	,--|-------> movea.l (sp),a0
   15c44:	|  |         movea.l 28(a0),a0
   15c48:	|  |         move.l 4(a0),d0
   15c4c:	|  |         cmp.l 8(sp),d0
   15c50:	|  |     ,-- bne.s 15c56 <getRegionForObject+0x1e>
			return thisRegion;
   15c52:	|  |     |   move.l (sp),d0
   15c54:	|  |  ,--|-- bra.s 15c62 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15c56:	|  |  |  '-> movea.l (sp),a0
   15c58:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15c5c:	|  '--|----> tst.l (sp)
   15c5e:	'-----|----- bne.s 15c42 <getRegionForObject+0xa>
	}

	return NULL;
   15c60:	      |      moveq #0,d0
}
   15c62:	      '----> addq.l #4,sp
   15c64:	             rts

00015c66 <killAllRegions>:

void killAllRegions () {
   15c66:	       subq.l #8,sp
   15c68:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15c6a:	   ,-- bra.s 15cac <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15c6c:	,--|-> move.l 1cdb0 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15c74:	|  |   movea.l 1cdb0 <allScreenRegions>,a0
   15c7a:	|  |   move.l 32(a0),d0
   15c7e:	|  |   move.l d0,1cdb0 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15c84:	|  |   movea.l 8(sp),a0
   15c88:	|  |   move.l 28(a0),d0
   15c8c:	|  |   move.l d0,-(sp)
   15c8e:	|  |   jsr da32 <removeObjectType>
   15c94:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15c96:	|  |   move.l 8(sp),4(sp)
   15c9c:	|  |   move.l 1cca4 <SysBase>,d0
   15ca2:	|  |   movea.l d0,a6
   15ca4:	|  |   movea.l 4(sp),a1
   15ca8:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15cac:	|  '-> move.l 1cdb0 <allScreenRegions>,d0
   15cb2:	'----- bne.s 15c6c <killAllRegions+0x6>
	}
	overRegion = NULL;
   15cb4:	       clr.l 1cdb4 <overRegion>
}
   15cba:	       nop
   15cbc:	       movea.l (sp)+,a6
   15cbe:	       addq.l #8,sp
   15cc0:	       rts

00015cc2 <loadRegions>:

void loadRegions (BPTR fp) {
   15cc2:	       lea -24(sp),sp
   15cc6:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15cc8:	       move.l 32(sp),-(sp)
   15ccc:	       jsr 6bc <get2bytes>
   15cd2:	       addq.l #4,sp
   15cd4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15cd8:	       move.l #118192,20(sp)

	while (numRegions --) {
   15ce0:	   ,-- bra.w 15dbe <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15ce4:	,--|-> moveq #36,d0
   15ce6:	|  |   move.l d0,16(sp)
   15cea:	|  |   clr.l 12(sp)
   15cee:	|  |   move.l 1cca4 <SysBase>,d0
   15cf4:	|  |   movea.l d0,a6
   15cf6:	|  |   move.l 16(sp),d0
   15cfa:	|  |   move.l 12(sp),d1
   15cfe:	|  |   jsr -684(a6)
   15d02:	|  |   move.l d0,8(sp)
   15d06:	|  |   move.l 8(sp),d0
   15d0a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15d0e:	|  |   movea.l 20(sp),a0
   15d12:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15d16:	|  |   moveq #32,d1
   15d18:	|  |   add.l 4(sp),d1
   15d1c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15d20:	|  |   move.l 32(sp),-(sp)
   15d24:	|  |   jsr 6bc <get2bytes>
   15d2a:	|  |   addq.l #4,sp
   15d2c:	|  |   movea.l 4(sp),a0
   15d30:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15d32:	|  |   move.l 32(sp),-(sp)
   15d36:	|  |   jsr 6bc <get2bytes>
   15d3c:	|  |   addq.l #4,sp
   15d3e:	|  |   movea.l 4(sp),a0
   15d42:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15d46:	|  |   move.l 32(sp),-(sp)
   15d4a:	|  |   jsr 6bc <get2bytes>
   15d50:	|  |   addq.l #4,sp
   15d52:	|  |   movea.l 4(sp),a0
   15d56:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15d5a:	|  |   move.l 32(sp),-(sp)
   15d5e:	|  |   jsr 6bc <get2bytes>
   15d64:	|  |   addq.l #4,sp
   15d66:	|  |   movea.l 4(sp),a0
   15d6a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15d6e:	|  |   move.l 32(sp),-(sp)
   15d72:	|  |   jsr 6bc <get2bytes>
   15d78:	|  |   addq.l #4,sp
   15d7a:	|  |   movea.l 4(sp),a0
   15d7e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15d82:	|  |   move.l 32(sp),-(sp)
   15d86:	|  |   jsr 6bc <get2bytes>
   15d8c:	|  |   addq.l #4,sp
   15d8e:	|  |   movea.l 4(sp),a0
   15d92:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15d96:	|  |   move.l 32(sp),-(sp)
   15d9a:	|  |   jsr 6bc <get2bytes>
   15da0:	|  |   addq.l #4,sp
   15da2:	|  |   movea.l 4(sp),a0
   15da6:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15daa:	|  |   move.l 32(sp),-(sp)
   15dae:	|  |   jsr d728 <loadObjectRef>
   15db4:	|  |   addq.l #4,sp
   15db6:	|  |   movea.l 4(sp),a0
   15dba:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15dbe:	|  '-> move.l 24(sp),d0
   15dc2:	|      move.l d0,d1
   15dc4:	|      subq.l #1,d1
   15dc6:	|      move.l d1,24(sp)
   15dca:	|      tst.l d0
   15dcc:	'----- bne.w 15ce4 <loadRegions+0x22>
	}
	* pointy = NULL;
   15dd0:	       movea.l 20(sp),a0
   15dd4:	       clr.l (a0)
}
   15dd6:	       nop
   15dd8:	       movea.l (sp)+,a6
   15dda:	       lea 24(sp),sp
   15dde:	       rts

00015de0 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15de0:	             lea -12(sp),sp
   15de4:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15de6:	             move.l #118192,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15dee:	   ,-------- bra.s 15e68 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15df0:	,--|-------> movea.l 12(sp),a0
   15df4:	|  |         movea.l (a0),a0
   15df6:	|  |         movea.l 28(a0),a0
   15dfa:	|  |         move.l 4(a0),d0
   15dfe:	|  |         cmp.l 20(sp),d0
   15e02:	|  |  ,----- bne.s 15e5a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15e04:	|  |  |      movea.l 12(sp),a0
   15e08:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15e0c:	|  |  |      movea.l 8(sp),a0
   15e10:	|  |  |      move.l 32(a0),d0
   15e14:	|  |  |      movea.l 12(sp),a0
   15e18:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15e1a:	|  |  |      movea.l 8(sp),a0
   15e1e:	|  |  |      move.l 28(a0),d0
   15e22:	|  |  |      move.l d0,-(sp)
   15e24:	|  |  |      jsr da32 <removeObjectType>
   15e2a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15e2c:	|  |  |      move.l 1cdb4 <overRegion>,d0
   15e32:	|  |  |      cmp.l 8(sp),d0
   15e36:	|  |  |  ,-- bne.s 15e3e <removeScreenRegion+0x5e>
   15e38:	|  |  |  |   clr.l 1cdb4 <overRegion>
            FreeVec(killMe);
   15e3e:	|  |  |  '-> move.l 8(sp),4(sp)
   15e44:	|  |  |      move.l 1cca4 <SysBase>,d0
   15e4a:	|  |  |      movea.l d0,a6
   15e4c:	|  |  |      movea.l 4(sp),a1
   15e50:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15e54:	|  |  |      clr.l 8(sp)
   15e58:	|  +--|----- bra.s 15e68 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15e5a:	|  |  '----> movea.l 12(sp),a0
   15e5e:	|  |         move.l (a0),d0
   15e60:	|  |         moveq #32,d1
   15e62:	|  |         add.l d0,d1
   15e64:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15e68:	|  '-------> movea.l 12(sp),a0
   15e6c:	|            move.l (a0),d0
   15e6e:	'----------- bne.s 15df0 <removeScreenRegion+0x10>
        }
    }
}
   15e70:	             nop
   15e72:	             nop
   15e74:	             movea.l (sp)+,a6
   15e76:	             lea 12(sp),sp
   15e7a:	             rts

00015e7c <saveRegions>:

void saveRegions (BPTR fp) {
   15e7c:	       subq.l #8,sp
	int numRegions = 0;
   15e7e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15e82:	       move.l 1cdb0 <allScreenRegions>,(sp)
	while (thisRegion) {
   15e88:	   ,-- bra.s 15e94 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15e8a:	,--|-> movea.l (sp),a0
   15e8c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15e90:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15e94:	|  '-> tst.l (sp)
   15e96:	'----- bne.s 15e8a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15e98:	       move.l 12(sp),-(sp)
   15e9c:	       move.l 8(sp),-(sp)
   15ea0:	       jsr 8d0 <put2bytes>
   15ea6:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15ea8:	       move.l 1cdb0 <allScreenRegions>,(sp)
	while (thisRegion) {
   15eae:	,----- bra.w 15f56 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15eb2:	|  ,-> movea.l (sp),a0
   15eb4:	|  |   move.l (a0),d0
   15eb6:	|  |   move.l 12(sp),-(sp)
   15eba:	|  |   move.l d0,-(sp)
   15ebc:	|  |   jsr 8d0 <put2bytes>
   15ec2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15ec4:	|  |   movea.l (sp),a0
   15ec6:	|  |   move.l 4(a0),d0
   15eca:	|  |   move.l 12(sp),-(sp)
   15ece:	|  |   move.l d0,-(sp)
   15ed0:	|  |   jsr 8d0 <put2bytes>
   15ed6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15ed8:	|  |   movea.l (sp),a0
   15eda:	|  |   move.l 8(a0),d0
   15ede:	|  |   move.l 12(sp),-(sp)
   15ee2:	|  |   move.l d0,-(sp)
   15ee4:	|  |   jsr 8d0 <put2bytes>
   15eea:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15eec:	|  |   movea.l (sp),a0
   15eee:	|  |   move.l 12(a0),d0
   15ef2:	|  |   move.l 12(sp),-(sp)
   15ef6:	|  |   move.l d0,-(sp)
   15ef8:	|  |   jsr 8d0 <put2bytes>
   15efe:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15f00:	|  |   movea.l (sp),a0
   15f02:	|  |   move.l 16(a0),d0
   15f06:	|  |   move.l 12(sp),-(sp)
   15f0a:	|  |   move.l d0,-(sp)
   15f0c:	|  |   jsr 8d0 <put2bytes>
   15f12:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15f14:	|  |   movea.l (sp),a0
   15f16:	|  |   move.l 20(a0),d0
   15f1a:	|  |   move.l 12(sp),-(sp)
   15f1e:	|  |   move.l d0,-(sp)
   15f20:	|  |   jsr 8d0 <put2bytes>
   15f26:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15f28:	|  |   movea.l (sp),a0
   15f2a:	|  |   move.l 24(a0),d0
   15f2e:	|  |   move.l 12(sp),-(sp)
   15f32:	|  |   move.l d0,-(sp)
   15f34:	|  |   jsr 8d0 <put2bytes>
   15f3a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15f3c:	|  |   movea.l (sp),a0
   15f3e:	|  |   move.l 28(a0),d0
   15f42:	|  |   move.l 12(sp),-(sp)
   15f46:	|  |   move.l d0,-(sp)
   15f48:	|  |   jsr dad2 <saveObjectRef>
   15f4e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15f50:	|  |   movea.l (sp),a0
   15f52:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15f56:	'--|-> tst.l (sp)
   15f58:	   '-- bne.w 15eb2 <saveRegions+0x36>
	}
}
   15f5c:	       nop
   15f5e:	       nop
   15f60:	       addq.l #8,sp
   15f62:	       rts

00015f64 <showBoxes>:

void showBoxes () {
   15f64:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15f66:	       move.l 1cdb0 <allScreenRegions>,(sp)

	while (huntRegion) {
   15f6c:	,----- bra.w 16008 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15f70:	|  ,-> movea.l (sp),a0
   15f72:	|  |   move.l 12(a0),d0
   15f76:	|  |   movea.l d0,a1
   15f78:	|  |   movea.l (sp),a0
   15f7a:	|  |   move.l 4(a0),d0
   15f7e:	|  |   move.l d0,d1
   15f80:	|  |   movea.l (sp),a0
   15f82:	|  |   move.l (a0),d0
   15f84:	|  |   move.l a1,-(sp)
   15f86:	|  |   move.l d1,-(sp)
   15f88:	|  |   move.l d0,-(sp)
   15f8a:	|  |   jsr d3b6 <drawVerticalLine>
   15f90:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15f94:	|  |   movea.l (sp),a0
   15f96:	|  |   move.l 12(a0),d0
   15f9a:	|  |   movea.l d0,a1
   15f9c:	|  |   movea.l (sp),a0
   15f9e:	|  |   move.l 4(a0),d0
   15fa2:	|  |   move.l d0,d1
   15fa4:	|  |   movea.l (sp),a0
   15fa6:	|  |   move.l 8(a0),d0
   15faa:	|  |   move.l a1,-(sp)
   15fac:	|  |   move.l d1,-(sp)
   15fae:	|  |   move.l d0,-(sp)
   15fb0:	|  |   jsr d3b6 <drawVerticalLine>
   15fb6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15fba:	|  |   movea.l (sp),a0
   15fbc:	|  |   move.l 8(a0),d0
   15fc0:	|  |   movea.l d0,a1
   15fc2:	|  |   movea.l (sp),a0
   15fc4:	|  |   move.l 4(a0),d0
   15fc8:	|  |   move.l d0,d1
   15fca:	|  |   movea.l (sp),a0
   15fcc:	|  |   move.l (a0),d0
   15fce:	|  |   move.l a1,-(sp)
   15fd0:	|  |   move.l d1,-(sp)
   15fd2:	|  |   move.l d0,-(sp)
   15fd4:	|  |   jsr d390 <drawHorizontalLine>
   15fda:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15fde:	|  |   movea.l (sp),a0
   15fe0:	|  |   move.l 8(a0),d0
   15fe4:	|  |   movea.l d0,a1
   15fe6:	|  |   movea.l (sp),a0
   15fe8:	|  |   move.l 12(a0),d0
   15fec:	|  |   move.l d0,d1
   15fee:	|  |   movea.l (sp),a0
   15ff0:	|  |   move.l (a0),d0
   15ff2:	|  |   move.l a1,-(sp)
   15ff4:	|  |   move.l d1,-(sp)
   15ff6:	|  |   move.l d0,-(sp)
   15ff8:	|  |   jsr d390 <drawHorizontalLine>
   15ffe:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   16002:	|  |   movea.l (sp),a0
   16004:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   16008:	'--|-> tst.l (sp)
   1600a:	   '-- bne.w 15f70 <showBoxes+0xc>
	}
   1600e:	       nop
   16010:	       nop
   16012:	       addq.l #4,sp
   16014:	       rts

00016016 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   16016:	       lea -88(sp),sp
   1601a:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   1601c:	       move.l 1cca4 <SysBase>,d0
   16022:	       movea.l d0,a6
   16024:	       jsr -666(a6)
   16028:	       move.l d0,88(sp)
   1602c:	       move.l 88(sp),d0
   16030:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   16034:	       move.l 84(sp),80(sp)
   1603a:	       moveq #40,d0
   1603c:	       move.l d0,76(sp)
   16040:	       move.l 1cca4 <SysBase>,d0
   16046:	       movea.l d0,a6
   16048:	       movea.l 80(sp),a0
   1604c:	       move.l 76(sp),d0
   16050:	       jsr -654(a6)
   16054:	       move.l d0,72(sp)
   16058:	       move.l 72(sp),d0
   1605c:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   16060:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   16066:	       move.l #107397,60(sp)
   1606e:	       clr.l 56(sp)
   16072:	       move.l 64(sp),52(sp)
   16078:	       clr.l 48(sp)
   1607c:	       move.l 1cca4 <SysBase>,d0
   16082:	       movea.l d0,a6
   16084:	       movea.l 60(sp),a0
   16088:	       move.l 56(sp),d0
   1608c:	       movea.l 52(sp),a1
   16090:	       move.l 48(sp),d1
   16094:	       jsr -444(a6)
   16098:	       move.b d0,47(sp)
   1609c:	       move.b 47(sp),d0
   160a0:	   ,-- beq.s 160b6 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   160a2:	   |   pea 1a392 <talk.c.490538ff+0x54f>
   160a8:	   |   jsr 17456 <KPrintF>
   160ae:	   |   addq.l #4,sp
        return 0;
   160b0:	   |   moveq #0,d0
   160b2:	,--|-- bra.w 16170 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   160b6:	|  '-> movea.l 64(sp),a0
   160ba:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   160c0:	|      lea 92(sp),a0
   160c4:	|      lea -86(a0),a0
   160c8:	|      move.l a0,38(sp)
   160cc:	|      movea.l 42(sp),a6
   160d0:	|      movea.l 38(sp),a0
   160d4:	|      jsr -60(a6)
   160d8:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   160dc:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   160e2:	|      move.l #1103515245,-(sp)
   160e8:	|      move.l 34(sp),-(sp)
   160ec:	|      jsr 17de2 <__mulsi3>
   160f2:	|      addq.l #8,sp
   160f4:	|      addi.l #12345,d0
   160fa:	|      move.l d0,d1
   160fc:	|      bclr #31,d1
   16100:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   16104:	|      move.l 30(sp),d0
   16108:	|      pea 64 <_start+0x64>
   1610c:	|      move.l d0,-(sp)
   1610e:	|      jsr 17ebc <__umodsi3>
   16114:	|      addq.l #8,sp
   16116:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   1611a:	|      move.l 26(sp),-(sp)
   1611e:	|      pea 1a3af <talk.c.490538ff+0x56c>
   16124:	|      jsr 17456 <KPrintF>
   1612a:	|      addq.l #8,sp

    CloseDevice(ioreq);
   1612c:	|      move.l 64(sp),22(sp)
   16132:	|      move.l 1cca4 <SysBase>,d0
   16138:	|      movea.l d0,a6
   1613a:	|      movea.l 22(sp),a1
   1613e:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16142:	|      move.l 64(sp),18(sp)
   16148:	|      move.l 1cca4 <SysBase>,d0
   1614e:	|      movea.l d0,a6
   16150:	|      movea.l 18(sp),a0
   16154:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   16158:	|      move.l 84(sp),14(sp)
   1615e:	|      move.l 1cca4 <SysBase>,d0
   16164:	|      movea.l d0,a6
   16166:	|      movea.l 14(sp),a0
   1616a:	|      jsr -672(a6)
    return 0;
   1616e:	|      moveq #0,d0
   16170:	'----> movea.l (sp)+,a6
   16172:	       lea 88(sp),sp
   16176:	       rts

00016178 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   16178:	             lea -20(sp),sp
   1617c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   1617e:	             move.l 1cdb8 <allLoadedBanks>,20(sp)
	while (returnMe) {
   16186:	      ,----- bra.s 161b8 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   16188:	   ,--|----> movea.l 20(sp),a0
   1618c:	   |  |      move.l (a0),d0
   1618e:	   |  |      cmp.l 28(sp),d0
   16192:	   |  |  ,-- bne.s 161ae <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   16194:	   |  |  |   movea.l 20(sp),a0
   16198:	   |  |  |   move.l 4(a0),d0
   1619c:	   |  |  |   addq.l #1,d0
   1619e:	   |  |  |   movea.l 20(sp),a0
   161a2:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   161a6:	   |  |  |   move.l 20(sp),d0
   161aa:	,--|--|--|-- bra.w 1624c <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   161ae:	|  |  |  '-> movea.l 20(sp),a0
   161b2:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   161b8:	|  |  '----> tst.l 20(sp)
   161bc:	|  '-------- bne.s 16188 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   161be:	|            moveq #26,d0
   161c0:	|            move.l d0,16(sp)
   161c4:	|            clr.l 12(sp)
   161c8:	|            move.l 1cca4 <SysBase>,d0
   161ce:	|            movea.l d0,a6
   161d0:	|            move.l 16(sp),d0
   161d4:	|            move.l 12(sp),d1
   161d8:	|            jsr -684(a6)
   161dc:	|            move.l d0,8(sp)
   161e0:	|            move.l 8(sp),d0
   161e4:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   161e8:	|     ,----- beq.s 1624a <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   161ea:	|     |      movea.l 20(sp),a0
   161ee:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   161f2:	|     |      move.l 20(sp),d0
   161f6:	|     |      addq.l #8,d0
   161f8:	|     |      move.l d0,-(sp)
   161fa:	|     |      move.l 32(sp),-(sp)
   161fe:	|     |      jsr 8bea <loadSpriteBank>
   16204:	|     |      addq.l #8,sp
   16206:	|     |      tst.w d0
   16208:	|     |  ,-- beq.s 16230 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   1620a:	|     |  |   movea.l 20(sp),a0
   1620e:	|     |  |   moveq #1,d0
   16210:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16214:	|     |  |   move.l 1cdb8 <allLoadedBanks>,d0
   1621a:	|     |  |   movea.l 20(sp),a0
   1621e:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16222:	|     |  |   move.l 20(sp),1cdb8 <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   1622a:	|     |  |   move.l 20(sp),d0
   1622e:	+-----|--|-- bra.s 1624c <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   16230:	|     |  '-> move.l 20(sp),4(sp)
   16236:	|     |      move.l 1cca4 <SysBase>,d0
   1623c:	|     |      movea.l d0,a6
   1623e:	|     |      movea.l 4(sp),a1
   16242:	|     |      jsr -690(a6)
			return NULL;
   16246:	|     |      moveq #0,d0
   16248:	+-----|----- bra.s 1624c <loadBankForAnim+0xd4>
		}
	} else return NULL;
   1624a:	|     '----> moveq #0,d0
}
   1624c:	'----------> movea.l (sp)+,a6
   1624e:	             lea 20(sp),sp
   16252:	             rts

00016254 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16254:	       lea -60(sp),sp
   16258:	       move.l d3,-(sp)
   1625a:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   1625c:	       move.l 88(sp),d0
   16260:	       sub.l 80(sp),d0
   16264:	       move.l d0,-(sp)
   16266:	       jsr 17848 <__floatsidf>
   1626c:	       addq.l #4,sp
   1626e:	       move.l d0,32(sp)
   16272:	       move.l d1,36(sp)
   16276:	       move.l 32(sp),60(sp)
   1627c:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   16282:	       move.l 92(sp),d0
   16286:	       sub.l 84(sp),d0
   1628a:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   1628e:	       move.l 96(sp),d0
   16292:	       sub.l 80(sp),d0
   16296:	       move.l d0,-(sp)
   16298:	       jsr 17848 <__floatsidf>
   1629e:	       addq.l #4,sp
   162a0:	       move.l 64(sp),-(sp)
   162a4:	       move.l 64(sp),-(sp)
   162a8:	       move.l d1,-(sp)
   162aa:	       move.l d0,-(sp)
   162ac:	       jsr 178d8 <__muldf3>
   162b2:	       lea 16(sp),sp
   162b6:	       move.l d0,d2
   162b8:	       move.l d1,d3
   162ba:	       move.l 100(sp),d0
   162be:	       sub.l 84(sp),d0
   162c2:	       move.l 56(sp),-(sp)
   162c6:	       move.l d0,-(sp)
   162c8:	       jsr 17de2 <__mulsi3>
   162ce:	       addq.l #8,sp
   162d0:	       move.l d0,-(sp)
   162d2:	       jsr 17848 <__floatsidf>
   162d8:	       addq.l #4,sp
   162da:	       move.l d1,-(sp)
   162dc:	       move.l d0,-(sp)
   162de:	       move.l d3,-(sp)
   162e0:	       move.l d2,-(sp)
   162e2:	       jsr 1767a <__adddf3>
   162e8:	       lea 16(sp),sp
   162ec:	       move.l d0,24(sp)
   162f0:	       move.l d1,28(sp)
   162f4:	       move.l 24(sp),48(sp)
   162fa:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16300:	       move.l 64(sp),-(sp)
   16304:	       move.l 64(sp),-(sp)
   16308:	       move.l 72(sp),-(sp)
   1630c:	       move.l 72(sp),-(sp)
   16310:	       jsr 178d8 <__muldf3>
   16316:	       lea 16(sp),sp
   1631a:	       move.l d0,d2
   1631c:	       move.l d1,d3
   1631e:	       move.l 56(sp),-(sp)
   16322:	       move.l 60(sp),-(sp)
   16326:	       jsr 17de2 <__mulsi3>
   1632c:	       addq.l #8,sp
   1632e:	       move.l d0,-(sp)
   16330:	       jsr 17848 <__floatsidf>
   16336:	       addq.l #4,sp
   16338:	       move.l d1,-(sp)
   1633a:	       move.l d0,-(sp)
   1633c:	       move.l d3,-(sp)
   1633e:	       move.l d2,-(sp)
   16340:	       jsr 1767a <__adddf3>
   16346:	       lea 16(sp),sp
   1634a:	       move.l d1,-(sp)
   1634c:	       move.l d0,-(sp)
   1634e:	       move.l 60(sp),-(sp)
   16352:	       move.l 60(sp),-(sp)
   16356:	       jsr 176dc <__divdf3>
   1635c:	       lea 16(sp),sp
   16360:	       move.l d0,16(sp)
   16364:	       move.l d1,20(sp)
   16368:	       move.l 16(sp),48(sp)
   1636e:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16374:	       clr.l -(sp)
   16376:	       clr.l -(sp)
   16378:	       move.l 60(sp),-(sp)
   1637c:	       move.l 60(sp),-(sp)
   16380:	       jsr 17a60 <__ltdf2>
   16386:	       lea 16(sp),sp
   1638a:	       tst.l d0
   1638c:	   ,-- bge.s 163a2 <closestPointOnLine+0x14e>
		*closestX = x1;
   1638e:	   |   movea.l 72(sp),a0
   16392:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16396:	   |   movea.l 76(sp),a0
   1639a:	   |   move.l 84(sp),(a0)
   1639e:	,--|-- bra.w 16470 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   163a2:	|  '-> clr.l -(sp)
   163a4:	|      move.l #1072693248,-(sp)
   163aa:	|      move.l 60(sp),-(sp)
   163ae:	|      move.l 60(sp),-(sp)
   163b2:	|      jsr 179a6 <__gtdf2>
   163b8:	|      lea 16(sp),sp
   163bc:	|      tst.l d0
   163be:	|  ,-- ble.s 163d4 <closestPointOnLine+0x180>
		*closestX = x2;
   163c0:	|  |   movea.l 72(sp),a0
   163c4:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   163c8:	|  |   movea.l 76(sp),a0
   163cc:	|  |   move.l 92(sp),(a0)
   163d0:	+--|-- bra.w 16470 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   163d4:	|  '-> move.l 64(sp),-(sp)
   163d8:	|      move.l 64(sp),-(sp)
   163dc:	|      move.l 60(sp),-(sp)
   163e0:	|      move.l 60(sp),-(sp)
   163e4:	|      jsr 178d8 <__muldf3>
   163ea:	|      lea 16(sp),sp
   163ee:	|      move.l d0,8(sp)
   163f2:	|      move.l d1,12(sp)
   163f6:	|      move.l 8(sp),40(sp)
   163fc:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16402:	|      move.l 44(sp),-(sp)
   16406:	|      move.l 44(sp),-(sp)
   1640a:	|      jsr 177ea <__fixdfsi>
   16410:	|      addq.l #8,sp
   16412:	|      movea.l 72(sp),a0
   16416:	|      move.l d0,(a0)
		*closestX += x1;
   16418:	|      movea.l 72(sp),a0
   1641c:	|      move.l (a0),d0
   1641e:	|      add.l 80(sp),d0
   16422:	|      movea.l 72(sp),a0
   16426:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16428:	|      move.l 56(sp),-(sp)
   1642c:	|      jsr 17848 <__floatsidf>
   16432:	|      addq.l #4,sp
   16434:	|      move.l 52(sp),-(sp)
   16438:	|      move.l 52(sp),-(sp)
   1643c:	|      move.l d1,-(sp)
   1643e:	|      move.l d0,-(sp)
   16440:	|      jsr 178d8 <__muldf3>
   16446:	|      lea 16(sp),sp
   1644a:	|      move.l d1,-(sp)
   1644c:	|      move.l d0,-(sp)
   1644e:	|      jsr 177ea <__fixdfsi>
   16454:	|      addq.l #8,sp
   16456:	|      movea.l 76(sp),a0
   1645a:	|      move.l d0,(a0)
		*closestY += y1;
   1645c:	|      movea.l 76(sp),a0
   16460:	|      move.l (a0),d0
   16462:	|      add.l 84(sp),d0
   16466:	|      movea.l 76(sp),a0
   1646a:	|      move.l d0,(a0)
		return TRUE;
   1646c:	|      moveq #1,d0
   1646e:	|  ,-- bra.s 16472 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16470:	'--|-> clr.w d0
}
   16472:	   '-> move.l (sp)+,d2
   16474:	       move.l (sp)+,d3
   16476:	       lea 60(sp),sp
   1647a:	       rts

0001647c <drawFloor>:

void drawFloor() {
   1647c:	                lea -12(sp),sp
   16480:	                move.l d3,-(sp)
   16482:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16484:	                clr.l 16(sp)
   16488:	   ,----------- bra.w 1669c <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1648c:	,--|----------> movea.l 1cdbc <currentFloor>,a0
   16492:	|  |            move.l 12(a0),d1
   16496:	|  |            move.l 16(sp),d0
   1649a:	|  |            lsl.l #3,d0
   1649c:	|  |            movea.l d1,a0
   1649e:	|  |            adda.l d0,a0
   164a0:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   164a4:	|  |            moveq #1,d0
   164a6:	|  |            cmp.l 8(sp),d0
   164aa:	|  |  ,-------- bge.w 16698 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   164ae:	|  |  |         moveq #1,d0
   164b0:	|  |  |         move.l d0,12(sp)
   164b4:	|  |  |     ,-- bra.w 165ae <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   164b8:	|  |  |  ,--|-> movea.l 1cdbc <currentFloor>,a0
   164be:	|  |  |  |  |   move.l 4(a0),d1
   164c2:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   164c8:	|  |  |  |  |   movea.l 12(a0),a0
   164cc:	|  |  |  |  |   move.l 16(sp),d0
   164d0:	|  |  |  |  |   lsl.l #3,d0
   164d2:	|  |  |  |  |   adda.l d0,a0
   164d4:	|  |  |  |  |   movea.l 4(a0),a0
   164d8:	|  |  |  |  |   move.l 12(sp),d0
   164dc:	|  |  |  |  |   add.l d0,d0
   164de:	|  |  |  |  |   add.l d0,d0
   164e0:	|  |  |  |  |   adda.l d0,a0
   164e2:	|  |  |  |  |   move.l (a0),d0
   164e4:	|  |  |  |  |   lsl.l #3,d0
   164e6:	|  |  |  |  |   movea.l d1,a0
   164e8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   164ea:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   164ee:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   164f4:	|  |  |  |  |   move.l 4(a0),d1
   164f8:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   164fe:	|  |  |  |  |   movea.l 12(a0),a0
   16502:	|  |  |  |  |   move.l 16(sp),d0
   16506:	|  |  |  |  |   lsl.l #3,d0
   16508:	|  |  |  |  |   adda.l d0,a0
   1650a:	|  |  |  |  |   movea.l 4(a0),a0
   1650e:	|  |  |  |  |   move.l 12(sp),d0
   16512:	|  |  |  |  |   add.l d0,d0
   16514:	|  |  |  |  |   add.l d0,d0
   16516:	|  |  |  |  |   adda.l d0,a0
   16518:	|  |  |  |  |   move.l (a0),d0
   1651a:	|  |  |  |  |   lsl.l #3,d0
   1651c:	|  |  |  |  |   movea.l d1,a0
   1651e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16520:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16522:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   16528:	|  |  |  |  |   move.l 4(a0),d1
   1652c:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   16532:	|  |  |  |  |   movea.l 12(a0),a0
   16536:	|  |  |  |  |   move.l 16(sp),d0
   1653a:	|  |  |  |  |   lsl.l #3,d0
   1653c:	|  |  |  |  |   adda.l d0,a0
   1653e:	|  |  |  |  |   movea.l 4(a0),a0
   16542:	|  |  |  |  |   move.l 12(sp),d0
   16546:	|  |  |  |  |   addi.l #1073741823,d0
   1654c:	|  |  |  |  |   add.l d0,d0
   1654e:	|  |  |  |  |   add.l d0,d0
   16550:	|  |  |  |  |   adda.l d0,a0
   16552:	|  |  |  |  |   move.l (a0),d0
   16554:	|  |  |  |  |   lsl.l #3,d0
   16556:	|  |  |  |  |   movea.l d1,a0
   16558:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1655a:	|  |  |  |  |   move.l 4(a0),d1
   1655e:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   16564:	|  |  |  |  |   move.l 4(a0),d3
   16568:	|  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   1656e:	|  |  |  |  |   movea.l 12(a0),a0
   16572:	|  |  |  |  |   move.l 16(sp),d0
   16576:	|  |  |  |  |   lsl.l #3,d0
   16578:	|  |  |  |  |   adda.l d0,a0
   1657a:	|  |  |  |  |   movea.l 4(a0),a0
   1657e:	|  |  |  |  |   move.l 12(sp),d0
   16582:	|  |  |  |  |   addi.l #1073741823,d0
   16588:	|  |  |  |  |   add.l d0,d0
   1658a:	|  |  |  |  |   add.l d0,d0
   1658c:	|  |  |  |  |   adda.l d0,a0
   1658e:	|  |  |  |  |   move.l (a0),d0
   16590:	|  |  |  |  |   lsl.l #3,d0
   16592:	|  |  |  |  |   movea.l d3,a0
   16594:	|  |  |  |  |   adda.l d0,a0
   16596:	|  |  |  |  |   move.l (a0),d0
   16598:	|  |  |  |  |   move.l d2,-(sp)
   1659a:	|  |  |  |  |   move.l a1,-(sp)
   1659c:	|  |  |  |  |   move.l d1,-(sp)
   1659e:	|  |  |  |  |   move.l d0,-(sp)
   165a0:	|  |  |  |  |   jsr 4866 <drawLine>
   165a6:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   165aa:	|  |  |  |  |   addq.l #1,12(sp)
   165ae:	|  |  |  |  '-> move.l 12(sp),d0
   165b2:	|  |  |  |      cmp.l 8(sp),d0
   165b6:	|  |  |  '----- blt.w 164b8 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   165ba:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   165c0:	|  |  |         move.l 4(a0),d1
   165c4:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   165ca:	|  |  |         movea.l 12(a0),a0
   165ce:	|  |  |         move.l 16(sp),d0
   165d2:	|  |  |         lsl.l #3,d0
   165d4:	|  |  |         adda.l d0,a0
   165d6:	|  |  |         movea.l 4(a0),a0
   165da:	|  |  |         move.l 8(sp),d0
   165de:	|  |  |         addi.l #1073741823,d0
   165e4:	|  |  |         add.l d0,d0
   165e6:	|  |  |         add.l d0,d0
   165e8:	|  |  |         adda.l d0,a0
   165ea:	|  |  |         move.l (a0),d0
   165ec:	|  |  |         lsl.l #3,d0
   165ee:	|  |  |         movea.l d1,a0
   165f0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   165f2:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   165f6:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   165fc:	|  |  |         move.l 4(a0),d1
   16600:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   16606:	|  |  |         movea.l 12(a0),a0
   1660a:	|  |  |         move.l 16(sp),d0
   1660e:	|  |  |         lsl.l #3,d0
   16610:	|  |  |         adda.l d0,a0
   16612:	|  |  |         movea.l 4(a0),a0
   16616:	|  |  |         move.l 8(sp),d0
   1661a:	|  |  |         addi.l #1073741823,d0
   16620:	|  |  |         add.l d0,d0
   16622:	|  |  |         add.l d0,d0
   16624:	|  |  |         adda.l d0,a0
   16626:	|  |  |         move.l (a0),d0
   16628:	|  |  |         lsl.l #3,d0
   1662a:	|  |  |         movea.l d1,a0
   1662c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1662e:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16630:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   16636:	|  |  |         move.l 4(a0),d1
   1663a:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   16640:	|  |  |         movea.l 12(a0),a0
   16644:	|  |  |         move.l 16(sp),d0
   16648:	|  |  |         lsl.l #3,d0
   1664a:	|  |  |         adda.l d0,a0
   1664c:	|  |  |         movea.l 4(a0),a0
   16650:	|  |  |         move.l (a0),d0
   16652:	|  |  |         lsl.l #3,d0
   16654:	|  |  |         movea.l d1,a0
   16656:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16658:	|  |  |         move.l 4(a0),d1
   1665c:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   16662:	|  |  |         move.l 4(a0),d3
   16666:	|  |  |         movea.l 1cdbc <currentFloor>,a0
   1666c:	|  |  |         movea.l 12(a0),a0
   16670:	|  |  |         move.l 16(sp),d0
   16674:	|  |  |         lsl.l #3,d0
   16676:	|  |  |         adda.l d0,a0
   16678:	|  |  |         movea.l 4(a0),a0
   1667c:	|  |  |         move.l (a0),d0
   1667e:	|  |  |         lsl.l #3,d0
   16680:	|  |  |         movea.l d3,a0
   16682:	|  |  |         adda.l d0,a0
   16684:	|  |  |         move.l (a0),d0
   16686:	|  |  |         move.l d2,-(sp)
   16688:	|  |  |         move.l a1,-(sp)
   1668a:	|  |  |         move.l d1,-(sp)
   1668c:	|  |  |         move.l d0,-(sp)
   1668e:	|  |  |         jsr 4866 <drawLine>
   16694:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16698:	|  |  '-------> addq.l #1,16(sp)
   1669c:	|  '----------> movea.l 1cdbc <currentFloor>,a0
   166a2:	|               move.l 8(a0),d0
   166a6:	|               cmp.l 16(sp),d0
   166aa:	'-------------- bgt.w 1648c <drawFloor+0x10>
        }
    }
}
   166ae:	                nop
   166b0:	                nop
   166b2:	                move.l (sp)+,d2
   166b4:	                move.l (sp)+,d3
   166b6:	                lea 12(sp),sp
   166ba:	                rts

000166bc <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   166bc:	                      lea -12(sp),sp
    int sharedVertices = 0;
   166c0:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   166c4:	                      clr.l 4(sp)
   166c8:	   ,----------------- bra.w 1675a <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   166cc:	,--|----------------> clr.l (sp)
   166ce:	|  |     ,----------- bra.s 1674a <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   166d0:	|  |  ,--|----------> movea.l 16(sp),a0
   166d4:	|  |  |  |            move.l 4(a0),d1
   166d8:	|  |  |  |            move.l 4(sp),d0
   166dc:	|  |  |  |            add.l d0,d0
   166de:	|  |  |  |            add.l d0,d0
   166e0:	|  |  |  |            movea.l d1,a0
   166e2:	|  |  |  |            adda.l d0,a0
   166e4:	|  |  |  |            move.l (a0),d1
   166e6:	|  |  |  |            movea.l 20(sp),a0
   166ea:	|  |  |  |            movea.l 4(a0),a0
   166ee:	|  |  |  |            move.l (sp),d0
   166f0:	|  |  |  |            add.l d0,d0
   166f2:	|  |  |  |            add.l d0,d0
   166f4:	|  |  |  |            adda.l d0,a0
   166f6:	|  |  |  |            move.l (a0),d0
   166f8:	|  |  |  |            cmp.l d1,d0
   166fa:	|  |  |  |  ,-------- bne.s 16748 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   166fc:	|  |  |  |  |         move.l 8(sp),d0
   16700:	|  |  |  |  |         move.l d0,d1
   16702:	|  |  |  |  |         addq.l #1,d1
   16704:	|  |  |  |  |         move.l d1,8(sp)
   16708:	|  |  |  |  |         tst.l d0
   1670a:	|  |  |  |  |     ,-- beq.s 1672c <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1670c:	|  |  |  |  |     |   movea.l 16(sp),a0
   16710:	|  |  |  |  |     |   move.l 4(a0),d1
   16714:	|  |  |  |  |     |   move.l 4(sp),d0
   16718:	|  |  |  |  |     |   add.l d0,d0
   1671a:	|  |  |  |  |     |   add.l d0,d0
   1671c:	|  |  |  |  |     |   movea.l d1,a0
   1671e:	|  |  |  |  |     |   adda.l d0,a0
   16720:	|  |  |  |  |     |   move.l (a0),d0
   16722:	|  |  |  |  |     |   movea.l 28(sp),a0
   16726:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16728:	|  |  |  |  |     |   moveq #1,d0
   1672a:	|  |  |  |  |  ,--|-- bra.s 1676a <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1672c:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16730:	|  |  |  |  |  |      move.l 4(a0),d1
   16734:	|  |  |  |  |  |      move.l 4(sp),d0
   16738:	|  |  |  |  |  |      add.l d0,d0
   1673a:	|  |  |  |  |  |      add.l d0,d0
   1673c:	|  |  |  |  |  |      movea.l d1,a0
   1673e:	|  |  |  |  |  |      adda.l d0,a0
   16740:	|  |  |  |  |  |      move.l (a0),d0
   16742:	|  |  |  |  |  |      movea.l 24(sp),a0
   16746:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16748:	|  |  |  |  '--|----> addq.l #1,(sp)
   1674a:	|  |  |  '-----|----> movea.l 20(sp),a0
   1674e:	|  |  |        |      move.l (a0),d0
   16750:	|  |  |        |      cmp.l (sp),d0
   16752:	|  |  '--------|----- bgt.w 166d0 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16756:	|  |           |      addq.l #1,4(sp)
   1675a:	|  '-----------|----> movea.l 16(sp),a0
   1675e:	|              |      move.l (a0),d0
   16760:	|              |      cmp.l 4(sp),d0
   16764:	'--------------|----- bgt.w 166cc <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16768:	               |      clr.w d0
}
   1676a:	               '----> lea 12(sp),sp
   1676e:	                      rts

00016770 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16770:	movea.l 1cdbc <currentFloor>,a0
   16776:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1677a:	movea.l 1cdbc <currentFloor>,a0
   16780:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16784:	movea.l 1cdbc <currentFloor>,a0
   1678a:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1678e:	movea.l 1cdbc <currentFloor>,a0
   16794:	clr.l 16(a0)
}
   16798:	nop
   1679a:	rts

0001679c <inFloor>:

int inFloor (int x, int y) {
   1679c:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   1679e:	          pea 1a3c2 <talk.c.490538ff+0x57f>
   167a4:	          jsr 17456 <KPrintF>
   167aa:	          addq.l #4,sp
	int i, r = -1;
   167ac:	          moveq #-1,d0
   167ae:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   167b0:	          clr.l 4(sp)
   167b4:	   ,----- bra.s 167e8 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   167b6:	,--|----> movea.l 1cdbc <currentFloor>,a0
   167bc:	|  |      move.l 12(a0),d1
   167c0:	|  |      move.l 4(sp),d0
   167c4:	|  |      lsl.l #3,d0
   167c6:	|  |      add.l d1,d0
   167c8:	|  |      move.l 16(sp),-(sp)
   167cc:	|  |      move.l 16(sp),-(sp)
   167d0:	|  |      move.l d0,-(sp)
   167d2:	|  |      jsr 169c2 <pointInFloorPolygon>
   167d8:	|  |      lea 12(sp),sp
   167dc:	|  |      tst.w d0
   167de:	|  |  ,-- beq.s 167e4 <inFloor+0x48>
			r = i;
   167e0:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   167e4:	|  |  '-> addq.l #1,4(sp)
   167e8:	|  '----> movea.l 1cdbc <currentFloor>,a0
   167ee:	|         move.l 8(a0),d0
   167f2:	|         cmp.l 4(sp),d0
   167f6:	'-------- bgt.s 167b6 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   167f8:	          pea 1a3d3 <talk.c.490538ff+0x590>
   167fe:	          jsr 17456 <KPrintF>
   16804:	          addq.l #4,sp
	return r;
   16806:	          move.l (sp),d0
}
   16808:	          addq.l #8,sp
   1680a:	          rts

0001680c <initFloor>:

BOOL initFloor () {
   1680c:	       lea -12(sp),sp
   16810:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16812:	       moveq #20,d0
   16814:	       move.l d0,12(sp)
   16818:	       clr.l 8(sp)
   1681c:	       move.l 1cca4 <SysBase>,d0
   16822:	       movea.l d0,a6
   16824:	       move.l 12(sp),d0
   16828:	       move.l 8(sp),d1
   1682c:	       jsr -684(a6)
   16830:	       move.l d0,4(sp)
   16834:	       move.l 4(sp),d0
   16838:	       move.l d0,1cdbc <currentFloor>

    if(currentFloor == 0) {
   1683e:	       move.l 1cdbc <currentFloor>,d0
   16844:	,----- bne.s 16858 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16846:	|      pea 1a3e5 <talk.c.490538ff+0x5a2>
   1684c:	|      jsr 17456 <KPrintF>
   16852:	|      addq.l #4,sp
        return FALSE;
   16854:	|      clr.w d0
   16856:	|  ,-- bra.s 16860 <initFloor+0x54>
    }

	noFloor ();
   16858:	'--|-> jsr 16770 <noFloor>
	return TRUE;
   1685e:	   |   moveq #1,d0
}
   16860:	   '-> movea.l (sp)+,a6
   16862:	       lea 12(sp),sp
   16866:	       rts

00016868 <killFloor>:

void killFloor () {
   16868:	       lea -24(sp),sp
   1686c:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1686e:	       clr.l 24(sp)
   16872:	   ,-- bra.s 168cc <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16874:	,--|-> movea.l 1cdbc <currentFloor>,a0
   1687a:	|  |   move.l 12(a0),d1
   1687e:	|  |   move.l 24(sp),d0
   16882:	|  |   lsl.l #3,d0
   16884:	|  |   movea.l d1,a0
   16886:	|  |   adda.l d0,a0
   16888:	|  |   move.l 4(a0),8(sp)
   1688e:	|  |   move.l 1cca4 <SysBase>,d0
   16894:	|  |   movea.l d0,a6
   16896:	|  |   movea.l 8(sp),a1
   1689a:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1689e:	|  |   movea.l 1cdbc <currentFloor>,a0
   168a4:	|  |   move.l 16(a0),d1
   168a8:	|  |   move.l 24(sp),d0
   168ac:	|  |   add.l d0,d0
   168ae:	|  |   add.l d0,d0
   168b0:	|  |   movea.l d1,a0
   168b2:	|  |   adda.l d0,a0
   168b4:	|  |   move.l (a0),4(sp)
   168b8:	|  |   move.l 1cca4 <SysBase>,d0
   168be:	|  |   movea.l d0,a6
   168c0:	|  |   movea.l 4(sp),a1
   168c4:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   168c8:	|  |   addq.l #1,24(sp)
   168cc:	|  '-> movea.l 1cdbc <currentFloor>,a0
   168d2:	|      move.l 8(a0),d0
   168d6:	|      cmp.l 24(sp),d0
   168da:	'----- bgt.s 16874 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   168dc:	       movea.l 1cdbc <currentFloor>,a0
   168e2:	       move.l 12(a0),20(sp)
   168e8:	       move.l 1cca4 <SysBase>,d0
   168ee:	       movea.l d0,a6
   168f0:	       movea.l 20(sp),a1
   168f4:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   168f8:	       movea.l 1cdbc <currentFloor>,a0
   168fe:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16902:	       movea.l 1cdbc <currentFloor>,a0
   16908:	       move.l 4(a0),16(sp)
   1690e:	       move.l 1cca4 <SysBase>,d0
   16914:	       movea.l d0,a6
   16916:	       movea.l 16(sp),a1
   1691a:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1691e:	       movea.l 1cdbc <currentFloor>,a0
   16924:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16928:	       movea.l 1cdbc <currentFloor>,a0
   1692e:	       move.l 16(a0),12(sp)
   16934:	       move.l 1cca4 <SysBase>,d0
   1693a:	       movea.l d0,a6
   1693c:	       movea.l 12(sp),a1
   16940:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16944:	       movea.l 1cdbc <currentFloor>,a0
   1694a:	       clr.l 16(a0)
}
   1694e:	       nop
   16950:	       movea.l (sp)+,a6
   16952:	       lea 24(sp),sp
   16956:	       rts

00016958 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16958:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1695c:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16960:	                   clr.l 4(sp)
   16964:	   ,-------------- bra.s 169b0 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16966:	,--|-------------> clr.l (sp)
   16968:	|  |     ,-------- bra.s 169a4 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1696a:	|  |  ,--|-------> move.l 20(sp),d1
   1696e:	|  |  |  |         move.l 4(sp),d0
   16972:	|  |  |  |         add.l d0,d0
   16974:	|  |  |  |         add.l d0,d0
   16976:	|  |  |  |         movea.l d1,a0
   16978:	|  |  |  |         adda.l d0,a0
   1697a:	|  |  |  |         move.l (a0),d1
   1697c:	|  |  |  |         movea.l 28(sp),a0
   16980:	|  |  |  |         move.l (sp),d0
   16982:	|  |  |  |         add.l d0,d0
   16984:	|  |  |  |         add.l d0,d0
   16986:	|  |  |  |         adda.l d0,a0
   16988:	|  |  |  |         move.l (a0),d0
   1698a:	|  |  |  |         cmp.l d1,d0
   1698c:	|  |  |  |     ,-- bne.s 169a2 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1698e:	|  |  |  |     |   move.l 8(sp),d0
   16992:	|  |  |  |     |   move.l d0,d1
   16994:	|  |  |  |     |   addq.l #1,d1
   16996:	|  |  |  |     |   move.l d1,8(sp)
   1699a:	|  |  |  |     |   tst.l d0
   1699c:	|  |  |  |     +-- beq.s 169a2 <polysShareSide+0x4a>
   1699e:	|  |  |  |     |   moveq #1,d0
   169a0:	|  |  |  |  ,--|-- bra.s 169bc <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   169a2:	|  |  |  |  |  '-> addq.l #1,(sp)
   169a4:	|  |  |  '--|----> move.l 24(sp),d0
   169a8:	|  |  |     |      cmp.l (sp),d0
   169aa:	|  |  '-----|----- bgt.s 1696a <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   169ac:	|  |        |      addq.l #1,4(sp)
   169b0:	|  '--------|----> move.l 16(sp),d0
   169b4:	|           |      cmp.l 4(sp),d0
   169b8:	'-----------|----- bgt.s 16966 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   169ba:	            |      clr.w d0
}
   169bc:	            '----> lea 12(sp),sp
   169c0:	                   rts

000169c2 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   169c2:	             lea -28(sp),sp
   169c6:	             move.l d3,-(sp)
   169c8:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   169ca:	             clr.l 32(sp)
   169ce:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   169d2:	             movea.l 40(sp),a0
   169d6:	             move.l (a0),d0
   169d8:	             move.l d0,d1
   169da:	             subq.l #1,d1
   169dc:	             move.l d1,28(sp)
   169e0:	   ,-------- bra.w 16bda <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   169e4:	,--|-------> movea.l 1cdbc <currentFloor>,a0
   169ea:	|  |         move.l 4(a0),d1
   169ee:	|  |         movea.l 40(sp),a0
   169f2:	|  |         movea.l 4(a0),a0
   169f6:	|  |         move.l 32(sp),d0
   169fa:	|  |         add.l d0,d0
   169fc:	|  |         add.l d0,d0
   169fe:	|  |         adda.l d0,a0
   16a00:	|  |         move.l (a0),d0
   16a02:	|  |         lsl.l #3,d0
   16a04:	|  |         movea.l d1,a0
   16a06:	|  |         adda.l d0,a0
   16a08:	|  |         move.l (a0),d0
   16a0a:	|  |         move.l d0,-(sp)
   16a0c:	|  |         jsr 17888 <__floatsisf>
   16a12:	|  |         addq.l #4,sp
   16a14:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16a18:	|  |         movea.l 1cdbc <currentFloor>,a0
   16a1e:	|  |         move.l 4(a0),d1
   16a22:	|  |         movea.l 40(sp),a0
   16a26:	|  |         movea.l 4(a0),a0
   16a2a:	|  |         move.l 32(sp),d0
   16a2e:	|  |         add.l d0,d0
   16a30:	|  |         add.l d0,d0
   16a32:	|  |         adda.l d0,a0
   16a34:	|  |         move.l (a0),d0
   16a36:	|  |         lsl.l #3,d0
   16a38:	|  |         movea.l d1,a0
   16a3a:	|  |         adda.l d0,a0
   16a3c:	|  |         move.l 4(a0),d0
   16a40:	|  |         move.l d0,-(sp)
   16a42:	|  |         jsr 17888 <__floatsisf>
   16a48:	|  |         addq.l #4,sp
   16a4a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16a4e:	|  |         movea.l 1cdbc <currentFloor>,a0
   16a54:	|  |         move.l 4(a0),d1
   16a58:	|  |         movea.l 40(sp),a0
   16a5c:	|  |         movea.l 4(a0),a0
   16a60:	|  |         move.l 28(sp),d0
   16a64:	|  |         add.l d0,d0
   16a66:	|  |         add.l d0,d0
   16a68:	|  |         adda.l d0,a0
   16a6a:	|  |         move.l (a0),d0
   16a6c:	|  |         lsl.l #3,d0
   16a6e:	|  |         movea.l d1,a0
   16a70:	|  |         adda.l d0,a0
   16a72:	|  |         move.l (a0),d0
   16a74:	|  |         move.l d0,-(sp)
   16a76:	|  |         jsr 17888 <__floatsisf>
   16a7c:	|  |         addq.l #4,sp
   16a7e:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16a82:	|  |         movea.l 1cdbc <currentFloor>,a0
   16a88:	|  |         move.l 4(a0),d1
   16a8c:	|  |         movea.l 40(sp),a0
   16a90:	|  |         movea.l 4(a0),a0
   16a94:	|  |         move.l 28(sp),d0
   16a98:	|  |         add.l d0,d0
   16a9a:	|  |         add.l d0,d0
   16a9c:	|  |         adda.l d0,a0
   16a9e:	|  |         move.l (a0),d0
   16aa0:	|  |         lsl.l #3,d0
   16aa2:	|  |         movea.l d1,a0
   16aa4:	|  |         adda.l d0,a0
   16aa6:	|  |         move.l 4(a0),d0
   16aaa:	|  |         move.l d0,-(sp)
   16aac:	|  |         jsr 17888 <__floatsisf>
   16ab2:	|  |         addq.l #4,sp
   16ab4:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16ab8:	|  |         move.l 48(sp),-(sp)
   16abc:	|  |         jsr 17888 <__floatsisf>
   16ac2:	|  |         addq.l #4,sp
   16ac4:	|  |         move.l d0,-(sp)
   16ac6:	|  |         move.l 20(sp),-(sp)
   16aca:	|  |         jsr 17a2a <__lesf2>
   16ad0:	|  |         addq.l #8,sp
   16ad2:	|  |         tst.l d0
   16ad4:	|  |     ,-- bgt.s 16af4 <pointInFloorPolygon+0x132>
   16ad6:	|  |     |   move.l 48(sp),-(sp)
   16ada:	|  |     |   jsr 17888 <__floatsisf>
   16ae0:	|  |     |   addq.l #4,sp
   16ae2:	|  |     |   move.l d0,-(sp)
   16ae4:	|  |     |   move.l 12(sp),-(sp)
   16ae8:	|  |     |   jsr 179f4 <__gtsf2>
   16aee:	|  |     |   addq.l #8,sp
   16af0:	|  |     |   tst.l d0
   16af2:	|  |  ,--|-- bgt.s 16b34 <pointInFloorPolygon+0x172>
   16af4:	|  |  |  '-> move.l 48(sp),-(sp)
   16af8:	|  |  |      jsr 17888 <__floatsisf>
   16afe:	|  |  |      addq.l #4,sp
   16b00:	|  |  |      move.l d0,-(sp)
   16b02:	|  |  |      move.l 12(sp),-(sp)
   16b06:	|  |  |      jsr 17a2a <__lesf2>
   16b0c:	|  |  |      addq.l #8,sp
   16b0e:	|  |  |      tst.l d0
   16b10:	|  |  |  ,-- bgt.w 16bca <pointInFloorPolygon+0x208>
   16b14:	|  |  |  |   move.l 48(sp),-(sp)
   16b18:	|  |  |  |   jsr 17888 <__floatsisf>
   16b1e:	|  |  |  |   addq.l #4,sp
   16b20:	|  |  |  |   move.l d0,-(sp)
   16b22:	|  |  |  |   move.l 20(sp),-(sp)
   16b26:	|  |  |  |   jsr 179f4 <__gtsf2>
   16b2c:	|  |  |  |   addq.l #8,sp
   16b2e:	|  |  |  |   tst.l d0
   16b30:	|  |  |  +-- ble.w 16bca <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16b34:	|  |  '--|-> move.l 44(sp),-(sp)
   16b38:	|  |     |   jsr 17888 <__floatsisf>
   16b3e:	|  |     |   addq.l #4,sp
   16b40:	|  |     |   move.l d0,d3
   16b42:	|  |     |   move.l 20(sp),-(sp)
   16b46:	|  |     |   move.l 16(sp),-(sp)
   16b4a:	|  |     |   jsr 17b7c <__subsf3>
   16b50:	|  |     |   addq.l #8,sp
   16b52:	|  |     |   move.l d0,d2
   16b54:	|  |     |   move.l 48(sp),-(sp)
   16b58:	|  |     |   jsr 17888 <__floatsisf>
   16b5e:	|  |     |   addq.l #4,sp
   16b60:	|  |     |   move.l 16(sp),-(sp)
   16b64:	|  |     |   move.l d0,-(sp)
   16b66:	|  |     |   jsr 17b7c <__subsf3>
   16b6c:	|  |     |   addq.l #8,sp
   16b6e:	|  |     |   move.l d0,-(sp)
   16b70:	|  |     |   move.l d2,-(sp)
   16b72:	|  |     |   jsr 1793a <__mulsf3>
   16b78:	|  |     |   addq.l #8,sp
   16b7a:	|  |     |   move.l d0,d2
   16b7c:	|  |     |   move.l 16(sp),-(sp)
   16b80:	|  |     |   move.l 12(sp),-(sp)
   16b84:	|  |     |   jsr 17b7c <__subsf3>
   16b8a:	|  |     |   addq.l #8,sp
   16b8c:	|  |     |   move.l d0,-(sp)
   16b8e:	|  |     |   move.l d2,-(sp)
   16b90:	|  |     |   jsr 1773e <__divsf3>
   16b96:	|  |     |   addq.l #8,sp
   16b98:	|  |     |   move.l 20(sp),-(sp)
   16b9c:	|  |     |   move.l d0,-(sp)
   16b9e:	|  |     |   jsr 17644 <__addsf3>
   16ba4:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16ba6:	|  |     |   move.l d0,-(sp)
   16ba8:	|  |     |   move.l d3,-(sp)
   16baa:	|  |     |   jsr 17aae <__ltsf2>
   16bb0:	|  |     |   addq.l #8,sp
   16bb2:	|  |     |   tst.l d0
   16bb4:	|  |     +-- bge.s 16bca <pointInFloorPolygon+0x208>

			c = !c;
   16bb6:	|  |     |   tst.l 24(sp)
   16bba:	|  |     |   seq d0
   16bbc:	|  |     |   neg.b d0
   16bbe:	|  |     |   move.b d0,d0
   16bc0:	|  |     |   andi.l #255,d0
   16bc6:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16bca:	|  |     '-> move.l 32(sp),d0
   16bce:	|  |         move.l d0,d1
   16bd0:	|  |         addq.l #1,d1
   16bd2:	|  |         move.l d1,32(sp)
   16bd6:	|  |         move.l d0,28(sp)
   16bda:	|  '-------> movea.l 40(sp),a0
   16bde:	|            move.l (a0),d0
   16be0:	|            cmp.l 32(sp),d0
   16be4:	'----------- bgt.w 169e4 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16be8:	             tst.l 24(sp)
   16bec:	             sne d0
   16bee:	             neg.b d0
   16bf0:	             move.b d0,d0
   16bf2:	             andi.w #255,d0
}
   16bf6:	             move.l (sp)+,d2
   16bf8:	             move.l (sp)+,d3
   16bfa:	             lea 28(sp),sp
   16bfe:	             rts

00016c00 <setFloor>:

BOOL setFloor (int fileNum) {
   16c00:	                               lea -132(sp),sp
   16c04:	                               move.l a6,-(sp)
   16c06:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16c08:	                               jsr 16868 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16c0e:	                               move.l 144(sp),-(sp)
   16c12:	                               jsr 788a <openFileFromNum>
   16c18:	                               addq.l #4,sp
   16c1a:	                               tst.l d0
   16c1c:	                           ,-- bne.s 16c24 <setFloor+0x24>
   16c1e:	                           |   clr.w d0
   16c20:	,--------------------------|-- bra.w 17370 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16c24:	|                          '-> movea.l 1cdbc <currentFloor>,a0
   16c2a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16c2e:	|                              move.l 1cc8c <bigDataFile>,118(sp)
   16c36:	|                              move.l 1ccac <DOSBase>,d0
   16c3c:	|                              movea.l d0,a6
   16c3e:	|                              move.l 118(sp),d1
   16c42:	|                              jsr -306(a6)
   16c46:	|                              move.l d0,114(sp)
   16c4a:	|                              move.l 114(sp),d0
   16c4e:	|                              movea.l 1cdbc <currentFloor>,a0
   16c54:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16c58:	|                              movea.l 1cdbc <currentFloor>,a0
   16c5e:	|                              move.l 8(a0),d0
   16c62:	|                              lsl.l #3,d0
   16c64:	|                              move.l d0,110(sp)
   16c68:	|                              clr.l 106(sp)
   16c6c:	|                              move.l 1cca4 <SysBase>,d0
   16c72:	|                              movea.l d0,a6
   16c74:	|                              move.l 110(sp),d0
   16c78:	|                              move.l 106(sp),d1
   16c7c:	|                              jsr -684(a6)
   16c80:	|                              move.l d0,102(sp)
   16c84:	|                              move.l 102(sp),d0
   16c88:	|                              movea.l 1cdbc <currentFloor>,a0
   16c8e:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16c92:	|                              movea.l 1cdbc <currentFloor>,a0
   16c98:	|                              move.l 12(a0),d0
   16c9c:	|                          ,-- bne.s 16cb2 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16c9e:	|                          |   pea 1a409 <talk.c.490538ff+0x5c6>
   16ca4:	|                          |   jsr 17456 <KPrintF>
   16caa:	|                          |   addq.l #4,sp
		return FALSE;
   16cac:	|                          |   clr.w d0
   16cae:	+--------------------------|-- bra.w 17370 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16cb2:	|                          '-> clr.l 136(sp)
   16cb6:	|                    ,-------- bra.w 16dce <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16cba:	|                 ,--|-------> move.l 1cc8c <bigDataFile>,26(sp)
   16cc2:	|                 |  |         move.l 1ccac <DOSBase>,d0
   16cc8:	|                 |  |         movea.l d0,a6
   16cca:	|                 |  |         move.l 26(sp),d1
   16cce:	|                 |  |         jsr -306(a6)
   16cd2:	|                 |  |         move.l d0,22(sp)
   16cd6:	|                 |  |         move.l 22(sp),d1
   16cda:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16ce0:	|                 |  |         movea.l 12(a0),a0
   16ce4:	|                 |  |         move.l 136(sp),d0
   16ce8:	|                 |  |         lsl.l #3,d0
   16cea:	|                 |  |         adda.l d0,a0
   16cec:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16cee:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16cf4:	|                 |  |         move.l 12(a0),d1
   16cf8:	|                 |  |         move.l 136(sp),d0
   16cfc:	|                 |  |         lsl.l #3,d0
   16cfe:	|                 |  |         movea.l d1,a0
   16d00:	|                 |  |         adda.l d0,a0
   16d02:	|                 |  |         move.l (a0),d0
   16d04:	|                 |  |         add.l d0,d0
   16d06:	|                 |  |         add.l d0,d0
   16d08:	|                 |  |         move.l d0,18(sp)
   16d0c:	|                 |  |         clr.l 14(sp)
   16d10:	|                 |  |         move.l 1cca4 <SysBase>,d0
   16d16:	|                 |  |         movea.l d0,a6
   16d18:	|                 |  |         move.l 18(sp),d0
   16d1c:	|                 |  |         move.l 14(sp),d1
   16d20:	|                 |  |         jsr -684(a6)
   16d24:	|                 |  |         move.l d0,10(sp)
   16d28:	|                 |  |         move.l 10(sp),d1
   16d2c:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16d32:	|                 |  |         movea.l 12(a0),a0
   16d36:	|                 |  |         move.l 136(sp),d0
   16d3a:	|                 |  |         lsl.l #3,d0
   16d3c:	|                 |  |         adda.l d0,a0
   16d3e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16d42:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16d48:	|                 |  |         move.l 12(a0),d1
   16d4c:	|                 |  |         move.l 136(sp),d0
   16d50:	|                 |  |         lsl.l #3,d0
   16d52:	|                 |  |         movea.l d1,a0
   16d54:	|                 |  |         adda.l d0,a0
   16d56:	|                 |  |         move.l 4(a0),d0
   16d5a:	|                 |  |     ,-- bne.s 16d70 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16d5c:	|                 |  |     |   pea 1a409 <talk.c.490538ff+0x5c6>
   16d62:	|                 |  |     |   jsr 17456 <KPrintF>
   16d68:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16d6a:	|                 |  |     |   clr.w d0
   16d6c:	+-----------------|--|-----|-- bra.w 17370 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16d70:	|                 |  |     '-> clr.l 132(sp)
   16d74:	|                 |  |     ,-- bra.s 16dae <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16d76:	|                 |  |  ,--|-> move.l 1cc8c <bigDataFile>,d1
   16d7c:	|                 |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   16d82:	|                 |  |  |  |   movea.l 12(a0),a0
   16d86:	|                 |  |  |  |   move.l 136(sp),d0
   16d8a:	|                 |  |  |  |   lsl.l #3,d0
   16d8c:	|                 |  |  |  |   adda.l d0,a0
   16d8e:	|                 |  |  |  |   movea.l 4(a0),a0
   16d92:	|                 |  |  |  |   move.l 132(sp),d0
   16d96:	|                 |  |  |  |   add.l d0,d0
   16d98:	|                 |  |  |  |   add.l d0,d0
   16d9a:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16d9e:	|                 |  |  |  |   move.l d1,-(sp)
   16da0:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16da6:	|                 |  |  |  |   addq.l #4,sp
   16da8:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16daa:	|                 |  |  |  |   addq.l #1,132(sp)
   16dae:	|                 |  |  |  '-> movea.l 1cdbc <currentFloor>,a0
   16db4:	|                 |  |  |      move.l 12(a0),d1
   16db8:	|                 |  |  |      move.l 136(sp),d0
   16dbc:	|                 |  |  |      lsl.l #3,d0
   16dbe:	|                 |  |  |      movea.l d1,a0
   16dc0:	|                 |  |  |      adda.l d0,a0
   16dc2:	|                 |  |  |      move.l (a0),d0
   16dc4:	|                 |  |  |      cmp.l 132(sp),d0
   16dc8:	|                 |  |  '----- bgt.s 16d76 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dca:	|                 |  |         addq.l #1,136(sp)
   16dce:	|                 |  '-------> movea.l 1cdbc <currentFloor>,a0
   16dd4:	|                 |            move.l 8(a0),d0
   16dd8:	|                 |            cmp.l 136(sp),d0
   16ddc:	|                 '----------- bgt.w 16cba <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16de0:	|                              move.l 1cc8c <bigDataFile>,d0
   16de6:	|                              move.l d0,-(sp)
   16de8:	|                              jsr 6bc <get2bytes>
   16dee:	|                              addq.l #4,sp
   16df0:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16df4:	|                              move.l 136(sp),d0
   16df8:	|                              lsl.l #3,d0
   16dfa:	|                              move.l d0,98(sp)
   16dfe:	|                              clr.l 94(sp)
   16e02:	|                              move.l 1cca4 <SysBase>,d0
   16e08:	|                              movea.l d0,a6
   16e0a:	|                              move.l 98(sp),d0
   16e0e:	|                              move.l 94(sp),d1
   16e12:	|                              jsr -684(a6)
   16e16:	|                              move.l d0,90(sp)
   16e1a:	|                              move.l 90(sp),d0
   16e1e:	|                              movea.l 1cdbc <currentFloor>,a0
   16e24:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16e28:	|                              movea.l 1cdbc <currentFloor>,a0
   16e2e:	|                              move.l 4(a0),d0
   16e32:	|                          ,-- bne.s 16e48 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16e34:	|                          |   pea 1a409 <talk.c.490538ff+0x5c6>
   16e3a:	|                          |   jsr 17456 <KPrintF>
   16e40:	|                          |   addq.l #4,sp
		return FALSE;
   16e42:	|                          |   clr.w d0
   16e44:	+--------------------------|-- bra.w 17370 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16e48:	|                          '-> clr.l 132(sp)
   16e4c:	|                          ,-- bra.s 16ea0 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16e4e:	|                       ,--|-> move.l 1cc8c <bigDataFile>,d1
   16e54:	|                       |  |   movea.l 1cdbc <currentFloor>,a0
   16e5a:	|                       |  |   movea.l 4(a0),a0
   16e5e:	|                       |  |   move.l 132(sp),d0
   16e62:	|                       |  |   lsl.l #3,d0
   16e64:	|                       |  |   lea (0,a0,d0.l),a2
   16e68:	|                       |  |   move.l d1,-(sp)
   16e6a:	|                       |  |   jsr 6bc <get2bytes>
   16e70:	|                       |  |   addq.l #4,sp
   16e72:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16e74:	|                       |  |   move.l 1cc8c <bigDataFile>,d1
   16e7a:	|                       |  |   movea.l 1cdbc <currentFloor>,a0
   16e80:	|                       |  |   movea.l 4(a0),a0
   16e84:	|                       |  |   move.l 132(sp),d0
   16e88:	|                       |  |   lsl.l #3,d0
   16e8a:	|                       |  |   lea (0,a0,d0.l),a2
   16e8e:	|                       |  |   move.l d1,-(sp)
   16e90:	|                       |  |   jsr 6bc <get2bytes>
   16e96:	|                       |  |   addq.l #4,sp
   16e98:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16e9c:	|                       |  |   addq.l #1,132(sp)
   16ea0:	|                       |  '-> move.l 132(sp),d0
   16ea4:	|                       |      cmp.l 136(sp),d0
   16ea8:	|                       '----- blt.s 16e4e <setFloor+0x24e>
	}

	finishAccess ();
   16eaa:	|                              jsr 7782 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16eb0:	|                              movea.l 1cdbc <currentFloor>,a0
   16eb6:	|                              move.l 8(a0),d0
   16eba:	|                              add.l d0,d0
   16ebc:	|                              add.l d0,d0
   16ebe:	|                              move.l d0,86(sp)
   16ec2:	|                              clr.l 82(sp)
   16ec6:	|                              move.l 1cca4 <SysBase>,d0
   16ecc:	|                              movea.l d0,a6
   16ece:	|                              move.l 86(sp),d0
   16ed2:	|                              move.l 82(sp),d1
   16ed6:	|                              jsr -684(a6)
   16eda:	|                              move.l d0,78(sp)
   16ede:	|                              move.l 78(sp),d0
   16ee2:	|                              movea.l 1cdbc <currentFloor>,a0
   16ee8:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16eec:	|                              movea.l 1cdbc <currentFloor>,a0
   16ef2:	|                              move.l 8(a0),d0
   16ef6:	|                              add.l d0,d0
   16ef8:	|                              add.l d0,d0
   16efa:	|                              move.l d0,74(sp)
   16efe:	|                              clr.l 70(sp)
   16f02:	|                              move.l 1cca4 <SysBase>,d0
   16f08:	|                              movea.l d0,a6
   16f0a:	|                              move.l 74(sp),d0
   16f0e:	|                              move.l 70(sp),d1
   16f12:	|                              jsr -684(a6)
   16f16:	|                              move.l d0,66(sp)
   16f1a:	|                              move.l 66(sp),d0
   16f1e:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16f22:	|                              movea.l 1cdbc <currentFloor>,a0
   16f28:	|                              move.l 16(a0),d0
   16f2c:	|                          ,-- bne.s 16f42 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16f2e:	|                          |   pea 1a409 <talk.c.490538ff+0x5c6>
   16f34:	|                          |   jsr 17456 <KPrintF>
   16f3a:	|                          |   addq.l #4,sp
		return FALSE;
   16f3c:	|                          |   clr.w d0
   16f3e:	+--------------------------|-- bra.w 17370 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f42:	|                          '-> clr.l 136(sp)
   16f46:	|                    ,-------- bra.w 1706a <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16f4a:	|                 ,--|-------> movea.l 1cdbc <currentFloor>,a0
   16f50:	|                 |  |         move.l 8(a0),d0
   16f54:	|                 |  |         add.l d0,d0
   16f56:	|                 |  |         add.l d0,d0
   16f58:	|                 |  |         move.l d0,50(sp)
   16f5c:	|                 |  |         clr.l 46(sp)
   16f60:	|                 |  |         move.l 1cca4 <SysBase>,d0
   16f66:	|                 |  |         movea.l d0,a6
   16f68:	|                 |  |         move.l 50(sp),d0
   16f6c:	|                 |  |         move.l 46(sp),d1
   16f70:	|                 |  |         jsr -684(a6)
   16f74:	|                 |  |         move.l d0,42(sp)
   16f78:	|                 |  |         move.l 42(sp),d0
   16f7c:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16f82:	|                 |  |         movea.l 16(a0),a0
   16f86:	|                 |  |         move.l 136(sp),d1
   16f8a:	|                 |  |         add.l d1,d1
   16f8c:	|                 |  |         add.l d1,d1
   16f8e:	|                 |  |         adda.l d1,a0
   16f90:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16f92:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16f98:	|                 |  |         move.l 8(a0),d0
   16f9c:	|                 |  |         add.l d0,d0
   16f9e:	|                 |  |         add.l d0,d0
   16fa0:	|                 |  |         move.l d0,38(sp)
   16fa4:	|                 |  |         clr.l 34(sp)
   16fa8:	|                 |  |         move.l 1cca4 <SysBase>,d0
   16fae:	|                 |  |         movea.l d0,a6
   16fb0:	|                 |  |         move.l 38(sp),d0
   16fb4:	|                 |  |         move.l 34(sp),d1
   16fb8:	|                 |  |         jsr -684(a6)
   16fbc:	|                 |  |         move.l d0,30(sp)
   16fc0:	|                 |  |         move.l 30(sp),d1
   16fc4:	|                 |  |         move.l 136(sp),d0
   16fc8:	|                 |  |         add.l d0,d0
   16fca:	|                 |  |         add.l d0,d0
   16fcc:	|                 |  |         movea.l 62(sp),a0
   16fd0:	|                 |  |         adda.l d0,a0
   16fd2:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16fd4:	|                 |  |         movea.l 1cdbc <currentFloor>,a0
   16fda:	|                 |  |         move.l 16(a0),d1
   16fde:	|                 |  |         move.l 136(sp),d0
   16fe2:	|                 |  |         add.l d0,d0
   16fe4:	|                 |  |         add.l d0,d0
   16fe6:	|                 |  |         movea.l d1,a0
   16fe8:	|                 |  |         adda.l d0,a0
   16fea:	|                 |  |         move.l (a0),d0
   16fec:	|                 |  |     ,-- bne.s 17002 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16fee:	|                 |  |     |   pea 1a409 <talk.c.490538ff+0x5c6>
   16ff4:	|                 |  |     |   jsr 17456 <KPrintF>
   16ffa:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16ffc:	|                 |  |     |   clr.w d0
   16ffe:	+-----------------|--|-----|-- bra.w 17370 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17002:	|                 |  |     '-> clr.l 132(sp)
   17006:	|                 |  |     ,-- bra.s 17056 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   17008:	|                 |  |  ,--|-> movea.l 1cdbc <currentFloor>,a0
   1700e:	|                 |  |  |  |   move.l 16(a0),d1
   17012:	|                 |  |  |  |   move.l 136(sp),d0
   17016:	|                 |  |  |  |   add.l d0,d0
   17018:	|                 |  |  |  |   add.l d0,d0
   1701a:	|                 |  |  |  |   movea.l d1,a0
   1701c:	|                 |  |  |  |   adda.l d0,a0
   1701e:	|                 |  |  |  |   move.l (a0),d1
   17020:	|                 |  |  |  |   move.l 132(sp),d0
   17024:	|                 |  |  |  |   add.l d0,d0
   17026:	|                 |  |  |  |   add.l d0,d0
   17028:	|                 |  |  |  |   movea.l d1,a0
   1702a:	|                 |  |  |  |   adda.l d0,a0
   1702c:	|                 |  |  |  |   moveq #-1,d1
   1702e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   17030:	|                 |  |  |  |   move.l 136(sp),d0
   17034:	|                 |  |  |  |   add.l d0,d0
   17036:	|                 |  |  |  |   add.l d0,d0
   17038:	|                 |  |  |  |   movea.l 62(sp),a0
   1703c:	|                 |  |  |  |   adda.l d0,a0
   1703e:	|                 |  |  |  |   move.l (a0),d1
   17040:	|                 |  |  |  |   move.l 132(sp),d0
   17044:	|                 |  |  |  |   add.l d0,d0
   17046:	|                 |  |  |  |   add.l d0,d0
   17048:	|                 |  |  |  |   movea.l d1,a0
   1704a:	|                 |  |  |  |   adda.l d0,a0
   1704c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17052:	|                 |  |  |  |   addq.l #1,132(sp)
   17056:	|                 |  |  |  '-> movea.l 1cdbc <currentFloor>,a0
   1705c:	|                 |  |  |      move.l 8(a0),d0
   17060:	|                 |  |  |      cmp.l 132(sp),d0
   17064:	|                 |  |  '----- bgt.s 17008 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17066:	|                 |  |         addq.l #1,136(sp)
   1706a:	|                 |  '-------> movea.l 1cdbc <currentFloor>,a0
   17070:	|                 |            move.l 8(a0),d0
   17074:	|                 |            cmp.l 136(sp),d0
   17078:	|                 '----------- bgt.w 16f4a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1707c:	|                              clr.l 136(sp)
   17080:	|              ,-------------- bra.w 17186 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17084:	|           ,--|-------------> clr.l 132(sp)
   17088:	|           |  |     ,-------- bra.w 17170 <setFloor+0x570>
			if (i != j) {
   1708c:	|           |  |  ,--|-------> move.l 136(sp),d0
   17090:	|           |  |  |  |         cmp.l 132(sp),d0
   17094:	|           |  |  |  |     ,-- beq.w 17126 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   17098:	|           |  |  |  |     |   movea.l 1cdbc <currentFloor>,a0
   1709e:	|           |  |  |  |     |   move.l 12(a0),d1
   170a2:	|           |  |  |  |     |   move.l 132(sp),d0
   170a6:	|           |  |  |  |     |   lsl.l #3,d0
   170a8:	|           |  |  |  |     |   movea.l d1,a1
   170aa:	|           |  |  |  |     |   adda.l d0,a1
   170ac:	|           |  |  |  |     |   movea.l 1cdbc <currentFloor>,a0
   170b2:	|           |  |  |  |     |   move.l 12(a0),d1
   170b6:	|           |  |  |  |     |   move.l 136(sp),d0
   170ba:	|           |  |  |  |     |   lsl.l #3,d0
   170bc:	|           |  |  |  |     |   movea.l d1,a0
   170be:	|           |  |  |  |     |   adda.l d0,a0
   170c0:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   170c4:	|           |  |  |  |     |   move.l (a1),-(sp)
   170c6:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   170ca:	|           |  |  |  |     |   move.l (a0),-(sp)
   170cc:	|           |  |  |  |     |   jsr 16958 <polysShareSide>
   170d2:	|           |  |  |  |     |   lea 16(sp),sp
   170d6:	|           |  |  |  |     |   tst.w d0
   170d8:	|           |  |  |  |  ,--|-- beq.w 1716c <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   170dc:	|           |  |  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   170e2:	|           |  |  |  |  |  |   move.l 16(a0),d1
   170e6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   170ea:	|           |  |  |  |  |  |   add.l d0,d0
   170ec:	|           |  |  |  |  |  |   add.l d0,d0
   170ee:	|           |  |  |  |  |  |   movea.l d1,a0
   170f0:	|           |  |  |  |  |  |   adda.l d0,a0
   170f2:	|           |  |  |  |  |  |   move.l (a0),d1
   170f4:	|           |  |  |  |  |  |   move.l 132(sp),d0
   170f8:	|           |  |  |  |  |  |   add.l d0,d0
   170fa:	|           |  |  |  |  |  |   add.l d0,d0
   170fc:	|           |  |  |  |  |  |   movea.l d1,a0
   170fe:	|           |  |  |  |  |  |   adda.l d0,a0
   17100:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   17104:	|           |  |  |  |  |  |   move.l 136(sp),d0
   17108:	|           |  |  |  |  |  |   add.l d0,d0
   1710a:	|           |  |  |  |  |  |   add.l d0,d0
   1710c:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   17110:	|           |  |  |  |  |  |   adda.l d0,a0
   17112:	|           |  |  |  |  |  |   move.l (a0),d1
   17114:	|           |  |  |  |  |  |   move.l 132(sp),d0
   17118:	|           |  |  |  |  |  |   add.l d0,d0
   1711a:	|           |  |  |  |  |  |   add.l d0,d0
   1711c:	|           |  |  |  |  |  |   movea.l d1,a0
   1711e:	|           |  |  |  |  |  |   adda.l d0,a0
   17120:	|           |  |  |  |  |  |   moveq #1,d1
   17122:	|           |  |  |  |  |  |   move.l d1,(a0)
   17124:	|           |  |  |  |  +--|-- bra.s 1716c <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   17126:	|           |  |  |  |  |  '-> movea.l 1cdbc <currentFloor>,a0
   1712c:	|           |  |  |  |  |      move.l 16(a0),d1
   17130:	|           |  |  |  |  |      move.l 136(sp),d0
   17134:	|           |  |  |  |  |      add.l d0,d0
   17136:	|           |  |  |  |  |      add.l d0,d0
   17138:	|           |  |  |  |  |      movea.l d1,a0
   1713a:	|           |  |  |  |  |      adda.l d0,a0
   1713c:	|           |  |  |  |  |      move.l (a0),d1
   1713e:	|           |  |  |  |  |      move.l 132(sp),d0
   17142:	|           |  |  |  |  |      add.l d0,d0
   17144:	|           |  |  |  |  |      add.l d0,d0
   17146:	|           |  |  |  |  |      movea.l d1,a0
   17148:	|           |  |  |  |  |      adda.l d0,a0
   1714a:	|           |  |  |  |  |      moveq #-2,d0
   1714c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1714e:	|           |  |  |  |  |      move.l 136(sp),d0
   17152:	|           |  |  |  |  |      add.l d0,d0
   17154:	|           |  |  |  |  |      add.l d0,d0
   17156:	|           |  |  |  |  |      movea.l 62(sp),a0
   1715a:	|           |  |  |  |  |      adda.l d0,a0
   1715c:	|           |  |  |  |  |      move.l (a0),d1
   1715e:	|           |  |  |  |  |      move.l 132(sp),d0
   17162:	|           |  |  |  |  |      add.l d0,d0
   17164:	|           |  |  |  |  |      add.l d0,d0
   17166:	|           |  |  |  |  |      movea.l d1,a0
   17168:	|           |  |  |  |  |      adda.l d0,a0
   1716a:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1716c:	|           |  |  |  |  '----> addq.l #1,132(sp)
   17170:	|           |  |  |  '-------> movea.l 1cdbc <currentFloor>,a0
   17176:	|           |  |  |            move.l 8(a0),d0
   1717a:	|           |  |  |            cmp.l 132(sp),d0
   1717e:	|           |  |  '----------- bgt.w 1708c <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17182:	|           |  |               addq.l #1,136(sp)
   17186:	|           |  '-------------> movea.l 1cdbc <currentFloor>,a0
   1718c:	|           |                  move.l 8(a0),d0
   17190:	|           |                  cmp.l 136(sp),d0
   17194:	|           '----------------- bgt.w 17084 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   17198:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   1719c:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   171a0:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   171a4:	|  |                           clr.l 136(sp)
   171a8:	|  |     ,-------------------- bra.w 172fe <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   171ac:	|  |  ,--|-------------------> clr.l 132(sp)
   171b0:	|  |  |  |     ,-------------- bra.w 172e8 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   171b4:	|  |  |  |  ,--|-------------> movea.l 1cdbc <currentFloor>,a0
   171ba:	|  |  |  |  |  |               move.l 16(a0),d1
   171be:	|  |  |  |  |  |               move.l 136(sp),d0
   171c2:	|  |  |  |  |  |               add.l d0,d0
   171c4:	|  |  |  |  |  |               add.l d0,d0
   171c6:	|  |  |  |  |  |               movea.l d1,a0
   171c8:	|  |  |  |  |  |               adda.l d0,a0
   171ca:	|  |  |  |  |  |               move.l (a0),d1
   171cc:	|  |  |  |  |  |               move.l 132(sp),d0
   171d0:	|  |  |  |  |  |               add.l d0,d0
   171d2:	|  |  |  |  |  |               add.l d0,d0
   171d4:	|  |  |  |  |  |               movea.l d1,a0
   171d6:	|  |  |  |  |  |               adda.l d0,a0
   171d8:	|  |  |  |  |  |               move.l (a0),d0
   171da:	|  |  |  |  |  |               moveq #-1,d1
   171dc:	|  |  |  |  |  |               cmp.l d0,d1
   171de:	|  |  |  |  |  |  ,----------- bne.w 172e4 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   171e2:	|  |  |  |  |  |  |            clr.l 122(sp)
   171e6:	|  |  |  |  |  |  |     ,----- bra.w 172d2 <setFloor+0x6d2>
						if (d != i && d != j) {
   171ea:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   171ee:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   171f2:	|  |  |  |  |  |  |  |  |  ,-- beq.w 172ce <setFloor+0x6ce>
   171f6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   171fa:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   171fe:	|  |  |  |  |  |  |  |  |  +-- beq.w 172ce <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17202:	|  |  |  |  |  |  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   17208:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1720c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17210:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17212:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17214:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17216:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17218:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1721a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1721e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17220:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17222:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17224:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17226:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17228:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1722c:	|  |  |  |  |  |  |  |  |  +-- bne.w 172ce <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17230:	|  |  |  |  |  |  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   17236:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1723a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1723e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17240:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17242:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17244:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17246:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17248:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1724c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1724e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17250:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17252:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17254:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17256:	|  |  |  |  |  |  |  |  |  +-- bmi.s 172ce <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   17258:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1725c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1725e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17260:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17264:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17266:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17268:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1726c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1726e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17270:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17272:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17274:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17276:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1727a:	|  |  |  |  |  |  |  |  |  +-- bgt.s 172ce <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1727c:	|  |  |  |  |  |  |  |  |  |   movea.l 1cdbc <currentFloor>,a0
   17282:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17286:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1728a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1728c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1728e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17290:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17292:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17294:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17298:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1729a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1729c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1729e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   172a0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   172a4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   172a8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172ac:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   172b0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   172b2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   172b4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   172b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172bc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   172be:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   172c0:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   172c4:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   172c6:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   172c8:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   172ce:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   172d2:	|  |  |  |  |  |  |  |  '----> movea.l 1cdbc <currentFloor>,a0
   172d8:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   172dc:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   172e0:	|  |  |  |  |  |  |  '-------- bgt.w 171ea <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   172e4:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   172e8:	|  |  |  |  |  '-------------> movea.l 1cdbc <currentFloor>,a0
   172ee:	|  |  |  |  |                  move.l 8(a0),d0
   172f2:	|  |  |  |  |                  cmp.l 132(sp),d0
   172f6:	|  |  |  |  '----------------- bgt.w 171b4 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   172fa:	|  |  |  |                     addq.l #1,136(sp)
   172fe:	|  |  |  '-------------------> movea.l 1cdbc <currentFloor>,a0
   17304:	|  |  |                        move.l 8(a0),d0
   17308:	|  |  |                        cmp.l 136(sp),d0
   1730c:	|  |  '----------------------- bgt.w 171ac <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17310:	|  |                           tst.w 130(sp)
   17314:	|  '-------------------------- bne.w 1719c <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17318:	|                              clr.l 136(sp)
   1731c:	|                          ,-- bra.s 17344 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1731e:	|                       ,--|-> move.l 136(sp),d0
   17322:	|                       |  |   add.l d0,d0
   17324:	|                       |  |   add.l d0,d0
   17326:	|                       |  |   movea.l 62(sp),a0
   1732a:	|                       |  |   adda.l d0,a0
   1732c:	|                       |  |   move.l (a0),54(sp)
   17330:	|                       |  |   move.l 1cca4 <SysBase>,d0
   17336:	|                       |  |   movea.l d0,a6
   17338:	|                       |  |   movea.l 54(sp),a1
   1733c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17340:	|                       |  |   addq.l #1,136(sp)
   17344:	|                       |  '-> movea.l 1cdbc <currentFloor>,a0
   1734a:	|                       |      move.l 8(a0),d0
   1734e:	|                       |      cmp.l 136(sp),d0
   17352:	|                       '----- bgt.s 1731e <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17354:	|                              move.l 62(sp),58(sp)
   1735a:	|                              move.l 1cca4 <SysBase>,d0
   17360:	|                              movea.l d0,a6
   17362:	|                              movea.l 58(sp),a1
   17366:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1736a:	|                              clr.l 62(sp)

	return TRUE;
   1736e:	|                              moveq #1,d0
}
   17370:	'----------------------------> movea.l (sp)+,a2
   17372:	                               movea.l (sp)+,a6
   17374:	                               lea 132(sp),sp
   17378:	                               rts

0001737a <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1737a:	jsr 16868 <killFloor>
	noFloor ();
   17380:	jsr 16770 <noFloor>
   17386:	nop
   17388:	rts

0001738a <WaitVbl>:
void WaitVbl() {
   1738a:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1738c:	   ,-> movea.l #14675972,a0
   17392:	   |   move.l (a0),d0
   17394:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17396:	   |   move.l (sp),d0
   17398:	   |   andi.l #130816,d0
   1739e:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   173a0:	   |   move.l (sp),d0
   173a2:	   |   cmpi.l #76800,d0
   173a8:	   '-- beq.s 1738c <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   173aa:	,----> movea.l #14675972,a0
   173b0:	|      move.l (a0),d0
   173b2:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   173b6:	|      move.l 4(sp),d0
   173ba:	|      andi.l #130816,d0
   173c0:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   173c4:	|      move.l 4(sp),d0
   173c8:	|      cmpi.l #76800,d0
   173ce:	|  ,-- beq.s 173d2 <WaitVbl+0x48>
	while (1) {
   173d0:	'--|-- bra.s 173aa <WaitVbl+0x20>
			break;
   173d2:	   '-> nop
}
   173d4:	       nop
   173d6:	       addq.l #8,sp
   173d8:	       rts

000173da <memset>:
void* memset(void *dest, int val, unsigned long len) {
   173da:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   173dc:	       move.l 8(sp),(sp)
	while(len-- > 0)
   173e0:	   ,-- bra.s 173f2 <memset+0x18>
		*ptr++ = val;
   173e2:	,--|-> move.l (sp),d0
   173e4:	|  |   move.l d0,d1
   173e6:	|  |   addq.l #1,d1
   173e8:	|  |   move.l d1,(sp)
   173ea:	|  |   move.l 12(sp),d1
   173ee:	|  |   movea.l d0,a0
   173f0:	|  |   move.b d1,(a0)
	while(len-- > 0)
   173f2:	|  '-> move.l 16(sp),d0
   173f6:	|      move.l d0,d1
   173f8:	|      subq.l #1,d1
   173fa:	|      move.l d1,16(sp)
   173fe:	|      tst.l d0
   17400:	'----- bne.s 173e2 <memset+0x8>
	return dest;
   17402:	       move.l 8(sp),d0
}
   17406:	       addq.l #4,sp
   17408:	       rts

0001740a <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1740a:	       subq.l #8,sp
   1740c:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1740e:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17414:	       move.l 20(sp),4(sp)
	while(len--)
   1741a:	   ,-- bra.s 1743c <memcpy+0x32>
		*d++ = *s++;
   1741c:	,--|-> move.l 4(sp),d1
   17420:	|  |   move.l d1,d0
   17422:	|  |   addq.l #1,d0
   17424:	|  |   move.l d0,4(sp)
   17428:	|  |   move.l 8(sp),d0
   1742c:	|  |   move.l d0,d2
   1742e:	|  |   addq.l #1,d2
   17430:	|  |   move.l d2,8(sp)
   17434:	|  |   movea.l d1,a0
   17436:	|  |   move.b (a0),d1
   17438:	|  |   movea.l d0,a0
   1743a:	|  |   move.b d1,(a0)
	while(len--)
   1743c:	|  '-> move.l 24(sp),d0
   17440:	|      move.l d0,d1
   17442:	|      subq.l #1,d1
   17444:	|      move.l d1,24(sp)
   17448:	|      tst.l d0
   1744a:	'----- bne.s 1741c <memcpy+0x12>
	return dest;
   1744c:	       move.l 16(sp),d0
}
   17450:	       move.l (sp)+,d2
   17452:	       addq.l #8,sp
   17454:	       rts

00017456 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17456:	       lea -128(sp),sp
   1745a:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1745e:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec46eb>,d0
   17464:	       cmpi.w #20153,d0
   17468:	   ,-- beq.s 1748c <KPrintF+0x36>
   1746a:	   |   cmpi.w #-24562,d0
   1746e:	   +-- beq.s 1748c <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17470:	   |   movea.l 1cca4 <SysBase>,a6
   17476:	   |   movea.l 144(sp),a0
   1747a:	   |   lea 148(sp),a1
   1747e:	   |   lea 17eea <KPutCharX>,a2
   17484:	   |   suba.l a3,a3
   17486:	   |   jsr -522(a6)
}
   1748a:	,--|-- bra.s 174b6 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1748c:	|  '-> movea.l 1cca4 <SysBase>,a6
   17492:	|      movea.l 144(sp),a0
   17496:	|      lea 148(sp),a1
   1749a:	|      lea 17ef8 <PutChar>,a2
   174a0:	|      lea 12(sp),a3
   174a4:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   174a8:	|      move.l a3,-(sp)
   174aa:	|      pea 56 <_start+0x56>
   174ae:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec46eb>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   174b4:	|      addq.l #8,sp
}
   174b6:	'----> movem.l (sp)+,a2-a3/a6
   174ba:	       lea 128(sp),sp
   174be:	       rts

000174c0 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   174c0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   174c2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   174c8:	       movea.l (sp),a0
   174ca:	       move.w (a0),d0
   174cc:	       cmpi.w #20153,d0
   174d0:	   ,-- beq.s 174dc <debug_cmd+0x1c>
   174d2:	   |   movea.l (sp),a0
   174d4:	   |   move.w (a0),d0
   174d6:	   |   cmpi.w #-24562,d0
   174da:	,--|-- bne.s 174fa <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   174dc:	|  '-> move.l 20(sp),-(sp)
   174e0:	|      move.l 20(sp),-(sp)
   174e4:	|      move.l 20(sp),-(sp)
   174e8:	|      move.l 20(sp),-(sp)
   174ec:	|      pea 58 <_start+0x58>
   174f0:	|      movea.l 20(sp),a0
   174f4:	|      jsr (a0)
   174f6:	|      lea 20(sp),sp
	}
}
   174fa:	'----> nop
   174fc:	       addq.l #4,sp
   174fe:	       rts

00017500 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17500:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17502:	   ,-- bra.s 17524 <my_strncpy+0x24>
		*destination++ = *source++;
   17504:	,--|-> move.l 12(sp),d1
   17508:	|  |   move.l d1,d0
   1750a:	|  |   addq.l #1,d0
   1750c:	|  |   move.l d0,12(sp)
   17510:	|  |   move.l 8(sp),d0
   17514:	|  |   move.l d0,d2
   17516:	|  |   addq.l #1,d2
   17518:	|  |   move.l d2,8(sp)
   1751c:	|  |   movea.l d1,a0
   1751e:	|  |   move.b (a0),d1
   17520:	|  |   movea.l d0,a0
   17522:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17524:	|  '-> movea.l 12(sp),a0
   17528:	|      move.b (a0),d0
   1752a:	|  ,-- beq.s 17532 <my_strncpy+0x32>
   1752c:	|  |   subq.l #1,16(sp)
   17530:	'--|-- bne.s 17504 <my_strncpy+0x4>
	*destination = '\0';
   17532:	   '-> movea.l 8(sp),a0
   17536:	       clr.b (a0)
}
   17538:	       nop
   1753a:	       move.l (sp)+,d2
   1753c:	       rts

0001753e <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1753e:	    lea -60(sp),sp
   17542:	    movea.l 72(sp),a1
   17546:	    movea.l 76(sp),a0
   1754a:	    move.l 80(sp),d1
   1754e:	    move.l 84(sp),d0
   17552:	    movea.w a1,a1
   17554:	    move.w a1,8(sp)
   17558:	    movea.w a0,a0
   1755a:	    move.w a0,6(sp)
   1755e:	    move.w d1,d1
   17560:	    move.w d1,4(sp)
   17564:	    move.w d0,d0
   17566:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1756a:	    lea 10(sp),a0
   1756e:	    clr.l (a0)
   17570:	    addq.l #4,a0
   17572:	    clr.l (a0)
   17574:	    addq.l #4,a0
   17576:	    clr.l (a0)
   17578:	    addq.l #4,a0
   1757a:	    clr.l (a0)
   1757c:	    addq.l #4,a0
   1757e:	    clr.l (a0)
   17580:	    addq.l #4,a0
   17582:	    clr.l (a0)
   17584:	    addq.l #4,a0
   17586:	    clr.l (a0)
   17588:	    addq.l #4,a0
   1758a:	    clr.l (a0)
   1758c:	    addq.l #4,a0
   1758e:	    clr.l (a0)
   17590:	    addq.l #4,a0
   17592:	    clr.l (a0)
   17594:	    addq.l #4,a0
   17596:	    clr.l (a0)
   17598:	    addq.l #4,a0
   1759a:	    clr.l (a0)
   1759c:	    addq.l #4,a0
   1759e:	    clr.w (a0)
   175a0:	    addq.l #2,a0
		.address = (unsigned int)addr,
   175a2:	    move.l 64(sp),d0
	struct debug_resource resource = {
   175a6:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   175aa:	    move.w 8(sp),d0
   175ae:	,-- bpl.s 175b2 <debug_register_bitmap+0x74>
   175b0:	|   addq.w #7,d0
   175b2:	'-> asr.w #3,d0
   175b4:	    movea.w d0,a0
   175b6:	    movea.w 6(sp),a1
   175ba:	    move.l a1,-(sp)
   175bc:	    move.l a0,-(sp)
   175be:	    jsr 17de2 <__mulsi3>
   175c4:	    addq.l #8,sp
   175c6:	    movea.w 4(sp),a0
   175ca:	    move.l a0,-(sp)
   175cc:	    move.l d0,-(sp)
   175ce:	    jsr 17de2 <__mulsi3>
   175d4:	    addq.l #8,sp
	struct debug_resource resource = {
   175d6:	    move.l d0,14(sp)
   175da:	    move.w 2(sp),52(sp)
   175e0:	    move.w 8(sp),54(sp)
   175e6:	    move.w 6(sp),56(sp)
   175ec:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   175f2:	    moveq #0,d0
   175f4:	    move.w 2(sp),d0
   175f8:	    moveq #2,d1
   175fa:	    and.l d1,d0
   175fc:	,-- beq.s 17608 <debug_register_bitmap+0xca>
		resource.size *= 2;
   175fe:	|   move.l 14(sp),d0
   17602:	|   add.l d0,d0
   17604:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17608:	'-> pea 20 <_start+0x20>
   1760c:	    move.l 72(sp),-(sp)
   17610:	    lea 18(sp),a0
   17614:	    move.l a0,d0
   17616:	    addq.l #8,d0
   17618:	    move.l d0,-(sp)
   1761a:	    jsr 17500 <my_strncpy>
   17620:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17624:	    lea 10(sp),a0
   17628:	    clr.l -(sp)
   1762a:	    clr.l -(sp)
   1762c:	    move.l a0,-(sp)
   1762e:	    pea 4 <_start+0x4>
   17632:	    jsr 174c0 <debug_cmd>
   17638:	    lea 16(sp),sp
}
   1763c:	    nop
   1763e:	    lea 60(sp),sp
   17642:	    rts

00017644 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17644:	lea -12(sp),sp
   17648:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1764a:	move.l 20(sp),12(sp)
   17650:	move.l 24(sp),8(sp)
   17656:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   1765c:	movea.l d0,a6
   1765e:	move.l 12(sp),d0
   17662:	move.l 8(sp),d1
   17666:	jsr -66(a6)
   1766a:	move.l d0,4(sp)
   1766e:	move.l 4(sp),d0
}
   17672:	movea.l (sp)+,a6
   17674:	lea 12(sp),sp
   17678:	rts

0001767a <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1767a:	lea -32(sp),sp
   1767e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17682:	move.l 48(sp),36(sp)
   17688:	move.l 52(sp),40(sp)
   1768e:	move.l 56(sp),28(sp)
   17694:	move.l 60(sp),32(sp)
   1769a:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   176a0:	movea.l d0,a6
   176a2:	move.l 36(sp),d0
   176a6:	move.l 40(sp),d1
   176aa:	move.l 28(sp),d2
   176ae:	move.l 32(sp),d3
   176b2:	jsr -66(a6)
   176b6:	move.l d0,12(sp)
   176ba:	move.l d1,16(sp)
   176be:	move.l 12(sp),20(sp)
   176c4:	move.l 16(sp),24(sp)
   176ca:	move.l 20(sp),d0
   176ce:	move.l 24(sp),d1
}
   176d2:	movem.l (sp)+,d2-d3/a6
   176d6:	lea 32(sp),sp
   176da:	rts

000176dc <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   176dc:	lea -32(sp),sp
   176e0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   176e4:	move.l 48(sp),36(sp)
   176ea:	move.l 52(sp),40(sp)
   176f0:	move.l 56(sp),28(sp)
   176f6:	move.l 60(sp),32(sp)
   176fc:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   17702:	movea.l d0,a6
   17704:	move.l 36(sp),d0
   17708:	move.l 40(sp),d1
   1770c:	move.l 28(sp),d2
   17710:	move.l 32(sp),d3
   17714:	jsr -84(a6)
   17718:	move.l d0,12(sp)
   1771c:	move.l d1,16(sp)
   17720:	move.l 12(sp),20(sp)
   17726:	move.l 16(sp),24(sp)
   1772c:	move.l 20(sp),d0
   17730:	move.l 24(sp),d1
}
   17734:	movem.l (sp)+,d2-d3/a6
   17738:	lea 32(sp),sp
   1773c:	rts

0001773e <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1773e:	lea -12(sp),sp
   17742:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17744:	move.l 20(sp),12(sp)
   1774a:	move.l 24(sp),8(sp)
   17750:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17756:	movea.l d0,a6
   17758:	move.l 12(sp),d0
   1775c:	move.l 8(sp),d1
   17760:	jsr -84(a6)
   17764:	move.l d0,4(sp)
   17768:	move.l 4(sp),d0
}
   1776c:	movea.l (sp)+,a6
   1776e:	lea 12(sp),sp
   17772:	rts

00017774 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17774:	lea -12(sp),sp
   17778:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1777a:	move.l 20(sp),12(sp)
   17780:	move.l 24(sp),8(sp)
   17786:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   1778c:	movea.l d0,a6
   1778e:	move.l 12(sp),d0
   17792:	move.l 8(sp),d1
   17796:	jsr -42(a6)
   1779a:	move.l d0,4(sp)
   1779e:	move.l 4(sp),d0
}
   177a2:	movea.l (sp)+,a6
   177a4:	lea 12(sp),sp
   177a8:	rts

000177aa <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   177aa:	lea -20(sp),sp
   177ae:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   177b0:	move.l 28(sp),20(sp)
   177b6:	move.l 1ccc0 <MathIeeeDoubTransBase>,d0
   177bc:	movea.l d0,a6
   177be:	move.l 20(sp),d0
   177c2:	jsr -108(a6)
   177c6:	move.l d0,4(sp)
   177ca:	move.l d1,8(sp)
   177ce:	move.l 4(sp),12(sp)
   177d4:	move.l 8(sp),16(sp)
   177da:	move.l 12(sp),d0
   177de:	move.l 16(sp),d1
}
   177e2:	movea.l (sp)+,a6
   177e4:	lea 20(sp),sp
   177e8:	rts

000177ea <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   177ea:	lea -12(sp),sp
   177ee:	move.l a6,-(sp)
	return IEEEDPFix(value);
   177f0:	move.l 20(sp),8(sp)
   177f6:	move.l 24(sp),12(sp)
   177fc:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   17802:	movea.l d0,a6
   17804:	move.l 8(sp),d0
   17808:	move.l 12(sp),d1
   1780c:	jsr -30(a6)
   17810:	move.l d0,4(sp)
   17814:	move.l 4(sp),d0
}
   17818:	movea.l (sp)+,a6
   1781a:	lea 12(sp),sp
   1781e:	rts

00017820 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17820:	subq.l #8,sp
   17822:	move.l a6,-(sp)
	return IEEESPFix(value);
   17824:	move.l 16(sp),8(sp)
   1782a:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17830:	movea.l d0,a6
   17832:	move.l 8(sp),d0
   17836:	jsr -30(a6)
   1783a:	move.l d0,4(sp)
   1783e:	move.l 4(sp),d0
}
   17842:	movea.l (sp)+,a6
   17844:	addq.l #8,sp
   17846:	rts

00017848 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17848:	lea -20(sp),sp
   1784c:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1784e:	move.l 28(sp),20(sp)
   17854:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   1785a:	movea.l d0,a6
   1785c:	move.l 20(sp),d0
   17860:	jsr -36(a6)
   17864:	move.l d0,4(sp)
   17868:	move.l d1,8(sp)
   1786c:	move.l 4(sp),12(sp)
   17872:	move.l 8(sp),16(sp)
   17878:	move.l 12(sp),d0
   1787c:	move.l 16(sp),d1
}
   17880:	movea.l (sp)+,a6
   17882:	lea 20(sp),sp
   17886:	rts

00017888 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17888:	subq.l #8,sp
   1788a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1788c:	move.l 16(sp),8(sp)
   17892:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17898:	movea.l d0,a6
   1789a:	move.l 8(sp),d0
   1789e:	jsr -36(a6)
   178a2:	move.l d0,4(sp)
   178a6:	move.l 4(sp),d0
}
   178aa:	movea.l (sp)+,a6
   178ac:	addq.l #8,sp
   178ae:	rts

000178b0 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   178b0:	subq.l #8,sp
   178b2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   178b4:	move.l 16(sp),8(sp)
   178ba:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   178c0:	movea.l d0,a6
   178c2:	move.l 8(sp),d0
   178c6:	jsr -36(a6)
   178ca:	move.l d0,4(sp)
   178ce:	move.l 4(sp),d0
}
   178d2:	movea.l (sp)+,a6
   178d4:	addq.l #8,sp
   178d6:	rts

000178d8 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   178d8:	lea -32(sp),sp
   178dc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   178e0:	move.l 48(sp),36(sp)
   178e6:	move.l 52(sp),40(sp)
   178ec:	move.l 56(sp),28(sp)
   178f2:	move.l 60(sp),32(sp)
   178f8:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   178fe:	movea.l d0,a6
   17900:	move.l 36(sp),d0
   17904:	move.l 40(sp),d1
   17908:	move.l 28(sp),d2
   1790c:	move.l 32(sp),d3
   17910:	jsr -78(a6)
   17914:	move.l d0,12(sp)
   17918:	move.l d1,16(sp)
   1791c:	move.l 12(sp),20(sp)
   17922:	move.l 16(sp),24(sp)
   17928:	move.l 20(sp),d0
   1792c:	move.l 24(sp),d1
}
   17930:	movem.l (sp)+,d2-d3/a6
   17934:	lea 32(sp),sp
   17938:	rts

0001793a <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1793a:	lea -12(sp),sp
   1793e:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17940:	move.l 20(sp),12(sp)
   17946:	move.l 24(sp),8(sp)
   1794c:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17952:	movea.l d0,a6
   17954:	move.l 12(sp),d0
   17958:	move.l 8(sp),d1
   1795c:	jsr -78(a6)
   17960:	move.l d0,4(sp)
   17964:	move.l 4(sp),d0
}
   17968:	movea.l (sp)+,a6
   1796a:	lea 12(sp),sp
   1796e:	rts

00017970 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17970:	lea -12(sp),sp
   17974:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17976:	move.l 20(sp),12(sp)
   1797c:	move.l 24(sp),8(sp)
   17982:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17988:	movea.l d0,a6
   1798a:	move.l 12(sp),d0
   1798e:	move.l 8(sp),d1
   17992:	jsr -42(a6)
   17996:	move.l d0,4(sp)
   1799a:	move.l 4(sp),d0
}
   1799e:	movea.l (sp)+,a6
   179a0:	lea 12(sp),sp
   179a4:	rts

000179a6 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   179a6:	lea -20(sp),sp
   179aa:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   179ae:	move.l 36(sp),24(sp)
   179b4:	move.l 40(sp),28(sp)
   179ba:	move.l 44(sp),16(sp)
   179c0:	move.l 48(sp),20(sp)
   179c6:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   179cc:	movea.l d0,a6
   179ce:	move.l 24(sp),d0
   179d2:	move.l 28(sp),d1
   179d6:	move.l 16(sp),d2
   179da:	move.l 20(sp),d3
   179de:	jsr -42(a6)
   179e2:	move.l d0,12(sp)
   179e6:	move.l 12(sp),d0
}
   179ea:	movem.l (sp)+,d2-d3/a6
   179ee:	lea 20(sp),sp
   179f2:	rts

000179f4 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   179f4:	lea -12(sp),sp
   179f8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   179fa:	move.l 20(sp),12(sp)
   17a00:	move.l 24(sp),8(sp)
   17a06:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17a0c:	movea.l d0,a6
   17a0e:	move.l 12(sp),d0
   17a12:	move.l 8(sp),d1
   17a16:	jsr -42(a6)
   17a1a:	move.l d0,4(sp)
   17a1e:	move.l 4(sp),d0
}
   17a22:	movea.l (sp)+,a6
   17a24:	lea 12(sp),sp
   17a28:	rts

00017a2a <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17a2a:	lea -12(sp),sp
   17a2e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17a30:	move.l 20(sp),12(sp)
   17a36:	move.l 24(sp),8(sp)
   17a3c:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17a42:	movea.l d0,a6
   17a44:	move.l 12(sp),d0
   17a48:	move.l 8(sp),d1
   17a4c:	jsr -42(a6)
   17a50:	move.l d0,4(sp)
   17a54:	move.l 4(sp),d0
}
   17a58:	movea.l (sp)+,a6
   17a5a:	lea 12(sp),sp
   17a5e:	rts

00017a60 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17a60:	lea -20(sp),sp
   17a64:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17a68:	move.l 36(sp),24(sp)
   17a6e:	move.l 40(sp),28(sp)
   17a74:	move.l 44(sp),16(sp)
   17a7a:	move.l 48(sp),20(sp)
   17a80:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   17a86:	movea.l d0,a6
   17a88:	move.l 24(sp),d0
   17a8c:	move.l 28(sp),d1
   17a90:	move.l 16(sp),d2
   17a94:	move.l 20(sp),d3
   17a98:	jsr -42(a6)
   17a9c:	move.l d0,12(sp)
   17aa0:	move.l 12(sp),d0
}
   17aa4:	movem.l (sp)+,d2-d3/a6
   17aa8:	lea 20(sp),sp
   17aac:	rts

00017aae <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17aae:	lea -12(sp),sp
   17ab2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17ab4:	move.l 20(sp),12(sp)
   17aba:	move.l 24(sp),8(sp)
   17ac0:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17ac6:	movea.l d0,a6
   17ac8:	move.l 12(sp),d0
   17acc:	move.l 8(sp),d1
   17ad0:	jsr -42(a6)
   17ad4:	move.l d0,4(sp)
   17ad8:	move.l 4(sp),d0
}
   17adc:	movea.l (sp)+,a6
   17ade:	lea 12(sp),sp
   17ae2:	rts

00017ae4 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17ae4:	lea -12(sp),sp
   17ae8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17aea:	move.l 20(sp),12(sp)
   17af0:	move.l 24(sp),8(sp)
   17af6:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17afc:	movea.l d0,a6
   17afe:	move.l 12(sp),d0
   17b02:	move.l 8(sp),d1
   17b06:	jsr -42(a6)
   17b0a:	move.l d0,4(sp)
   17b0e:	move.l 4(sp),d0
}
   17b12:	movea.l (sp)+,a6
   17b14:	lea 12(sp),sp
   17b18:	rts

00017b1a <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17b1a:	lea -32(sp),sp
   17b1e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17b22:	move.l 48(sp),36(sp)
   17b28:	move.l 52(sp),40(sp)
   17b2e:	move.l 56(sp),28(sp)
   17b34:	move.l 60(sp),32(sp)
   17b3a:	move.l 1ccbc <MathIeeeDoubBasBase>,d0
   17b40:	movea.l d0,a6
   17b42:	move.l 36(sp),d0
   17b46:	move.l 40(sp),d1
   17b4a:	move.l 28(sp),d2
   17b4e:	move.l 32(sp),d3
   17b52:	jsr -72(a6)
   17b56:	move.l d0,12(sp)
   17b5a:	move.l d1,16(sp)
   17b5e:	move.l 12(sp),20(sp)
   17b64:	move.l 16(sp),24(sp)
   17b6a:	move.l 20(sp),d0
   17b6e:	move.l 24(sp),d1
}
   17b72:	movem.l (sp)+,d2-d3/a6
   17b76:	lea 32(sp),sp
   17b7a:	rts

00017b7c <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17b7c:	lea -12(sp),sp
   17b80:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17b82:	move.l 20(sp),12(sp)
   17b88:	move.l 24(sp),8(sp)
   17b8e:	move.l 1ccb4 <MathIeeeSingBasBase>,d0
   17b94:	movea.l d0,a6
   17b96:	move.l 12(sp),d0
   17b9a:	move.l 8(sp),d1
   17b9e:	jsr -72(a6)
   17ba2:	move.l d0,4(sp)
   17ba6:	move.l 4(sp),d0
}
   17baa:	movea.l (sp)+,a6
   17bac:	lea 12(sp),sp
   17bb0:	rts

00017bb2 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17bb2:	lea -12(sp),sp
   17bb6:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17bb8:	move.l 20(sp),8(sp)
   17bbe:	move.l 24(sp),12(sp)
   17bc4:	move.l 1ccc0 <MathIeeeDoubTransBase>,d0
   17bca:	movea.l d0,a6
   17bcc:	move.l 8(sp),d0
   17bd0:	move.l 12(sp),d1
   17bd4:	jsr -102(a6)
   17bd8:	move.l d0,4(sp)
   17bdc:	move.l 4(sp),d0
}
   17be0:	movea.l (sp)+,a6
   17be2:	lea 12(sp),sp
   17be6:	rts

00017be8 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17be8:	       lea -24(sp),sp
   17bec:	       move.l a6,-(sp)
    if (x > 0) {
   17bee:	       clr.l -(sp)
   17bf0:	       move.l 40(sp),-(sp)
   17bf4:	       jsr 179f4 <__gtsf2>
   17bfa:	       addq.l #8,sp
   17bfc:	       tst.l d0
   17bfe:	   ,-- ble.s 17c30 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17c00:	   |   move.l 36(sp),-(sp)
   17c04:	   |   move.l 36(sp),-(sp)
   17c08:	   |   jsr 1773e <__divsf3>
   17c0e:	   |   addq.l #8,sp
   17c10:	   |   move.l d0,8(sp)
   17c14:	   |   move.l 1ccb8 <MathIeeeSingTransBase>,d0
   17c1a:	   |   movea.l d0,a6
   17c1c:	   |   move.l 8(sp),d0
   17c20:	   |   jsr -30(a6)
   17c24:	   |   move.l d0,4(sp)
   17c28:	   |   move.l 4(sp),d0
   17c2c:	,--|-- bra.w 17d90 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17c30:	|  '-> clr.l -(sp)
   17c32:	|      move.l 40(sp),-(sp)
   17c36:	|      jsr 17aae <__ltsf2>
   17c3c:	|      addq.l #8,sp
   17c3e:	|      tst.l d0
   17c40:	|  ,-- bge.s 17cb4 <atan2f+0xcc>
   17c42:	|  |   clr.l -(sp)
   17c44:	|  |   move.l 36(sp),-(sp)
   17c48:	|  |   jsr 17970 <__gesf2>
   17c4e:	|  |   addq.l #8,sp
   17c50:	|  |   tst.l d0
   17c52:	|  +-- blt.s 17cb4 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17c54:	|  |   move.l 36(sp),-(sp)
   17c58:	|  |   move.l 36(sp),-(sp)
   17c5c:	|  |   jsr 1773e <__divsf3>
   17c62:	|  |   addq.l #8,sp
   17c64:	|  |   move.l d0,24(sp)
   17c68:	|  |   move.l 1ccb8 <MathIeeeSingTransBase>,d0
   17c6e:	|  |   movea.l d0,a6
   17c70:	|  |   move.l 24(sp),d0
   17c74:	|  |   jsr -30(a6)
   17c78:	|  |   move.l d0,20(sp)
   17c7c:	|  |   move.l 20(sp),d0
   17c80:	|  |   move.l d0,-(sp)
   17c82:	|  |   jsr 177aa <__extendsfdf2>
   17c88:	|  |   addq.l #4,sp
   17c8a:	|  |   move.l #1413754136,-(sp)
   17c90:	|  |   move.l #1074340347,-(sp)
   17c96:	|  |   move.l d1,-(sp)
   17c98:	|  |   move.l d0,-(sp)
   17c9a:	|  |   jsr 1767a <__adddf3>
   17ca0:	|  |   lea 16(sp),sp
   17ca4:	|  |   move.l d1,-(sp)
   17ca6:	|  |   move.l d0,-(sp)
   17ca8:	|  |   jsr 17bb2 <__truncdfsf2>
   17cae:	|  |   addq.l #8,sp
   17cb0:	+--|-- bra.w 17d90 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17cb4:	|  '-> clr.l -(sp)
   17cb6:	|      move.l 40(sp),-(sp)
   17cba:	|      jsr 17aae <__ltsf2>
   17cc0:	|      addq.l #8,sp
   17cc2:	|      tst.l d0
   17cc4:	|  ,-- bge.s 17d36 <atan2f+0x14e>
   17cc6:	|  |   clr.l -(sp)
   17cc8:	|  |   move.l 36(sp),-(sp)
   17ccc:	|  |   jsr 17aae <__ltsf2>
   17cd2:	|  |   addq.l #8,sp
   17cd4:	|  |   tst.l d0
   17cd6:	|  +-- bge.s 17d36 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17cd8:	|  |   move.l 36(sp),-(sp)
   17cdc:	|  |   move.l 36(sp),-(sp)
   17ce0:	|  |   jsr 1773e <__divsf3>
   17ce6:	|  |   addq.l #8,sp
   17ce8:	|  |   move.l d0,16(sp)
   17cec:	|  |   move.l 1ccb8 <MathIeeeSingTransBase>,d0
   17cf2:	|  |   movea.l d0,a6
   17cf4:	|  |   move.l 16(sp),d0
   17cf8:	|  |   jsr -30(a6)
   17cfc:	|  |   move.l d0,12(sp)
   17d00:	|  |   move.l 12(sp),d0
   17d04:	|  |   move.l d0,-(sp)
   17d06:	|  |   jsr 177aa <__extendsfdf2>
   17d0c:	|  |   addq.l #4,sp
   17d0e:	|  |   move.l #1413754136,-(sp)
   17d14:	|  |   move.l #1074340347,-(sp)
   17d1a:	|  |   move.l d1,-(sp)
   17d1c:	|  |   move.l d0,-(sp)
   17d1e:	|  |   jsr 17b1a <__subdf3>
   17d24:	|  |   lea 16(sp),sp
   17d28:	|  |   move.l d1,-(sp)
   17d2a:	|  |   move.l d0,-(sp)
   17d2c:	|  |   jsr 17bb2 <__truncdfsf2>
   17d32:	|  |   addq.l #8,sp
   17d34:	+--|-- bra.s 17d90 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17d36:	|  '-> clr.l -(sp)
   17d38:	|      move.l 40(sp),-(sp)
   17d3c:	|      jsr 17774 <__eqsf2>
   17d42:	|      addq.l #8,sp
   17d44:	|      tst.l d0
   17d46:	|  ,-- bne.s 17d62 <atan2f+0x17a>
   17d48:	|  |   clr.l -(sp)
   17d4a:	|  |   move.l 36(sp),-(sp)
   17d4e:	|  |   jsr 179f4 <__gtsf2>
   17d54:	|  |   addq.l #8,sp
   17d56:	|  |   tst.l d0
   17d58:	|  +-- ble.s 17d62 <atan2f+0x17a>
        return PI / 2;
   17d5a:	|  |   move.l #1070141403,d0
   17d60:	+--|-- bra.s 17d90 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17d62:	|  '-> clr.l -(sp)
   17d64:	|      move.l 40(sp),-(sp)
   17d68:	|      jsr 17774 <__eqsf2>
   17d6e:	|      addq.l #8,sp
   17d70:	|      tst.l d0
   17d72:	|  ,-- bne.s 17d8e <atan2f+0x1a6>
   17d74:	|  |   clr.l -(sp)
   17d76:	|  |   move.l 36(sp),-(sp)
   17d7a:	|  |   jsr 17aae <__ltsf2>
   17d80:	|  |   addq.l #8,sp
   17d82:	|  |   tst.l d0
   17d84:	|  +-- bge.s 17d8e <atan2f+0x1a6>
        return -PI / 2;
   17d86:	|  |   move.l #-1077342245,d0
   17d8c:	+--|-- bra.s 17d90 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17d8e:	|  '-> moveq #0,d0
    }
}
   17d90:	'----> movea.l (sp)+,a6
   17d92:	       lea 24(sp),sp
   17d96:	       rts

00017d98 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17d98:	lea -24(sp),sp
   17d9c:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17d9e:	move.l 32(sp),20(sp)
   17da4:	move.l 36(sp),24(sp)
   17daa:	move.l 1ccc0 <MathIeeeDoubTransBase>,d0
   17db0:	movea.l d0,a6
   17db2:	move.l 20(sp),d0
   17db6:	move.l 24(sp),d1
   17dba:	jsr -96(a6)
   17dbe:	move.l d0,4(sp)
   17dc2:	move.l d1,8(sp)
   17dc6:	move.l 4(sp),12(sp)
   17dcc:	move.l 8(sp),16(sp)
   17dd2:	move.l 12(sp),d0
   17dd6:	move.l 16(sp),d1
}
   17dda:	movea.l (sp)+,a6
   17ddc:	lea 24(sp),sp
   17de0:	rts

00017de2 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17de2:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17de6:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17dea:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17dee:	mulu.w 8(sp),d1
	addw	d1, d0
   17df2:	add.w d1,d0
	swap	d0
   17df4:	swap d0
	clrw	d0
   17df6:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17df8:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17dfc:	mulu.w 10(sp),d1
	addl	d1, d0
   17e00:	add.l d1,d0
	rts
   17e02:	rts

00017e04 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17e04:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17e06:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17e0a:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17e0e:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17e14:	   ,-- bcc.s 17e2c <__udivsi3+0x28>
	movel	d0, d2
   17e16:	   |   move.l d0,d2
	clrw	d2
   17e18:	   |   clr.w d2
	swap	d2
   17e1a:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17e1c:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17e1e:	   |   move.w d2,d0
	swap	d0
   17e20:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17e22:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17e26:	   |   divu.w d1,d2
	movew	d2, d0
   17e28:	   |   move.w d2,d0
	jra	6f
   17e2a:	,--|-- bra.s 17e5c <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17e2c:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17e2e:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17e30:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17e32:	|  |   cmpi.l #65536,d1
	jcc	4b
   17e38:	|  '-- bcc.s 17e2e <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17e3a:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17e3c:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17e42:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17e44:	|      mulu.w d0,d1
	swap	d2
   17e46:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17e48:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17e4a:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17e4c:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17e4e:	|  ,-- bne.s 17e5a <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17e50:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17e52:	|  +-- bcs.s 17e5a <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17e54:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17e58:	+--|-- bls.s 17e5c <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17e5a:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17e5c:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17e5e:	       rts

00017e60 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17e60:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17e62:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17e64:	    move.l 12(sp),d1
	jpl	1f
   17e68:	,-- bpl.s 17e6e <__divsi3+0xe>
	negl	d1
   17e6a:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17e6c:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17e6e:	'-> move.l 8(sp),d0
	jpl	2f
   17e72:	,-- bpl.s 17e78 <__divsi3+0x18>
	negl	d0
   17e74:	|   neg.l d0
	negb	d2
   17e76:	|   neg.b d2

2:	movel	d1, sp@-
   17e78:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17e7a:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17e7c:	    jsr 17e04 <__udivsi3>
	addql	#8, sp
   17e82:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17e84:	    tst.b d2
	jpl	3f
   17e86:	,-- bpl.s 17e8a <__divsi3+0x2a>
	negl	d0
   17e88:	|   neg.l d0

3:	movel	sp@+, d2
   17e8a:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17e8c:	    rts

00017e8e <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17e8e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17e92:	move.l 4(sp),d0
	movel	d1, sp@-
   17e96:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17e98:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17e9a:	jsr 17e60 <__divsi3>
	addql	#8, sp
   17ea0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17ea2:	move.l 8(sp),d1
	movel	d1, sp@-
   17ea6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ea8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17eaa:	jsr 17de2 <__mulsi3>
	addql	#8, sp
   17eb0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17eb2:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17eb6:	sub.l d0,d1
	movel	d1, d0
   17eb8:	move.l d1,d0
	rts
   17eba:	rts

00017ebc <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17ebc:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17ec0:	move.l 4(sp),d0
	movel	d1, sp@-
   17ec4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ec6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17ec8:	jsr 17e04 <__udivsi3>
	addql	#8, sp
   17ece:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17ed0:	move.l 8(sp),d1
	movel	d1, sp@-
   17ed4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ed6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17ed8:	jsr 17de2 <__mulsi3>
	addql	#8, sp
   17ede:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17ee0:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17ee4:	sub.l d0,d1
	movel	d1, d0
   17ee6:	move.l d1,d0
	rts
   17ee8:	rts

00017eea <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17eea:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17eec:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17ef0:	jsr -516(a6)
    move.l (sp)+, a6
   17ef4:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17ef6:	rts

00017ef8 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17ef8:	move.b d0,(a3)+
	rts
   17efa:	rts
